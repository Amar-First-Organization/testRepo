=== tests/cases/conformance/expressions/pipelineOperatorStage1/pipelineOperatorStage1WithNonFunctionRHS.ts ===
declare const ar: Iterable<number>;
>ar : Symbol(ar, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 0, 13))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))

declare function map<T, U>(ar: Iterable<T>, fn: (v: T) => U): Iterable<U>;
>map : Symbol(map, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 0, 35))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 23))
>ar : Symbol(ar, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 27))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 21))
>fn : Symbol(fn, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 43))
>v : Symbol(v, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 49))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 23))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
>U : Symbol(U, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 23))

declare function filter<T>(ar: Iterable<T>, fn: (v: T) => boolean): Iterable<T>;
>filter : Symbol(filter, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 1, 74))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 24))
>ar : Symbol(ar, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 27))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 24))
>fn : Symbol(fn, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 43))
>v : Symbol(v, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 49))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 24))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 2, 24))

const x = ar
>x : Symbol(x, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 4, 5))
>ar : Symbol(ar, Decl(pipelineOperatorStage1WithNonFunctionRHS.ts, 0, 13))

    |> 1;

