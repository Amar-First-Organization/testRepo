//// [tests/cases/compiler/genericsWithoutTypeParameters1.ts] ////

=== genericsWithoutTypeParameters1.ts ===
class C<T> {
>C : C<T>
>  : ^^^^

    foo(): T { return null }
>foo : () => T
>    : ^^^^^^ 
}

interface I<T> {
    bar(): T;
>bar : () => T
>    : ^^^^^^ 
}

var c1: C;
>c1 : C
>   : ^

var i1: I;
>i1 : I
>   : ^

var c2: C<I>;
>c2 : C<I>
>   : ^^^^

var i2: I<C>;
>i2 : I<C>
>   : ^^^^

function foo(x: C, y: I) { }
>foo : (x: C, y: I) => void
>    : ^ ^^ ^^ ^^ ^^^^^^^^^
>x : C
>  : ^
>y : I
>  : ^

function foo2(x: C<I>, y: I<C>) { }
>foo2 : (x: C<I>, y: I<C>) => void
>     : ^ ^^    ^^ ^^    ^^^^^^^^^
>x : C<I>
>  : ^^^^
>y : I<C>
>  : ^^^^

var x: { a: C } = { a: new C<number>() };
>x : { a: C; }
>  : ^^^^^ ^^^
>a : C
>  : ^
>{ a: new C<number>() } : { a: C<number>; }
>                       : ^^^^^^^^^^^^^^^^^
>a : C<number>
>  : ^^^^^^^^^
>new C<number>() : C<number>
>                : ^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^

var x2: { a: I } = { a: { bar() { return 1 } } };
>x2 : { a: I; }
>   : ^^^^^ ^^^
>a : I
>  : ^
>{ a: { bar() { return 1 } } } : { a: { bar(): number; }; }
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : { bar(): number; }
>  : ^^^^^^^^^^^^^^^^^^
>{ bar() { return 1 } } : { bar(): number; }
>                       : ^^^^^^^^^^^^^^^^^^
>bar : () => number
>    : ^^^^^^^^^^^^
>1 : 1
>  : ^

class D<T> {
>D : D<T>
>  : ^^^^

    x: C;
>x : C
>  : ^

    y: D;
>y : D
>  : ^
}

interface J<T> {
    x: I;
>x : I
>  : ^

    y: J;
>y : J
>  : ^
}

class A<T> { }
>A : A<T>
>  : ^^^^

function f<T>(x: T): A {
>f : <T>(x: T) => A
>  : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^

    return null;
}
