=== tests/cases/conformance/types/spread/objectSpread.ts ===
let o = { a: 1, b: 'no' }
>o : Symbol(o, Decl(objectSpread.ts, 0, 3))
>a : Symbol(a, Decl(objectSpread.ts, 0, 9))
>b : Symbol(b, Decl(objectSpread.ts, 0, 15))

let o2 = { b: 'yes', c: true }
>o2 : Symbol(o2, Decl(objectSpread.ts, 1, 3))
>b : Symbol(b, Decl(objectSpread.ts, 1, 10))
>c : Symbol(c, Decl(objectSpread.ts, 1, 20))

let swap = { a: 'yes', b: -1 };
>swap : Symbol(swap, Decl(objectSpread.ts, 2, 3))
>a : Symbol(a, Decl(objectSpread.ts, 2, 12))
>b : Symbol(b, Decl(objectSpread.ts, 2, 22))

let addAfter: { a: number, b: string, c: boolean } =
>addAfter : Symbol(addAfter, Decl(objectSpread.ts, 4, 3))
>a : Symbol(a, Decl(objectSpread.ts, 4, 15))
>b : Symbol(b, Decl(objectSpread.ts, 4, 26))
>c : Symbol(c, Decl(objectSpread.ts, 4, 37))

    { ...o, c: false }
>c : Symbol(c, Decl(objectSpread.ts, 5, 11))

let addBefore: { a: number, b: string, c: boolean } =
>addBefore : Symbol(addBefore, Decl(objectSpread.ts, 6, 3))
>a : Symbol(a, Decl(objectSpread.ts, 6, 16))
>b : Symbol(b, Decl(objectSpread.ts, 6, 27))
>c : Symbol(c, Decl(objectSpread.ts, 6, 38))

    { c: false, ...o }
>c : Symbol(c, Decl(objectSpread.ts, 7, 5))

// Note: ignore still changes the order that properties are printed
let ignore: { a: number, b: string } =
>ignore : Symbol(ignore, Decl(objectSpread.ts, 9, 3))
>a : Symbol(a, Decl(objectSpread.ts, 9, 13))
>b : Symbol(b, Decl(objectSpread.ts, 9, 24))

    { b: 'ignored', ...o }
>b : Symbol(b, Decl(objectSpread.ts, 10, 5))

let override: { a: number, b: string } =
>override : Symbol(override, Decl(objectSpread.ts, 11, 3))
>a : Symbol(a, Decl(objectSpread.ts, 11, 15))
>b : Symbol(b, Decl(objectSpread.ts, 11, 26))

    { ...o, b: 'override' }
>b : Symbol(b, Decl(objectSpread.ts, 12, 11))

let nested: { a: number, b: boolean, c: string } =
>nested : Symbol(nested, Decl(objectSpread.ts, 13, 3))
>a : Symbol(a, Decl(objectSpread.ts, 13, 13))
>b : Symbol(b, Decl(objectSpread.ts, 13, 24))
>c : Symbol(c, Decl(objectSpread.ts, 13, 36))

    { ...{ a: 3, ...{ b: false, c: 'overriden' } }, c: 'whatever' }
>a : Symbol(a, Decl(objectSpread.ts, 14, 10))
>b : Symbol(b, Decl(objectSpread.ts, 14, 21))
>c : Symbol(c, Decl(objectSpread.ts, 14, 31))
>c : Symbol(c, Decl(objectSpread.ts, 14, 51))

let combined: { a: number, b: string, c: boolean } =
>combined : Symbol(combined, Decl(objectSpread.ts, 15, 3))
>a : Symbol(a, Decl(objectSpread.ts, 15, 15))
>b : Symbol(b, Decl(objectSpread.ts, 15, 26))
>c : Symbol(c, Decl(objectSpread.ts, 15, 37))

    { ...o, ...o2 }
let combinedBefore: { a: number, b: string, c: boolean } =
>combinedBefore : Symbol(combinedBefore, Decl(objectSpread.ts, 17, 3))
>a : Symbol(a, Decl(objectSpread.ts, 17, 21))
>b : Symbol(b, Decl(objectSpread.ts, 17, 32))
>c : Symbol(c, Decl(objectSpread.ts, 17, 43))

    { b: 'ok', ...o, ...o2 }
>b : Symbol(b, Decl(objectSpread.ts, 18, 5))

let combinedMid: { a: number, b: string, c: boolean } =
>combinedMid : Symbol(combinedMid, Decl(objectSpread.ts, 19, 3))
>a : Symbol(a, Decl(objectSpread.ts, 19, 18))
>b : Symbol(b, Decl(objectSpread.ts, 19, 29))
>c : Symbol(c, Decl(objectSpread.ts, 19, 40))

    { ...o, b: 'ok', ...o2 }
>b : Symbol(b, Decl(objectSpread.ts, 20, 11))

let combinedAfter: { a: number, b: string, c: boolean } =
>combinedAfter : Symbol(combinedAfter, Decl(objectSpread.ts, 21, 3))
>a : Symbol(a, Decl(objectSpread.ts, 21, 20))
>b : Symbol(b, Decl(objectSpread.ts, 21, 31))
>c : Symbol(c, Decl(objectSpread.ts, 21, 42))

    { ...o, ...o2, b: 'ok' }
>b : Symbol(b, Decl(objectSpread.ts, 22, 18))

let combinedNested: { a: number, b: boolean, c: string, d: string } =
>combinedNested : Symbol(combinedNested, Decl(objectSpread.ts, 23, 3))
>a : Symbol(a, Decl(objectSpread.ts, 23, 21))
>b : Symbol(b, Decl(objectSpread.ts, 23, 32))
>c : Symbol(c, Decl(objectSpread.ts, 23, 44))
>d : Symbol(d, Decl(objectSpread.ts, 23, 55))

    { ...{ a: 4, ...{ b: false, c: 'overriden' } }, d: 'actually new', ...{ a: 5, d: 'maybe new' } }
>a : Symbol(a, Decl(objectSpread.ts, 24, 10))
>b : Symbol(b, Decl(objectSpread.ts, 24, 21))
>c : Symbol(c, Decl(objectSpread.ts, 24, 31))
>d : Symbol(d, Decl(objectSpread.ts, 24, 51))
>a : Symbol(a, Decl(objectSpread.ts, 24, 75))
>d : Symbol(d, Decl(objectSpread.ts, 24, 81))

let combinedNestedChangeType: { a: number, b: boolean, c: number } =
>combinedNestedChangeType : Symbol(combinedNestedChangeType, Decl(objectSpread.ts, 25, 3))
>a : Symbol(a, Decl(objectSpread.ts, 25, 31))
>b : Symbol(b, Decl(objectSpread.ts, 25, 42))
>c : Symbol(c, Decl(objectSpread.ts, 25, 54))

    { ...{ a: 1, ...{ b: false, c: 'overriden' } }, c: -1 }
>a : Symbol(a, Decl(objectSpread.ts, 26, 10))
>b : Symbol(b, Decl(objectSpread.ts, 26, 21))
>c : Symbol(c, Decl(objectSpread.ts, 26, 31))
>c : Symbol(c, Decl(objectSpread.ts, 26, 51))

let propertyNested: { a: { a: number, b: string } } =
>propertyNested : Symbol(propertyNested, Decl(objectSpread.ts, 27, 3))
>a : Symbol(a, Decl(objectSpread.ts, 27, 21))
>a : Symbol(a, Decl(objectSpread.ts, 27, 26))
>b : Symbol(b, Decl(objectSpread.ts, 27, 37))

    { a: { ... o } }
>a : Symbol(a, Decl(objectSpread.ts, 28, 5))

// accessors don't copy the descriptor
// (which means that readonly getters become read/write properties)
let op = { get a () { return 6 } };
>op : Symbol(op, Decl(objectSpread.ts, 31, 3))
>a : Symbol(a, Decl(objectSpread.ts, 31, 10))

let getter: { a: number, c: number } =
>getter : Symbol(getter, Decl(objectSpread.ts, 32, 3))
>a : Symbol(a, Decl(objectSpread.ts, 32, 13))
>c : Symbol(c, Decl(objectSpread.ts, 32, 24))

    { ...op, c: 7 }
>c : Symbol(c, Decl(objectSpread.ts, 33, 12))

getter.a = 12;
>getter.a : Symbol(a, Decl(objectSpread.ts, 32, 13))
>getter : Symbol(getter, Decl(objectSpread.ts, 32, 3))
>a : Symbol(a, Decl(objectSpread.ts, 32, 13))

// null, undefined, functions and primitives besides string result in { }
let spreadNull = { ...null };
>spreadNull : Symbol(spreadNull, Decl(objectSpread.ts, 37, 3))

let spreadUndefind = { ...undefined };
>spreadUndefind : Symbol(spreadUndefind, Decl(objectSpread.ts, 38, 3))

let spreadNum = { ...12 };
>spreadNum : Symbol(spreadNum, Decl(objectSpread.ts, 39, 3))

let spreadBool = { ...false };
>spreadBool : Symbol(spreadBool, Decl(objectSpread.ts, 40, 3))

let spreadFunc = { ...(function () { }) };
>spreadFunc : Symbol(spreadFunc, Decl(objectSpread.ts, 41, 3))

// strings get a numeric indexer: [n: number]: string
let spreadStr = { ...'foo' };
>spreadStr : Symbol(spreadStr, Decl(objectSpread.ts, 44, 3))

// methods are not enumerable
class C { p = 1; m() { } }
>C : Symbol(C, Decl(objectSpread.ts, 44, 29))
>p : Symbol(C.p, Decl(objectSpread.ts, 47, 9))
>m : Symbol(C.m, Decl(objectSpread.ts, 47, 16))

let c: C = new C()
>c : Symbol(c, Decl(objectSpread.ts, 48, 3))
>C : Symbol(C, Decl(objectSpread.ts, 44, 29))
>C : Symbol(C, Decl(objectSpread.ts, 44, 29))

let spreadC: { p: number } = { ...c }
>spreadC : Symbol(spreadC, Decl(objectSpread.ts, 49, 3))
>p : Symbol(p, Decl(objectSpread.ts, 49, 14))

// own methods are enumerable
let cplus: { p: number, plus(): void } = { ...c, plus() { return this.p + 1; } };
>cplus : Symbol(cplus, Decl(objectSpread.ts, 52, 3))
>p : Symbol(p, Decl(objectSpread.ts, 52, 12))
>plus : Symbol(plus, Decl(objectSpread.ts, 52, 23))
>plus : Symbol(plus, Decl(objectSpread.ts, 52, 48))

cplus.plus();
>cplus.plus : Symbol(plus, Decl(objectSpread.ts, 52, 23))
>cplus : Symbol(cplus, Decl(objectSpread.ts, 52, 3))
>plus : Symbol(plus, Decl(objectSpread.ts, 52, 23))

// new field's type conflicting with existing field is OK
let changeTypeAfter: { a: string, b: string } =
>changeTypeAfter : Symbol(changeTypeAfter, Decl(objectSpread.ts, 56, 3))
>a : Symbol(a, Decl(objectSpread.ts, 56, 22))
>b : Symbol(b, Decl(objectSpread.ts, 56, 33))

    { ...o, a: 'wrong type?' }
>a : Symbol(a, Decl(objectSpread.ts, 57, 11))

let changeTypeBefore: { a: number, b: string } =
>changeTypeBefore : Symbol(changeTypeBefore, Decl(objectSpread.ts, 58, 3))
>a : Symbol(a, Decl(objectSpread.ts, 58, 23))
>b : Symbol(b, Decl(objectSpread.ts, 58, 34))

    { a: 'wrong type?', ...o };
>a : Symbol(a, Decl(objectSpread.ts, 59, 5))

let changeTypeBoth: { a: string, b: number } =
>changeTypeBoth : Symbol(changeTypeBoth, Decl(objectSpread.ts, 60, 3))
>a : Symbol(a, Decl(objectSpread.ts, 60, 21))
>b : Symbol(b, Decl(objectSpread.ts, 60, 32))

    { ...o, ...swap };

// optional
let definiteBoolean: { sn: boolean };
>definiteBoolean : Symbol(definiteBoolean, Decl(objectSpread.ts, 64, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 64, 22))

let definiteString: { sn: string };
>definiteString : Symbol(definiteString, Decl(objectSpread.ts, 65, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 65, 21))

let optionalString: { sn?: string };
>optionalString : Symbol(optionalString, Decl(objectSpread.ts, 66, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 66, 21))

let optionalNumber: { sn?: number };
>optionalNumber : Symbol(optionalNumber, Decl(objectSpread.ts, 67, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 67, 21))

let optionalUnionStops: { sn: string | number | boolean } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
>optionalUnionStops : Symbol(optionalUnionStops, Decl(objectSpread.ts, 68, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 68, 25))

let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
>optionalUnionDuplicates : Symbol(optionalUnionDuplicates, Decl(objectSpread.ts, 69, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 69, 30))

let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
>allOptional : Symbol(allOptional, Decl(objectSpread.ts, 70, 3))
>sn : Symbol(sn, Decl(objectSpread.ts, 70, 18))

// computed property
let computedFirst: { a: number, b: string, "before everything": number } =
>computedFirst : Symbol(computedFirst, Decl(objectSpread.ts, 73, 3))
>a : Symbol(a, Decl(objectSpread.ts, 73, 20))
>b : Symbol(b, Decl(objectSpread.ts, 73, 31))

    { ['before everything']: 12, ...o, b: 'yes' }
>'before everything' : Symbol(['before everything'], Decl(objectSpread.ts, 74, 5))
>b : Symbol(b, Decl(objectSpread.ts, 74, 38))

let computedMiddle: { a: number, b: string, c: boolean, "in the middle": number } =
>computedMiddle : Symbol(computedMiddle, Decl(objectSpread.ts, 75, 3))
>a : Symbol(a, Decl(objectSpread.ts, 75, 21))
>b : Symbol(b, Decl(objectSpread.ts, 75, 32))
>c : Symbol(c, Decl(objectSpread.ts, 75, 43))

    { ...o, ['in the middle']: 13, b: 'maybe?', ...o2 }
>'in the middle' : Symbol(['in the middle'], Decl(objectSpread.ts, 76, 11))
>b : Symbol(b, Decl(objectSpread.ts, 76, 34))

let computedAfter: { a: number, b: string, "at the end": number } =
>computedAfter : Symbol(computedAfter, Decl(objectSpread.ts, 77, 3))
>a : Symbol(a, Decl(objectSpread.ts, 77, 20))
>b : Symbol(b, Decl(objectSpread.ts, 77, 31))

    { ...o, b: 'yeah', ['at the end']: 14 }
>b : Symbol(b, Decl(objectSpread.ts, 78, 11))
>'at the end' : Symbol(['at the end'], Decl(objectSpread.ts, 78, 22))

// shortcut syntax
let a = 12;
>a : Symbol(a, Decl(objectSpread.ts, 80, 3))

let shortCutted: { a: number, b: string } = { ...o, a }
>shortCutted : Symbol(shortCutted, Decl(objectSpread.ts, 81, 3))
>a : Symbol(a, Decl(objectSpread.ts, 81, 18))
>b : Symbol(b, Decl(objectSpread.ts, 81, 29))
>a : Symbol(a, Decl(objectSpread.ts, 81, 51))

// generics
function f<T, U>(t: T, u: U): { ...T, ...U, id: string } {
>f : Symbol(f, Decl(objectSpread.ts, 81, 55))
>T : Symbol(T, Decl(objectSpread.ts, 84, 11))
>U : Symbol(U, Decl(objectSpread.ts, 84, 13))
>t : Symbol(t, Decl(objectSpread.ts, 84, 17))
>T : Symbol(T, Decl(objectSpread.ts, 84, 11))
>u : Symbol(u, Decl(objectSpread.ts, 84, 22))
>U : Symbol(U, Decl(objectSpread.ts, 84, 13))
>T : Symbol(T, Decl(objectSpread.ts, 84, 11))
>U : Symbol(U, Decl(objectSpread.ts, 84, 13))
>id : Symbol(id, Decl(objectSpread.ts, 84, 43))

    return { ...t, ...u, id: 'id' };
>id : Symbol(id, Decl(objectSpread.ts, 85, 24))
}
let exclusive: { id: string, a: number, b: string, c: string, d: boolean } =
>exclusive : Symbol(exclusive, Decl(objectSpread.ts, 87, 3))
>id : Symbol(id, Decl(objectSpread.ts, 87, 16))
>a : Symbol(a, Decl(objectSpread.ts, 87, 28))
>b : Symbol(b, Decl(objectSpread.ts, 87, 39))
>c : Symbol(c, Decl(objectSpread.ts, 87, 50))
>d : Symbol(d, Decl(objectSpread.ts, 87, 61))

    f({ a: 1, b: 'yes' }, { c: 'no', d: false })
>f : Symbol(f, Decl(objectSpread.ts, 81, 55))
>a : Symbol(a, Decl(objectSpread.ts, 88, 7))
>b : Symbol(b, Decl(objectSpread.ts, 88, 13))
>c : Symbol(c, Decl(objectSpread.ts, 88, 27))
>d : Symbol(d, Decl(objectSpread.ts, 88, 36))

let overlap: { id: string, a: number, b: string } =
>overlap : Symbol(overlap, Decl(objectSpread.ts, 89, 3))
>id : Symbol(id, Decl(objectSpread.ts, 89, 14))
>a : Symbol(a, Decl(objectSpread.ts, 89, 26))
>b : Symbol(b, Decl(objectSpread.ts, 89, 37))

    f({ a: 1 }, { a: 2, b: 'extra' })
>f : Symbol(f, Decl(objectSpread.ts, 81, 55))
>a : Symbol(a, Decl(objectSpread.ts, 90, 7))
>a : Symbol(a, Decl(objectSpread.ts, 90, 17))
>b : Symbol(b, Decl(objectSpread.ts, 90, 23))

let overlapConflict: { id:string, a: string } =
>overlapConflict : Symbol(overlapConflict, Decl(objectSpread.ts, 91, 3))
>id : Symbol(id, Decl(objectSpread.ts, 91, 22))
>a : Symbol(a, Decl(objectSpread.ts, 91, 33))

    f({ a: 1 }, { a: 'mismatch' })
>f : Symbol(f, Decl(objectSpread.ts, 81, 55))
>a : Symbol(a, Decl(objectSpread.ts, 92, 7))
>a : Symbol(a, Decl(objectSpread.ts, 92, 17))

let overwriteId: { id: string, a: number, c: number, d: string } =
>overwriteId : Symbol(overwriteId, Decl(objectSpread.ts, 93, 3))
>id : Symbol(id, Decl(objectSpread.ts, 93, 18))
>a : Symbol(a, Decl(objectSpread.ts, 93, 30))
>c : Symbol(c, Decl(objectSpread.ts, 93, 41))
>d : Symbol(d, Decl(objectSpread.ts, 93, 52))

    f({ a: 1, id: true }, { c: 1, d: 'no' })
>f : Symbol(f, Decl(objectSpread.ts, 81, 55))
>a : Symbol(a, Decl(objectSpread.ts, 94, 7))
>id : Symbol(id, Decl(objectSpread.ts, 94, 13))
>c : Symbol(c, Decl(objectSpread.ts, 94, 27))
>d : Symbol(d, Decl(objectSpread.ts, 94, 33))

class D { m() { }; q = 2; }
>D : Symbol(D, Decl(objectSpread.ts, 94, 44))
>m : Symbol(D.m, Decl(objectSpread.ts, 96, 9))
>q : Symbol(D.q, Decl(objectSpread.ts, 96, 18))

let classesAreWrong: { id: string, ...C, ...D } =
>classesAreWrong : Symbol(classesAreWrong, Decl(objectSpread.ts, 97, 3))
>id : Symbol(id, Decl(objectSpread.ts, 97, 22))
>C : Symbol(C, Decl(objectSpread.ts, 44, 29))
>D : Symbol(D, Decl(objectSpread.ts, 94, 44))

    f(new C(), new D())
>f : Symbol(f, Decl(objectSpread.ts, 81, 55))
>C : Symbol(C, Decl(objectSpread.ts, 44, 29))
>D : Symbol(D, Decl(objectSpread.ts, 94, 44))

