//// [tests/cases/compiler/objectDestructuringInSwitch1.ts] ////

=== objectDestructuringInSwitch1.ts ===
type X = { kind: "a", a: { prop: 1 } } | { kind: "b", a: {} }
>X : Symbol(X, Decl(objectDestructuringInSwitch1.ts, 0, 0))
>kind : Symbol(kind, Decl(objectDestructuringInSwitch1.ts, 0, 10))
>a : Symbol(a, Decl(objectDestructuringInSwitch1.ts, 0, 21))
>prop : Symbol(prop, Decl(objectDestructuringInSwitch1.ts, 0, 26))
>kind : Symbol(kind, Decl(objectDestructuringInSwitch1.ts, 0, 42))
>a : Symbol(a, Decl(objectDestructuringInSwitch1.ts, 0, 53))

function foo(x: X): 1 {
>foo : Symbol(foo, Decl(objectDestructuringInSwitch1.ts, 0, 61))
>x : Symbol(x, Decl(objectDestructuringInSwitch1.ts, 2, 13))
>X : Symbol(X, Decl(objectDestructuringInSwitch1.ts, 0, 0))

  const { kind, a } = x;
>kind : Symbol(kind, Decl(objectDestructuringInSwitch1.ts, 3, 9))
>a : Symbol(a, Decl(objectDestructuringInSwitch1.ts, 3, 15))
>x : Symbol(x, Decl(objectDestructuringInSwitch1.ts, 2, 13))

  switch (kind) {
>kind : Symbol(kind, Decl(objectDestructuringInSwitch1.ts, 3, 9))

    case "a":
      return a.prop;
>a.prop : Symbol(prop, Decl(objectDestructuringInSwitch1.ts, 0, 26))
>a : Symbol(a, Decl(objectDestructuringInSwitch1.ts, 3, 15))
>prop : Symbol(prop, Decl(objectDestructuringInSwitch1.ts, 0, 26))

    case "b":
      return 1;
    default:
      const { prop } = a;
>prop : Symbol(prop, Decl(objectDestructuringInSwitch1.ts, 10, 13))
>a : Symbol(a, Decl(objectDestructuringInSwitch1.ts, 3, 15))

      return a;
>a : Symbol(a, Decl(objectDestructuringInSwitch1.ts, 3, 15))
  }
}
