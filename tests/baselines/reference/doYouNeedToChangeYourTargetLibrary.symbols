=== tests/cases/compiler/doYouNeedToChangeYourTargetLibrary.ts ===
// es2015
const testArrayFind = [""].find((val, idx, obj) => {
>testArrayFind : Symbol(testArrayFind, Decl(doYouNeedToChangeYourTargetLibrary.ts, 1, 5))
>val : Symbol(val, Decl(doYouNeedToChangeYourTargetLibrary.ts, 1, 33))
>idx : Symbol(idx, Decl(doYouNeedToChangeYourTargetLibrary.ts, 1, 37))
>obj : Symbol(obj, Decl(doYouNeedToChangeYourTargetLibrary.ts, 1, 42))

    return true;
});
const testArrayFindIndex = [""].findIndex((val, idx, obj) => {
>testArrayFindIndex : Symbol(testArrayFindIndex, Decl(doYouNeedToChangeYourTargetLibrary.ts, 4, 5))
>val : Symbol(val, Decl(doYouNeedToChangeYourTargetLibrary.ts, 4, 43))
>idx : Symbol(idx, Decl(doYouNeedToChangeYourTargetLibrary.ts, 4, 47))
>obj : Symbol(obj, Decl(doYouNeedToChangeYourTargetLibrary.ts, 4, 52))

    return true;
});
const testArrayFill = [""].fill("fill");
>testArrayFill : Symbol(testArrayFill, Decl(doYouNeedToChangeYourTargetLibrary.ts, 7, 5))

const testArrayCopyWithin = [""].copyWithin(0, 0);
>testArrayCopyWithin : Symbol(testArrayCopyWithin, Decl(doYouNeedToChangeYourTargetLibrary.ts, 8, 5))

const testArrayEntries = [""].entries();
>testArrayEntries : Symbol(testArrayEntries, Decl(doYouNeedToChangeYourTargetLibrary.ts, 9, 5))

const testArrayKeys = [""].keys();
>testArrayKeys : Symbol(testArrayKeys, Decl(doYouNeedToChangeYourTargetLibrary.ts, 10, 5))

const testArrayValues = [""].values();
>testArrayValues : Symbol(testArrayValues, Decl(doYouNeedToChangeYourTargetLibrary.ts, 11, 5))

const testArrayConstructorFrom = Array.from([]);
>testArrayConstructorFrom : Symbol(testArrayConstructorFrom, Decl(doYouNeedToChangeYourTargetLibrary.ts, 12, 5))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testArrayConstructorOf = Array.of([]);
>testArrayConstructorOf : Symbol(testArrayConstructorOf, Decl(doYouNeedToChangeYourTargetLibrary.ts, 13, 5))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorAssign = Object.assign({}, {});
>testObjectConstructorAssign : Symbol(testObjectConstructorAssign, Decl(doYouNeedToChangeYourTargetLibrary.ts, 14, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorGetOwnPropertySymbols = Object.getOwnPropertySymbols({});
>testObjectConstructorGetOwnPropertySymbols : Symbol(testObjectConstructorGetOwnPropertySymbols, Decl(doYouNeedToChangeYourTargetLibrary.ts, 15, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorKeys = Object.keys({});
>testObjectConstructorKeys : Symbol(testObjectConstructorKeys, Decl(doYouNeedToChangeYourTargetLibrary.ts, 16, 5))
>Object.keys : Symbol(ObjectConstructor.keys, Decl(lib.es5.d.ts, --, --))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>keys : Symbol(ObjectConstructor.keys, Decl(lib.es5.d.ts, --, --))

const testObjectConstructorIs = Object.is({}, {});
>testObjectConstructorIs : Symbol(testObjectConstructorIs, Decl(doYouNeedToChangeYourTargetLibrary.ts, 17, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorSetPrototypeOf = Object.setPrototypeOf({}, {});
>testObjectConstructorSetPrototypeOf : Symbol(testObjectConstructorSetPrototypeOf, Decl(doYouNeedToChangeYourTargetLibrary.ts, 18, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testNumberConstructorIsFinite = Number.isFinite(0);
>testNumberConstructorIsFinite : Symbol(testNumberConstructorIsFinite, Decl(doYouNeedToChangeYourTargetLibrary.ts, 19, 5))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testNumberConstructorIsInteger = Number.isInteger(0);
>testNumberConstructorIsInteger : Symbol(testNumberConstructorIsInteger, Decl(doYouNeedToChangeYourTargetLibrary.ts, 20, 5))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testNumberConstructorIsNan = Number.isNaN(0);
>testNumberConstructorIsNan : Symbol(testNumberConstructorIsNan, Decl(doYouNeedToChangeYourTargetLibrary.ts, 21, 5))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testNumberConstructorIsSafeInteger = Number.isSafeInteger(0);
>testNumberConstructorIsSafeInteger : Symbol(testNumberConstructorIsSafeInteger, Decl(doYouNeedToChangeYourTargetLibrary.ts, 22, 5))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testNumberConstructorParseFloat = Number.parseFloat("0");
>testNumberConstructorParseFloat : Symbol(testNumberConstructorParseFloat, Decl(doYouNeedToChangeYourTargetLibrary.ts, 23, 5))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testNumberConstructorParseInt = Number.parseInt("0");
>testNumberConstructorParseInt : Symbol(testNumberConstructorParseInt, Decl(doYouNeedToChangeYourTargetLibrary.ts, 24, 5))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathClz32 = Math.clz32(0);
>testMathClz32 : Symbol(testMathClz32, Decl(doYouNeedToChangeYourTargetLibrary.ts, 25, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathImul = Math.imul(0,0);
>testMathImul : Symbol(testMathImul, Decl(doYouNeedToChangeYourTargetLibrary.ts, 26, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathSign = Math.sign(0);
>testMathSign : Symbol(testMathSign, Decl(doYouNeedToChangeYourTargetLibrary.ts, 27, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathLog10 = Math.log10(0);
>testMathLog10 : Symbol(testMathLog10, Decl(doYouNeedToChangeYourTargetLibrary.ts, 28, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathLog2 = Math.log2(0);
>testMathLog2 : Symbol(testMathLog2, Decl(doYouNeedToChangeYourTargetLibrary.ts, 29, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathLog1p = Math.log1p(0);
>testMathLog1p : Symbol(testMathLog1p, Decl(doYouNeedToChangeYourTargetLibrary.ts, 30, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathExpm1 = Math.expm1(0);
>testMathExpm1 : Symbol(testMathExpm1, Decl(doYouNeedToChangeYourTargetLibrary.ts, 31, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathCosh = Math.cosh(0);
>testMathCosh : Symbol(testMathCosh, Decl(doYouNeedToChangeYourTargetLibrary.ts, 32, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathSinh = Math.sinh(0);
>testMathSinh : Symbol(testMathSinh, Decl(doYouNeedToChangeYourTargetLibrary.ts, 33, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathTanh = Math.tanh(0);
>testMathTanh : Symbol(testMathTanh, Decl(doYouNeedToChangeYourTargetLibrary.ts, 34, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathAcosh = Math.acosh(0);
>testMathAcosh : Symbol(testMathAcosh, Decl(doYouNeedToChangeYourTargetLibrary.ts, 35, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathAsinh = Math.asinh(0);
>testMathAsinh : Symbol(testMathAsinh, Decl(doYouNeedToChangeYourTargetLibrary.ts, 36, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathAtanh = Math.atanh(0);
>testMathAtanh : Symbol(testMathAtanh, Decl(doYouNeedToChangeYourTargetLibrary.ts, 37, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathHypot = Math.hypot(0,0);
>testMathHypot : Symbol(testMathHypot, Decl(doYouNeedToChangeYourTargetLibrary.ts, 38, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathTrunc = Math.trunc(0);
>testMathTrunc : Symbol(testMathTrunc, Decl(doYouNeedToChangeYourTargetLibrary.ts, 39, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathFround = Math.fround(0);
>testMathFround : Symbol(testMathFround, Decl(doYouNeedToChangeYourTargetLibrary.ts, 40, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMathCbrt = Math.cbrt(0);
>testMathCbrt : Symbol(testMathCbrt, Decl(doYouNeedToChangeYourTargetLibrary.ts, 41, 5))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testMap: Map<any, any> = null as any;
>testMap : Symbol(testMap, Decl(doYouNeedToChangeYourTargetLibrary.ts, 42, 5))

const testSet: Set<any> = null as any;
>testSet : Symbol(testSet, Decl(doYouNeedToChangeYourTargetLibrary.ts, 43, 5))

const testPromiseAll = Promise.all([]);
>testPromiseAll : Symbol(testPromiseAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 44, 5))

const testPromiseRace = Promise.race([]);
>testPromiseRace : Symbol(testPromiseRace, Decl(doYouNeedToChangeYourTargetLibrary.ts, 45, 5))

const testPromiseResolve = Promise.resolve();
>testPromiseResolve : Symbol(testPromiseResolve, Decl(doYouNeedToChangeYourTargetLibrary.ts, 46, 5))

const testPromiseReject = Promise.reject();
>testPromiseReject : Symbol(testPromiseReject, Decl(doYouNeedToChangeYourTargetLibrary.ts, 47, 5))

const testSymbolFor = Symbol.for('a');
>testSymbolFor : Symbol(testSymbolFor, Decl(doYouNeedToChangeYourTargetLibrary.ts, 48, 5))

const testSymbolKeyFor = Symbol.keyFor(testSymbolFor);
>testSymbolKeyFor : Symbol(testSymbolKeyFor, Decl(doYouNeedToChangeYourTargetLibrary.ts, 49, 5))
>testSymbolFor : Symbol(testSymbolFor, Decl(doYouNeedToChangeYourTargetLibrary.ts, 48, 5))

const testWeakMap: WeakMap<any, any> = null as any;
>testWeakMap : Symbol(testWeakMap, Decl(doYouNeedToChangeYourTargetLibrary.ts, 50, 5))

const testWeakSet: WeakMap<any, any> = null as any;
>testWeakSet : Symbol(testWeakSet, Decl(doYouNeedToChangeYourTargetLibrary.ts, 51, 5))

const testIterator: Iterator<any, any, any> = null as any;
>testIterator : Symbol(testIterator, Decl(doYouNeedToChangeYourTargetLibrary.ts, 52, 5))

const testAsyncIterator: AsyncIterator<any, any, any> = null as any;
>testAsyncIterator : Symbol(testAsyncIterator, Decl(doYouNeedToChangeYourTargetLibrary.ts, 53, 5))

const testStringCodePointAt = "".codePointAt(0);
>testStringCodePointAt : Symbol(testStringCodePointAt, Decl(doYouNeedToChangeYourTargetLibrary.ts, 54, 5))

const testStringIncludes = "".includes("");
>testStringIncludes : Symbol(testStringIncludes, Decl(doYouNeedToChangeYourTargetLibrary.ts, 55, 5))

const testStringEndsWith = "".endsWith("");
>testStringEndsWith : Symbol(testStringEndsWith, Decl(doYouNeedToChangeYourTargetLibrary.ts, 56, 5))

const testStringNormalize = "".normalize();
>testStringNormalize : Symbol(testStringNormalize, Decl(doYouNeedToChangeYourTargetLibrary.ts, 57, 5))

const testStringRepeat = "".repeat(0);
>testStringRepeat : Symbol(testStringRepeat, Decl(doYouNeedToChangeYourTargetLibrary.ts, 58, 5))

const testStringStartsWith = "".startsWith("");
>testStringStartsWith : Symbol(testStringStartsWith, Decl(doYouNeedToChangeYourTargetLibrary.ts, 59, 5))

const testStringAnchor = "".anchor("");
>testStringAnchor : Symbol(testStringAnchor, Decl(doYouNeedToChangeYourTargetLibrary.ts, 60, 5))

const testStringBig = "".big();
>testStringBig : Symbol(testStringBig, Decl(doYouNeedToChangeYourTargetLibrary.ts, 61, 5))

const testStringBlink = "".blink();
>testStringBlink : Symbol(testStringBlink, Decl(doYouNeedToChangeYourTargetLibrary.ts, 62, 5))

const testStringBold = "".bold();
>testStringBold : Symbol(testStringBold, Decl(doYouNeedToChangeYourTargetLibrary.ts, 63, 5))

const testStringFixed = "".fixed();
>testStringFixed : Symbol(testStringFixed, Decl(doYouNeedToChangeYourTargetLibrary.ts, 64, 5))

const testStringFontColor = "".fontcolor("blue");
>testStringFontColor : Symbol(testStringFontColor, Decl(doYouNeedToChangeYourTargetLibrary.ts, 65, 5))

const testStringFontSize = "".fontsize(0);
>testStringFontSize : Symbol(testStringFontSize, Decl(doYouNeedToChangeYourTargetLibrary.ts, 66, 5))

const testStringItalics = "".italics();
>testStringItalics : Symbol(testStringItalics, Decl(doYouNeedToChangeYourTargetLibrary.ts, 67, 5))

const testStringLink = "".link("");
>testStringLink : Symbol(testStringLink, Decl(doYouNeedToChangeYourTargetLibrary.ts, 68, 5))

const testStringSmall = "".small();
>testStringSmall : Symbol(testStringSmall, Decl(doYouNeedToChangeYourTargetLibrary.ts, 69, 5))

const testStringStrike = "".strike();
>testStringStrike : Symbol(testStringStrike, Decl(doYouNeedToChangeYourTargetLibrary.ts, 70, 5))

const testStringSub = "".sub();
>testStringSub : Symbol(testStringSub, Decl(doYouNeedToChangeYourTargetLibrary.ts, 71, 5))

const testStringSup = "".sup();
>testStringSup : Symbol(testStringSup, Decl(doYouNeedToChangeYourTargetLibrary.ts, 72, 5))

const testStringConstructorFromCodePoint = String.fromCodePoint();
>testStringConstructorFromCodePoint : Symbol(testStringConstructorFromCodePoint, Decl(doYouNeedToChangeYourTargetLibrary.ts, 73, 5))
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testStringConstructorRaw = String.raw``;
>testStringConstructorRaw : Symbol(testStringConstructorRaw, Decl(doYouNeedToChangeYourTargetLibrary.ts, 74, 5))
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

// es2016
const testIncludes = ["hello"].includes("world");
>testIncludes : Symbol(testIncludes, Decl(doYouNeedToChangeYourTargetLibrary.ts, 77, 5))

// es2017
const testStringPadStart = "".padStart(2);
>testStringPadStart : Symbol(testStringPadStart, Decl(doYouNeedToChangeYourTargetLibrary.ts, 80, 5))

const testStringPadEnd = "".padEnd(2);
>testStringPadEnd : Symbol(testStringPadEnd, Decl(doYouNeedToChangeYourTargetLibrary.ts, 81, 5))

const testObjectConstructorValues = Object.values({});
>testObjectConstructorValues : Symbol(testObjectConstructorValues, Decl(doYouNeedToChangeYourTargetLibrary.ts, 82, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorEntries = Object.entries({});
>testObjectConstructorEntries : Symbol(testObjectConstructorEntries, Decl(doYouNeedToChangeYourTargetLibrary.ts, 83, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorGetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors({});
>testObjectConstructorGetOwnPropertyDescriptors : Symbol(testObjectConstructorGetOwnPropertyDescriptors, Decl(doYouNeedToChangeYourTargetLibrary.ts, 84, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testIntlFormatToParts = new Intl.DateTimeFormat("en-US").formatToParts();
>testIntlFormatToParts : Symbol(testIntlFormatToParts, Decl(doYouNeedToChangeYourTargetLibrary.ts, 85, 5))
>Intl.DateTimeFormat : Symbol(Intl.DateTimeFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))
>DateTimeFormat : Symbol(Intl.DateTimeFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testAtomics = Atomics.add(new Uint8Array(0), 0, 0);
>testAtomics : Symbol(testAtomics, Decl(doYouNeedToChangeYourTargetLibrary.ts, 86, 5))
>Uint8Array : Symbol(Uint8Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testSharedArrayBuffer = new SharedArrayBuffer(5);
>testSharedArrayBuffer : Symbol(testSharedArrayBuffer, Decl(doYouNeedToChangeYourTargetLibrary.ts, 87, 5))

// es2018
const testPromiseFinally = new Promise(() => {}).finally();
>testPromiseFinally : Symbol(testPromiseFinally, Decl(doYouNeedToChangeYourTargetLibrary.ts, 90, 5))

const testRegExpMatchArrayGroups = "2019-04-30".match(/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g).groups;
>testRegExpMatchArrayGroups : Symbol(testRegExpMatchArrayGroups, Decl(doYouNeedToChangeYourTargetLibrary.ts, 91, 5))
>"2019-04-30".match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))
>match : Symbol(String.match, Decl(lib.es5.d.ts, --, --))

const testRegExpExecArrayGroups = /(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec("2019-04-30").groups;
>testRegExpExecArrayGroups : Symbol(testRegExpExecArrayGroups, Decl(doYouNeedToChangeYourTargetLibrary.ts, 92, 5))
>/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec : Symbol(RegExp.exec, Decl(lib.es5.d.ts, --, --))
>exec : Symbol(RegExp.exec, Decl(lib.es5.d.ts, --, --))

const testRegExpDotAll = /foo/g.dotAll;
>testRegExpDotAll : Symbol(testRegExpDotAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 93, 5))

const testIntlPluralRules = new Intl.PluralRules("ar-EG").select(0);
>testIntlPluralRules : Symbol(testIntlPluralRules, Decl(doYouNeedToChangeYourTargetLibrary.ts, 94, 5))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))

const testAsyncGenerator: AsyncGenerator<any> = null as any;
>testAsyncGenerator : Symbol(testAsyncGenerator, Decl(doYouNeedToChangeYourTargetLibrary.ts, 95, 5))

const testAsyncGeneratorFunction: AsyncGeneratorFunction = null as any;
>testAsyncGeneratorFunction : Symbol(testAsyncGeneratorFunction, Decl(doYouNeedToChangeYourTargetLibrary.ts, 96, 5))

const testAsyncIterable: AsyncIterable<any> = null as any;
>testAsyncIterable : Symbol(testAsyncIterable, Decl(doYouNeedToChangeYourTargetLibrary.ts, 97, 5))

const testAsyncIterableIterator: AsyncIterableIterator<any> = null as any;
>testAsyncIterableIterator : Symbol(testAsyncIterableIterator, Decl(doYouNeedToChangeYourTargetLibrary.ts, 98, 5))

// es2019
const testArrayFlat = [].flat();
>testArrayFlat : Symbol(testArrayFlat, Decl(doYouNeedToChangeYourTargetLibrary.ts, 101, 5))

const testArrayFlatMap = [].flatMap();
>testArrayFlatMap : Symbol(testArrayFlatMap, Decl(doYouNeedToChangeYourTargetLibrary.ts, 102, 5))

const testObjectConstructorFromEntries = Object.fromEntries({});
>testObjectConstructorFromEntries : Symbol(testObjectConstructorFromEntries, Decl(doYouNeedToChangeYourTargetLibrary.ts, 103, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testStringTrimStart = "".trimStart();
>testStringTrimStart : Symbol(testStringTrimStart, Decl(doYouNeedToChangeYourTargetLibrary.ts, 104, 5))

const testStringTrimEnd = "".trimEnd();
>testStringTrimEnd : Symbol(testStringTrimEnd, Decl(doYouNeedToChangeYourTargetLibrary.ts, 105, 5))

const testStringTrimLeft = "".trimLeft();
>testStringTrimLeft : Symbol(testStringTrimLeft, Decl(doYouNeedToChangeYourTargetLibrary.ts, 106, 5))

const testStringTrimRight = "".trimRight();
>testStringTrimRight : Symbol(testStringTrimRight, Decl(doYouNeedToChangeYourTargetLibrary.ts, 107, 5))

const testSymbolDescription = Symbol("foo").description;
>testSymbolDescription : Symbol(testSymbolDescription, Decl(doYouNeedToChangeYourTargetLibrary.ts, 108, 5))

// es2020
const testPromiseAllSettled = new Promise(() => {}).allSettled();
>testPromiseAllSettled : Symbol(testPromiseAllSettled, Decl(doYouNeedToChangeYourTargetLibrary.ts, 111, 5))

const testStringMatchAll = "".matchAll();
>testStringMatchAll : Symbol(testStringMatchAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 112, 5))

const testRegExpMatchAll = /matchAll/g[Symbol.matchAll]("matchAll");
>testRegExpMatchAll : Symbol(testRegExpMatchAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 113, 5))

const testBigInt = BigInt(123);
>testBigInt : Symbol(testBigInt, Decl(doYouNeedToChangeYourTargetLibrary.ts, 114, 5))

// esnext
const testPromiseAny = new Promise(() => {}).any();
>testPromiseAny : Symbol(testPromiseAny, Decl(doYouNeedToChangeYourTargetLibrary.ts, 117, 5))

const testStringReplaceAll = "".replaceAll();
>testStringReplaceAll : Symbol(testStringReplaceAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 118, 5))

const testNumberFormatFormatToParts = new Intl.NumberFormat("en-US").formatToParts();
>testNumberFormatFormatToParts : Symbol(testNumberFormatFormatToParts, Decl(doYouNeedToChangeYourTargetLibrary.ts, 119, 5))
>Intl.NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))
>NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

