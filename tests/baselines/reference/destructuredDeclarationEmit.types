=== tests/cases/compiler/foo.ts ===
const foo = { bar: 'hello', bat: 'world', bam: { bork: { bar: 'a', baz: 'b' } } };
>foo : { bar: string; bat: string; bam: { bork: { bar: string; baz: string; }; }; }
>{ bar: 'hello', bat: 'world', bam: { bork: { bar: 'a', baz: 'b' } } } : { bar: string; bat: string; bam: { bork: { bar: string; baz: string; }; }; }
>bar : string
>'hello' : "hello"
>bat : string
>'world' : "world"
>bam : { bork: { bar: string; baz: string; }; }
>{ bork: { bar: 'a', baz: 'b' } } : { bork: { bar: string; baz: string; }; }
>bork : { bar: string; baz: string; }
>{ bar: 'a', baz: 'b' } : { bar: string; baz: string; }
>bar : string
>'a' : "a"
>baz : string
>'b' : "b"

export { foo };
>foo : { bar: string; bat: string; bam: { bork: { bar: string; baz: string; }; }; }

=== tests/cases/compiler/index.ts ===
import { foo } from './foo';
>foo : { bar: string; bat: string; bam: { bork: { bar: string; baz: string; }; }; }

export { foo };
>foo : { bar: string; bat: string; bam: { bork: { bar: string; baz: string; }; }; }

const { bar: baz, bat, bam: { bork: { bar: ibar, baz: ibaz } } } = foo;
>bar : any
>baz : string
>bat : string
>bam : any
>bork : any
>bar : any
>ibar : string
>baz : any
>ibaz : string
>foo : { bar: string; bat: string; bam: { bork: { bar: string; baz: string; }; }; }

export { baz, ibaz };
>baz : string
>ibaz : string

