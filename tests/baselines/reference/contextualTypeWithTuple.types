=== tests/cases/conformance/types/tuple/contextualTypeWithTuple.ts ===
// no error
var numStrTuple: [number, string] = [5, "hello"];
>numStrTuple : [number, string]
>[5, "hello"] : [5, "hello"]
>5 : 5
>"hello" : "hello"

var numStrTuple2: [number, string] = [5, "foo", true];
>numStrTuple2 : [number, string]
>[5, "foo", true] : [5, "foo", boolean]
>5 : 5
>"foo" : "foo"
>true : true

var numStrBoolTuple: [number, string, boolean] = [5, "foo", true];
>numStrBoolTuple : [number, string, boolean]
>[5, "foo", true] : [5, "foo", true]
>5 : 5
>"foo" : "foo"
>true : true

var objNumTuple: [{ a: string }, number] = [{ a: "world" }, 5];
>objNumTuple : [{ a: string; }, number]
>a : string
>[{ a: "world" }, 5] : [{ a: "world"; }, 5]
>{ a: "world" } : { a: "world"; }
>a : string
>"world" : "world"
>5 : 5

var strTupleTuple: [string, [number, {}]] = ["bar", [5, { x: 1, y: 1 }]];
>strTupleTuple : [string, [number, {}]]
>["bar", [5, { x: 1, y: 1 }]] : ["bar", [5, { x: number; y: number; }]]
>"bar" : "bar"
>[5, { x: 1, y: 1 }] : [5, { x: number; y: number; }]
>5 : 5
>{ x: 1, y: 1 } : { x: number; y: number; }
>x : number
>1 : 1
>y : number
>1 : 1

class C { }
>C : C

class D { }
>D : D

var unionTuple: [C, string | number] = [new C(), "foo"];
>unionTuple : [C, string | number]
>C : C
>[new C(), "foo"] : [C, "foo"]
>new C() : C
>C : typeof C
>"foo" : "foo"

var unionTuple1: [C, string | number] = [new C(), "foo"];
>unionTuple1 : [C, string | number]
>C : C
>[new C(), "foo"] : [C, "foo"]
>new C() : C
>C : typeof C
>"foo" : "foo"

var unionTuple2: [C, string | number, D] = [new C(), "foo", new D()];
>unionTuple2 : [C, string | number, D]
>C : C
>D : D
>[new C(), "foo", new D()] : [C, "foo", D]
>new C() : C
>C : typeof C
>"foo" : "foo"
>new D() : D
>D : typeof D

var unionTuple3: [number, string| number] = [10, "foo"]; 
>unionTuple3 : [number, string | number]
>[10, "foo"] : [10, "foo"]
>10 : 10
>"foo" : "foo"

numStrTuple = numStrTuple2;
>numStrTuple = numStrTuple2 : [number, string]
>numStrTuple : [number, string]
>numStrTuple2 : [number, string]

numStrTuple = numStrBoolTuple;
>numStrTuple = numStrBoolTuple : [number, string, boolean]
>numStrTuple : [number, string]
>numStrBoolTuple : [number, string, boolean]

// error
objNumTuple = [ {}, 5];
>objNumTuple = [ {}, 5] : [{}, 5]
>objNumTuple : [{ a: string; }, number]
>[ {}, 5] : [{}, 5]
>{} : {}
>5 : 5

numStrBoolTuple = numStrTuple;
>numStrBoolTuple = numStrTuple : [number, string]
>numStrBoolTuple : [number, string, boolean]
>numStrTuple : [number, string]

var strStrTuple: [string, string] = ["foo", "bar", 5];
>strStrTuple : [string, string]
>["foo", "bar", 5] : ["foo", "bar", number]
>"foo" : "foo"
>"bar" : "bar"
>5 : 5

unionTuple = unionTuple1;
>unionTuple = unionTuple1 : [C, string | number]
>unionTuple : [C, string | number]
>unionTuple1 : [C, string | number]

unionTuple = unionTuple2;
>unionTuple = unionTuple2 : [C, string | number, D]
>unionTuple : [C, string | number]
>unionTuple2 : [C, string | number, D]

unionTuple2 = unionTuple;
>unionTuple2 = unionTuple : [C, string | number]
>unionTuple2 : [C, string | number, D]
>unionTuple : [C, string | number]

numStrTuple = unionTuple3;
>numStrTuple = unionTuple3 : [number, string | number]
>numStrTuple : [number, string]
>unionTuple3 : [number, string | number]

