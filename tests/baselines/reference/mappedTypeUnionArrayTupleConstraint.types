//// [tests/cases/compiler/mappedTypeUnionArrayTupleConstraint.ts] ////

=== mappedTypeUnionArrayTupleConstraint.ts ===
// https://github.com/microsoft/TypeScript/issues/56018

type Renamed = readonly ({ [k: PropertyKey]: string } | undefined)[];
>Renamed : readonly ({ [k: string]: string; [k: number]: string; [k: symbol]: string; } | undefined)[]
>k : PropertyKey

type Foo<T extends readonly (PropertyKey | undefined)[] | Renamed> =
>Foo : Foo<T>

  T extends Renamed ? GetKeys<Required<T>> : Required<T>;

type GetKeys<R extends Renamed> = { [K in keyof R]: keyof R[K] };
>GetKeys : GetKeys<R>

// usage
type A = Foo<["a"?]>;
>A : ["a"]

type B = Foo<[{ a?: "b" }]>;
>B : ["a"]
>a : "b" | undefined

