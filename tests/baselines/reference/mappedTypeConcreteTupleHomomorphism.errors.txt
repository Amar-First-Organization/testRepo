tests/cases/compiler/mappedTypeConcreteTupleHomomorphism.ts(22,47): error TS2322: Type 'TupleOfNumbersAndObjects[K]' is not assignable to type 'string | number | bigint | boolean'.
  Type '{} | 2 | 1' is not assignable to type 'string | number | bigint | boolean'.
    Type '{}' is not assignable to type 'string | number | bigint | boolean'.


==== tests/cases/compiler/mappedTypeConcreteTupleHomomorphism.ts (1 errors) ====
    type TupleOfNumbers = [1, 2]
    
    type HomomorphicType = {
        [K in keyof TupleOfNumbers]: `${TupleOfNumbers[K]}`
    }
    
    const homomorphic: HomomorphicType = ['1', '2']
    
    type GenericType<T> = {
        [K in keyof T]: [K, T[K]]
    }
    
    type HomomorphicInstantiation = {
        [K in keyof GenericType<['c', 'd', 'e']>]: 1
    }
    
    const d: HomomorphicInstantiation = [1, 1, 1]
    
    type TupleOfNumbersAndObjects = [1, 2, {}]
    
    type ShouldErrorOnInterpolation = {
        [K in keyof TupleOfNumbersAndObjects]: `${TupleOfNumbersAndObjects[K]}`
                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type 'TupleOfNumbersAndObjects[K]' is not assignable to type 'string | number | bigint | boolean'.
!!! error TS2322:   Type '{} | 2 | 1' is not assignable to type 'string | number | bigint | boolean'.
!!! error TS2322:     Type '{}' is not assignable to type 'string | number | bigint | boolean'.
    }
    
    // repro from #27995
    type Foo = ['a', 'b'];
    
    interface Bar {
        a: string;
        b: number;
    }
    
    type Baz = { [K in keyof Foo]: Bar[Foo[K]]; };
    