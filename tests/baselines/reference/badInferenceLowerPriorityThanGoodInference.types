=== tests/cases/compiler/badInferenceLowerPriorityThanGoodInference.ts ===
interface Foo<A> {
>Foo : Foo<A>
>A : A

    a: A;
>a : A
>A : A

    b: (x: A) => void;
>b : (x: A) => void
>x : A
>A : A
}

declare function canYouInferThis<A>(fn: () => Foo<A>): A;
>canYouInferThis : <A>(fn: () => Foo<A>) => A
>A : A
>fn : () => Foo<A>
>Foo : Foo<A>
>A : A
>A : A

const result = canYouInferThis(() => ({
>result : { BLAH: number; }
>canYouInferThis(() => ({    a: { BLAH: 33 },    b: x => { }})) : { BLAH: number; }
>canYouInferThis : <A>(fn: () => Foo<A>) => A
>() => ({    a: { BLAH: 33 },    b: x => { }}) : () => { a: { BLAH: number; }; b: (x: { BLAH: number; }) => void; }
>({    a: { BLAH: 33 },    b: x => { }}) : { a: { BLAH: number; }; b: (x: { BLAH: number; }) => void; }
>{    a: { BLAH: 33 },    b: x => { }} : { a: { BLAH: number; }; b: (x: { BLAH: number; }) => void; }

    a: { BLAH: 33 },
>a : { BLAH: number; }
>{ BLAH: 33 } : { BLAH: number; }
>BLAH : number
>33 : 33

    b: x => { }
>b : (x: { BLAH: number; }) => void
>x => { } : (x: { BLAH: number; }) => void
>x : { BLAH: number; }

}))

result.BLAH;
>result.BLAH : number
>result : { BLAH: number; }
>BLAH : number

