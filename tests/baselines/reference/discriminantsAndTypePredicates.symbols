=== tests/cases/compiler/discriminantsAndTypePredicates.ts ===
// Repro from #10145

interface A { type: 'A' }
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>type : Symbol(A.type, Decl(discriminantsAndTypePredicates.ts, 2, 13))

interface B { type: 'B' }
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>type : Symbol(B.type, Decl(discriminantsAndTypePredicates.ts, 3, 13))

function isA(x: A | B): x is A { return x.type === 'A'; }
>isA : Symbol(isA, Decl(discriminantsAndTypePredicates.ts, 3, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 5, 13))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 5, 13))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>x.type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 5, 13))
>type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))

function isB(x: A | B): x is B { return x.type === 'B'; }
>isB : Symbol(isB, Decl(discriminantsAndTypePredicates.ts, 5, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 6, 13))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 6, 13))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>x.type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 6, 13))
>type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))

function foo1(x: A | B): any {
>foo1 : Symbol(foo1, Decl(discriminantsAndTypePredicates.ts, 6, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))

    x;  // A | B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

    if (isA(x)) {
>isA : Symbol(isA, Decl(discriminantsAndTypePredicates.ts, 3, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

        return x;  // A
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
    }
    x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

    if (isB(x)) {
>isB : Symbol(isB, Decl(discriminantsAndTypePredicates.ts, 5, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

        return x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
    }
    x;  // never
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
}

function foo2(x: A | B): any {
>foo2 : Symbol(foo2, Decl(discriminantsAndTypePredicates.ts, 18, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))

    x;  // A | B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))

    if (x.type === 'A') {
>x.type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
>type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))

        return x;  // A
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
    }
    x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))

    if (x.type === 'B') {
>x.type : Symbol(B.type, Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
>type : Symbol(B.type, Decl(discriminantsAndTypePredicates.ts, 3, 13))

        return x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
    }
    x;  // never
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
}

// Repro from #30557

interface TypeA {
>TypeA : Symbol(TypeA, Decl(discriminantsAndTypePredicates.ts, 30, 1))

    Name: "TypeA";
>Name : Symbol(TypeA.Name, Decl(discriminantsAndTypePredicates.ts, 34, 17))

    Value1: "Cool stuff!";
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
}

interface TypeB {
>TypeB : Symbol(TypeB, Decl(discriminantsAndTypePredicates.ts, 37, 1))

    Name: "TypeB";
>Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))

    Value2: 0;
>Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
}

type Type = TypeA | TypeB;
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))
>TypeA : Symbol(TypeA, Decl(discriminantsAndTypePredicates.ts, 30, 1))
>TypeB : Symbol(TypeB, Decl(discriminantsAndTypePredicates.ts, 37, 1))

declare function isType(x: unknown): x is Type;
>isType : Symbol(isType, Decl(discriminantsAndTypePredicates.ts, 44, 26))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 46, 24))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 46, 24))
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))

function WorksProperly(data: Type) {
>WorksProperly : Symbol(WorksProperly, Decl(discriminantsAndTypePredicates.ts, 46, 47))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 48, 23))
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))

    if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 48, 23))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

	// TypeA
	const value1 = data.Value1;
>value1 : Symbol(value1, Decl(discriminantsAndTypePredicates.ts, 51, 6))
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 48, 23))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
    }
}

function DoesNotWork(data: unknown) {
>DoesNotWork : Symbol(DoesNotWork, Decl(discriminantsAndTypePredicates.ts, 53, 1))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))

    if (isType(data)) {
>isType : Symbol(isType, Decl(discriminantsAndTypePredicates.ts, 44, 26))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))

	if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

	    // TypeA
	    const value1 = data.Value1;
>value1 : Symbol(value1, Decl(discriminantsAndTypePredicates.ts, 59, 10))
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
	}
    }
}

function narrowToNever(data: Type): "Cool stuff!" | 0 {
>narrowToNever : Symbol(narrowToNever, Decl(discriminantsAndTypePredicates.ts, 62, 1))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))

    if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

        return data.Value1;
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
    }
    if (data.Name === "TypeB") {
>data.Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))

        return data.Value2;
>data.Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
    }
    return data;
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
}

function narrowToNeverUnknown(data: unknown): "Cool stuff!" | 0 {
>narrowToNeverUnknown : Symbol(narrowToNeverUnknown, Decl(discriminantsAndTypePredicates.ts, 72, 1))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))

    if (isType(data)) {
>isType : Symbol(isType, Decl(discriminantsAndTypePredicates.ts, 44, 26))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))

        if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

            return data.Value1;
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
        }
        if (data.Name === "TypeB") {
>data.Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))

            return data.Value2;
>data.Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
        }
        return data;
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
    }
    throw "error";
}

type Foo = { kind: "a", a: number } | { kind: "b", b: number };
>Foo : Symbol(Foo, Decl(discriminantsAndTypePredicates.ts, 85, 1))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 12))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 87, 23))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 39))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 87, 50))

type Bar = { kind: "c", c: number } | { kind: "d", d: number };
>Bar : Symbol(Bar, Decl(discriminantsAndTypePredicates.ts, 87, 63))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 12))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 88, 23))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 39))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 88, 50))

declare function isFoo(x: unknown): x is Foo;
>isFoo : Symbol(isFoo, Decl(discriminantsAndTypePredicates.ts, 88, 63))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 90, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 90, 23))
>Foo : Symbol(Foo, Decl(discriminantsAndTypePredicates.ts, 85, 1))

declare function isBar(x: unknown): x is Bar;
>isBar : Symbol(isBar, Decl(discriminantsAndTypePredicates.ts, 90, 45))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 91, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 91, 23))
>Bar : Symbol(Bar, Decl(discriminantsAndTypePredicates.ts, 87, 63))

function blah(x: unknown) {
>blah : Symbol(blah, Decl(discriminantsAndTypePredicates.ts, 91, 45))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))

    if (isFoo(x)) {
>isFoo : Symbol(isFoo, Decl(discriminantsAndTypePredicates.ts, 88, 63))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))

        if (x.kind === "a") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 12), Decl(discriminantsAndTypePredicates.ts, 87, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 12), Decl(discriminantsAndTypePredicates.ts, 87, 39))

            let a = x.a;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 96, 15))
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 87, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 87, 23))
        }
        else if (x.kind === "b") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 39))

            let b = x.b;
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 99, 15))
>x.b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 87, 50))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 87, 50))
        }
    }
    else if (isBar(x)) {
>isBar : Symbol(isBar, Decl(discriminantsAndTypePredicates.ts, 90, 45))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))

        if (x.kind === "c") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 12), Decl(discriminantsAndTypePredicates.ts, 88, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 12), Decl(discriminantsAndTypePredicates.ts, 88, 39))

            let c = x.c;
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 104, 15))
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 88, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 88, 23))
        }
        else if (x.kind === "d") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 39))

            let d = x.d;
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 107, 15))
>x.d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 88, 50))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 88, 50))
        }
    }
    x  // unknown
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
}

type PrimitiveUnion = number | string
>PrimitiveUnion : Symbol(PrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 111, 1))

type FooComplex = { kind: "a", a: number } | { kind: "b", b: number } | number;
>FooComplex : Symbol(FooComplex, Decl(discriminantsAndTypePredicates.ts, 113, 37))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 46))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))

type BarComplex = { kind: "c", c: number } | { kind: "d", d: number } | string;
>BarComplex : Symbol(BarComplex, Decl(discriminantsAndTypePredicates.ts, 114, 79))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 19))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 46))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))

declare function isPrimitiveUnion(x: unknown): x is PrimitiveUnion;
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 117, 34))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 117, 34))
>PrimitiveUnion : Symbol(PrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 111, 1))

declare function isFooComplex(x: unknown): x is FooComplex;
>isFooComplex : Symbol(isFooComplex, Decl(discriminantsAndTypePredicates.ts, 117, 67))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 118, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 118, 30))
>FooComplex : Symbol(FooComplex, Decl(discriminantsAndTypePredicates.ts, 113, 37))

declare function isBarComplex(x: unknown): x is BarComplex;
>isBarComplex : Symbol(isBarComplex, Decl(discriminantsAndTypePredicates.ts, 118, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 119, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 119, 30))
>BarComplex : Symbol(BarComplex, Decl(discriminantsAndTypePredicates.ts, 114, 79))

function bluergh(x: unknown) {
>bluergh : Symbol(bluergh, Decl(discriminantsAndTypePredicates.ts, 119, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))

    if (isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))

        let a: number | string = x;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 123, 11))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
    }
    if (isFooComplex(x) && typeof x === "object") {
>isFooComplex : Symbol(isFooComplex, Decl(discriminantsAndTypePredicates.ts, 117, 67))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))

        if (x.kind === "a") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46))

            let a = x.a;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 127, 15))
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
        }
        else if (x.kind === "b") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 46))

            let b = x.b;
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 130, 15))
>x.b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))
        }
    }
    if (isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))

        let a: number | string = x;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 134, 11))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
    }
    if (isBarComplex(x) && typeof x === "object") {
>isBarComplex : Symbol(isBarComplex, Decl(discriminantsAndTypePredicates.ts, 118, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))

        if (x.kind === "c") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let c = x.c;
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 138, 15))
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
        }
        else if (x.kind === "d") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let d = x.d;
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 141, 15))
>x.d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))
        }
    }
    if (isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))

        let a: number | string = x;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 145, 11))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
    }
    x  // unknown
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 121, 17))
}

