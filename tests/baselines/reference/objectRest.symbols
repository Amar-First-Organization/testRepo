=== tests/cases/conformance/types/difference/objectRest.ts ===

let o = { a: 1, b: 'no' }
>o : Symbol(o, Decl(objectRest.ts, 1, 3))
>a : Symbol(a, Decl(objectRest.ts, 1, 9))
>b : Symbol(b, Decl(objectRest.ts, 1, 15))

var { ...clone } = o;
>clone : Symbol(clone, Decl(objectRest.ts, 2, 5))
>o : Symbol(o, Decl(objectRest.ts, 1, 3))

var { a, ...justB } = o;
>a : Symbol(a, Decl(objectRest.ts, 3, 5), Decl(objectRest.ts, 4, 5))
>justB : Symbol(justB, Decl(objectRest.ts, 3, 8))
>o : Symbol(o, Decl(objectRest.ts, 1, 3))

var { a, b: renamed, ...empty } = o;
>a : Symbol(a, Decl(objectRest.ts, 3, 5), Decl(objectRest.ts, 4, 5))
>b : Symbol(b, Decl(objectRest.ts, 1, 15))
>renamed : Symbol(renamed, Decl(objectRest.ts, 4, 8), Decl(objectRest.ts, 5, 5), Decl(objectRest.ts, 6, 5), Decl(objectRest.ts, 10, 5))
>empty : Symbol(empty, Decl(objectRest.ts, 4, 20))
>o : Symbol(o, Decl(objectRest.ts, 1, 3))

var { ['b']: renamed, ...justA } = o;
>'b' : Symbol(renamed, Decl(objectRest.ts, 4, 8), Decl(objectRest.ts, 5, 5), Decl(objectRest.ts, 6, 5), Decl(objectRest.ts, 10, 5))
>renamed : Symbol(renamed, Decl(objectRest.ts, 4, 8), Decl(objectRest.ts, 5, 5), Decl(objectRest.ts, 6, 5), Decl(objectRest.ts, 10, 5))
>justA : Symbol(justA, Decl(objectRest.ts, 5, 21), Decl(objectRest.ts, 6, 19), Decl(objectRest.ts, 7, 31))
>o : Symbol(o, Decl(objectRest.ts, 1, 3))

var { 'b': renamed, ...justA } = o;
>renamed : Symbol(renamed, Decl(objectRest.ts, 4, 8), Decl(objectRest.ts, 5, 5), Decl(objectRest.ts, 6, 5), Decl(objectRest.ts, 10, 5))
>justA : Symbol(justA, Decl(objectRest.ts, 5, 21), Decl(objectRest.ts, 6, 19), Decl(objectRest.ts, 7, 31))
>o : Symbol(o, Decl(objectRest.ts, 1, 3))

var { b: { '0': n, '1': oooo }, ...justA } = o;
>b : Symbol(b, Decl(objectRest.ts, 1, 15))
>n : Symbol(n, Decl(objectRest.ts, 7, 10))
>oooo : Symbol(oooo, Decl(objectRest.ts, 7, 18))
>justA : Symbol(justA, Decl(objectRest.ts, 5, 21), Decl(objectRest.ts, 6, 19), Decl(objectRest.ts, 7, 31))
>o : Symbol(o, Decl(objectRest.ts, 1, 3))

let o2 = { c: 'terrible idea?', d: 'yes' };
>o2 : Symbol(o2, Decl(objectRest.ts, 9, 3))
>c : Symbol(c, Decl(objectRest.ts, 9, 10))
>d : Symbol(d, Decl(objectRest.ts, 9, 31))

var { d: renamed, ...d } = o2;
>d : Symbol(d, Decl(objectRest.ts, 9, 31))
>renamed : Symbol(renamed, Decl(objectRest.ts, 4, 8), Decl(objectRest.ts, 5, 5), Decl(objectRest.ts, 6, 5), Decl(objectRest.ts, 10, 5))
>d : Symbol(d, Decl(objectRest.ts, 10, 17))
>o2 : Symbol(o2, Decl(objectRest.ts, 9, 3))

let complex: { x: { z, ka }, y: string };
>complex : Symbol(complex, Decl(objectRest.ts, 12, 3))
>x : Symbol(x, Decl(objectRest.ts, 12, 14))
>z : Symbol(z, Decl(objectRest.ts, 12, 19))
>ka : Symbol(ka, Decl(objectRest.ts, 12, 22))
>y : Symbol(y, Decl(objectRest.ts, 12, 28))

let { x: { z, ...nested }, ...rest } = complex;
>x : Symbol(x, Decl(objectRest.ts, 12, 14))
>z : Symbol(z, Decl(objectRest.ts, 13, 10))
>nested : Symbol(nested, Decl(objectRest.ts, 13, 13))
>rest : Symbol(rest, Decl(objectRest.ts, 13, 26))
>complex : Symbol(complex, Decl(objectRest.ts, 12, 3))

