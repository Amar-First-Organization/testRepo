asEnumBasics.ts(7,5): error TS1061: Enum member must have initializer.
asEnumBasics.ts(21,7): error TS2322: Type '"exists"' is not assignable to type 'E1'.
asEnumBasics.ts(23,7): error TS2322: Type '"string"' is not assignable to type 'E1'.
asEnumBasics.ts(33,33): error TS2345: Argument of type '"exists"' is not assignable to parameter of type 'E1'.
asEnumBasics.ts(38,32): error TS2345: Argument of type '"string"' is not assignable to parameter of type 'E1'.


==== asEnumBasics.ts (5 errors) ====
    // Enum without initializers have first member = 0 and successive members = N + 1
    
    // `as enum` does not introduce auto-incrementing behaviour.
    let ExistingShorthand = "exists";
    const E1: enum = {
        NonexistingShorthand, // error -- EnumLiteralExpressions require explicit property definitions.
        ExistingShorthand, // error -- EnumLiteralExpressions require explicit property definitions.
        ~~~~~~~~~~~~~~~~~
!!! error TS1061: Enum member must have initializer.
        Int: 1, // ok
        String: "string", // ok
        Flag: 8, // ok
    };
    
    // Valid assignments
    const nonexist: E1 = E1.NonexistingShorthand; // ok
    const exist: E1 = E1.ExistingShorthand; // ok
    const ival: E1 = E1.Int; // ok
    const sval: E1 = E1.String; // ok
    
    // Assigning values which are not part of the enum despite being present in the enum
    const nonexist_bad: E1 = undefined; // error
    const exist_bad: E1 = "exists"; // error
          ~~~~~~~~~
!!! error TS2322: Type '"exists"' is not assignable to type 'E1'.
    const ival_good: E1 = 1; // ok -- TypeScript is permissive of this in enums, to permit things like bitwise combinations of enum values.
    const sval_bad: E1 = "string"; // error
          ~~~~~~~~
!!! error TS2322: Type '"string"' is not assignable to type 'E1'.
    
    const ival_notpresent: E1 = 4; // ok -- TypeScript is permissive of this in enums, to permit things like bitwise combinations of enum values.
    
    function functest(value: E1) {
        console.log(value);
        return value;
    }
    
    const nonexist_bad2: E1 = functest(undefined); // error
    const exist_bad2: E1 = functest("exists"); // error
                                    ~~~~~~~~
!!! error TS2345: Argument of type '"exists"' is not assignable to parameter of type 'E1'.
    const ival_good2: E1 = functest(1); // ok
    const ival_good3: E1 = functest(4); // ok
    const ival_good4: E1 = functest(E1.Int | E1.Flag); // ok
    const sval_good2: E1 = functest(E1.String);
    const sval_bad2: E1 = functest("string"); // error
                                   ~~~~~~~~
!!! error TS2345: Argument of type '"string"' is not assignable to parameter of type 'E1'.
    