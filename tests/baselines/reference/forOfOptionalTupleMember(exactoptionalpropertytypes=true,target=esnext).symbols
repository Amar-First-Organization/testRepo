//// [tests/cases/compiler/forOfOptionalTupleMember.ts] ////

=== forOfOptionalTupleMember.ts ===
// repro from https://github.com/microsoft/TypeScript/issues/54302

type Item = {
>Item : Symbol(Item, Decl(forOfOptionalTupleMember.ts, 0, 0))

  value: string;
>value : Symbol(value, Decl(forOfOptionalTupleMember.ts, 2, 13))

};

type Foo = [Item?];
>Foo : Symbol(Foo, Decl(forOfOptionalTupleMember.ts, 4, 2))
>Item : Symbol(Item, Decl(forOfOptionalTupleMember.ts, 0, 0))

declare const foo: Foo;
>foo : Symbol(foo, Decl(forOfOptionalTupleMember.ts, 7, 13))
>Foo : Symbol(Foo, Decl(forOfOptionalTupleMember.ts, 4, 2))

for (let item of foo) {
>item : Symbol(item, Decl(forOfOptionalTupleMember.ts, 8, 8))
>foo : Symbol(foo, Decl(forOfOptionalTupleMember.ts, 7, 13))

  item.value;
>item.value : Symbol(value, Decl(forOfOptionalTupleMember.ts, 2, 13))
>item : Symbol(item, Decl(forOfOptionalTupleMember.ts, 8, 8))
>value : Symbol(value, Decl(forOfOptionalTupleMember.ts, 2, 13))
}

type Foo2 = [item?: Item];
>Foo2 : Symbol(Foo2, Decl(forOfOptionalTupleMember.ts, 10, 1))
>Item : Symbol(Item, Decl(forOfOptionalTupleMember.ts, 0, 0))

declare const foo2: Foo2;
>foo2 : Symbol(foo2, Decl(forOfOptionalTupleMember.ts, 13, 13))
>Foo2 : Symbol(Foo2, Decl(forOfOptionalTupleMember.ts, 10, 1))

for (let item of foo2) {
>item : Symbol(item, Decl(forOfOptionalTupleMember.ts, 14, 8))
>foo2 : Symbol(foo2, Decl(forOfOptionalTupleMember.ts, 13, 13))

  item.value;
>item.value : Symbol(value, Decl(forOfOptionalTupleMember.ts, 2, 13))
>item : Symbol(item, Decl(forOfOptionalTupleMember.ts, 14, 8))
>value : Symbol(value, Decl(forOfOptionalTupleMember.ts, 2, 13))
}

function fn1(t: [number, number?, number?]) {
>fn1 : Symbol(fn1, Decl(forOfOptionalTupleMember.ts, 16, 1))
>t : Symbol(t, Decl(forOfOptionalTupleMember.ts, 18, 13))

  for (let num of t) {
>num : Symbol(num, Decl(forOfOptionalTupleMember.ts, 19, 10))
>t : Symbol(t, Decl(forOfOptionalTupleMember.ts, 18, 13))

    num.toString()
>num.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>num : Symbol(num, Decl(forOfOptionalTupleMember.ts, 19, 10))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
  }
}

function fn2(t: [a: number, b?: number, c?: number]) {
>fn2 : Symbol(fn2, Decl(forOfOptionalTupleMember.ts, 22, 1))
>t : Symbol(t, Decl(forOfOptionalTupleMember.ts, 24, 13))

  for (let num of t) {
>num : Symbol(num, Decl(forOfOptionalTupleMember.ts, 25, 10))
>t : Symbol(t, Decl(forOfOptionalTupleMember.ts, 24, 13))

    num.toString()
>num.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>num : Symbol(num, Decl(forOfOptionalTupleMember.ts, 25, 10))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
  }
}

