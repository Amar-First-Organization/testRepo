//// [tests/cases/conformance/es2022/es2022LocalesObjectArgument.ts] ////

=== es2022LocalesObjectArgument.ts ===
const enUS = new Intl.Locale("en-US");
>enUS : Intl.Locale
>     : ^^^^^^^^^^^
>new Intl.Locale("en-US") : Intl.Locale
>                         : ^^^^^^^^^^^
>Intl.Locale : Intl.LocaleConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Locale : Intl.LocaleConstructor
>       : ^^^^^^^^^^^^^^^^^^^^^^
>"en-US" : "en-US"
>        : ^^^^^^^

const deDE = new Intl.Locale("de-DE");
>deDE : Intl.Locale
>     : ^^^^^^^^^^^
>new Intl.Locale("de-DE") : Intl.Locale
>                         : ^^^^^^^^^^^
>Intl.Locale : Intl.LocaleConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Locale : Intl.LocaleConstructor
>       : ^^^^^^^^^^^^^^^^^^^^^^
>"de-DE" : "de-DE"
>        : ^^^^^^^

const jaJP = new Intl.Locale("ja-JP");
>jaJP : Intl.Locale
>     : ^^^^^^^^^^^
>new Intl.Locale("ja-JP") : Intl.Locale
>                         : ^^^^^^^^^^^
>Intl.Locale : Intl.LocaleConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Locale : Intl.LocaleConstructor
>       : ^^^^^^^^^^^^^^^^^^^^^^
>"ja-JP" : "ja-JP"
>        : ^^^^^^^

new Intl.Segmenter(enUS);
>new Intl.Segmenter(enUS) : Intl.Segmenter
>                         : ^^^^^^^^^^^^^^
>Intl.Segmenter : Intl.SegmenterConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Segmenter : Intl.SegmenterConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>enUS : Intl.Locale
>     : ^^^^^^^^^^^

new Intl.Segmenter([deDE, jaJP]);
>new Intl.Segmenter([deDE, jaJP]) : Intl.Segmenter
>                                 : ^^^^^^^^^^^^^^
>Intl.Segmenter : Intl.SegmenterConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Segmenter : Intl.SegmenterConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>[deDE, jaJP] : Intl.Locale[]
>             : ^^^^^^^^^^^^^
>deDE : Intl.Locale
>     : ^^^^^^^^^^^
>jaJP : Intl.Locale
>     : ^^^^^^^^^^^

Intl.Segmenter.supportedLocalesOf(enUS);
>Intl.Segmenter.supportedLocalesOf(enUS) : string[]
>                                        : ^^^^^^^^
>Intl.Segmenter.supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.SegmenterOptions) => string[]
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.Segmenter : Intl.SegmenterConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Segmenter : Intl.SegmenterConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.SegmenterOptions) => string[]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>enUS : Intl.Locale
>     : ^^^^^^^^^^^

Intl.Segmenter.supportedLocalesOf([deDE, jaJP]);
>Intl.Segmenter.supportedLocalesOf([deDE, jaJP]) : string[]
>                                                : ^^^^^^^^
>Intl.Segmenter.supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.SegmenterOptions) => string[]
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.Segmenter : Intl.SegmenterConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Segmenter : Intl.SegmenterConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.SegmenterOptions) => string[]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[deDE, jaJP] : Intl.Locale[]
>             : ^^^^^^^^^^^^^
>deDE : Intl.Locale
>     : ^^^^^^^^^^^
>jaJP : Intl.Locale
>     : ^^^^^^^^^^^

