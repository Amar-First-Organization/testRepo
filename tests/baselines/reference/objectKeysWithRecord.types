=== tests/cases/compiler/objectKeysWithRecord.ts ===
type K = 'foo' | 'bar'
>K : K

const record: Record<K, boolean> = { foo: true, bar: false };
>record : Record<K, boolean>
>{ foo: true, bar: false } : { foo: true; bar: false; }
>foo : true
>true : true
>bar : false
>false : false

Object.keys(record).forEach((key: K) => {
>Object.keys(record).forEach((key: K) => {}) : void
>Object.keys(record).forEach : (callbackfn: (value: K, index: number, array: K[]) => void, thisArg?: any) => void
>Object.keys(record) : K[]
>Object.keys : { <K extends string>(o: Record<K, any>): K[]; (o: {}): string[]; }
>Object : ObjectConstructor
>keys : { <K extends string>(o: Record<K, any>): K[]; (o: {}): string[]; }
>record : Record<K, boolean>
>forEach : (callbackfn: (value: K, index: number, array: K[]) => void, thisArg?: any) => void
>(key: K) => {} : (key: K) => void
>key : K

});

