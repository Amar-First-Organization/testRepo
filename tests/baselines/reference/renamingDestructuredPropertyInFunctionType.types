=== tests/cases/compiler/renamingDestructuredPropertyInFunctionType.ts ===
// GH#37454, GH#41044

type O = { a: string; b: number; c: number; };
>O : { a: string; b: number; c: number; }
>a : string
>b : number
>c : number

type F1 = (arg: number) => any; // OK
>F1 : (arg: number) => any
>arg : number

type F2 = ({ a: string }: O) => any; // Error
>F2 : ({ a: string }: O) => any
>a : any
>string : string

type F3 = ({ a: string, b, c }: O) => any; // Error
>F3 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type F4 = ({ a: string }: O) => any; // Error
>F4 : ({ a: string }: O) => any
>a : any
>string : string

type F5 = ({ a: string, b, c }: O) => any; // Error
>F5 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type F6 = ({ a: string }) => typeof string; // OK
>F6 : ({ a: string }: { a: any; }) => any
>a : any
>string : any
>string : any

type F7 = ({ a: string, b: number }) => typeof number; // Error
>F7 : ({ a: string, b: number }: { a: any; b: any; }) => any
>a : any
>string : any
>b : any
>number : any
>number : any

type F8 = ({ a, b: number }) => typeof number; // OK
>F8 : ({ a, b: number }: { a: any; b: any; }) => any
>a : any
>b : any
>number : any
>number : any

type F9 = ([a, b, c]) => void; // Error
>F9 : ([a, b, c]: [any, any, any]) => void
>a : any
>b : any
>c : any

type G1 = (arg: number) => any; // OK
>G1 : (arg: number) => any
>arg : number

type G2 = ({ a: string }: O) => any; // Error
>G2 : ({ a: string }: O) => any
>a : any
>string : string

type G3 = ({ a: string, b, c }: O) => any; // Error
>G3 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type G4 = ({ a: string }: O) => any; // Error
>G4 : ({ a: string }: O) => any
>a : any
>string : string

type G5 = ({ a: string, b, c }: O) => any; // Error
>G5 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type G6 = ({ a: string }) => typeof string; // OK
>G6 : ({ a: string }: { a: any; }) => any
>a : any
>string : any
>string : any

type G7 = ({ a: string, b: number }) => typeof number; // Error
>G7 : ({ a: string, b: number }: { a: any; b: any; }) => any
>a : any
>string : any
>b : any
>number : any
>number : any

type G8 = ({ a, b: number }) => typeof number; // OK
>G8 : ({ a, b: number }: { a: any; b: any; }) => any
>a : any
>b : any
>number : any
>number : any

type G9 = ([a, b, c]) => void; // Error
>G9 : ([a, b, c]: [any, any, any]) => void
>a : any
>b : any
>c : any

interface I {
  method1(arg: number): any; // OK
>method1 : (arg: number) => any
>arg : number

  method2({ a: string }): any; // Error
>method2 : ({ a: string }: { a: any; }) => any
>a : any
>string : any

  (arg: number): any; // OK
>arg : number

  ({ a: string }): any; // Error
>a : any
>string : any

  new (arg: number): any; // OK
>arg : number

  new ({ a: string }): any; // Error
>a : any
>string : any
}

// Below are OK but renaming should be removed from declaration emit
function f1({ a: string }: O) { }
>f1 : ({ a: string }: O) => void
>a : any
>string : string

const f2 = function({ a: string }: O) { };
>f2 : ({ a: string }: O) => void
>function({ a: string }: O) { } : ({ a: string }: O) => void
>a : any
>string : string

const f3 = ({ a: string, b, c }: O) => { };
>f3 : ({ a: string, b, c }: O) => void
>({ a: string, b, c }: O) => { } : ({ a: string, b, c }: O) => void
>a : any
>string : string
>b : number
>c : number

const f4 = function({ a: string }: O): typeof string { return string; };
>f4 : ({ a: string }: O) => string
>function({ a: string }: O): typeof string { return string; } : ({ a: string }: O) => string
>a : any
>string : string
>string : string
>string : string

const f5 = ({ a: string, b, c }: O): typeof string => '';
>f5 : ({ a: string, b, c }: O) => string
>({ a: string, b, c }: O): typeof string => '' : ({ a: string, b, c }: O) => string
>a : any
>string : string
>b : number
>c : number
>string : string
>'' : ""

const obj1 = {
>obj1 : { method({ a: string }: O): void; }
>{  method({ a: string }: O) { }} : { method({ a: string }: O): void; }

  method({ a: string }: O) { }
>method : ({ a: string }: O) => void
>a : any
>string : string

};
const obj2 = {
>obj2 : { method({ a: string }: O): string; }
>{  method({ a: string }: O): typeof string { return string; }} : { method({ a: string }: O): string; }

  method({ a: string }: O): typeof string { return string; }
>method : ({ a: string }: O) => string
>a : any
>string : string
>string : string
>string : string

};

// In below case `string` should be kept because it is used
function f6({ a: string }: O): typeof string { return "a"; }
>f6 : ({ a: string }: O) => typeof string
>a : any
>string : string
>string : string
>"a" : "a"

