=== tests/cases/compiler/truthinessCallExpressionCoercion.ts ===
function func() { return Math.random() > 0.5; }
>func : () => boolean
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

if (func) { // error
>func : () => boolean
}

function onlyErrorsWhenNonNullable(required: () => boolean, optional?: () => boolean) {
>onlyErrorsWhenNonNullable : (required: () => boolean, optional?: (() => boolean) | undefined) => void
>required : () => boolean
>optional : (() => boolean) | undefined

    if (required) { // error
>required : () => boolean
    }

    if (required()) { // ok
>required() : boolean
>required : () => boolean
    }

    if (optional) { // ok
>optional : (() => boolean) | undefined
    }
}

function checksPropertyAndElementAccess() {
>checksPropertyAndElementAccess : () => void

    const x = {
>x : { foo: { bar(): void; }; }
>{        foo: {            bar() { }        }    } : { foo: { bar(): void; }; }

        foo: {
>foo : { bar(): void; }
>{            bar() { }        } : { bar(): void; }

            bar() { }
>bar : () => void
        }
    }

    if (x.foo.bar) { // error
>x.foo.bar : () => void
>x.foo : { bar(): void; }
>x : { foo: { bar(): void; }; }
>foo : { bar(): void; }
>bar : () => void
    }
    
    if (x.foo['bar']) { // error
>x.foo['bar'] : () => void
>x.foo : { bar(): void; }
>x : { foo: { bar(): void; }; }
>foo : { bar(): void; }
>'bar' : "bar"
    }
}

function maybeBoolean(param: boolean | (() => boolean)) {
>maybeBoolean : (param: boolean | (() => boolean)) => void
>param : boolean | (() => boolean)

    if (param) { // ok
>param : boolean | (() => boolean)
    }
}

class Foo {
>Foo : Foo

    maybeIsUser?: () => boolean;
>maybeIsUser : (() => boolean) | undefined

    isUser() {
>isUser : () => boolean

        return true;
>true : true
    }

    test() {
>test : () => void

        if (this.isUser) { // error
>this.isUser : () => boolean
>this : this
>isUser : () => boolean
        }

        if (this.maybeIsUser) { // ok
>this.maybeIsUser : (() => boolean) | undefined
>this : this
>maybeIsUser : (() => boolean) | undefined
        }
    }
}

