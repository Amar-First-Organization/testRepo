=== tests/cases/conformance/controlFlow/controlFlowInOperator.ts ===
const a = 'a';
>a : "a"
>'a' : "a"

const b = 'b';
>b : "b"
>'b' : "b"

const d = 'd';
>d : "d"
>'d' : "d"

// Type narrowing

type A = { [a]: number; };
>A : { a: number; }
>[a] : number
>a : "a"

type B = { [b]: string; };
>B : { b: string; }
>[b] : string
>b : "b"

declare const c: A | B;
>c : A | B

if ('a' in c) {
>'a' in c : boolean
>'a' : "a"
>c : A | B

    c;      // A
>c : A

    c['a']; // number
>c['a'] : number
>c : A
>'a' : "a"

} else {
    c;      // B
>c : B

    c['b']  // string
>c['b'] : string
>c : B
>'b' : "b"
}

if ('d' in c) {
>'d' in c : boolean
>'d' : "d"
>c : A | B

    c; // (A | B) & { d: unknown; }
>c : (A | B) & { d: unknown; }

} else {
    c; // (A | B)
>c : A | B
}

if (a in c) {
>a in c : boolean
>a : "a"
>c : A | B

    c;    // A
>c : A

    c[a]; // number;
>c[a] : number
>c : A
>a : "a"

} else {
    c;      // B
>c : B

    c[b]  // string
>c[b] : string
>c : B
>b : "b"
}

if (d in c) {
>d in c : boolean
>d : "d"
>c : A | B

    c; // (A | B) & { d: unknown; }
>c : (A | B) & { d: unknown; }

} else {
    c; // (A | B)
>c : A | B
}

// Type widening

declare const e: {};
>e : {}

if ('a' in e) {
>'a' in e : boolean
>'a' : "a"
>e : {}

    e;      // { a: unknown; }
>e : { a: unknown; }

    e['a']  // unknown
>e['a'] : unknown
>e : { a: unknown; }
>'a' : "a"

} else {
    e;      // {}
>e : {}
}

if (a in e) {
>a in e : boolean
>a : "a"
>e : {}

    e;      // { a: unknown; }
>e : { a: unknown; }

    e[a]    // unknown
>e[a] : unknown
>e : { a: unknown; }
>a : "a"

} else {
    e;      // {}
>e : {}
}

// Widening different types

declare const e1: any;
>e1 : any

if ('a' in e1) {
>'a' in e1 : boolean
>'a' : "a"
>e1 : any

    e1;      // any
>e1 : any
}

declare const e2: object;
>e2 : object

if ('a' in e2) {
>'a' in e2 : boolean
>'a' : "a"
>e2 : object

    e2;      // object & { a: unknown; }
>e2 : object & { a: unknown; }

    e2['a']; // unknown
>e2['a'] : unknown
>e2 : object & { a: unknown; }
>'a' : "a"
}

declare const e3: { b: string; } & { c: number; };
>e3 : { b: string; } & { c: number; }
>b : string
>c : number

if ('a' in e3) {
>'a' in e3 : boolean
>'a' : "a"
>e3 : { b: string; } & { c: number; }

    e3;      // { a: unknown; b: string; } & { c: number }
>e3 : { c: number; } & { b: string; a: unknown; }

    e3['a']; // unknown
>e3['a'] : unknown
>e3 : { c: number; } & { b: string; a: unknown; }
>'a' : "a"
}

interface C {
    cProp: string;
>cProp : string
}
interface D {
    dProp: number;
>dProp : number
}
declare const e4: C & D;
>e4 : C & D

if ('a' in e4) {
>'a' in e4 : boolean
>'a' : "a"
>e4 : C & D

    e4;      // C & D & { a: unknown; }
>e4 : (C & D) & { a: unknown; }

    e4['a'];  // unknown
>e4['a'] : unknown
>e4 : (C & D) & { a: unknown; }
>'a' : "a"
}

declare const e5: never;
>e5 : never

if ('a' in e5) {
>'a' in e5 : boolean
>'a' : "a"
>e5 : never

    e5;      // never
>e5 : never
}

declare const e6: { b: string; (arg: string): boolean; }
>e6 : { (arg: string): boolean; b: string; }
>b : string
>arg : string

if ('a' in e6) {
>'a' in e6 : boolean
>'a' : "a"
>e6 : { (arg: string): boolean; b: string; }

    e6;         // { a: unknown; b: string; (arg: string): boolean; }
>e6 : { (arg: string): boolean; b: string; a: unknown; }

    e6['a'];    // unknown
>e6['a'] : unknown
>e6 : { (arg: string): boolean; b: string; a: unknown; }
>'a' : "a"

    e6('');     // boolean;
>e6('') : boolean
>e6 : { (arg: string): boolean; b: string; a: unknown; }
>'' : ""
}

declare const e7: { b: string; new (arg: string): boolean; }
>e7 : { new (arg: string): boolean; b: string; }
>b : string
>arg : string

if ('a' in e7) {
>'a' in e7 : boolean
>'a' : "a"
>e7 : { new (arg: string): boolean; b: string; }

    e7;         // { a: unknown; b: string; new (arg: string): boolean; }
>e7 : { new (arg: string): boolean; b: string; a: unknown; }

    e7['a'];    // unknown
>e7['a'] : unknown
>e7 : { new (arg: string): boolean; b: string; a: unknown; }
>'a' : "a"

    new e7(''); // boolean;
>new e7('') : boolean
>e7 : { new (arg: string): boolean; b: string; a: unknown; }
>'' : ""
}

declare const e8: { b: string; [index: number]: boolean; }
>e8 : { [index: number]: boolean; b: string; }
>b : string
>index : number

if ('a' in e8) {
>'a' in e8 : boolean
>'a' : "a"
>e8 : { [index: number]: boolean; b: string; }

    e8;         // { a: unknown; b: string; [index: number]: boolean; }
>e8 : { [index: number]: boolean; b: string; a: unknown; }

    e8['a'];    // unknown
>e8['a'] : unknown
>e8 : { [index: number]: boolean; b: string; a: unknown; }
>'a' : "a"

    e8[42];     // boolean;
>e8[42] : boolean
>e8 : { [index: number]: boolean; b: string; a: unknown; }
>42 : 42
}

// More complex control flows

e;              // {}
>e : {}

if ( 'a' in e ) {
>'a' in e : boolean
>'a' : "a"
>e : {}

    e;          // { a: unknown; }
>e : { a: unknown; }

    if ( 'b' in e ) {
>'b' in e : boolean
>'b' : "b"
>e : { a: unknown; }

        e;      // { a: unknown; b: unknown; }
>e : { a: unknown; b: unknown; }

        e['a']; // unknown
>e['a'] : unknown
>e : { a: unknown; b: unknown; }
>'a' : "a"

        e['b']; // unknown
>e['b'] : unknown
>e : { a: unknown; b: unknown; }
>'b' : "b"

    } else {
        e;      // { a: unknown; }
>e : { a: unknown; }
    }
    e;          // { a: unknown; }
>e : { a: unknown; }
}
e;              // {}
>e : {}

e;              // {}
>e : {}

if ( a in e ) {
>a in e : boolean
>a : "a"
>e : {}

    e;          // { a: unknown; }
>e : { a: unknown; }

    if ( b in e ) {
>b in e : boolean
>b : "b"
>e : { a: unknown; }

        e;      // { a: unknown; b: unknown; }
>e : { a: unknown; b: unknown; }

        e[a];   // unknown
>e[a] : unknown
>e : { a: unknown; b: unknown; }
>a : "a"

        e[b];   // unknown
>e[b] : unknown
>e : { a: unknown; b: unknown; }
>b : "b"

    } else {
        e;      // { a: unknown; }
>e : { a: unknown; }
    }
    e;          // { a: unknown; }
>e : { a: unknown; }
}
e;              // {}
>e : {}

e;          // {}
>e : {}

if ( 'a' in e ) {
>'a' in e : boolean
>'a' : "a"
>e : {}

    e;      // { a: unknown; }
>e : { a: unknown; }

    e['a']; // unknown
>e['a'] : unknown
>e : { a: unknown; }
>'a' : "a"

} else if ( 'b' in e ) {
>'b' in e : boolean
>'b' : "b"
>e : {}

    e;      // { b: unknown; }
>e : { b: unknown; }

    e['b']; // unknown
>e['b'] : unknown
>e : { b: unknown; }
>'b' : "b"

} else {
    e;      // {}
>e : {}
}
e;          // {}
>e : {}

e;          // {}
>e : {}

if ( a in e ) {
>a in e : boolean
>a : "a"
>e : {}

    e;      // { a: unknown; }
>e : { a: unknown; }

    e[a];   // unknown
>e[a] : unknown
>e : { a: unknown; }
>a : "a"

} else if ( b in e ) {
>b in e : boolean
>b : "b"
>e : {}

    e;      // { b: unknown; }
>e : { b: unknown; }

    e[b];   // unknown
>e[b] : unknown
>e : { b: unknown; }
>b : "b"

} else {
    e;      // {}
>e : {}
}
e;          // {}
>e : {}

declare const f: Array<{}>
>f : {}[]

for (const g of f) {
>g : {}
>f : {}[]

    g;          // {}
>g : {}

    if ('a' in g) {
>'a' in g : boolean
>'a' : "a"
>g : {}

        g;      // { a: unknown; }
>g : { a: unknown; }

        g['a']; // unknown
>g['a'] : unknown
>g : { a: unknown; }
>'a' : "a"
    }
    g;          // {}
>g : {}
}

for (const g of f) {
>g : {}
>f : {}[]

    g;          // {}
>g : {}

    if (a in g) {
>a in g : boolean
>a : "a"
>g : {}

        g;      // { a: unknown; }
>g : { a: unknown; }

        g[a];   // unknown
>g[a] : unknown
>g : { a: unknown; }
>a : "a"
    }
    g;          // {}
>g : {}
}

function h(i: {}) {
>h : (i: {}) => void
>i : {}

    if ( 'a' in i ) {
>'a' in i : boolean
>'a' : "a"
>i : {}

        i;  // { a: unknown; }
>i : { a: unknown; }

    } else if ( 'b' in i ) {
>'b' in i : boolean
>'b' : "b"
>i : {}

        i;  // { b: unknown; }
>i : { b: unknown; }

    } else {
        return;
    }
    i; // { a: unknown; } | { b: unknown; }
>i : { a: unknown; } | { b: unknown; }
}
h(e);
>h(e) : void
>h : (i: {}) => void
>e : {}

declare const j: { a: 'first'; b: string; } | { a: 'second'; c: string; };
>j : { a: 'first'; b: string; } | { a: 'second'; c: string; }
>a : "first"
>b : string
>a : "second"
>c : string

if (j.a === 'first') {
>j.a === 'first' : boolean
>j.a : "first" | "second"
>j : { a: "first"; b: string; } | { a: "second"; c: string; }
>a : "first" | "second"
>'first' : "first"

    j;          // { a: 'first'; b: string; }
>j : { a: "first"; b: string; }

    j['b'];     // string
>j['b'] : string
>j : { a: "first"; b: string; }
>'b' : "b"

    if ( 'c' in j ) {
>'c' in j : boolean
>'c' : "c"
>j : { a: "first"; b: string; }

        j;      // { a: 'first'; b: string; c: unknown; }
>j : { a: "first"; b: string; c: unknown; }

        j['b']; // string
>j['b'] : string
>j : { a: "first"; b: string; c: unknown; }
>'b' : "b"

        j['c']; // unknown
>j['c'] : unknown
>j : { a: "first"; b: string; c: unknown; }
>'c' : "c"
    }
}
j; // { a: 'first'; b: string; } | { a: 'second'; c: string; }
>j : { a: "first"; b: string; } | { a: "second"; c: string; }

