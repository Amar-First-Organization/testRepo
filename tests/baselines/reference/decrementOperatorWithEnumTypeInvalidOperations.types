=== tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithEnumTypeInvalidOperations.ts ===
// -- operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>A : ENUM1.A
>B : ENUM1.B
>"" : ENUM1.

// enum type var
var ResultIsNumber1 = --ENUM;
>ResultIsNumber1 : number
>--ENUM : number
>ENUM : any (error)

var ResultIsNumber2 = --ENUM1;
>ResultIsNumber2 : number
>--ENUM1 : number
>ENUM1 : any (error)

var ResultIsNumber3 = ENUM--;
>ResultIsNumber3 : number
>ENUM-- : number
>ENUM : any (error)

var ResultIsNumber4 = ENUM1--;
>ResultIsNumber4 : number
>ENUM1-- : number
>ENUM1 : any (error)

// enum type expressions
var ResultIsNumber5 = --(ENUM["A"] + ENUM.B);
>ResultIsNumber5 : number
>--(ENUM["A"] + ENUM.B) : number
>(ENUM["A"] + ENUM.B) : any (error)
>ENUM["A"] + ENUM.B : any (error)
>ENUM["A"] : any
>ENUM : typeof ENUM
>"A" : "A"
>ENUM.B : any (error)
>ENUM : typeof ENUM
>B : any (error)

var ResultIsNumber6 = (ENUM.A + ENUM["B"])--;
>ResultIsNumber6 : number
>(ENUM.A + ENUM["B"])-- : number
>(ENUM.A + ENUM["B"]) : any (error)
>ENUM.A + ENUM["B"] : any (error)
>ENUM.A : any (error)
>ENUM : typeof ENUM
>A : any (error)
>ENUM["B"] : any
>ENUM : typeof ENUM
>"B" : "B"

// miss assignment operator
--ENUM;
>--ENUM : number
>ENUM : any (error)

--ENUM1;
>--ENUM1 : number
>ENUM1 : any (error)

ENUM--;
>ENUM-- : number
>ENUM : any (error)

ENUM1--;
>ENUM1-- : number
>ENUM1 : any (error)

