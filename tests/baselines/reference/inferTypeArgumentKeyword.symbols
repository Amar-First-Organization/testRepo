=== tests/cases/conformance/types/typeParameters/typeArgumentLists/inferTypeArgumentKeyword.ts ===
declare function foo<A, B, C>(x: A, y: B, z: { z: C }): A & B & C;
>foo : Symbol(foo, Decl(inferTypeArgumentKeyword.ts, 0, 0))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 0, 21))
>B : Symbol(B, Decl(inferTypeArgumentKeyword.ts, 0, 23))
>C : Symbol(C, Decl(inferTypeArgumentKeyword.ts, 0, 26))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 0, 30))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 0, 21))
>y : Symbol(y, Decl(inferTypeArgumentKeyword.ts, 0, 35))
>B : Symbol(B, Decl(inferTypeArgumentKeyword.ts, 0, 23))
>z : Symbol(z, Decl(inferTypeArgumentKeyword.ts, 0, 41))
>z : Symbol(z, Decl(inferTypeArgumentKeyword.ts, 0, 46))
>C : Symbol(C, Decl(inferTypeArgumentKeyword.ts, 0, 26))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 0, 21))
>B : Symbol(B, Decl(inferTypeArgumentKeyword.ts, 0, 23))
>C : Symbol(C, Decl(inferTypeArgumentKeyword.ts, 0, 26))

// good
foo<infer A, {x: string}, A>({y: 12}, {x: "yes"}, {z: {y: 12}});
>foo : Symbol(foo, Decl(inferTypeArgumentKeyword.ts, 0, 0))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 3, 9))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 3, 14))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 3, 9))
>y : Symbol(y, Decl(inferTypeArgumentKeyword.ts, 3, 30))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 3, 39))
>z : Symbol(z, Decl(inferTypeArgumentKeyword.ts, 3, 51))
>y : Symbol(y, Decl(inferTypeArgumentKeyword.ts, 3, 55))

// error on 3rd arg
foo<infer A, {x: string}, A>({y: 12}, {x: "yes"}, {z: 12});
>foo : Symbol(foo, Decl(inferTypeArgumentKeyword.ts, 0, 0))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 6, 9))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 6, 14))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 6, 9))
>y : Symbol(y, Decl(inferTypeArgumentKeyword.ts, 6, 30))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 6, 39))
>z : Symbol(z, Decl(inferTypeArgumentKeyword.ts, 6, 51))

// error on first arg
foo<A, {x: string}, infer A>({y: 12}, {x: "yes"}, {z: 12});
>foo : Symbol(foo, Decl(inferTypeArgumentKeyword.ts, 0, 0))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 9, 25))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 9, 8))
>A : Symbol(A, Decl(inferTypeArgumentKeyword.ts, 9, 25))
>y : Symbol(y, Decl(inferTypeArgumentKeyword.ts, 9, 30))
>x : Symbol(x, Decl(inferTypeArgumentKeyword.ts, 9, 39))
>z : Symbol(z, Decl(inferTypeArgumentKeyword.ts, 9, 51))

