=== tests/cases/compiler/isArray.ts ===
interface MyArray<T> extends Array<T> { manifest: any; }
>manifest : any

interface MyReadOnlyArray<T> extends ReadonlyArray<T> { manifest: any; }
>manifest : any

function fn1(arg: string | string[]) {
>fn1 : (arg: string | string[]) => void
>arg : string | string[]

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | string[]
>arg.push("") : number
>arg.push : (...items: string[]) => number
>arg : string[]
>push : (...items: string[]) => number
>"" : ""
}

function fn2(arg: unknown) {
>fn2 : (arg: unknown) => void
>arg : unknown

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : unknown
>arg.push("") : number
>arg.push : (...items: any[]) => number
>arg : any[]
>push : (...items: any[]) => number
>"" : ""
}

function fn3(arg: object) {
>fn3 : (arg: object) => void
>arg : object

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : object
>arg.push("") : number
>arg.push : (...items: any[]) => number
>arg : object & any[]
>push : (...items: any[]) => number
>"" : ""
}

function fn4(arg: {}) {
>fn4 : (arg: {}) => void
>arg : {}

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : {}
>arg.push("") : number
>arg.push : (...items: any[]) => number
>arg : any[]
>push : (...items: any[]) => number
>"" : ""
}

function fn5(arg: string | ReadonlyArray<string>) {
>fn5 : (arg: string | readonly string[]) => void
>arg : string | readonly string[]

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | readonly string[]
>arg.push(10) : any
>arg.push : any
>arg : readonly string[]
>push : any
>10 : 10

    if (Array.isArray(arg)) arg.push(""); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | readonly string[]
>arg.push("") : any
>arg.push : any
>arg : readonly string[]
>push : any
>"" : ""

    if (Array.isArray(arg)) arg.indexOf(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | readonly string[]
>arg.indexOf("") : number
>arg.indexOf : (searchElement: string, fromIndex?: number | undefined) => number
>arg : readonly string[]
>indexOf : (searchElement: string, fromIndex?: number | undefined) => number
>"" : ""

    if (!Array.isArray(arg)) arg.toUpperCase(); // Should OK
>!Array.isArray(arg) : boolean
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | readonly string[]
>arg.toUpperCase() : string
>arg.toUpperCase : () => string
>arg : string
>toUpperCase : () => string
}

function fn6(arg: string | string[]) {
>fn6 : (arg: string | string[]) => void
>arg : string | string[]

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | string[]
>arg.push(10) : number
>arg.push : (...items: string[]) => number
>arg : string[]
>push : (...items: string[]) => number
>10 : 10
}

function fn7(arg: boolean | number[] | string[], stringAndNumber: string & number) {
>fn7 : (arg: boolean | string[] | number[], stringAndNumber: never) => void
>arg : boolean | string[] | number[]
>stringAndNumber : never

    if (Array.isArray(arg)) arg.push(stringAndNumber); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : boolean | string[] | number[]
>arg.push(stringAndNumber) : number
>arg.push : ((...items: string[]) => number) | ((...items: number[]) => number)
>arg : string[] | number[]
>push : ((...items: string[]) => number) | ((...items: number[]) => number)
>stringAndNumber : never
}

function fn8(arg: string | number[] | readonly string[]) {
>fn8 : (arg: string | readonly string[] | number[]) => void
>arg : string | readonly string[] | number[]

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | readonly string[] | number[]
>arg.push(10) : any
>arg.push : any
>arg : readonly string[] | number[]
>push : any
>10 : 10
}

function fn9(arg: string | number[] | readonly string[]) {
>fn9 : (arg: string | readonly string[] | number[]) => void
>arg : string | readonly string[] | number[]

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | readonly string[] | number[]
>arg.push(10) : any
>arg.push : any
>arg : readonly string[] | number[]
>push : any
>10 : 10
}

function fn10(arg: string | MyArray<string>) {
>fn10 : (arg: string | MyArray<string>) => void
>arg : string | MyArray<string>

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyArray<string>
>arg.push(10) : number
>arg.push : (...items: string[]) => number
>arg : MyArray<string>
>push : (...items: string[]) => number
>10 : 10

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyArray<string>
>arg.push("") : number
>arg.push : (...items: string[]) => number
>arg : MyArray<string>
>push : (...items: string[]) => number
>"" : ""

    if (Array.isArray(arg)) arg.manifest; // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyArray<string>
>arg.manifest : any
>arg : MyArray<string>
>manifest : any
}

function fn11(arg: string | MyReadOnlyArray<string>) {
>fn11 : (arg: string | MyReadOnlyArray<string>) => void
>arg : string | MyReadOnlyArray<string>

    if (Array.isArray(arg)) arg.push(""); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyReadOnlyArray<string>
>arg.push("") : any
>arg.push : any
>arg : MyReadOnlyArray<string>
>push : any
>"" : ""

    if (Array.isArray(arg)) arg.indexOf(10); // Should FAIL
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyReadOnlyArray<string>
>arg.indexOf(10) : number
>arg.indexOf : (searchElement: string, fromIndex?: number | undefined) => number
>arg : MyReadOnlyArray<string>
>indexOf : (searchElement: string, fromIndex?: number | undefined) => number
>10 : 10

    if (Array.isArray(arg)) arg.indexOf(""); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyReadOnlyArray<string>
>arg.indexOf("") : number
>arg.indexOf : (searchElement: string, fromIndex?: number | undefined) => number
>arg : MyReadOnlyArray<string>
>indexOf : (searchElement: string, fromIndex?: number | undefined) => number
>"" : ""

    if (Array.isArray(arg)) arg.manifest; // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : string | MyReadOnlyArray<string>
>arg.manifest : any
>arg : MyReadOnlyArray<string>
>manifest : any
}

function fn12<T>(arg: T | T[], t: T) {
>fn12 : <T>(arg: T | T[], t: T) => void
>arg : T | T[]
>t : T

    if (Array.isArray(arg)) arg.push(t); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T | T[]
>arg.push(t) : number
>arg.push : (...items: T[]) => number
>arg : T[]
>push : (...items: T[]) => number
>t : T
}

function fn13<T>(arg: T | ReadonlyArray<T>, t: T) {
>fn13 : <T>(arg: T | readonly T[], t: T) => void
>arg : T | readonly T[]
>t : T

    if (Array.isArray(arg)) arg.push(t); // Should fail
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T | readonly T[]
>arg.push(t) : any
>arg.push : any
>arg : readonly T[]
>push : any
>t : T

    if (Array.isArray(arg)) arg.indexOf(t); // OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T | readonly T[]
>arg.indexOf(t) : number
>arg.indexOf : (searchElement: T, fromIndex?: number | undefined) => number
>arg : readonly T[]
>indexOf : (searchElement: T, fromIndex?: number | undefined) => number
>t : T
}

function fn14<T>(arg: T | [T], t: T) {
>fn14 : <T>(arg: T | [T], t: T) => void
>arg : T | [T]
>t : T

    if (Array.isArray(arg)) arg.push(t); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T | [T]
>arg.push(t) : number
>arg.push : (...items: T[]) => number
>arg : [T]
>push : (...items: T[]) => number
>t : T
}

function fn15<T>(arg: T | readonly [T], t: T) {
>fn15 : <T>(arg: T | readonly [T], t: T) => void
>arg : T | readonly [T]
>t : T

    if (Array.isArray(arg)) arg.push(t); // Should fail
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T | readonly [T]
>arg.push(t) : any
>arg.push : any
>arg : readonly [T]
>push : any
>t : T

    if (Array.isArray(arg)) arg.indexOf(t); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T | readonly [T]
>arg.indexOf(t) : number
>arg.indexOf : (searchElement: T, fromIndex?: number | undefined) => number
>arg : readonly [T]
>indexOf : (searchElement: T, fromIndex?: number | undefined) => number
>t : T
}

function fn16<T extends string | string[]>(arg: T) {
>fn16 : <T extends string | string[]>(arg: T) => void
>arg : T

    if (Array.isArray(arg)) arg.push("10"); // Should OK
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T
>arg.push("10") : number
>arg.push : (...items: string[]) => number
>arg : T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>push : (...items: string[]) => number
>"10" : "10"

    if (Array.isArray(arg)) arg.push(10); // Should fail
>Array.isArray(arg) : boolean
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>arg : T
>arg.push(10) : number
>arg.push : (...items: string[]) => number
>arg : T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>push : (...items: string[]) => number
>10 : 10
}

function fn17() {
>fn17 : () => void

    const s: Array<string | string[]> = [];
>s : (string | string[])[]
>[] : never[]

    const arrs = s.filter(Array.isArray);
>arrs : string[][]
>s.filter(Array.isArray) : string[][]
>s.filter : { <S extends string | string[]>(callbackfn: (value: string | string[], index: number, array: (string | string[])[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string | string[], index: number, array: (string | string[])[]) => unknown, thisArg?: any): (string | string[])[]; }
>s : (string | string[])[]
>filter : { <S extends string | string[]>(callbackfn: (value: string | string[], index: number, array: (string | string[])[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string | string[], index: number, array: (string | string[])[]) => unknown, thisArg?: any): (string | string[])[]; }
>Array.isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never
>Array : ArrayConstructor
>isArray : <T>(arg: T) => arg is T extends readonly any[] ? T : any[] extends T ? T & any[] : never

    arrs.push(["one"]); // Should OK
>arrs.push(["one"]) : number
>arrs.push : (...items: string[][]) => number
>arrs : string[][]
>push : (...items: string[][]) => number
>["one"] : string[]
>"one" : "one"

    arrs.push("str");  // Should fail
>arrs.push("str") : number
>arrs.push : (...items: string[][]) => number
>arrs : string[][]
>push : (...items: string[][]) => number
>"str" : "str"
}

