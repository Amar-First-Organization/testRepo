=== tests/cases/conformance/expressions/throwExpressions/throwExpressions.esnext.ts ===
declare const condition: boolean;
>condition : Symbol(condition, Decl(throwExpressions.esnext.ts, 0, 13))

const a = condition ? 1 : throw new Error();
>a : Symbol(a, Decl(throwExpressions.esnext.ts, 1, 5))
>condition : Symbol(condition, Decl(throwExpressions.esnext.ts, 0, 13))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const b = condition || throw new Error();
>b : Symbol(b, Decl(throwExpressions.esnext.ts, 2, 5))
>condition : Symbol(condition, Decl(throwExpressions.esnext.ts, 0, 13))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

function c(d = throw new TypeError()) { }
>c : Symbol(c, Decl(throwExpressions.esnext.ts, 2, 41))
>d : Symbol(d, Decl(throwExpressions.esnext.ts, 3, 11))
>TypeError : Symbol(TypeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const x = "x", y = "y", z = "z";
>x : Symbol(x, Decl(throwExpressions.esnext.ts, 5, 5))
>y : Symbol(y, Decl(throwExpressions.esnext.ts, 5, 14))
>z : Symbol(z, Decl(throwExpressions.esnext.ts, 5, 23))

const w = condition ? throw true ? x : y : z;
>w : Symbol(w, Decl(throwExpressions.esnext.ts, 6, 5))
>condition : Symbol(condition, Decl(throwExpressions.esnext.ts, 0, 13))
>x : Symbol(x, Decl(throwExpressions.esnext.ts, 5, 5))
>y : Symbol(y, Decl(throwExpressions.esnext.ts, 5, 14))
>z : Symbol(z, Decl(throwExpressions.esnext.ts, 5, 23))

