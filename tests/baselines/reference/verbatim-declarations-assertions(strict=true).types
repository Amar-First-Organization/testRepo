//// [tests/cases/compiler/verbatim-declarations-assertions.ts] ////

=== assertToTypeReferences.ts ===
type P = { } & { name: string }
>P : { name: string; }
>name : string

export let vLet = null! as P
>vLet : { name: string; }
>null! as P : { name: string; }
>null! : never

export const vConst = null! as P
>vConst : { name: string; }
>null! as P : { name: string; }
>null! : never

export function fn(p = null! as P) {}
>fn : (p?: { name: string; }) => void
>p : { name: string; }
>null! as P : { name: string; }
>null! : never

export function fnWithRequiredDefaultParam(p = null! as P, req: number) {}
>fnWithRequiredDefaultParam : (p: { name: string; } | undefined, req: number) => void
>p : { name: string; }
>null! as P : { name: string; }
>null! : never
>req : number

export class C {
>C : C

    field = null! as P
>field : { name: string; }
>null! as P : { name: string; }
>null! : never

    readonly roFiled = null! as P;
>roFiled : { name: string; }
>null! as P : { name: string; }
>null! : never

    method(p = null! as P) {}
>method : (p?: { name: string; }) => void
>p : { name: string; }
>null! as P : { name: string; }
>null! : never

    methodWithRequiredDefault(p = null! as P, req: number) {}
>methodWithRequiredDefault : (p: { name: string; } | undefined, req: number) => void
>p : { name: string; }
>null! as P : { name: string; }
>null! : never
>req : number

    methodWithRequiredDefault2(p = null! as P, req: number) {}
>methodWithRequiredDefault2 : (p: { name: string; } | undefined, req: number) => void
>p : { name: string; }
>null! as P : { name: string; }
>null! : never
>req : number

    constructor(public ctorField = null! as P) {}
>ctorField : { name: string; }
>null! as P : { name: string; }
>null! : never
}

export default null! as P;
>null! as P : { name: string; }
>null! : never

=== assertToTypeLiteral.ts ===
export let vLet = null! as {} & { name: string }
>vLet : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

export const vConst = null! as {} & { name: string }
>vConst : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

export function fn(p = null! as {} & { name: string }) {}
>fn : (p?: { name: string; }) => void
>p : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

export function fnWithRequiredDefaultParam(p = null! as {} & { name: string }, req: number) {}
>fnWithRequiredDefaultParam : (p: { name: string; } | undefined, req: number) => void
>p : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string
>req : number

export class C {
>C : C

    field = null! as {} & { name: string }
>field : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

    readonly roFiled = null! as {} & { name: string };
>roFiled : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

    method(p = null! as {} & { name: string }) {}
>method : (p?: { name: string; }) => void
>p : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

    methodWithRequiredDefault(p = null! as {} & { name: string }, req: number) {}
>methodWithRequiredDefault : (p: { name: string; } | undefined, req: number) => void
>p : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string
>req : number

    constructor(public ctorField = null! as {} & { name: string }) {}
>ctorField : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

    get x() { return null! as {} & { name: string } }
>x : { name: string; }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

    set x(v) { }
>x : { name: string; }
>v : { name: string; }
}

export default null! as {} & { name: string }
>null! as {} & { name: string } : { name: string; }
>null! : never
>name : string

