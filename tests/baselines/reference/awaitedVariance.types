=== tests/cases/conformance/types/awaited/awaitedVariance.ts ===
declare let p0: Promise<number>;
>p0 : Promise<number>

declare let p1: Promise<Promise<number>>;
>p1 : Promise<Promise<number>>

declare let p2: Promise<awaited number>;
>p2 : Promise<number>

p0 = p1;
>p0 = p1 : Promise<Promise<number>>
>p0 : Promise<number>
>p1 : Promise<Promise<number>>

p0 = p2;
>p0 = p2 : Promise<number>
>p0 : Promise<number>
>p2 : Promise<number>

p1 = p0;
>p1 = p0 : Promise<number>
>p1 : Promise<Promise<number>>
>p0 : Promise<number>

p1 = p2;
>p1 = p2 : Promise<number>
>p1 : Promise<Promise<number>>
>p2 : Promise<number>

p2 = p0;
>p2 = p0 : Promise<number>
>p2 : Promise<number>
>p0 : Promise<number>

p2 = p1;
>p2 = p1 : Promise<Promise<number>>
>p2 : Promise<number>
>p1 : Promise<Promise<number>>

function fn1<T>(p0: Promise<T>, p1: Promise<Promise<T>>, p2: Promise<awaited T>) {
>fn1 : <T>(p0: Promise<T>, p1: Promise<Promise<T>>, p2: Promise<awaited T>) => void
>p0 : Promise<T>
>p1 : Promise<Promise<T>>
>p2 : Promise<awaited T>

    p0 = p1;
>p0 = p1 : Promise<Promise<T>>
>p0 : Promise<T>
>p1 : Promise<Promise<T>>

    p0 = p2;
>p0 = p2 : Promise<awaited T>
>p0 : Promise<T>
>p2 : Promise<awaited T>

    p1 = p0;
>p1 = p0 : Promise<T>
>p1 : Promise<Promise<T>>
>p0 : Promise<T>

    p1 = p2;
>p1 = p2 : Promise<awaited T>
>p1 : Promise<Promise<T>>
>p2 : Promise<awaited T>

    p2 = p0;
>p2 = p0 : Promise<T>
>p2 : Promise<awaited T>
>p0 : Promise<T>

    p2 = p1;
>p2 = p1 : Promise<Promise<T>>
>p2 : Promise<awaited T>
>p1 : Promise<Promise<T>>
}

declare let pl0: PromiseLike<number>;
>pl0 : PromiseLike<number>

declare let pl1: PromiseLike<PromiseLike<number>>;
>pl1 : PromiseLike<PromiseLike<number>>

declare let pl2: PromiseLike<awaited number>;
>pl2 : PromiseLike<number>

pl0 = pl1;
>pl0 = pl1 : PromiseLike<PromiseLike<number>>
>pl0 : PromiseLike<number>
>pl1 : PromiseLike<PromiseLike<number>>

pl0 = pl2;
>pl0 = pl2 : PromiseLike<number>
>pl0 : PromiseLike<number>
>pl2 : PromiseLike<number>

pl1 = pl0;
>pl1 = pl0 : PromiseLike<number>
>pl1 : PromiseLike<PromiseLike<number>>
>pl0 : PromiseLike<number>

pl1 = pl2;
>pl1 = pl2 : PromiseLike<number>
>pl1 : PromiseLike<PromiseLike<number>>
>pl2 : PromiseLike<number>

pl2 = pl0;
>pl2 = pl0 : PromiseLike<number>
>pl2 : PromiseLike<number>
>pl0 : PromiseLike<number>

pl2 = pl1;
>pl2 = pl1 : PromiseLike<PromiseLike<number>>
>pl2 : PromiseLike<number>
>pl1 : PromiseLike<PromiseLike<number>>

function fn2<T>(pl0: PromiseLike<T>, pl1: PromiseLike<PromiseLike<T>>, pl2: PromiseLike<awaited T>) {
>fn2 : <T>(pl0: PromiseLike<T>, pl1: PromiseLike<PromiseLike<T>>, pl2: PromiseLike<awaited T>) => void
>pl0 : PromiseLike<T>
>pl1 : PromiseLike<PromiseLike<T>>
>pl2 : PromiseLike<awaited T>

    pl0 = pl1;
>pl0 = pl1 : PromiseLike<PromiseLike<T>>
>pl0 : PromiseLike<T>
>pl1 : PromiseLike<PromiseLike<T>>

    pl0 = pl2;
>pl0 = pl2 : PromiseLike<awaited T>
>pl0 : PromiseLike<T>
>pl2 : PromiseLike<awaited T>

    pl1 = pl0;
>pl1 = pl0 : PromiseLike<T>
>pl1 : PromiseLike<PromiseLike<T>>
>pl0 : PromiseLike<T>

    pl1 = pl2;
>pl1 = pl2 : PromiseLike<awaited T>
>pl1 : PromiseLike<PromiseLike<T>>
>pl2 : PromiseLike<awaited T>

    pl2 = pl0;
>pl2 = pl0 : PromiseLike<T>
>pl2 : PromiseLike<awaited T>
>pl0 : PromiseLike<T>

    pl2 = pl1;
>pl2 = pl1 : PromiseLike<PromiseLike<T>>
>pl2 : PromiseLike<awaited T>
>pl1 : PromiseLike<PromiseLike<T>>
}

pl0 = p0;
>pl0 = p0 : Promise<number>
>pl0 : PromiseLike<number>
>p0 : Promise<number>

pl0 = p1;
>pl0 = p1 : Promise<Promise<number>>
>pl0 : PromiseLike<number>
>p1 : Promise<Promise<number>>

pl0 = p2;
>pl0 = p2 : Promise<number>
>pl0 : PromiseLike<number>
>p2 : Promise<number>

pl1 = p0;
>pl1 = p0 : Promise<number>
>pl1 : PromiseLike<PromiseLike<number>>
>p0 : Promise<number>

pl1 = p1;
>pl1 = p1 : Promise<Promise<number>>
>pl1 : PromiseLike<PromiseLike<number>>
>p1 : Promise<Promise<number>>

pl1 = p2;
>pl1 = p2 : Promise<number>
>pl1 : PromiseLike<PromiseLike<number>>
>p2 : Promise<number>

pl2 = p0;
>pl2 = p0 : Promise<number>
>pl2 : PromiseLike<number>
>p0 : Promise<number>

pl2 = p1;
>pl2 = p1 : Promise<Promise<number>>
>pl2 : PromiseLike<number>
>p1 : Promise<Promise<number>>

pl2 = p2;
>pl2 = p2 : Promise<number>
>pl2 : PromiseLike<number>
>p2 : Promise<number>

interface A<T> {
    x: awaited T;
>x : awaited T
}

declare let a1: A<number>;
>a1 : A<number>

declare let a2: A<Promise<number>>;
>a2 : A<Promise<number>>

a1 = a2;
>a1 = a2 : A<Promise<number>>
>a1 : A<number>
>a2 : A<Promise<number>>

a2 = a1;
>a2 = a1 : A<number>
>a2 : A<Promise<number>>
>a1 : A<number>

interface B<T> {
    a: A<T>;
>a : A<T>
}

declare let b1: B<number>;
>b1 : B<number>

declare let b2: B<Promise<number>>;
>b2 : B<Promise<number>>

b1 = b2;
>b1 = b2 : B<Promise<number>>
>b1 : B<number>
>b2 : B<Promise<number>>

b2 = b1;
>b2 = b1 : B<number>
>b2 : B<Promise<number>>
>b1 : B<number>

interface C<T> {
    x: awaited ({_tag: string} & T);
>x : awaited ({ _tag: string; } & T)
>_tag : string
}

declare let c1: C<number>;
>c1 : C<number>

declare let c2: C<Promise<number>>;
>c2 : C<Promise<number>>

// Not assignable since `awaited ({_tag: string} & Promise<number>)` is `number`, which isn't assignable to `({_tag: string} & number)`.
c1 = c2;
>c1 = c2 : C<Promise<number>>
>c1 : C<number>
>c2 : C<Promise<number>>

c2 = c1;
>c2 = c1 : C<number>
>c2 : C<Promise<number>>
>c1 : C<number>

interface D<T> {
    a: C<T>;
>a : C<T>
}

declare let d1: D<number>;
>d1 : D<number>

declare let d2: D<Promise<number>>;
>d2 : D<Promise<number>>

// Not assignable since `awaited ({_tag: string} & Promise<number>)` is `number`, which isn't assignable to `({_tag: string} & number)`.
d1 = d2;
>d1 = d2 : D<Promise<number>>
>d1 : D<number>
>d2 : D<Promise<number>>

d2 = d1;
>d2 = d1 : D<number>
>d2 : D<Promise<number>>
>d1 : D<number>

interface E<T> {
    x: awaited (T | {otherOption: string});
>x : { otherOption: string; } | awaited T
>otherOption : string
}

declare let e1: E<number>;
>e1 : E<number>

declare let e2: E<Promise<number>>;
>e2 : E<Promise<number>>

e1 = e2;
>e1 = e2 : E<Promise<number>>
>e1 : E<number>
>e2 : E<Promise<number>>

e2 = e1;
>e2 = e1 : E<number>
>e2 : E<Promise<number>>
>e1 : E<number>

interface F<T> {
    a: E<T>;
>a : E<T>
}

declare let f1: F<number>;
>f1 : F<number>

declare let f2: F<Promise<number>>;
>f2 : F<Promise<number>>

f1 = f2;
>f1 = f2 : F<Promise<number>>
>f1 : F<number>
>f2 : F<Promise<number>>

f2 = f1;
>f2 = f1 : F<number>
>f2 : F<Promise<number>>
>f1 : F<number>

interface G<T, K extends keyof T> {
    x: awaited T[K];
>x : awaited T[K]
}

declare let g1: G<{x: number}, "x">;
>g1 : G<{ x: number; }, "x">
>x : number

declare let g2: G<{x: Promise<number>}, "x">;
>g2 : G<{ x: Promise<number>; }, "x">
>x : Promise<number>

g1 = g2;
>g1 = g2 : G<{ x: Promise<number>; }, "x">
>g1 : G<{ x: number; }, "x">
>g2 : G<{ x: Promise<number>; }, "x">

g2 = g1;
>g2 = g1 : G<{ x: number; }, "x">
>g2 : G<{ x: Promise<number>; }, "x">
>g1 : G<{ x: number; }, "x">

interface H<T, K extends keyof T> {
    a: G<T, K>;
>a : G<T, K>
}

declare let h1: H<{x: number}, "x">;
>h1 : H<{ x: number; }, "x">
>x : number

declare let h2: H<{x: Promise<number>}, "x">;
>h2 : H<{ x: Promise<number>; }, "x">
>x : Promise<number>

h1 = h2;
>h1 = h2 : H<{ x: Promise<number>; }, "x">
>h1 : H<{ x: number; }, "x">
>h2 : H<{ x: Promise<number>; }, "x">

h2 = h1;
>h2 = h1 : H<{ x: number; }, "x">
>h2 : H<{ x: Promise<number>; }, "x">
>h1 : H<{ x: number; }, "x">

