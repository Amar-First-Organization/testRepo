=== tests/cases/compiler/arrowFunctionParsingGenericInObject.ts ===
const fails1 = () => ({
>fails1 : () => { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>() => ({    test: <T = undefined>(value: T): T => value,    extraValue: () => {},}) : () => { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>({    test: <T = undefined>(value: T): T => value,    extraValue: () => {},}) : { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>{    test: <T = undefined>(value: T): T => value,    extraValue: () => {},} : { test: <T = undefined>(value: T) => T; extraValue: () => void; }

    test: <T = undefined>(value: T): T => value,
>test : <T = undefined>(value: T) => T
><T = undefined>(value: T): T => value : <T = undefined>(value: T) => T
>value : T
>value : T

    extraValue: () => {},
>extraValue : () => void
>() => {} : () => void

})

const works1 = () => ({
>works1 : () => { test: <T>(value: T) => T; extraValue: () => void; }
>() => ({    test: <T>(value: T): T => value,    extraValue: () => {},}) : () => { test: <T>(value: T) => T; extraValue: () => void; }
>({    test: <T>(value: T): T => value,    extraValue: () => {},}) : { test: <T>(value: T) => T; extraValue: () => void; }
>{    test: <T>(value: T): T => value,    extraValue: () => {},} : { test: <T>(value: T) => T; extraValue: () => void; }

    test: <T>(value: T): T => value,
>test : <T>(value: T) => T
><T>(value: T): T => value : <T>(value: T) => T
>value : T
>value : T

    extraValue: () => {},
>extraValue : () => void
>() => {} : () => void

})

const works2 = () => ({
>works2 : () => { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>() => ({    extraValue: () => {},    test: <T = undefined>(value: T): T => value,}) : () => { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>({    extraValue: () => {},    test: <T = undefined>(value: T): T => value,}) : { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>{    extraValue: () => {},    test: <T = undefined>(value: T): T => value,} : { extraValue: () => void; test: <T = undefined>(value: T) => T; }

    extraValue: () => {},
>extraValue : () => void
>() => {} : () => void

    test: <T = undefined>(value: T): T => value,
>test : <T = undefined>(value: T) => T
><T = undefined>(value: T): T => value : <T = undefined>(value: T) => T
>value : T
>value : T

})

const fails2 = () => ({
>fails2 : () => { extraValue: string; test: <T = undefined>(value: T) => T; }
>() => ({    extraValue: '',    test: <T = undefined>(value: T): T => value,}) : () => { extraValue: string; test: <T = undefined>(value: T) => T; }
>({    extraValue: '',    test: <T = undefined>(value: T): T => value,}) : { extraValue: string; test: <T = undefined>(value: T) => T; }
>{    extraValue: '',    test: <T = undefined>(value: T): T => value,} : { extraValue: string; test: <T = undefined>(value: T) => T; }

    extraValue: '',
>extraValue : string
>'' : ""

    test: <T = undefined>(value: T): T => value,
>test : <T = undefined>(value: T) => T
><T = undefined>(value: T): T => value : <T = undefined>(value: T) => T
>value : T
>value : T

})

