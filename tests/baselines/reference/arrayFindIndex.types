=== tests/cases/compiler/arrayFindIndex.ts ===
// Tests fix for #27496, predicates should not have to return booleans
const foo = [
>foo : { name: string; }[]
>[    { name: 'bar' },    { name: null },    { name: 'baz' }] : { name: string; }[]

    { name: 'bar' },
>{ name: 'bar' } : { name: string; }
>name : string
>'bar' : "bar"

    { name: null },
>{ name: null } : { name: null; }
>name : null
>null : null

    { name: 'baz' }
>{ name: 'baz' } : { name: string; }
>name : string
>'baz' : "baz"

];
const fizz = [
>fizz : { name: any; }[]
>[    { name: null }] : { name: null; }[]

    { name: null }
>{ name: null } : { name: null; }
>name : null
>null : null

];

foo.findIndex(x => {});
>foo.findIndex(x => {}) : number
>foo.findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>foo : { name: string; }[]
>findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>x => {} : (x: { name: string; }) => void
>x : { name: string; }

foo.findIndex(x => "");
>foo.findIndex(x => "") : number
>foo.findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>foo : { name: string; }[]
>findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>x => "" : (x: { name: string; }) => string
>x : { name: string; }
>"" : ""

foo.findIndex(x => { return; });
>foo.findIndex(x => { return; }) : number
>foo.findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>foo : { name: string; }[]
>findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>x => { return; } : (x: { name: string; }) => void
>x : { name: string; }

foo.findIndex(x => { return null; });
>foo.findIndex(x => { return null; }) : number
>foo.findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>foo : { name: string; }[]
>findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>x => { return null; } : (x: { name: string; }) => any
>x : { name: string; }
>null : null

foo.findIndex(x => { return undefined; });
>foo.findIndex(x => { return undefined; }) : number
>foo.findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>foo : { name: string; }[]
>findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>x => { return undefined; } : (x: { name: string; }) => any
>x : { name: string; }
>undefined : undefined

foo.findIndex(x => x.name);
>foo.findIndex(x => x.name) : number
>foo.findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>foo : { name: string; }[]
>findIndex : (predicate: (value: { name: string; }, index: number, obj: { name: string; }[]) => {}, thisArg?: any) => number
>x => x.name : (x: { name: string; }) => string
>x : { name: string; }
>x.name : string
>x : { name: string; }
>name : string

fizz.findIndex(x => x.name);
>fizz.findIndex(x => x.name) : number
>fizz.findIndex : (predicate: (value: { name: any; }, index: number, obj: { name: any; }[]) => {}, thisArg?: any) => number
>fizz : { name: any; }[]
>findIndex : (predicate: (value: { name: any; }, index: number, obj: { name: any; }[]) => {}, thisArg?: any) => number
>x => x.name : (x: { name: any; }) => any
>x : { name: any; }
>x.name : any
>x : { name: any; }
>name : any

