=== tests/cases/compiler/decoratorsOnComputedProperties.ts ===
function x(o: object, k: PropertyKey) { }
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>o : Symbol(o, Decl(decoratorsOnComputedProperties.ts, 0, 11))
>k : Symbol(k, Decl(decoratorsOnComputedProperties.ts, 0, 21))
>PropertyKey : Symbol(PropertyKey, Decl(lib.es2015.core.d.ts, --, --))

let i = 0;
>i : Symbol(i, Decl(decoratorsOnComputedProperties.ts, 1, 3))

function foo(): string { return ++i + ""; }
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))
>i : Symbol(i, Decl(decoratorsOnComputedProperties.ts, 1, 3))

const fieldNameA: string = "fieldName1";
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

const fieldNameB: string = "fieldName2";
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

const fieldNameC: string = "fieldName3";
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

class A {
>A : Symbol(A, Decl(decoratorsOnComputedProperties.ts, 6, 40))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(A[["property"]], Decl(decoratorsOnComputedProperties.ts, 8, 9))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(A[["property2"]], Decl(decoratorsOnComputedProperties.ts, 10, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(A[["property3"]], Decl(decoratorsOnComputedProperties.ts, 12, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(A[["property4"]], Decl(decoratorsOnComputedProperties.ts, 14, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))
}

void class B {
>B : Symbol(B, Decl(decoratorsOnComputedProperties.ts, 25, 4))

    @x ["property"]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property" : Symbol(B[["property"]], Decl(decoratorsOnComputedProperties.ts, 25, 14))

    @x [Symbol.toStringTag]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    @x ["property2"]: any = 2;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>"property2" : Symbol(B[["property2"]], Decl(decoratorsOnComputedProperties.ts, 27, 33))

    @x [Symbol.iterator]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

    ["property3"]: any;
>"property3" : Symbol(B[["property3"]], Decl(decoratorsOnComputedProperties.ts, 29, 37))

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    ["property4"]: any = 2;
>"property4" : Symbol(B[["property4"]], Decl(decoratorsOnComputedProperties.ts, 31, 37))

    [Symbol.match]: any = null;
>Symbol.match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>match : Symbol(SymbolConstructor.match, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    [foo()]: any;
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    @x [foo()]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>foo : Symbol(foo, Decl(decoratorsOnComputedProperties.ts, 1, 10))

    [fieldNameA]: any;
>fieldNameA : Symbol(fieldNameA, Decl(decoratorsOnComputedProperties.ts, 4, 5))

    @x [fieldNameB]: any;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameB : Symbol(fieldNameB, Decl(decoratorsOnComputedProperties.ts, 5, 5))

    @x [fieldNameC]: any = null;
>x : Symbol(x, Decl(decoratorsOnComputedProperties.ts, 0, 0))
>fieldNameC : Symbol(fieldNameC, Decl(decoratorsOnComputedProperties.ts, 6, 5))

};

