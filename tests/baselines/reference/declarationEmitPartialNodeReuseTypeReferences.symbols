//// [tests/cases/compiler/declarationEmitPartialNodeReuseTypeReferences.ts] ////

=== a.ts ===
export type SpecialString = string;
>SpecialString : Symbol(SpecialString, Decl(a.ts, 0, 0))

type PrivateSpecialString = string;
>PrivateSpecialString : Symbol(PrivateSpecialString, Decl(a.ts, 0, 35))

export namespace N {
>N : Symbol(N, Decl(a.ts, 1, 35))

    export type SpecialString = string;
>SpecialString : Symbol(SpecialString, Decl(a.ts, 3, 20))
}
export const o = (o: SpecialString) => null! as { foo: SpecialString, bar: PrivateSpecialString, baz: N.SpecialString };
>o : Symbol(o, Decl(a.ts, 6, 12))
>o : Symbol(o, Decl(a.ts, 6, 18))
>SpecialString : Symbol(SpecialString, Decl(a.ts, 0, 0))
>foo : Symbol(foo, Decl(a.ts, 6, 49))
>SpecialString : Symbol(SpecialString, Decl(a.ts, 0, 0))
>bar : Symbol(bar, Decl(a.ts, 6, 69))
>PrivateSpecialString : Symbol(PrivateSpecialString, Decl(a.ts, 0, 35))
>baz : Symbol(baz, Decl(a.ts, 6, 96))
>N : Symbol(N, Decl(a.ts, 1, 35))
>SpecialString : Symbol(N.SpecialString, Decl(a.ts, 3, 20))

=== b.ts ===
import * as a from "./a";
>a : Symbol(a, Decl(b.ts, 0, 6))

export const g = a.o
>g : Symbol(g, Decl(b.ts, 1, 12))
>a.o : Symbol(a.o, Decl(a.ts, 6, 12))
>a : Symbol(a, Decl(b.ts, 0, 6))
>o : Symbol(a.o, Decl(a.ts, 6, 12))

=== c.ts ===
import { o, SpecialString } from "./a";
>o : Symbol(o, Decl(c.ts, 0, 8))
>SpecialString : Symbol(SpecialString, Decl(c.ts, 0, 11))

export const g = o
>g : Symbol(g, Decl(c.ts, 1, 12))
>o : Symbol(o, Decl(c.ts, 0, 8))

