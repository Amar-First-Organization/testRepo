=== tests/cases/compiler/f1.ts ===
export class A {}
>A : A

=== tests/cases/compiler/f2.ts ===
export class B {
>B : B

    n: number;
>n : number
}

=== tests/cases/compiler/f3.ts ===
import {A} from "./f1";
>A : typeof A

A.prototype.foo = function () { return undefined; }
>A.prototype.foo = function () { return undefined; } : () => any
>A.prototype.foo : any (error)
>A.prototype : A
>A : typeof A
>prototype : A
>foo : any (error)
>function () { return undefined; } : () => any
>undefined : undefined

namespace N {
    export interface Ifc { a }
>a : any

    export interface Cls { a }
>a : any
}

declare module "./f1" {
>"./f1" : typeof import("tests/cases/compiler/f1")

    import {B} from "./f2";
>B : any (error)

    export {B} from "./f2";
>B : any (error)

    import I = N.Ifc;
>I : any (error)
>N : any (error)
>Ifc : I

    import C = N.Cls;
>C : any (error)
>N : any (error)
>Cls : C

    // should have explicit export
    interface A {
        foo(): B;
>foo : () => any (error)

        bar(): I;
>bar : () => I

        baz(): C;
>baz : () => C
    }
}

=== tests/cases/compiler/f4.ts ===
import {A} from "./f1";
>A : typeof A

import "./f3";

let a: A;
>a : A

let b = a.foo().n;
>b : any (error)
>a.foo().n : any (error)
>a.foo() : any (error)
>a.foo : any (error)
>a : A
>foo : any (error)
>n : any (error)

