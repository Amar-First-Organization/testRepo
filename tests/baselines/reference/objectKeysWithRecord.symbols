=== tests/cases/compiler/objectKeysWithRecord.ts ===
type K = 'foo' | 'bar'
>K : Symbol(K, Decl(objectKeysWithRecord.ts, 0, 0))

const record: Record<K, boolean> = { foo: true, bar: false };
>record : Symbol(record, Decl(objectKeysWithRecord.ts, 1, 5))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>K : Symbol(K, Decl(objectKeysWithRecord.ts, 0, 0))
>foo : Symbol(foo, Decl(objectKeysWithRecord.ts, 1, 36))
>bar : Symbol(bar, Decl(objectKeysWithRecord.ts, 1, 47))

Object.keys(record).forEach((key: K) => {
>Object.keys(record).forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
>Object.keys : Symbol(ObjectConstructor.keys, Decl(lib.es5.d.ts, --, --))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>keys : Symbol(ObjectConstructor.keys, Decl(lib.es5.d.ts, --, --))
>record : Symbol(record, Decl(objectKeysWithRecord.ts, 1, 5))
>forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
>key : Symbol(key, Decl(objectKeysWithRecord.ts, 3, 29))
>K : Symbol(K, Decl(objectKeysWithRecord.ts, 0, 0))

});

