//// [tests/cases/compiler/contextuallyTypedParametersOptionalInJSDoc.ts] ////

=== index.js ===
/**
 * @typedef {(a: string, b: number) => void} Fn
 */

/** @type {Fn} */
const fn1 =
>fn1 : Symbol(fn1, Decl(index.js, 5, 5))

  /**
   * @param [b]
   */
  function self(a, b) {
>self : Symbol(self, Decl(index.js, 5, 11))
>a : Symbol(a, Decl(index.js, 9, 16))
>b : Symbol(b, Decl(index.js, 9, 18))

    b;
>b : Symbol(b, Decl(index.js, 9, 18))

    self("");
>self : Symbol(self, Decl(index.js, 5, 11))

    self("", undefined);
>self : Symbol(self, Decl(index.js, 5, 11))
>undefined : Symbol(undefined)

  };

/** @type {Fn} */
const fn2 =
>fn2 : Symbol(fn2, Decl(index.js, 16, 5))

  /**
   * @param {number} [b]
   */
  function self(a, b) {
>self : Symbol(self, Decl(index.js, 16, 11))
>a : Symbol(a, Decl(index.js, 20, 16))
>b : Symbol(b, Decl(index.js, 20, 18))

    b;
>b : Symbol(b, Decl(index.js, 20, 18))

    self("");
>self : Symbol(self, Decl(index.js, 16, 11))

    self("", undefined);
>self : Symbol(self, Decl(index.js, 16, 11))
>undefined : Symbol(undefined)

  };

