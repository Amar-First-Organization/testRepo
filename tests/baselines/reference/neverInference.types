=== tests/cases/conformance/types/never/neverInference.ts ===
declare function f<T>(x: T[]): T;
>f : <T>(x: T[]) => T
>T : T
>x : T[]
>T : T
>T : T

let neverArray: never[] = [];
>neverArray : never[]
>[] : never[]

let a1 = f([]);  // {}
>a1 : {}
>f([]) : {}
>f : <T>(x: T[]) => T
>[] : never[]

let a2 = f(neverArray);  // never
>a2 : never
>f(neverArray) : never
>f : <T>(x: T[]) => T
>neverArray : never[]

// Repro from #19576

type Comparator<T> = (x: T, y: T) => number;
>Comparator : Comparator<T>
>T : T
>x : T
>T : T
>y : T
>T : T

interface LinkedList<T> {
>LinkedList : LinkedList<T>
>T : T

    comparator: Comparator<T>,
>comparator : Comparator<T>
>Comparator : Comparator<T>
>T : T

    nodes: Node<T>
>nodes : Node<T>
>Node : Node<T>
>T : T
}

type Node<T> = { value: T, next: Node<T> } | null
>Node : Node<T>
>T : T
>value : T
>T : T
>next : Node<T>
>Node : Node<T>
>T : T
>null : null

declare function compareNumbers(x: number, y: number): number;
>compareNumbers : (x: number, y: number) => number
>x : number
>y : number

declare function mkList<T>(items: T[], comparator: Comparator<T>): LinkedList<T>;
>mkList : <T>(items: T[], comparator: Comparator<T>) => LinkedList<T>
>T : T
>items : T[]
>T : T
>comparator : Comparator<T>
>Comparator : Comparator<T>
>T : T
>LinkedList : LinkedList<T>
>T : T

const list: LinkedList<number> = mkList([], compareNumbers);
>list : LinkedList<number>
>LinkedList : LinkedList<T>
>mkList([], compareNumbers) : LinkedList<number>
>mkList : <T>(items: T[], comparator: Comparator<T>) => LinkedList<T>
>[] : never[]
>compareNumbers : (x: number, y: number) => number

