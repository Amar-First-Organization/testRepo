=== tests/cases/compiler/contextualComputedNonBindablePropertyType.ts ===
// repro #51906

declare function testD(): "d";
>testD : () => "d"

declare function forceMatch<T>(matched: {
>forceMatch : <T>(matched: { [key in keyof T]: key; }) => void
>matched : { [key in keyof T]: key; }

  [key in keyof T]: key;
}): void;

forceMatch({
>forceMatch({  [testD()]: "d",}) : void
>forceMatch : <T>(matched: { [key in keyof T]: key; }) => void
>{  [testD()]: "d",} : { d: "d"; }

  [testD()]: "d",
>[testD()] : "d"
>testD() : "d"
>testD : () => "d"
>"d" : "d"

});

declare function forceMatch2<T>(matched: {
>forceMatch2 : <T>(matched: { [key in keyof T]: ({ key }: { key: key; }) => void; }) => void
>matched : { [key in keyof T]: ({ key }: { key: key; }) => void; }

  [key in keyof T]: ({ key }: { key: key }) => void;
>key : key
>key : key

}): void;

forceMatch2({
>forceMatch2({  [testD()]: ({ key }) => {},}) : void
>forceMatch2 : <T>(matched: { [key in keyof T]: ({ key }: { key: key; }) => void; }) => void
>{  [testD()]: ({ key }) => {},} : { d: ({ key }: { key: "d"; }) => void; }

  [testD()]: ({ key }) => {},
>[testD()] : ({ key }: { key: "d"; }) => void
>testD() : "d"
>testD : () => "d"
>({ key }) => {} : ({ key }: { key: "d"; }) => void
>key : "d"

});

