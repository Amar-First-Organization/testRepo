//// [tests/cases/compiler/coAndContraVariantInferences.ts] ////



/// [Declarations] ////



//// [coAndContraVariantInferences.d.ts]
type A = {
    kind: 'a';
};
type B = {
    kind: 'b';
};
declare const a: A;
declare const b: B;
declare function fab(arg: A | B): void;
declare function foo<T>(x: {
    kind: T;
}, f: (arg: {
    kind: T;
}) => void): void;
interface Action<TName extends string, TPayload> {
    name: TName;
    payload: TPayload;
}
declare const actionA: Action<"ACTION_A", string>;
declare const actionB: Action<"ACTION_B", boolean>;
declare function call<TName extends string, TPayload>(action: Action<TName, TPayload>, fn: (action: Action<TName, TPayload>) => any): void;
declare const printFn: (action: typeof actionA | typeof actionB) => void;
//# sourceMappingURL=coAndContraVariantInferences.d.ts.map

/// [Declarations Maps] ////


//// [coAndContraVariantInferences.d.ts.map]
{"version":3,"file":"coAndContraVariantInferences.d.ts","sourceRoot":"","sources":["coAndContraVariantInferences.ts"],"names":[],"mappings":"AAAA,KAAK,CAAC,GAAG;IAAE,IAAI,EAAE,GAAG,CAAA;CAAE,CAAC;AACvB,KAAK,CAAC,GAAG;IAAE,IAAI,EAAE,GAAG,CAAA;CAAE,CAAC;AAEvB,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACnB,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAEnB,OAAO,UAAU,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AAEvC,OAAO,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;IAAE,IAAI,EAAE,CAAC,CAAA;CAAE,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE;IAAE,IAAI,EAAE,CAAC,CAAA;CAAE,KAAK,IAAI,GAAG,IAAI,CAAC;AAO7E,UAAU,MAAM,CAAC,KAAK,SAAS,MAAM,EAAC,QAAQ;IAC1C,IAAI,EAAE,KAAK,CAAC;IACZ,OAAO,EAAE,QAAQ,CAAA;CACpB;AAED,QAAA,MAAM,OAAO,4BAA0D,CAAC;AACxE,QAAA,MAAM,OAAO,6BAAmD,CAAC;AAEjE,iBAAS,IAAI,CAAC,KAAK,SAAS,MAAM,EAAC,QAAQ,EACzC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAC,QAAQ,CAAC,EAC9B,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAC,QAAQ,CAAC,KAAI,GAAG,GACzC,IAAI,CAEN;AAED,QAAA,MAAM,OAAO,WAAY,cAAc,GAAG,cAAc,KAAG,IAA0B,CAAC"}

//// https://sokra.github.io/source-map-visualization#base64,dHlwZSBBID0gew0KICAgIGtpbmQ6ICdhJzsNCn07DQp0eXBlIEIgPSB7DQogICAga2luZDogJ2InOw0KfTsNCmRlY2xhcmUgY29uc3QgYTogQTsNCmRlY2xhcmUgY29uc3QgYjogQjsNCmRlY2xhcmUgZnVuY3Rpb24gZmFiKGFyZzogQSB8IEIpOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmb288VD4oeDogew0KICAgIGtpbmQ6IFQ7DQp9LCBmOiAoYXJnOiB7DQogICAga2luZDogVDsNCn0pID0+IHZvaWQpOiB2b2lkOw0KaW50ZXJmYWNlIEFjdGlvbjxUTmFtZSBleHRlbmRzIHN0cmluZywgVFBheWxvYWQ+IHsNCiAgICBuYW1lOiBUTmFtZTsNCiAgICBwYXlsb2FkOiBUUGF5bG9hZDsNCn0NCmRlY2xhcmUgY29uc3QgYWN0aW9uQTogQWN0aW9uPCJBQ1RJT05fQSIsIHN0cmluZz47DQpkZWNsYXJlIGNvbnN0IGFjdGlvbkI6IEFjdGlvbjwiQUNUSU9OX0IiLCBib29sZWFuPjsNCmRlY2xhcmUgZnVuY3Rpb24gY2FsbDxUTmFtZSBleHRlbmRzIHN0cmluZywgVFBheWxvYWQ+KGFjdGlvbjogQWN0aW9uPFROYW1lLCBUUGF5bG9hZD4sIGZuOiAoYWN0aW9uOiBBY3Rpb248VE5hbWUsIFRQYXlsb2FkPikgPT4gYW55KTogdm9pZDsNCmRlY2xhcmUgY29uc3QgcHJpbnRGbjogKGFjdGlvbjogdHlwZW9mIGFjdGlvbkEgfCB0eXBlb2YgYWN0aW9uQikgPT4gdm9pZDsNCi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvQW5kQ29udHJhVmFyaWFudEluZmVyZW5jZXMuZC50cy5tYXA=,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29BbmRDb250cmFWYXJpYW50SW5mZXJlbmNlcy5kLnRzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29BbmRDb250cmFWYXJpYW50SW5mZXJlbmNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxLQUFLLENBQUMsR0FBRztJQUFFLElBQUksRUFBRSxHQUFHLENBQUE7Q0FBRSxDQUFDO0FBQ3ZCLEtBQUssQ0FBQyxHQUFHO0lBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQTtDQUFFLENBQUM7QUFFdkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuQixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRW5CLE9BQU8sVUFBVSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBRXZDLE9BQU8sVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUFFLElBQUksRUFBRSxDQUFDLENBQUE7Q0FBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTtJQUFFLElBQUksRUFBRSxDQUFDLENBQUE7Q0FBRSxLQUFLLElBQUksR0FBRyxJQUFJLENBQUM7QUFPN0UsVUFBVSxNQUFNLENBQUMsS0FBSyxTQUFTLE1BQU0sRUFBQyxRQUFRO0lBQzFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDWixPQUFPLEVBQUUsUUFBUSxDQUFBO0NBQ3BCO0FBRUQsUUFBQSxNQUFNLE9BQU8sNEJBQTBELENBQUM7QUFDeEUsUUFBQSxNQUFNLE9BQU8sNkJBQW1ELENBQUM7QUFFakUsaUJBQVMsSUFBSSxDQUFDLEtBQUssU0FBUyxNQUFNLEVBQUMsUUFBUSxFQUN6QyxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBQyxRQUFRLENBQUMsRUFDOUIsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUMsUUFBUSxDQUFDLEtBQUksR0FBRyxHQUN6QyxJQUFJLENBRU47QUFFRCxRQUFBLE1BQU0sT0FBTyxXQUFZLGNBQWMsR0FBRyxjQUFjLEtBQUcsSUFBMEIsQ0FBQyJ9,dHlwZSBBID0geyBraW5kOiAnYScgfTsKdHlwZSBCID0geyBraW5kOiAnYicgfTsKCmRlY2xhcmUgY29uc3QgYTogQTsKZGVjbGFyZSBjb25zdCBiOiBCOwoKZGVjbGFyZSBmdW5jdGlvbiBmYWIoYXJnOiBBIHwgQik6IHZvaWQ7CgpkZWNsYXJlIGZ1bmN0aW9uIGZvbzxUPih4OiB7IGtpbmQ6IFQgfSwgZjogKGFyZzogeyBraW5kOiBUIH0pID0+IHZvaWQpOiB2b2lkOwoKZm9vKGEsIGZhYik7CmZvbyhiLCBmYWIpOwoKLy8gUmVwcm8gZnJvbSAjNDU2MDMKCmludGVyZmFjZSBBY3Rpb248VE5hbWUgZXh0ZW5kcyBzdHJpbmcsVFBheWxvYWQ+IHsKICAgIG5hbWU6IFROYW1lLAogICAgcGF5bG9hZDogVFBheWxvYWQKfQoKY29uc3QgYWN0aW9uQSA9IHsgcGF5bG9hZDogJ2FueS1zdHJpbmcnIH0gYXMgQWN0aW9uPCdBQ1RJT05fQScsIHN0cmluZz47CmNvbnN0IGFjdGlvbkIgPSB7IHBheWxvYWQ6IHRydWUgfSBhcyBBY3Rpb248J0FDVElPTl9CJywgYm9vbGVhbj47CgpmdW5jdGlvbiBjYWxsPFROYW1lIGV4dGVuZHMgc3RyaW5nLFRQYXlsb2FkPigKICBhY3Rpb246IEFjdGlvbjxUTmFtZSxUUGF5bG9hZD4sCiAgZm46IChhY3Rpb246IEFjdGlvbjxUTmFtZSxUUGF5bG9hZD4pPT4gYW55LAopOiB2b2lkIHsKICBmbihhY3Rpb24pOwp9Cgpjb25zdCBwcmludEZuID0gKGFjdGlvbjogdHlwZW9mIGFjdGlvbkEgfCB0eXBlb2YgYWN0aW9uQik6IHZvaWQ9PiBjb25zb2xlLmxvZyhhY3Rpb24pOwoKY2FsbChhY3Rpb25BLCBwcmludEZuKTsKY2FsbChhY3Rpb25CLCBwcmludEZuKTsK

