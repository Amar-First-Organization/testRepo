=== tests/cases/compiler/narrowGenericTypeByInstanceOf.ts ===
function exampleSingleArgument() {
>exampleSingleArgument : Symbol(exampleSingleArgument, Decl(narrowGenericTypeByInstanceOf.ts, 0, 0))

  class Parent<T> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 0, 34))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 1, 15))

    value: T;
>value : Symbol(Parent.value, Decl(narrowGenericTypeByInstanceOf.ts, 1, 19))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 1, 15))
  }

  class Child<T> extends Parent<T> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 3, 3))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 5, 14))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 0, 34))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 5, 14))

    other: T;
>other : Symbol(Child.other, Decl(narrowGenericTypeByInstanceOf.ts, 5, 36))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 5, 14))
  }

  const obj: Parent<number> = undefined as any;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 9, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 0, 34))
>undefined : Symbol(undefined)

  if (obj instanceof Child) {
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 9, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 3, 3))

    obj;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 9, 7))
  }
}
function exampleSingleExtendsMultiple() {
>exampleSingleExtendsMultiple : Symbol(exampleSingleExtendsMultiple, Decl(narrowGenericTypeByInstanceOf.ts, 14, 1))

  class Parent<A, B> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 15, 41))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 16, 15))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 16, 17))

    value1: A;
>value1 : Symbol(Parent.value1, Decl(narrowGenericTypeByInstanceOf.ts, 16, 22))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 16, 15))

    value2: B;
>value2 : Symbol(Parent.value2, Decl(narrowGenericTypeByInstanceOf.ts, 17, 14))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 16, 17))
  }

  class Child<T> extends Parent<T, T> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 19, 3))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 21, 14))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 15, 41))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 21, 14))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 21, 14))

    other: T;
>other : Symbol(Child.other, Decl(narrowGenericTypeByInstanceOf.ts, 21, 39))
>T : Symbol(T, Decl(narrowGenericTypeByInstanceOf.ts, 21, 14))
  }

  const obj: Parent<number, number> = undefined as any;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 25, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 15, 41))
>undefined : Symbol(undefined)

  if (obj instanceof Child) {
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 25, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 19, 3))

    obj;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 25, 7))
  }
}

function exampleSwapParameterOrder() {
>exampleSwapParameterOrder : Symbol(exampleSwapParameterOrder, Decl(narrowGenericTypeByInstanceOf.ts, 30, 1))

  class Parent<A, B> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 32, 38))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 33, 15))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 33, 17))

    value1: A;
>value1 : Symbol(Parent.value1, Decl(narrowGenericTypeByInstanceOf.ts, 33, 22))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 33, 15))

    value2: B;
>value2 : Symbol(Parent.value2, Decl(narrowGenericTypeByInstanceOf.ts, 34, 14))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 33, 17))
  }

  class Child<C, D> extends Parent<D, C> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 36, 3))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 38, 14))
>D : Symbol(D, Decl(narrowGenericTypeByInstanceOf.ts, 38, 16))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 32, 38))
>D : Symbol(D, Decl(narrowGenericTypeByInstanceOf.ts, 38, 16))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 38, 14))

    value3: C;
>value3 : Symbol(Child.value3, Decl(narrowGenericTypeByInstanceOf.ts, 38, 42))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 38, 14))

    value4: D;
>value4 : Symbol(Child.value4, Decl(narrowGenericTypeByInstanceOf.ts, 39, 14))
>D : Symbol(D, Decl(narrowGenericTypeByInstanceOf.ts, 38, 16))
  }

  const obj: Parent<number, string> = undefined as any;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 43, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 32, 38))
>undefined : Symbol(undefined)

  if (obj instanceof Child) {
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 43, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 36, 3))

    obj;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 43, 7))
  }
}

function exampleSingleExtendsMultipleReject() {
>exampleSingleExtendsMultipleReject : Symbol(exampleSingleExtendsMultipleReject, Decl(narrowGenericTypeByInstanceOf.ts, 48, 1))

  class Parent<A, B> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 50, 47))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 51, 15))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 51, 17))

    value1: A;
>value1 : Symbol(Parent.value1, Decl(narrowGenericTypeByInstanceOf.ts, 51, 22))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 51, 15))

    value2: B;
>value2 : Symbol(Parent.value2, Decl(narrowGenericTypeByInstanceOf.ts, 52, 14))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 51, 17))
  }

  class Child<C> extends Parent<C, C> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 54, 3))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 56, 14))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 50, 47))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 56, 14))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 56, 14))

    value3: C;
>value3 : Symbol(Child.value3, Decl(narrowGenericTypeByInstanceOf.ts, 56, 39))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 56, 14))
  }

  const obj: Parent<number, string> = undefined as any;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 60, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 50, 47))
>undefined : Symbol(undefined)

  if (obj instanceof Child) {
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 60, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 54, 3))

    obj;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 60, 7))
  }
}

function exampleUnion() {
>exampleUnion : Symbol(exampleUnion, Decl(narrowGenericTypeByInstanceOf.ts, 65, 1))

  class Parent<A, B> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 68, 15))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 68, 17))

    value1: A;
>value1 : Symbol(Parent.value1, Decl(narrowGenericTypeByInstanceOf.ts, 68, 22))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 68, 15))

    value2: B;
>value2 : Symbol(Parent.value2, Decl(narrowGenericTypeByInstanceOf.ts, 69, 14))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 68, 17))
  }

  class Child<C> extends Parent<C, C> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 73, 14))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 73, 14))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 73, 14))

    value3: C;
>value3 : Symbol(Child.value3, Decl(narrowGenericTypeByInstanceOf.ts, 73, 39))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 73, 14))
  }

  const obj0:
>obj0 : Symbol(obj0, Decl(narrowGenericTypeByInstanceOf.ts, 77, 7))

    | Parent<{ foo: string }, { foo: string }>
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))
>foo : Symbol(foo, Decl(narrowGenericTypeByInstanceOf.ts, 78, 14))
>foo : Symbol(foo, Decl(narrowGenericTypeByInstanceOf.ts, 78, 31))

    | Parent<string, string>
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))

    | Parent<number, number> = undefined as any;
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))
>undefined : Symbol(undefined)

  if (obj0 instanceof Child) {
>obj0 : Symbol(obj0, Decl(narrowGenericTypeByInstanceOf.ts, 77, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))

    obj0;
>obj0 : Symbol(obj0, Decl(narrowGenericTypeByInstanceOf.ts, 77, 7))
  }

  const obj1 = undefined as Parent<{ foo: string }, { foo: string }>;
>obj1 : Symbol(obj1, Decl(narrowGenericTypeByInstanceOf.ts, 85, 7))
>undefined : Symbol(undefined)
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))
>foo : Symbol(foo, Decl(narrowGenericTypeByInstanceOf.ts, 85, 36))
>foo : Symbol(foo, Decl(narrowGenericTypeByInstanceOf.ts, 85, 53))

  if (obj1 instanceof Child) {
>obj1 : Symbol(obj1, Decl(narrowGenericTypeByInstanceOf.ts, 85, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))

    obj1;
>obj1 : Symbol(obj1, Decl(narrowGenericTypeByInstanceOf.ts, 85, 7))
  }

  const obj2 = undefined as Parent<string, string>;
>obj2 : Symbol(obj2, Decl(narrowGenericTypeByInstanceOf.ts, 90, 7))
>undefined : Symbol(undefined)
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))

  if (obj2 instanceof Child) {
>obj2 : Symbol(obj2, Decl(narrowGenericTypeByInstanceOf.ts, 90, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))

    obj2;
>obj2 : Symbol(obj2, Decl(narrowGenericTypeByInstanceOf.ts, 90, 7))
  }

  const obj3 = undefined as Parent<number, number>;
>obj3 : Symbol(obj3, Decl(narrowGenericTypeByInstanceOf.ts, 95, 7))
>undefined : Symbol(undefined)
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 67, 25))

  if (obj3 instanceof Child) {
>obj3 : Symbol(obj3, Decl(narrowGenericTypeByInstanceOf.ts, 95, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))

    obj3;
>obj3 : Symbol(obj3, Decl(narrowGenericTypeByInstanceOf.ts, 95, 7))
  }

  const obj4 = undefined as string | { foo: string };
>obj4 : Symbol(obj4, Decl(narrowGenericTypeByInstanceOf.ts, 100, 7))
>undefined : Symbol(undefined)
>foo : Symbol(foo, Decl(narrowGenericTypeByInstanceOf.ts, 100, 38))

  if (obj4 instanceof Child) {
>obj4 : Symbol(obj4, Decl(narrowGenericTypeByInstanceOf.ts, 100, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))

    obj4;
>obj4 : Symbol(obj4, Decl(narrowGenericTypeByInstanceOf.ts, 100, 7))
  }
  const obj5 = undefined as { foo: string };
>obj5 : Symbol(obj5, Decl(narrowGenericTypeByInstanceOf.ts, 104, 7))
>undefined : Symbol(undefined)
>foo : Symbol(foo, Decl(narrowGenericTypeByInstanceOf.ts, 104, 29))

  if (obj5 instanceof Child) {
>obj5 : Symbol(obj5, Decl(narrowGenericTypeByInstanceOf.ts, 104, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 71, 3))

    obj5;
>obj5 : Symbol(obj5, Decl(narrowGenericTypeByInstanceOf.ts, 104, 7))
  }
}

function exampleNegative() {
>exampleNegative : Symbol(exampleNegative, Decl(narrowGenericTypeByInstanceOf.ts, 108, 1))

  class Parent<A, B> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 110, 28))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 111, 15))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 111, 17))

    value1: A;
>value1 : Symbol(Parent.value1, Decl(narrowGenericTypeByInstanceOf.ts, 111, 22))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 111, 15))

    value2: B;
>value2 : Symbol(Parent.value2, Decl(narrowGenericTypeByInstanceOf.ts, 112, 14))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 111, 17))
  }

  class Child<C> extends Parent<C, C> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 114, 3))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 116, 14))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 110, 28))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 116, 14))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 116, 14))

    value3: C;
>value3 : Symbol(Child.value3, Decl(narrowGenericTypeByInstanceOf.ts, 116, 39))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 116, 14))
  }

  const obj:
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 120, 7))

    | Parent<string, string>
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 110, 28))

    | Parent<string, number>
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 110, 28))

    | Child<string> = undefined as any;
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 114, 3))
>undefined : Symbol(undefined)

  if (obj instanceof Child) {
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 120, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 114, 3))

    // Here we filter out matching ones, instead of just narrowing to them.
    obj;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 120, 7))

    return;
  }

  console.log(obj);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 120, 7))
}

function exampleIgnoreDefaults() {
>exampleIgnoreDefaults : Symbol(exampleIgnoreDefaults, Decl(narrowGenericTypeByInstanceOf.ts, 132, 1))

  // default parameters shouldn't have any impact on this narrowing.
  class Parent<A> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 134, 34))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 136, 15))

    a: A;
>a : Symbol(Parent.a, Decl(narrowGenericTypeByInstanceOf.ts, 136, 19))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 136, 15))
  }
  class Child<A2, C = number> extends Parent<A2> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 138, 3))
>A2 : Symbol(A2, Decl(narrowGenericTypeByInstanceOf.ts, 139, 14))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 139, 17))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 134, 34))
>A2 : Symbol(A2, Decl(narrowGenericTypeByInstanceOf.ts, 139, 14))

    a2: A2;
>a2 : Symbol(Child.a2, Decl(narrowGenericTypeByInstanceOf.ts, 139, 50))
>A2 : Symbol(A2, Decl(narrowGenericTypeByInstanceOf.ts, 139, 14))

    c: C;
>c : Symbol(Child.c, Decl(narrowGenericTypeByInstanceOf.ts, 140, 11))
>C : Symbol(C, Decl(narrowGenericTypeByInstanceOf.ts, 139, 17))
  }

  const obj: Parent<number> = undefined as any;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 144, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 134, 34))
>undefined : Symbol(undefined)

  if (obj instanceof Child) {
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 144, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 138, 3))

    obj;
>obj : Symbol(obj, Decl(narrowGenericTypeByInstanceOf.ts, 144, 7))
  }
}

function exampleConstraints() {
>exampleConstraints : Symbol(exampleConstraints, Decl(narrowGenericTypeByInstanceOf.ts, 148, 1))

  class Parent<A> {
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 150, 31))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 151, 15))

    a: A;
>a : Symbol(Parent.a, Decl(narrowGenericTypeByInstanceOf.ts, 151, 19))
>A : Symbol(A, Decl(narrowGenericTypeByInstanceOf.ts, 151, 15))
  }
  class Child<B extends number> extends Parent<B> {
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 153, 3))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 154, 14))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 150, 31))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 154, 14))

    b: B;
>b : Symbol(Child.b, Decl(narrowGenericTypeByInstanceOf.ts, 154, 51))
>B : Symbol(B, Decl(narrowGenericTypeByInstanceOf.ts, 154, 14))
  }

  const objPass: Parent<number> = undefined as any;
>objPass : Symbol(objPass, Decl(narrowGenericTypeByInstanceOf.ts, 158, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 150, 31))
>undefined : Symbol(undefined)

  if (objPass instanceof Child) {
>objPass : Symbol(objPass, Decl(narrowGenericTypeByInstanceOf.ts, 158, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 153, 3))

    objPass;
>objPass : Symbol(objPass, Decl(narrowGenericTypeByInstanceOf.ts, 158, 7))
  }

  const objFour: Parent<4> = undefined as any;
>objFour : Symbol(objFour, Decl(narrowGenericTypeByInstanceOf.ts, 163, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 150, 31))
>undefined : Symbol(undefined)

  if (objFour instanceof Child) {
>objFour : Symbol(objFour, Decl(narrowGenericTypeByInstanceOf.ts, 163, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 153, 3))

    objFour;
>objFour : Symbol(objFour, Decl(narrowGenericTypeByInstanceOf.ts, 163, 7))
  }

  const objFail: Parent<string> = undefined as any;
>objFail : Symbol(objFail, Decl(narrowGenericTypeByInstanceOf.ts, 168, 7))
>Parent : Symbol(Parent, Decl(narrowGenericTypeByInstanceOf.ts, 150, 31))
>undefined : Symbol(undefined)

  if (objFail instanceof Child) {
>objFail : Symbol(objFail, Decl(narrowGenericTypeByInstanceOf.ts, 168, 7))
>Child : Symbol(Child, Decl(narrowGenericTypeByInstanceOf.ts, 153, 3))

    objFail;
>objFail : Symbol(objFail, Decl(narrowGenericTypeByInstanceOf.ts, 168, 7))
  }
}

