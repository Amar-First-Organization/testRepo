=== tests/cases/compiler/narrowByBooleanComparison.ts ===
type A = { type: "A" };
>A : { type: "A"; }
>type : "A"

type B = { type: "B" };
>B : { type: "B"; }
>type : "B"

type C = { type: "C" };
>C : { type: "C"; }
>type : "C"

type MyUnion = A | B | C;
>MyUnion : A | B | C

const isA = (x: MyUnion): x is A => x.type === "A";
>isA : (x: MyUnion) => x is A
>(x: MyUnion): x is A => x.type === "A" : (x: MyUnion) => x is A
>x : MyUnion
>x.type === "A" : boolean
>x.type : "A" | "B" | "C"
>x : MyUnion
>type : "A" | "B" | "C"
>"A" : "A"

function test1(x: MyUnion) {
>test1 : (x: MyUnion) => void
>x : MyUnion

    if (isA(x) !== true) {
>isA(x) !== true : boolean
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion
>true : true

        x
>x : B | C
    }

    if (isA(x) !== false) {
>isA(x) !== false : boolean
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion
>false : false

        x
>x : A
    }

    if (isA(x) === false) {
>isA(x) === false : boolean
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion
>false : false

        x
>x : B | C
    }

    if (isA(x) === true) {
>isA(x) === true : boolean
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion
>true : true

        x
>x : A
    }

    if (isA(x) != true) {
>isA(x) != true : boolean
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion
>true : true

        x
>x : B | C
    }

    if (isA(x) == true) {
>isA(x) == true : boolean
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion
>true : true

        x
>x : A
    }

    if (true !== isA(x)) {
>true !== isA(x) : boolean
>true : true
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion

        x
>x : B | C
    }

    if (true === isA(x)) {
>true === isA(x) : boolean
>true : true
>isA(x) : boolean
>isA : (x: MyUnion) => x is A
>x : MyUnion

        x
>x : A
    }
}
