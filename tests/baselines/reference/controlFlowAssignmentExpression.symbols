=== tests/cases/conformance/controlFlow/controlFlowAssignmentExpression.ts ===
let x: string | boolean | number;
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))

let obj: any;
>obj : Symbol(obj, Decl(controlFlowAssignmentExpression.ts, 1, 3))

x = "";
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))

x = x.length;
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

x; // number
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))

x = true;
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))

(x = "", obj).foo = (x = x.length);
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))
>obj : Symbol(obj, Decl(controlFlowAssignmentExpression.ts, 1, 3))
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

x; // number
>x : Symbol(x, Decl(controlFlowAssignmentExpression.ts, 0, 3))

// https://github.com/microsoft/TypeScript/issues/35484
type D = { done: true, value: 1 } | { done: false, value: 2 };
>D : Symbol(D, Decl(controlFlowAssignmentExpression.ts, 9, 2))
>done : Symbol(done, Decl(controlFlowAssignmentExpression.ts, 12, 10))
>value : Symbol(value, Decl(controlFlowAssignmentExpression.ts, 12, 22))
>done : Symbol(done, Decl(controlFlowAssignmentExpression.ts, 12, 37))
>value : Symbol(value, Decl(controlFlowAssignmentExpression.ts, 12, 50))

declare function fn(): D;
>fn : Symbol(fn, Decl(controlFlowAssignmentExpression.ts, 12, 62))
>D : Symbol(D, Decl(controlFlowAssignmentExpression.ts, 9, 2))

let o: D;
>o : Symbol(o, Decl(controlFlowAssignmentExpression.ts, 14, 3))
>D : Symbol(D, Decl(controlFlowAssignmentExpression.ts, 9, 2))

if ((o = fn()).done) {
>(o = fn()).done : Symbol(done, Decl(controlFlowAssignmentExpression.ts, 12, 10), Decl(controlFlowAssignmentExpression.ts, 12, 37))
>o : Symbol(o, Decl(controlFlowAssignmentExpression.ts, 14, 3))
>fn : Symbol(fn, Decl(controlFlowAssignmentExpression.ts, 12, 62))
>done : Symbol(done, Decl(controlFlowAssignmentExpression.ts, 12, 10), Decl(controlFlowAssignmentExpression.ts, 12, 37))

    const y: 1 = o.value;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 16, 9))
>o.value : Symbol(value, Decl(controlFlowAssignmentExpression.ts, 12, 22))
>o : Symbol(o, Decl(controlFlowAssignmentExpression.ts, 14, 3))
>value : Symbol(value, Decl(controlFlowAssignmentExpression.ts, 12, 22))
}

// https://github.com/microsoft/TypeScript/issues/47731
declare let a: object | any[] | undefined
>a : Symbol(a, Decl(controlFlowAssignmentExpression.ts, 20, 11))

if (a === undefined) {
>a : Symbol(a, Decl(controlFlowAssignmentExpression.ts, 20, 11))
>undefined : Symbol(undefined)

    a = []
>a : Symbol(a, Decl(controlFlowAssignmentExpression.ts, 20, 11))

} else if (!Array.isArray(a)) {
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(controlFlowAssignmentExpression.ts, 20, 11))

    throw new Error()
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
}
[...a] // any[]
>a : Symbol(a, Decl(controlFlowAssignmentExpression.ts, 20, 11))

interface Parent {
>Parent : Symbol(Parent, Decl(controlFlowAssignmentExpression.ts, 27, 6))

    parent: string;
>parent : Symbol(Parent.parent, Decl(controlFlowAssignmentExpression.ts, 29, 18))
}
interface Child extends Parent {
>Child : Symbol(Child, Decl(controlFlowAssignmentExpression.ts, 31, 1))
>Parent : Symbol(Parent, Decl(controlFlowAssignmentExpression.ts, 27, 6))

    child: string;
>child : Symbol(Child.child, Decl(controlFlowAssignmentExpression.ts, 32, 32))
}

declare let p: Parent;
>p : Symbol(p, Decl(controlFlowAssignmentExpression.ts, 36, 11))
>Parent : Symbol(Parent, Decl(controlFlowAssignmentExpression.ts, 27, 6))

declare let c: Child;
>c : Symbol(c, Decl(controlFlowAssignmentExpression.ts, 37, 11))
>Child : Symbol(Child, Decl(controlFlowAssignmentExpression.ts, 31, 1))

declare let y: Parent | Child | undefined;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))
>Parent : Symbol(Parent, Decl(controlFlowAssignmentExpression.ts, 27, 6))
>Child : Symbol(Child, Decl(controlFlowAssignmentExpression.ts, 31, 1))

y = p;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))
>p : Symbol(p, Decl(controlFlowAssignmentExpression.ts, 36, 11))

y;  // Parent
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))

y = c;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))
>c : Symbol(c, Decl(controlFlowAssignmentExpression.ts, 37, 11))

y;  // Child
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))

y = undefined as any as Parent | Child;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))
>undefined : Symbol(undefined)
>Parent : Symbol(Parent, Decl(controlFlowAssignmentExpression.ts, 27, 6))
>Child : Symbol(Child, Decl(controlFlowAssignmentExpression.ts, 31, 1))

y;  // Parent | Child
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))

y = undefined as any as Parent | undefined;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))
>undefined : Symbol(undefined)
>Parent : Symbol(Parent, Decl(controlFlowAssignmentExpression.ts, 27, 6))

y;  // Parent | undefined
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))

y = undefined as any as Child | undefined;
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))
>undefined : Symbol(undefined)
>Child : Symbol(Child, Decl(controlFlowAssignmentExpression.ts, 31, 1))

y;  // Child | undefined
>y : Symbol(y, Decl(controlFlowAssignmentExpression.ts, 38, 11))

