=== tests/cases/conformance/es6/restParameters/emitRestParametersArgumentsCollision.ts ===
function foo1(...rest) {
>foo1 : Symbol(foo1, Decl(emitRestParametersArgumentsCollision.ts, 0, 0))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 0, 14))

    var arguments;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 1, 7))
}
function foo2(...rest) {
>foo2 : Symbol(foo2, Decl(emitRestParametersArgumentsCollision.ts, 2, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 3, 14))

    var arguments = 0;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 4, 7))
}
function foo3(...rest) {
>foo3 : Symbol(foo3, Decl(emitRestParametersArgumentsCollision.ts, 5, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 6, 14))

    var arguments;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 7, 7))

    return rest;
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 6, 14))
}
function foo4(...rest) {
>foo4 : Symbol(foo4, Decl(emitRestParametersArgumentsCollision.ts, 9, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 10, 14))

    var arguments = 0;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 11, 7))

    return rest;
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 10, 14))
}
function foo5(...rest) {
>foo5 : Symbol(foo5, Decl(emitRestParametersArgumentsCollision.ts, 13, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 14, 14))

    var arguments;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 15, 7))

    arguments = 0;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 15, 7))

    return rest;
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 14, 14))
}
function foo6(...rest) {
>foo6 : Symbol(foo6, Decl(emitRestParametersArgumentsCollision.ts, 18, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 19, 14))

    var notUsed, arguments;
>notUsed : Symbol(notUsed, Decl(emitRestParametersArgumentsCollision.ts, 20, 7))
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 20, 16))

    return rest;
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 19, 14))
}
function foo7(...rest) {
>foo7 : Symbol(foo7, Decl(emitRestParametersArgumentsCollision.ts, 22, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 23, 14))

    var notUsed, arguments;
>notUsed : Symbol(notUsed, Decl(emitRestParametersArgumentsCollision.ts, 24, 7))
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 24, 16))

    arguments = 0;
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 24, 16))

    return rest;
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 23, 14))
}
function foo8(...rest) {
>foo8 : Symbol(foo8, Decl(emitRestParametersArgumentsCollision.ts, 27, 1))
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 28, 14))

    var notUsed, arguments = 0;
>notUsed : Symbol(notUsed, Decl(emitRestParametersArgumentsCollision.ts, 29, 7))
>arguments : Symbol(arguments, Decl(emitRestParametersArgumentsCollision.ts, 29, 16))

    return rest;
>rest : Symbol(rest, Decl(emitRestParametersArgumentsCollision.ts, 28, 14))
}
