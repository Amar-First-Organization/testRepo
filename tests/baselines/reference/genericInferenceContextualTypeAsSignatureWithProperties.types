=== tests/cases/compiler/genericInferenceContextualTypeAsSignatureWithProperties.ts ===
// repro from #52262

const inner = <T extends 'a' | 'b' | 'c'>(cb: (arg: T) => void) => {};
>inner : <T extends "a" | "b" | "c">(cb: (arg: T) => void) => void
><T extends 'a' | 'b' | 'c'>(cb: (arg: T) => void) => {} : <T extends "a" | "b" | "c">(cb: (arg: T) => void) => void
>cb : (arg: T) => void
>arg : T

interface FuncB<T> {
  (arg: T): void;
>arg : T

  x?: string;
>x : string | undefined

};
const outerB = <T,>(func: FuncB<T>, arg: T) => {};
>outerB : <T>(func: FuncB<T>, arg: T) => void
><T,>(func: FuncB<T>, arg: T) => {} : <T>(func: FuncB<T>, arg: T) => void
>func : FuncB<T>
>arg : T

outerB(inner, (arg: 'a' | 'b') => {});
>outerB(inner, (arg: 'a' | 'b') => {}) : void
>outerB : <T>(func: FuncB<T>, arg: T) => void
>inner : <T extends "a" | "b" | "c">(cb: (arg: T) => void) => void
>(arg: 'a' | 'b') => {} : (arg: 'a' | 'b') => void
>arg : "a" | "b"

