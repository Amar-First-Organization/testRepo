=== tests/cases/compiler/mod.d.ts ===
declare function expect(spy: Function): void;
>expect : Symbol(expect, Decl(mod.d.ts, 0, 0), Decl(mod.d.ts, 0, 45), Decl(index.d.ts, 0, 0), Decl(mine.ts, 2, 16))
>spy : Symbol(spy, Decl(mod.d.ts, 0, 24))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

declare function expect<T>(actual: ArrayLike<T>): void;
>expect : Symbol(expect, Decl(mod.d.ts, 0, 0), Decl(mod.d.ts, 0, 45), Decl(index.d.ts, 0, 0), Decl(mine.ts, 2, 16))
>T : Symbol(T, Decl(mod.d.ts, 1, 24))
>actual : Symbol(actual, Decl(mod.d.ts, 1, 27))
>ArrayLike : Symbol(ArrayLike, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(mod.d.ts, 1, 24))

declare module "mod" {
>"mod" : Symbol("mod", Decl(mod.d.ts, 1, 55))

    class mod {}
>mod : Symbol(mod, Decl(mod.d.ts, 2, 22))

    export = mod;
>mod : Symbol(mod, Decl(mod.d.ts, 2, 22))
}
=== tests/cases/compiler/mine.ts ===
import "mod";

declare global {
>global : Symbol(global, Decl(mine.ts, 0, 13))

    function expect(element: string): void;
>expect : Symbol(expect, Decl(mod.d.ts, 0, 0), Decl(mod.d.ts, 0, 45), Decl(index.d.ts, 0, 0), Decl(mine.ts, 2, 16))
>element : Symbol(element, Decl(mine.ts, 3, 20))
}
=== tests/cases/compiler/index.d.ts ===
declare function expect(spy: Function): void;
>expect : Symbol(expect, Decl(mod.d.ts, 0, 0), Decl(mod.d.ts, 0, 45), Decl(index.d.ts, 0, 0), Decl(mine.ts, 2, 16))
>spy : Symbol(spy, Decl(index.d.ts, 0, 24))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

