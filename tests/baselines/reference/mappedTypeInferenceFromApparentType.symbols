//// [tests/cases/compiler/mappedTypeInferenceFromApparentType.ts] ////

=== mappedTypeInferenceFromApparentType.ts ===
type Obj = {
>Obj : Symbol(Obj, Decl(mappedTypeInferenceFromApparentType.ts, 0, 0))

    [s: string]: number;
>s : Symbol(s, Decl(mappedTypeInferenceFromApparentType.ts, 1, 5))

    [u: symbol]: boolean;
>u : Symbol(u, Decl(mappedTypeInferenceFromApparentType.ts, 2, 5))

};

type foo = <T>(target: { [K in keyof T]: T[K] }) => void;
>foo : Symbol(foo, Decl(mappedTypeInferenceFromApparentType.ts, 3, 2))
>T : Symbol(T, Decl(mappedTypeInferenceFromApparentType.ts, 5, 12))
>target : Symbol(target, Decl(mappedTypeInferenceFromApparentType.ts, 5, 15))
>K : Symbol(K, Decl(mappedTypeInferenceFromApparentType.ts, 5, 26))
>T : Symbol(T, Decl(mappedTypeInferenceFromApparentType.ts, 5, 12))
>T : Symbol(T, Decl(mappedTypeInferenceFromApparentType.ts, 5, 12))
>K : Symbol(K, Decl(mappedTypeInferenceFromApparentType.ts, 5, 26))

type bar = <U extends string[]>(source: { [K in keyof U]: Obj[K] }) => void;
>bar : Symbol(bar, Decl(mappedTypeInferenceFromApparentType.ts, 5, 57))
>U : Symbol(U, Decl(mappedTypeInferenceFromApparentType.ts, 6, 12))
>source : Symbol(source, Decl(mappedTypeInferenceFromApparentType.ts, 6, 32))
>K : Symbol(K, Decl(mappedTypeInferenceFromApparentType.ts, 6, 43))
>U : Symbol(U, Decl(mappedTypeInferenceFromApparentType.ts, 6, 12))
>Obj : Symbol(Obj, Decl(mappedTypeInferenceFromApparentType.ts, 0, 0))
>K : Symbol(K, Decl(mappedTypeInferenceFromApparentType.ts, 6, 43))

declare let f: foo;
>f : Symbol(f, Decl(mappedTypeInferenceFromApparentType.ts, 8, 11))
>foo : Symbol(foo, Decl(mappedTypeInferenceFromApparentType.ts, 3, 2))

declare let b: bar;
>b : Symbol(b, Decl(mappedTypeInferenceFromApparentType.ts, 9, 11))
>bar : Symbol(bar, Decl(mappedTypeInferenceFromApparentType.ts, 5, 57))

b = f;
>b : Symbol(b, Decl(mappedTypeInferenceFromApparentType.ts, 9, 11))
>f : Symbol(f, Decl(mappedTypeInferenceFromApparentType.ts, 8, 11))

