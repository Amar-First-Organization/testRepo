//// [tests/cases/compiler/mapGroupBy.ts] ////

=== mapGroupBy.ts ===
const basic = Map.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large');
>basic : Map<"small" | "large", number[]>
>Map.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large') : Map<"small" | "large", number[]>
>Map.groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>Map : MapConstructor
>groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>[0, 2, 8] : number[]
>0 : 0
>2 : 2
>8 : 8
>x => x < 5 ? 'small' : 'large' : (x: number) => "small" | "large"
>x : number
>x < 5 ? 'small' : 'large' : "small" | "large"
>x < 5 : boolean
>x : number
>5 : 5
>'small' : "small"
>'large' : "large"

const chars = Map.groupBy('a string', c => c);
>chars : Map<string, string[]>
>Map.groupBy('a string', c => c) : Map<string, string[]>
>Map.groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>Map : MapConstructor
>groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>'a string' : "a string"
>c => c : (c: string) => string
>c : string
>c : string

type Employee = { name: string, role: 'ic' | 'manager' }
>Employee : { name: string; role: 'ic' | 'manager'; }
>name : string
>role : "ic" | "manager"

const employees: Set<Employee> = new Set();
>employees : Set<Employee>
>new Set() : Set<Employee>
>Set : SetConstructor

const byRole = Map.groupBy(employees, x => x.role);
>byRole : Map<"ic" | "manager", Employee[]>
>Map.groupBy(employees, x => x.role) : Map<"ic" | "manager", Employee[]>
>Map.groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>Map : MapConstructor
>groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>employees : Set<Employee>
>x => x.role : (x: Employee) => "ic" | "manager"
>x : Employee
>x.role : "ic" | "manager"
>x : Employee
>role : "ic" | "manager"

const byNonKey = Map.groupBy(employees, x => x);
>byNonKey : Map<Employee, Employee[]>
>Map.groupBy(employees, x => x) : Map<Employee, Employee[]>
>Map.groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>Map : MapConstructor
>groupBy : <Item, Key>(items: Iterable<Item>, keySelector: (item: Item, index: number) => Key) => Map<Key, Item[]>
>employees : Set<Employee>
>x => x : (x: Employee) => Employee
>x : Employee
>x : Employee

