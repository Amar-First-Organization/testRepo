=== tests/cases/conformance/expressions/assignmentOperator/compoundAssignmentLHSIsValue.ts ===
// expected error for all the LHS of compound assignments (arithmetic and addition)
var value: any;
>value : any

// this
class C {
>C : C

    constructor() {
        this *= value;
>this *= value : number
>this : this
>value : any

        this += value;
>this += value : any
>this : this
>value : any
    }
    foo() {
>foo : () => void

        this *= value;
>this *= value : number
>this : this
>value : any

        this += value;
>this += value : any
>this : this
>value : any
    }
    static sfoo() {
>sfoo : () => void

        this *= value;
>this *= value : number
>this : typeof C
>value : any

        this += value;
>this += value : any
>this : typeof C
>value : any
    }
}

function foo() {
>foo : () => void

    this *= value;
>this *= value : number
>this : any
>value : any

    this += value;
>this += value : any
>this : any
>value : any
}

this *= value;
>this *= value : number
>this : any
>value : any

this += value;
>this += value : any
>this : any
>value : any

// identifiers: module, class, enum, function
module M { export var a; }
>M : typeof M
>a : any

M *= value;
>M *= value : number
>M : any (error)
>value : any

M += value;
>M += value : any (error)
>M : any (error)
>value : any

C *= value;
>C *= value : number
>C : any (error)
>value : any

C += value;
>C += value : any (error)
>C : any (error)
>value : any

enum E { }
>E : E

E *= value;
>E *= value : number
>E : any (error)
>value : any

E += value;
>E += value : any (error)
>E : any (error)
>value : any

foo *= value;
>foo *= value : number
>foo : any (error)
>value : any

foo += value;
>foo += value : any (error)
>foo : any (error)
>value : any

// literals
null *= value;
>null *= value : number
>null : null
>value : any

null += value;
>null += value : any
>null : null
>value : any

true *= value;
>true *= value : number
>true : true
>value : any

true += value;
>true += value : any
>true : true
>value : any

false *= value;
>false *= value : number
>false : false
>value : any

false += value;
>false += value : any
>false : false
>value : any

0 *= value;
>0 *= value : number
>0 : 0
>value : any

0 += value;
>0 += value : any
>0 : 0
>value : any

'' *= value;
>'' *= value : number
>'' : ""
>value : any

'' += value;
>'' += value : string
>'' : ""
>value : any

/d+/ *= value;
>/d+/ *= value : number
>/d+/ : RegExp
>value : any

/d+/ += value;
>/d+/ += value : any
>/d+/ : RegExp
>value : any

// object literals
{ a: 0} *= value;
>a : any (error)
>0 : 0
>value : any

{ a: 0} += value;
>a : any (error)
>0 : 0
>value : any

// array literals
['', ''] *= value;
>['', ''] *= value : number
>['', ''] : [string, string]
>'' : ""
>'' : ""
>value : any

['', ''] += value;
>['', ''] += value : any
>['', ''] : [string, string]
>'' : ""
>'' : ""
>value : any

// super
class Derived extends C {
>Derived : Derived
>C : C

    constructor() {
        super();
>super() : void
>super : typeof C

        super *= value;
>super *= value : number
>super : any (error)
>super : C
> : any (error)
>value : any

        super += value;
>super += value : any (error)
>super : any (error)
>super : C
> : any (error)
>value : any
    }

    foo() {
>foo : () => void

        super *= value;
>super *= value : number
>super : any (error)
>super : C
> : any (error)
>value : any

        super += value;
>super += value : any (error)
>super : any (error)
>super : C
> : any (error)
>value : any
    }

    static sfoo() {
>sfoo : () => void

        super *= value;
>super *= value : number
>super : any (error)
>super : typeof C
> : any (error)
>value : any

        super += value;
>super += value : any (error)
>super : any (error)
>super : typeof C
> : any (error)
>value : any
    }
}

// function expression
function bar1() { } *= value;
>bar1 : () => void
>value : any

function bar2() { } += value;
>bar2 : () => void
>value : any

() => { } *= value;
>() => { } : () => void
>value : any

() => { } += value;
>() => { } : () => void
>value : any

// function calls
foo() *= value;
>foo() *= value : number
>foo() : void
>foo : () => void
>value : any

foo() += value;
>foo() += value : any
>foo() : void
>foo : () => void
>value : any

// parentheses, the containted expression is value
(this) *= value;
>(this) *= value : number
>(this) : any
>this : any
>value : any

(this) += value;
>(this) += value : any
>(this) : any
>this : any
>value : any

(M) *= value;
>(M) *= value : number
>(M) : any (error)
>M : any (error)
>value : any

(M) += value;
>(M) += value : any (error)
>(M) : any (error)
>M : any (error)
>value : any

(C) *= value;
>(C) *= value : number
>(C) : any (error)
>C : any (error)
>value : any

(C) += value;
>(C) += value : any (error)
>(C) : any (error)
>C : any (error)
>value : any

(E) *= value;
>(E) *= value : number
>(E) : any (error)
>E : any (error)
>value : any

(E) += value;
>(E) += value : any (error)
>(E) : any (error)
>E : any (error)
>value : any

(foo) *= value;
>(foo) *= value : number
>(foo) : any (error)
>foo : any (error)
>value : any

(foo) += value;
>(foo) += value : any (error)
>(foo) : any (error)
>foo : any (error)
>value : any

(null) *= value;
>(null) *= value : number
>(null) : null
>null : null
>value : any

(null) += value;
>(null) += value : any
>(null) : null
>null : null
>value : any

(true) *= value;
>(true) *= value : number
>(true) : true
>true : true
>value : any

(true) += value;
>(true) += value : any
>(true) : true
>true : true
>value : any

(0) *= value;
>(0) *= value : number
>(0) : 0
>0 : 0
>value : any

(0) += value;
>(0) += value : any
>(0) : 0
>0 : 0
>value : any

('') *= value;
>('') *= value : number
>('') : ""
>'' : ""
>value : any

('') += value;
>('') += value : string
>('') : ""
>'' : ""
>value : any

(/d+/) *= value;
>(/d+/) *= value : number
>(/d+/) : RegExp
>/d+/ : RegExp
>value : any

(/d+/) += value;
>(/d+/) += value : any
>(/d+/) : RegExp
>/d+/ : RegExp
>value : any

({}) *= value;
>({}) *= value : number
>({}) : {}
>{} : {}
>value : any

({}) += value;
>({}) += value : any
>({}) : {}
>{} : {}
>value : any

([]) *= value;
>([]) *= value : number
>([]) : undefined[]
>[] : undefined[]
>value : any

([]) += value;
>([]) += value : any
>([]) : undefined[]
>[] : undefined[]
>value : any

(function baz1() { }) *= value;
>(function baz1() { }) *= value : number
>(function baz1() { }) : () => void
>function baz1() { } : () => void
>baz1 : () => void
>value : any

(function baz2() { }) += value;
>(function baz2() { }) += value : any
>(function baz2() { }) : () => void
>function baz2() { } : () => void
>baz2 : () => void
>value : any

(foo()) *= value;
>(foo()) *= value : number
>(foo()) : void
>foo() : void
>foo : () => void
>value : any

(foo()) += value;
>(foo()) += value : any
>(foo()) : void
>foo() : void
>foo : () => void
>value : any

