=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes04.ts ===
type T = "" | "foo";
>T : T

let x: T = undefined;
>x : T
>T : T
>undefined : undefined

let y: T = undefined;
>y : T
>T : T
>undefined : undefined

if (x === "") {
>x === "" : boolean
>x : T
>"" : ""

    let a = x;
>a : ""
>x : ""
}

if (x !== "") {
>x !== "" : boolean
>x : "" | "foo"
>"" : ""

    let b = x;
>b : "foo"
>x : "foo"
}

if (x == "") {
>x == "" : boolean
>x : "" | "foo"
>"" : ""

    let c = x;
>c : ""
>x : ""
}

if (x != "") {
>x != "" : boolean
>x : "" | "foo"
>"" : ""

    let d = x;
>d : "foo"
>x : "foo"
}

if (x) {
>x : "" | "foo"

    let e = x;
>e : "foo"
>x : "foo"
}

if (!x) {
>!x : boolean
>x : "" | "foo"

    let f = x;
>f : "" | "foo"
>x : "" | "foo"
}

if (!!x) {
>!!x : boolean
>!x : boolean
>x : "" | "foo"

    let g = x;
>g : "foo"
>x : "foo"
}

if (!!!x) {
>!!!x : boolean
>!!x : boolean
>!x : boolean
>x : "" | "foo"

    let h = x;
>h : "" | "foo"
>x : "" | "foo"
}
