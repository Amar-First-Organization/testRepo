=== tests/cases/compiler/destructureCatchClause.ts ===
try {} catch ({ x }) { x }
>x : any
>x : any

try {} catch ([ x ]) { x }
>x : any
>x : any

try {} catch ({ a: { x } }) { x }
>a : any
>x : any
>x : any

try {} catch ({ a: [ x ] }) { x }
>a : any
>x : any
>x : any

try {} catch ([{ x }]) { x }
>x : any
>x : any

try {} catch ([[ x ]]) { x }
>x : any
>x : any

try {} catch ({ a: { b: { c: { x }} }}) { x }
>a : any
>b : any
>c : any
>x : any
>x : any


try {} catch ({ x }: any) { x }
>x : any
>x : any

try {} catch ([ x ]: any) { x }
>x : any
>x : any

try {} catch ({ a: { x } }: any) { x }
>a : any
>x : any
>x : any

try {} catch ({ a: [ x ] }: any) { x }
>a : any
>x : any
>x : any

try {} catch ([{ x }]: any) { x }
>x : any
>x : any

try {} catch ([[ x ]]: any) { x }
>x : any
>x : any

try {} catch ({ a: { b: { c: { x }} }}: any) { x }
>a : any
>b : any
>c : any
>x : any
>x : any


try {} catch ({ x }: unknown) { x }
>x : any
>x : any

try {} catch ([ x ]: unknown) { x }
>x : any
>x : any

try {} catch ({ a: { x } }: unknown) { x }
>a : any
>x : any
>x : any

try {} catch ({ a: [ x ] }: unknown) { x }
>a : any
>x : any
>x : any

try {} catch ([{ x }]: unknown) { x }
>x : any
>x : any

try {} catch ([[ x ]]: unknown) { x }
>x : any
>x : any

try {} catch ({ a: { b: { c: { x }} }}: unknown) { x }
>a : any
>b : any
>c : any
>x : any
>x : any

