//// [tests/cases/compiler/nativeIterator.ts] ////

=== nativeIterator.ts ===
const iterator = Iterator.from([0, 1, 2]);
>iterator : NativeIterator<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Iterator.from([0, 1, 2]) : NativeIterator<number, void, undefined>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Iterator.from : <T>(value: Iterator<T> | Iterable<T>) => NativeIterator<T, void, undefined>
>              : ^ ^^     ^^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Iterator : (abstract new <T>() => NativeIterator<T, void, undefined>) & IteratorConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : <T>(value: Iterator<T> | Iterable<T>) => NativeIterator<T, void, undefined>
>     : ^ ^^     ^^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[0, 1, 2] : number[]
>          : ^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^
>2 : 2
>  : ^

const mapped = iterator.map(String);
>mapped : NativeIterator<string, void, undefined>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator.map(String) : NativeIterator<string, void, undefined>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator.map : <U>(callbackfn: (value: number, index: number) => U) => NativeIterator<U, void, undefined>
>             : ^^^^          ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator : NativeIterator<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : <U>(callbackfn: (value: number, index: number) => U) => NativeIterator<U, void, undefined>
>    : ^^^^          ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^

const filtered = iterator.filter(x => x > 0);
>filtered : NativeIterator<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator.filter(x => x > 0) : NativeIterator<number, void, undefined>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator.filter : { <S extends number>(predicate: (value: number, index: number) => value is S): NativeIterator<S, void, undefined>; (predicate: (value: number, index: number) => unknown): NativeIterator<number, void, undefined>; }
>                : ^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator : NativeIterator<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>filter : { <S extends number>(predicate: (value: number, index: number) => value is S): NativeIterator<S, void, undefined>; (predicate: (value: number, index: number) => unknown): NativeIterator<number, void, undefined>; }
>       : ^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x => x > 0 : (x: number) => boolean
>           : ^ ^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>x > 0 : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^

function isZero(x: number): x is 0 {
>isZero : (x: number) => x is 0
>       : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

  return x === 0;
>x === 0 : boolean
>        : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
}
const zero = iterator.filter(isZero);
>zero : NativeIterator<0, void, undefined>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator.filter(isZero) : NativeIterator<0, void, undefined>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator.filter : { <S extends number>(predicate: (value: number, index: number) => value is S): NativeIterator<S, void, undefined>; (predicate: (value: number, index: number) => unknown): NativeIterator<number, void, undefined>; }
>                : ^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>iterator : NativeIterator<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>filter : { <S extends number>(predicate: (value: number, index: number) => value is S): NativeIterator<S, void, undefined>; (predicate: (value: number, index: number) => unknown): NativeIterator<number, void, undefined>; }
>       : ^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>isZero : (x: number) => x is 0
>       : ^ ^^      ^^^^^^^^^^^

const iteratorFromBare = Iterator.from({
>iteratorFromBare : NativeIterator<string, void, undefined>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Iterator.from({  next() {    return {      done: Math.random() < .5,      value: "a string",    };  },}) : NativeIterator<string, void, undefined>
>                                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Iterator.from : <T>(value: Iterator<T> | Iterable<T>) => NativeIterator<T, void, undefined>
>              : ^ ^^     ^^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Iterator : (abstract new <T>() => NativeIterator<T, void, undefined>) & IteratorConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : <T>(value: Iterator<T> | Iterable<T>) => NativeIterator<T, void, undefined>
>     : ^ ^^     ^^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{  next() {    return {      done: Math.random() < .5,      value: "a string",    };  },} : { next(): { done: boolean; value: string; }; }
>                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  next() {
>next : () => { done: boolean; value: string; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return {
>{      done: Math.random() < .5,      value: "a string",    } : { done: boolean; value: string; }
>                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

      done: Math.random() < .5,
>done : boolean
>     : ^^^^^^^
>Math.random() < .5 : boolean
>                   : ^^^^^^^
>Math.random() : number
>              : ^^^^^^
>Math.random : () => number
>            : ^^^^^^^^^^^^
>Math : Math
>     : ^^^^
>random : () => number
>       : ^^^^^^^^^^^^
>.5 : 0.5
>   : ^^^

      value: "a string",
>value : string
>      : ^^^^^^
>"a string" : "a string"
>           : ^^^^^^^^^^

    };
  },
});


function* gen() {
>gen : () => Generator<number, void, unknown>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  yield 0;
>yield 0 : any
>0 : 0
>  : ^
}

const mappedGen = gen().map(x => x === 0 ? "zero" : "other");
>mappedGen : NativeIterator<"zero" | "other", void, undefined>
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>gen().map(x => x === 0 ? "zero" : "other") : NativeIterator<"zero" | "other", void, undefined>
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>gen().map : <U>(callbackfn: (value: number, index: number) => U) => NativeIterator<U, void, undefined>
>          : ^^^^          ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>gen() : Generator<number, void, unknown>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>gen : () => Generator<number, void, unknown>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : <U>(callbackfn: (value: number, index: number) => U) => NativeIterator<U, void, undefined>
>    : ^^^^          ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x => x === 0 ? "zero" : "other" : (x: number) => "zero" | "other"
>                                : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>x === 0 ? "zero" : "other" : "zero" | "other"
>                           : ^^^^^^^^^^^^^^^^
>x === 0 : boolean
>        : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>"zero" : "zero"
>       : ^^^^^^
>"other" : "other"
>        : ^^^^^^^

const mappedValues = [0, 1, 2].values().map(x => x === 0 ? "zero" : "other");
>mappedValues : NativeIterator<"zero" | "other", void, undefined>
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[0, 1, 2].values().map(x => x === 0 ? "zero" : "other") : NativeIterator<"zero" | "other", void, undefined>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[0, 1, 2].values().map : <U>(callbackfn: (value: number, index: number) => U) => NativeIterator<U, void, undefined>
>                       : ^^^^          ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[0, 1, 2].values() : NativeIterator<number, void, undefined>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[0, 1, 2].values : { (): IterableIterator<number>; (): NativeIterator<number, void, undefined>; }
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[0, 1, 2] : number[]
>          : ^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^
>2 : 2
>  : ^
>values : { (): IterableIterator<number>; (): NativeIterator<number, void, undefined>; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : <U>(callbackfn: (value: number, index: number) => U) => NativeIterator<U, void, undefined>
>    : ^^^^          ^^^     ^^^^^^^^^^     ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x => x === 0 ? "zero" : "other" : (x: number) => "zero" | "other"
>                                : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>x === 0 ? "zero" : "other" : "zero" | "other"
>                           : ^^^^^^^^^^^^^^^^
>x === 0 : boolean
>        : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>"zero" : "zero"
>       : ^^^^^^
>"other" : "other"
>        : ^^^^^^^

