=== tests/cases/compiler/decoratorsOnComputedProperties.ts ===
function x(o: object, k: PropertyKey) { }
>x : (o: object, k: PropertyKey) => void
>o : object
>k : PropertyKey
>PropertyKey : PropertyKey

let i = 0;
>i : number
>0 : 0

function foo(): string { return ++i + ""; }
>foo : () => string
>++i + "" : string
>++i : number
>i : number
>"" : ""

const fieldNameA: string = "fieldName1";
>fieldNameA : string
>"fieldName1" : "fieldName1"

const fieldNameB: string = "fieldName2";
>fieldNameB : string
>"fieldName2" : "fieldName2"

const fieldNameC: string = "fieldName3";
>fieldNameC : string
>"fieldName3" : "fieldName3"

class A {
>A : A

    @x ["property"]: any;
>x : (o: object, k: PropertyKey) => void
>"property" : "property"

    @x [Symbol.toStringTag]: any;
>x : (o: object, k: PropertyKey) => void
>Symbol.toStringTag : symbol
>Symbol : SymbolConstructor
>toStringTag : symbol

    @x ["property2"]: any = 2;
>x : (o: object, k: PropertyKey) => void
>"property2" : "property2"
>2 : 2

    @x [Symbol.iterator]: any = null;
>x : (o: object, k: PropertyKey) => void
>Symbol.iterator : symbol
>Symbol : SymbolConstructor
>iterator : symbol
>null : null

    ["property3"]: any;
>"property3" : "property3"

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : symbol
>Symbol : SymbolConstructor
>isConcatSpreadable : symbol

    ["property4"]: any = 2;
>"property4" : "property4"
>2 : 2

    [Symbol.match]: any = null;
>Symbol.match : symbol
>Symbol : SymbolConstructor
>match : symbol
>null : null

    [foo()]: any;
>foo() : string
>foo : () => string

    @x [foo()]: any;
>x : (o: object, k: PropertyKey) => void
>foo() : string
>foo : () => string

    @x [foo()]: any = null;
>x : (o: object, k: PropertyKey) => void
>foo() : string
>foo : () => string
>null : null

    [fieldNameA]: any;
>fieldNameA : string

    @x [fieldNameB]: any;
>x : (o: object, k: PropertyKey) => void
>fieldNameB : string

    @x [fieldNameC]: any = null;
>x : (o: object, k: PropertyKey) => void
>fieldNameC : string
>null : null
}

void class B {
>void class B {    @x ["property"]: any;    @x [Symbol.toStringTag]: any;    @x ["property2"]: any = 2;    @x [Symbol.iterator]: any = null;    ["property3"]: any;    [Symbol.isConcatSpreadable]: any;    ["property4"]: any = 2;    [Symbol.match]: any = null;    [foo()]: any;    @x [foo()]: any;    @x [foo()]: any = null;    [fieldNameA]: any;    @x [fieldNameB]: any;    @x [fieldNameC]: any = null;} : undefined
>class B {    @x ["property"]: any;    @x [Symbol.toStringTag]: any;    @x ["property2"]: any = 2;    @x [Symbol.iterator]: any = null;    ["property3"]: any;    [Symbol.isConcatSpreadable]: any;    ["property4"]: any = 2;    [Symbol.match]: any = null;    [foo()]: any;    @x [foo()]: any;    @x [foo()]: any = null;    [fieldNameA]: any;    @x [fieldNameB]: any;    @x [fieldNameC]: any = null;} : typeof B
>B : typeof B

    @x ["property"]: any;
>x : (o: object, k: PropertyKey) => void
>"property" : "property"

    @x [Symbol.toStringTag]: any;
>x : (o: object, k: PropertyKey) => void
>Symbol.toStringTag : symbol
>Symbol : SymbolConstructor
>toStringTag : symbol

    @x ["property2"]: any = 2;
>x : (o: object, k: PropertyKey) => void
>"property2" : "property2"
>2 : 2

    @x [Symbol.iterator]: any = null;
>x : (o: object, k: PropertyKey) => void
>Symbol.iterator : symbol
>Symbol : SymbolConstructor
>iterator : symbol
>null : null

    ["property3"]: any;
>"property3" : "property3"

    [Symbol.isConcatSpreadable]: any;
>Symbol.isConcatSpreadable : symbol
>Symbol : SymbolConstructor
>isConcatSpreadable : symbol

    ["property4"]: any = 2;
>"property4" : "property4"
>2 : 2

    [Symbol.match]: any = null;
>Symbol.match : symbol
>Symbol : SymbolConstructor
>match : symbol
>null : null

    [foo()]: any;
>foo() : string
>foo : () => string

    @x [foo()]: any;
>x : (o: object, k: PropertyKey) => void
>foo() : string
>foo : () => string

    @x [foo()]: any = null;
>x : (o: object, k: PropertyKey) => void
>foo() : string
>foo : () => string
>null : null

    [fieldNameA]: any;
>fieldNameA : string

    @x [fieldNameB]: any;
>x : (o: object, k: PropertyKey) => void
>fieldNameB : string

    @x [fieldNameC]: any = null;
>x : (o: object, k: PropertyKey) => void
>fieldNameC : string
>null : null

};

