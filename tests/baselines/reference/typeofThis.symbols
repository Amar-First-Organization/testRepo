=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeofThis.ts ===
class Test {
>Test : Symbol(Test, Decl(typeofThis.ts, 0, 0))

    data = {};
>data : Symbol(Test.data, Decl(typeofThis.ts, 0, 12))

    constructor() {
        var copy: typeof this.data = {};
>copy : Symbol(copy, Decl(typeofThis.ts, 3, 11))
>this.data : Symbol(Test.data, Decl(typeofThis.ts, 0, 12))
>data : Symbol(Test.data, Decl(typeofThis.ts, 0, 12))
    }
}

class Test1 {
>Test1 : Symbol(Test1, Decl(typeofThis.ts, 5, 1))

    data = { foo: '' };
>data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>foo : Symbol(foo, Decl(typeofThis.ts, 8, 12))

    ['this'] = '';
>['this'] : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))
>'this' : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))

    constructor() {
        var copy: typeof this.data = { foo: '' };
>copy : Symbol(copy, Decl(typeofThis.ts, 11, 11))
>this.data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>foo : Symbol(foo, Decl(typeofThis.ts, 11, 38))

        var self: typeof this = this;
>self : Symbol(self, Decl(typeofThis.ts, 13, 11))
>this : Symbol(Test1, Decl(typeofThis.ts, 5, 1))

        self.data;
>self.data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>self : Symbol(self, Decl(typeofThis.ts, 13, 11))
>data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))

        var str: typeof this.this = '';
>str : Symbol(str, Decl(typeofThis.ts, 16, 11))
>this.this : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))
>this : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))
    }
}


function Test2() {
>Test2 : Symbol(Test2, Decl(typeofThis.ts, 18, 1))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 22, 7))
}

function Test3(this: { no: number }) {
>Test3 : Symbol(Test3, Decl(typeofThis.ts, 23, 1))
>this : Symbol(this, Decl(typeofThis.ts, 25, 15))
>no : Symbol(no, Decl(typeofThis.ts, 25, 22))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 26, 7))
>this.no : Symbol(no, Decl(typeofThis.ts, 25, 22))
>this : Symbol(this, Decl(typeofThis.ts, 25, 15))
>no : Symbol(no, Decl(typeofThis.ts, 25, 22))
}

function Test4(this: { no: number } | undefined) {
>Test4 : Symbol(Test4, Decl(typeofThis.ts, 27, 1))
>this : Symbol(this, Decl(typeofThis.ts, 29, 15))
>no : Symbol(no, Decl(typeofThis.ts, 29, 22))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 30, 7))
>this.no : Symbol(no, Decl(typeofThis.ts, 29, 22))
>this : Symbol(this, Decl(typeofThis.ts, 29, 15))
>no : Symbol(no, Decl(typeofThis.ts, 29, 22))
}

class Test5 {
>Test5 : Symbol(Test5, Decl(typeofThis.ts, 31, 1))

    no = 1;
>no : Symbol(Test5.no, Decl(typeofThis.ts, 33, 13))

    f = () => {
>f : Symbol(Test5.f, Decl(typeofThis.ts, 34, 11))

        // should not capture this.
        let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 38, 11))
>this.no : Symbol(Test5.no, Decl(typeofThis.ts, 33, 13))
>no : Symbol(Test5.no, Decl(typeofThis.ts, 33, 13))
    }
}

namespace Test6 {
>Test6 : Symbol(Test6, Decl(typeofThis.ts, 40, 1))

    export let f = () => {
>f : Symbol(f, Decl(typeofThis.ts, 43, 14))

        let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 44, 11))
    }
}

module Test7 {
>Test7 : Symbol(Test7, Decl(typeofThis.ts, 46, 1))

    export let f = () => {
>f : Symbol(f, Decl(typeofThis.ts, 49, 14))

        let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 50, 11))
    }
}

const Test8 = () => {
>Test8 : Symbol(Test8, Decl(typeofThis.ts, 54, 5))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 55, 7))
}

class Test9 {
>Test9 : Symbol(Test9, Decl(typeofThis.ts, 56, 1))

    no = 0;
>no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))

    this = 0;
>this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))

    f() {
>f : Symbol(Test9.f, Decl(typeofThis.ts, 60, 13))

        if (this instanceof Test9D1) {
>this : Symbol(Test9, Decl(typeofThis.ts, 56, 1))
>Test9D1 : Symbol(Test9D1, Decl(typeofThis.ts, 83, 1))

            const d1: typeof this = this;
>d1 : Symbol(d1, Decl(typeofThis.ts, 64, 17))

            d1.f1();
>d1.f1 : Symbol(Test9D1.f1, Decl(typeofThis.ts, 85, 15))
>d1 : Symbol(d1, Decl(typeofThis.ts, 64, 17))
>f1 : Symbol(Test9D1.f1, Decl(typeofThis.ts, 85, 15))
        }

        if (this instanceof Test9D2) {
>this : Symbol(Test9, Decl(typeofThis.ts, 56, 1))
>Test9D2 : Symbol(Test9D2, Decl(typeofThis.ts, 87, 1))

            const d2: typeof this = this;
>d2 : Symbol(d2, Decl(typeofThis.ts, 69, 17))

            d2.f2();
>d2.f2 : Symbol(Test9D2.f2, Decl(typeofThis.ts, 89, 15))
>d2 : Symbol(d2, Decl(typeofThis.ts, 69, 17))
>f2 : Symbol(Test9D2.f2, Decl(typeofThis.ts, 89, 15))
        }
    }

    g() {
>g : Symbol(Test9.g, Decl(typeofThis.ts, 72, 5))

        if (this.no === 1) {
>this.no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))
>this : Symbol(Test9, Decl(typeofThis.ts, 56, 1))
>no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))

            const no: typeof this.no = this.no;
>no : Symbol(no, Decl(typeofThis.ts, 76, 17))
>this.no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))
>no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))
>this.no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))
>this : Symbol(Test9, Decl(typeofThis.ts, 56, 1))
>no : Symbol(Test9.no, Decl(typeofThis.ts, 58, 13))
        }

        if (this.this === 1) {
>this.this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))
>this : Symbol(Test9, Decl(typeofThis.ts, 56, 1))
>this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))

            const no: typeof this.this = this.this;
>no : Symbol(no, Decl(typeofThis.ts, 80, 17))
>this.this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))
>this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))
>this.this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))
>this : Symbol(Test9, Decl(typeofThis.ts, 56, 1))
>this : Symbol(Test9.this, Decl(typeofThis.ts, 59, 11))
        }
    }
}

class Test9D1 {
>Test9D1 : Symbol(Test9D1, Decl(typeofThis.ts, 83, 1))

    f1() {}
>f1 : Symbol(Test9D1.f1, Decl(typeofThis.ts, 85, 15))
}

class Test9D2 {
>Test9D2 : Symbol(Test9D2, Decl(typeofThis.ts, 87, 1))

    f2() {}
>f2 : Symbol(Test9D2.f2, Decl(typeofThis.ts, 89, 15))
}
