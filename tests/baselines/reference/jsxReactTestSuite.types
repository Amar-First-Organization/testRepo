=== tests/cases/conformance/jsx/jsxReactTestSuite.tsx ===
declare var React: any;
>React : any

declare var Component:any;
>Component : any

declare var Composite:any;
>Composite : any

declare var Composite2:any;
>Composite2 : any

declare var Child:any;
>Child : any

declare var Namespace:any;
>Namespace : any

declare var foo: any;
>foo : any

declare var bar: any;
>bar : any

declare var y:any;
>y : any

declare var x:any;
>x : any

declare var z:any;
>z : any

declare var hasOwnProperty:any;
>hasOwnProperty : any

<div>text</div>;
><div>text</div> : any (error)
>div : any (error)
>div : any (error)

<div>
><div>  {this.props.children}</div> : any (error)
>div : any (error)

  {this.props.children}
>this.props.children : any
>this.props : any
>this : any
>props : any
>children : any

</div>;
>div : any (error)

<div>
><div>  <div><br /></div>  <Component>{foo}<br />{bar}</Component>  <br /></div> : any (error)
>div : any (error)

  <div><br /></div>
><div><br /></div> : any (error)
>div : any (error)
><br /> : any (error)
>br : any (error)
>div : any (error)

  <Component>{foo}<br />{bar}</Component>
><Component>{foo}<br />{bar}</Component> : any (error)
>Component : any
>foo : any
><br /> : any (error)
>br : any (error)
>bar : any
>Component : any

  <br />
><br /> : any (error)
>br : any (error)

</div>;
>div : any (error)


<Composite>
><Composite>    {this.props.children}</Composite> : any (error)
>Composite : any

    {this.props.children}
>this.props.children : any
>this.props : any
>this : any
>props : any
>children : any

</Composite>;
>Composite : any

<Composite>
><Composite>    <Composite2 /></Composite> : any (error)
>Composite : any

    <Composite2 />
><Composite2 /> : any (error)
>Composite2 : any

</Composite>;
>Composite : any

var x =
>x : any

  <div
><div    attr1={      "foo" + "bar"    }    attr2={      "foo" + "bar" +            "baz" + "bug"    }    attr3={      "foo" + "bar" +      "baz" + "bug"      // Extra line here.    }    attr4="baz">  </div> : any (error)
>div : any (error)

    attr1={
>attr1 : string

      "foo" + "bar"
>"foo" + "bar" : string
>"foo" : "foo"
>"bar" : "bar"
    }
    attr2={
>attr2 : string

      "foo" + "bar" +
>"foo" + "bar" +            "baz" + "bug" : string
>"foo" + "bar" +            "baz" : string
>"foo" + "bar" : string
>"foo" : "foo"
>"bar" : "bar"
      
      "baz" + "bug"
>"baz" : "baz"
>"bug" : "bug"
    }
    attr3={
>attr3 : string

      "foo" + "bar" +
>"foo" + "bar" +      "baz" + "bug" : string
>"foo" + "bar" +      "baz" : string
>"foo" + "bar" : string
>"foo" : "foo"
>"bar" : "bar"

      "baz" + "bug"
>"baz" : "baz"
>"bug" : "bug"

      // Extra line here.
    }
    attr4="baz">
>attr4 : string

  </div>;
>div : any (error)

(
>(  <div>    {/* A comment at the beginning */}    {/* A second comment at the beginning */}    <span>      {/* A nested comment */}    </span>    {/* A sandwiched comment */}    <br />    {/* A comment at the end */}    {/* A second comment at the end */}  </div>) : any (error)

  <div>
><div>    {/* A comment at the beginning */}    {/* A second comment at the beginning */}    <span>      {/* A nested comment */}    </span>    {/* A sandwiched comment */}    <br />    {/* A comment at the end */}    {/* A second comment at the end */}  </div> : any (error)
>div : any (error)

    {/* A comment at the beginning */}
    {/* A second comment at the beginning */}
    <span>
><span>      {/* A nested comment */}    </span> : any (error)
>span : any (error)

      {/* A nested comment */}
    </span>
>span : any (error)

    {/* A sandwiched comment */}
    <br />
><br /> : any (error)
>br : any (error)

    {/* A comment at the end */}
    {/* A second comment at the end */}
  </div>
>div : any (error)

);

(
>(  <div    /* a multi-line       comment */    attr1="foo">    <span // a double-slash comment      attr2="bar"    />  </div>) : any (error)

  <div
><div    /* a multi-line       comment */    attr1="foo">    <span // a double-slash comment      attr2="bar"    />  </div> : any (error)
>div : any (error)

    /* a multi-line
       comment */
    attr1="foo">
>attr1 : string

    <span // a double-slash comment
><span // a double-slash comment      attr2="bar"    /> : any (error)
>span : any (error)

      attr2="bar"
>attr2 : string

    />
  </div>
>div : any (error)

);

<div>&nbsp;</div>;
><div>&nbsp;</div> : any (error)
>div : any (error)
>div : any (error)

<div>&nbsp; </div>;
><div>&nbsp; </div> : any (error)
>div : any (error)
>div : any (error)

<hasOwnProperty>testing</hasOwnProperty>;
><hasOwnProperty>testing</hasOwnProperty> : any (error)
>hasOwnProperty : any
>hasOwnProperty : any

<Component constructor="foo" />;
><Component constructor="foo" /> : any (error)
>Component : any
>constructor : string

<Namespace.Component />;
><Namespace.Component /> : any (error)
>Namespace.Component : any
>Namespace : any
>Component : any

<Namespace.DeepNamespace.Component />;
><Namespace.DeepNamespace.Component /> : any (error)
>Namespace.DeepNamespace.Component : any
>Namespace.DeepNamespace : any
>Namespace : any
>DeepNamespace : any
>Component : any

<Component { ... x } y
><Component { ... x } y={2 } z /> : any (error)
>Component : any
>x : any
>y : number

={2 } z />;
>2 : 2
>z : true

<Component
><Component    {...this.props} sound="moo" /> : any (error)
>Component : any

    {...this.props} sound="moo" />;
>this.props : any
>this : any
>props : any
>sound : string

<font-face />;
><font-face /> : any (error)
>font-face : any (error)

<Component x={y} />;
><Component x={y} /> : any (error)
>Component : any
>x : any
>y : any

<x-component />;
><x-component /> : any (error)
>x-component : any (error)

<Component {...x} />;
><Component {...x} /> : any (error)
>Component : any
>x : any

<Component { ...x } y={2} />;
><Component { ...x } y={2} /> : any (error)
>Component : any
>x : any
>y : number
>2 : 2

<Component { ... x } y={2} z />;
><Component { ... x } y={2} z /> : any (error)
>Component : any
>x : any
>y : number
>2 : 2
>z : true

<Component x={1} {...y} />;
><Component x={1} {...y} /> : any (error)
>Component : any
>x : number
>1 : 1
>y : any


<Component x={1} y="2" {...z} {...z}><Child /></Component>;
><Component x={1} y="2" {...z} {...z}><Child /></Component> : any (error)
>Component : any
>x : number
>1 : 1
>y : string
>z : any
>z : any
><Child /> : any (error)
>Child : any
>Component : any

<Component x="1" {...(z = { y: 2 }, z)} z={3}>Text</Component>;
><Component x="1" {...(z = { y: 2 }, z)} z={3}>Text</Component> : any (error)
>Component : any
>x : string
>(z = { y: 2 }, z) : any
>z = { y: 2 }, z : any
>z = { y: 2 } : { y: number; }
>z : any
>{ y: 2 } : { y: number; }
>y : number
>2 : 2
>z : any
>z : number
>3 : 3
>Component : any



