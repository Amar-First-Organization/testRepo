//// [tests/cases/compiler/contextualInnerCallFromIndexedAccessType.ts] ////

=== contextualInnerCallFromIndexedAccessType.ts ===
interface EventObject { type: string; }
>EventObject : Symbol(EventObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 0))
>type : Symbol(EventObject.type, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 23))

interface TypegenDisabled { "@@xstate/typegen": 0; }
>TypegenDisabled : Symbol(TypegenDisabled, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 39))
>"@@xstate/typegen" : Symbol(TypegenDisabled["@@xstate/typegen"], Decl(contextualInnerCallFromIndexedAccessType.ts, 1, 27))

interface TypegenEnabled { "@@xstate/typegen": 1; }
>TypegenEnabled : Symbol(TypegenEnabled, Decl(contextualInnerCallFromIndexedAccessType.ts, 1, 52))
>"@@xstate/typegen" : Symbol(TypegenEnabled["@@xstate/typegen"], Decl(contextualInnerCallFromIndexedAccessType.ts, 2, 26))

type TypegenConstraint = TypegenEnabled | TypegenDisabled;
>TypegenConstraint : Symbol(TypegenConstraint, Decl(contextualInnerCallFromIndexedAccessType.ts, 2, 51))
>TypegenEnabled : Symbol(TypegenEnabled, Decl(contextualInnerCallFromIndexedAccessType.ts, 1, 52))
>TypegenDisabled : Symbol(TypegenDisabled, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 39))

interface ActionObject<TEvent extends EventObject> {
>ActionObject : Symbol(ActionObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 4, 58))
>TEvent : Symbol(TEvent, Decl(contextualInnerCallFromIndexedAccessType.ts, 6, 23))
>EventObject : Symbol(EventObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 0))

  type: string;
>type : Symbol(ActionObject.type, Decl(contextualInnerCallFromIndexedAccessType.ts, 6, 52))

  _TE?: TEvent;
>_TE : Symbol(ActionObject._TE, Decl(contextualInnerCallFromIndexedAccessType.ts, 7, 15))
>TEvent : Symbol(TEvent, Decl(contextualInnerCallFromIndexedAccessType.ts, 6, 23))
}

declare function assign<TEvent extends EventObject>(
>assign : Symbol(assign, Decl(contextualInnerCallFromIndexedAccessType.ts, 9, 1))
>TEvent : Symbol(TEvent, Decl(contextualInnerCallFromIndexedAccessType.ts, 11, 24))
>EventObject : Symbol(EventObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 0))

  assignment: (ev: TEvent) => void
>assignment : Symbol(assignment, Decl(contextualInnerCallFromIndexedAccessType.ts, 11, 52))
>ev : Symbol(ev, Decl(contextualInnerCallFromIndexedAccessType.ts, 12, 15))
>TEvent : Symbol(TEvent, Decl(contextualInnerCallFromIndexedAccessType.ts, 11, 24))

): ActionObject<TEvent>;
>ActionObject : Symbol(ActionObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 4, 58))
>TEvent : Symbol(TEvent, Decl(contextualInnerCallFromIndexedAccessType.ts, 11, 24))

declare function createMachine<
>createMachine : Symbol(createMachine, Decl(contextualInnerCallFromIndexedAccessType.ts, 13, 24))

  TTypesMeta extends TypegenConstraint = TypegenDisabled
>TTypesMeta : Symbol(TTypesMeta, Decl(contextualInnerCallFromIndexedAccessType.ts, 15, 31))
>TypegenConstraint : Symbol(TypegenConstraint, Decl(contextualInnerCallFromIndexedAccessType.ts, 2, 51))
>TypegenDisabled : Symbol(TypegenDisabled, Decl(contextualInnerCallFromIndexedAccessType.ts, 0, 39))

>(
  config: {
>config : Symbol(config, Decl(contextualInnerCallFromIndexedAccessType.ts, 17, 2))

    types?: TTypesMeta;
>types : Symbol(types, Decl(contextualInnerCallFromIndexedAccessType.ts, 18, 11))
>TTypesMeta : Symbol(TTypesMeta, Decl(contextualInnerCallFromIndexedAccessType.ts, 15, 31))

  },
  action?: {
>action : Symbol(action, Decl(contextualInnerCallFromIndexedAccessType.ts, 20, 4))

    1: { action: ActionObject<{ type: "WITH_TYPEGEN" }> };
>1 : Symbol(1, Decl(contextualInnerCallFromIndexedAccessType.ts, 21, 12))
>action : Symbol(action, Decl(contextualInnerCallFromIndexedAccessType.ts, 22, 8))
>ActionObject : Symbol(ActionObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 4, 58))
>type : Symbol(type, Decl(contextualInnerCallFromIndexedAccessType.ts, 22, 31))

    0: { action: ActionObject<{ type: "WITHOUT_TYPEGEN" }> };
>0 : Symbol(0, Decl(contextualInnerCallFromIndexedAccessType.ts, 22, 58))
>action : Symbol(action, Decl(contextualInnerCallFromIndexedAccessType.ts, 23, 8))
>ActionObject : Symbol(ActionObject, Decl(contextualInnerCallFromIndexedAccessType.ts, 4, 58))
>type : Symbol(type, Decl(contextualInnerCallFromIndexedAccessType.ts, 23, 31))

  }[TTypesMeta["@@xstate/typegen"]]
>TTypesMeta : Symbol(TTypesMeta, Decl(contextualInnerCallFromIndexedAccessType.ts, 15, 31))

): void;

createMachine(
>createMachine : Symbol(createMachine, Decl(contextualInnerCallFromIndexedAccessType.ts, 13, 24))
  {
    types: {} as TypegenEnabled,
>types : Symbol(types, Decl(contextualInnerCallFromIndexedAccessType.ts, 28, 3))
>TypegenEnabled : Symbol(TypegenEnabled, Decl(contextualInnerCallFromIndexedAccessType.ts, 1, 52))

  },
  {
    action: assign((event) => {
>action : Symbol(action, Decl(contextualInnerCallFromIndexedAccessType.ts, 31, 3))
>assign : Symbol(assign, Decl(contextualInnerCallFromIndexedAccessType.ts, 9, 1))
>event : Symbol(event, Decl(contextualInnerCallFromIndexedAccessType.ts, 32, 20))

      event.type // should be 'WITH_TYPEGEN'
>event.type : Symbol(type, Decl(contextualInnerCallFromIndexedAccessType.ts, 22, 31))
>event : Symbol(event, Decl(contextualInnerCallFromIndexedAccessType.ts, 32, 20))
>type : Symbol(type, Decl(contextualInnerCallFromIndexedAccessType.ts, 22, 31))

    }),
  }
);


