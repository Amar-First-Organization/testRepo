//// [tests/cases/compiler/jsxElementsAsIdentifierNames.tsx] ////

=== a.tsx ===
declare const React: any;
>React : Symbol(React, Decl(a.tsx, 0, 13))

declare module JSX {
>JSX : Symbol(JSX, Decl(a.tsx, 0, 25))

    interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(a.tsx, 1, 20))

        ["package"]: any;
>["package"] : Symbol(IntrinsicElements["package"], Decl(a.tsx, 2, 33))
>"package" : Symbol(IntrinsicElements["package"], Decl(a.tsx, 2, 33))
    }
    interface Element<P, T> { props: P; type: T; }
>Element : Symbol(Element, Decl(a.tsx, 4, 5))
>P : Symbol(P, Decl(a.tsx, 5, 22))
>T : Symbol(T, Decl(a.tsx, 5, 24))
>props : Symbol(Element.props, Decl(a.tsx, 5, 29))
>P : Symbol(P, Decl(a.tsx, 5, 22))
>type : Symbol(Element.type, Decl(a.tsx, 5, 39))
>T : Symbol(T, Decl(a.tsx, 5, 24))
}

function A() {
>A : Symbol(A, Decl(a.tsx, 6, 1))

    return <package />
>package : Symbol(JSX.IntrinsicElements["package"], Decl(a.tsx, 2, 33))
}

function B() {
>B : Symbol(B, Decl(a.tsx, 10, 1))

    return <package></package>
>package : Symbol(JSX.IntrinsicElements["package"], Decl(a.tsx, 2, 33))
>package : Symbol(JSX.IntrinsicElements["package"], Decl(a.tsx, 2, 33))
}

