tests/cases/compiler/widenedTypes.ts(2,1): error TS2358: The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
tests/cases/compiler/widenedTypes.ts(5,1): error TS2360: The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'.
tests/cases/compiler/widenedTypes.ts(6,7): error TS2361: The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter
tests/cases/compiler/widenedTypes.ts(8,15): error TS2407: The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.
tests/cases/compiler/widenedTypes.ts(11,1): error TS2322: Type 'string' is not assignable to type 'number'.
tests/cases/compiler/widenedTypes.ts(21,5): error TS2322: Type 'number[]' is not assignable to type 'string[]'.
  Type 'number' is not assignable to type 'string'.


==== tests/cases/compiler/widenedTypes.ts (6 errors) ====
    
    null instanceof (() => { });
    ~~~~
!!! error TS2358: The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
    ({}) instanceof null; // Ok because null is a subtype of function
    
    null in {};
    ~~~~
!!! error TS2360: The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'.
    "" in null;
          ~~~~
!!! error TS2361: The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter
    
    for (var a in null) { }
                  ~~~~
!!! error TS2407: The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.
    
    var t = [3, (3, null)];
    t[3] = "";
    ~~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
    
    var x: typeof undefined = 3;
    x = 3;
    
    var ob: { x: typeof undefined } = { x: "" };
    
    // Highlights the difference between array literals and object literals
    // In arrays, null: number, so `strings = numbers` fails
    var numbers = [3, null];
    var strings: string[] = numbers;
        ~~~~~~~
!!! error TS2322: Type 'number[]' is not assignable to type 'string[]'.
!!! error TS2322:   Type 'number' is not assignable to type 'string'.
    
    // In objects, null widens to any
    var obj1 = { x: "", y: null };
    // y: any is assignable to string
    var obj: { [s: string]: string; } = obj1; // assignable because null is widened, and therefore BCT is any
    