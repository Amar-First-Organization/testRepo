=== tests/cases/compiler/typeGuardConstructorNarrowPrimitivesInUnion.ts ===
// Union of primitives, number, arrays, and C1
let var1: number | "hello" | "world" | true | false | number[] | string[];
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))

if (var1.constructor === Number) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>Number : Symbol(Number, Decl(lib.es2009.number.d.ts, --, --), Decl(lib.es2009.number.d.ts, --, --), Decl(lib.es2009.number.d.ts, --, --))

    var1; // number
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
}

if (var1.constructor === String) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>String : Symbol(String, Decl(lib.es2009.string.d.ts, --, --), Decl(lib.es2009.string.d.ts, --, --), Decl(lib.es2009.string.d.ts, --, --))

    var1; // "hello" | "world"
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
}

if (var1.constructor === Boolean) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es2009.boolean.d.ts, --, --), Decl(lib.es2009.boolean.d.ts, --, --))

    var1; // boolean
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
}

if (var1.constructor === Array) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es2009.object.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es2009.array.d.ts, --, --), Decl(lib.es2009.array.d.ts, --, --))

    var1; // number[] | string[]
>var1 : Symbol(var1, Decl(typeGuardConstructorNarrowPrimitivesInUnion.ts, 1, 3))
}

