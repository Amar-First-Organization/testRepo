=== tests/cases/compiler/typeCall.ts ===
type F1 = () => 1;
>F1 : Symbol(F1, Decl(typeCall.ts, 0, 0))

type a = F1();
>a : Symbol(a, Decl(typeCall.ts, 0, 18), Decl(typeCall.ts, 16, 3))
>F1 : Symbol(F1, Decl(typeCall.ts, 0, 0))

type F2 = (a: string) => 1;
>F2 : Symbol(F2, Decl(typeCall.ts, 1, 14))
>a : Symbol(a, Decl(typeCall.ts, 3, 11))

type b = F2('foo');
>b : Symbol(b, Decl(typeCall.ts, 3, 27))
>F2 : Symbol(F2, Decl(typeCall.ts, 1, 14))

interface F3 {
>F3 : Symbol(F3, Decl(typeCall.ts, 4, 19))

    (): 1;
    (a: number): 2;
>a : Symbol(a, Decl(typeCall.ts, 8, 5))

    (a: string): 3;
>a : Symbol(a, Decl(typeCall.ts, 9, 5))
}
type c = F3();
>c : Symbol(c, Decl(typeCall.ts, 10, 1))
>F3 : Symbol(F3, Decl(typeCall.ts, 4, 19))

type d = F3(123);
>d : Symbol(d, Decl(typeCall.ts, 11, 14))
>F3 : Symbol(F3, Decl(typeCall.ts, 4, 19))

type e = F3('foo');
>e : Symbol(e, Decl(typeCall.ts, 12, 17))
>F3 : Symbol(F3, Decl(typeCall.ts, 4, 19))

declare function f4(a: string): 1;
>f4 : Symbol(f4, Decl(typeCall.ts, 13, 19))
>a : Symbol(a, Decl(typeCall.ts, 15, 20))

let a = 'foo';
>a : Symbol(a, Decl(typeCall.ts, 0, 18), Decl(typeCall.ts, 16, 3))

type f = typeof f4(typeof a);
>f : Symbol(f, Decl(typeCall.ts, 16, 14))
>f4 : Symbol(f4, Decl(typeCall.ts, 13, 19))
>a : Symbol(a, Decl(typeCall.ts, 0, 18), Decl(typeCall.ts, 16, 3))

type g = (() => 1)();
>g : Symbol(g, Decl(typeCall.ts, 17, 29))

type Id = <T>(v: T) => T;
>Id : Symbol(Id, Decl(typeCall.ts, 19, 21))
>T : Symbol(T, Decl(typeCall.ts, 21, 11))
>v : Symbol(v, Decl(typeCall.ts, 21, 14))
>T : Symbol(T, Decl(typeCall.ts, 21, 11))
>T : Symbol(T, Decl(typeCall.ts, 21, 11))

type h = Id(123);
>h : Symbol(h, Decl(typeCall.ts, 21, 25))
>Id : Symbol(Id, Decl(typeCall.ts, 19, 21))

type Wrap<T> = Id(T);
>Wrap : Symbol(Wrap, Decl(typeCall.ts, 22, 17))
>T : Symbol(T, Decl(typeCall.ts, 24, 10))
>Id : Symbol(Id, Decl(typeCall.ts, 19, 21))
>T : Symbol(T, Decl(typeCall.ts, 24, 10))

type i = Wrap<123>;
>i : Symbol(i, Decl(typeCall.ts, 24, 21))
>Wrap : Symbol(Wrap, Decl(typeCall.ts, 22, 17))

type F5 = () => () => { a: () => 1; };
>F5 : Symbol(F5, Decl(typeCall.ts, 25, 19))
>a : Symbol(a, Decl(typeCall.ts, 27, 23))

type j = F5()()['a']();
>j : Symbol(j, Decl(typeCall.ts, 27, 38))
>F5 : Symbol(F5, Decl(typeCall.ts, 25, 19))

interface IsPrimitive {
>IsPrimitive : Symbol(IsPrimitive, Decl(typeCall.ts, 28, 23))

  (o: object): '0';
>o : Symbol(o, Decl(typeCall.ts, 31, 3))

  (o: any): '1';
>o : Symbol(o, Decl(typeCall.ts, 32, 3))
}
type stringIsPrimitive = IsPrimitive(string);
>stringIsPrimitive : Symbol(stringIsPrimitive, Decl(typeCall.ts, 33, 1))
>IsPrimitive : Symbol(IsPrimitive, Decl(typeCall.ts, 28, 23))

type regexpIsPrimitive = IsPrimitive(RegExp);
>regexpIsPrimitive : Symbol(regexpIsPrimitive, Decl(typeCall.ts, 34, 45))
>IsPrimitive : Symbol(IsPrimitive, Decl(typeCall.ts, 28, 23))
>RegExp : Symbol(RegExp, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

// alternative, pass as parameters
type genericIsPrimitive3 = <T>(v: T) => IsPrimitive(T);
>genericIsPrimitive3 : Symbol(genericIsPrimitive3, Decl(typeCall.ts, 35, 45))
>T : Symbol(T, Decl(typeCall.ts, 38, 28))
>v : Symbol(v, Decl(typeCall.ts, 38, 31))
>T : Symbol(T, Decl(typeCall.ts, 38, 28))
>IsPrimitive : Symbol(IsPrimitive, Decl(typeCall.ts, 28, 23))
>T : Symbol(T, Decl(typeCall.ts, 38, 28))

type stringIsPrimitive3 = genericIsPrimitive3(string);
>stringIsPrimitive3 : Symbol(stringIsPrimitive3, Decl(typeCall.ts, 38, 55))
>genericIsPrimitive3 : Symbol(genericIsPrimitive3, Decl(typeCall.ts, 35, 45))

type regexpIsPrimitive3 = genericIsPrimitive3(RegExp)
>regexpIsPrimitive3 : Symbol(regexpIsPrimitive3, Decl(typeCall.ts, 39, 54))
>genericIsPrimitive3 : Symbol(genericIsPrimitive3, Decl(typeCall.ts, 35, 45))
>RegExp : Symbol(RegExp, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

type map = <Fn extends (v: T) => any, O extends { [k: string]: T }, T>(fn: Fn, obj: O) => { [P in keyof O]: Fn(O[P]) };
>map : Symbol(map, Decl(typeCall.ts, 40, 53))
>Fn : Symbol(Fn, Decl(typeCall.ts, 42, 12))
>v : Symbol(v, Decl(typeCall.ts, 42, 24))
>T : Symbol(T, Decl(typeCall.ts, 42, 67))
>O : Symbol(O, Decl(typeCall.ts, 42, 37))
>k : Symbol(k, Decl(typeCall.ts, 42, 51))
>T : Symbol(T, Decl(typeCall.ts, 42, 67))
>T : Symbol(T, Decl(typeCall.ts, 42, 67))
>fn : Symbol(fn, Decl(typeCall.ts, 42, 71))
>Fn : Symbol(Fn, Decl(typeCall.ts, 42, 12))
>obj : Symbol(obj, Decl(typeCall.ts, 42, 78))
>O : Symbol(O, Decl(typeCall.ts, 42, 37))
>P : Symbol(P, Decl(typeCall.ts, 42, 93))
>O : Symbol(O, Decl(typeCall.ts, 42, 37))
>Fn : Symbol(Fn, Decl(typeCall.ts, 42, 12))
>O : Symbol(O, Decl(typeCall.ts, 42, 37))
>P : Symbol(P, Decl(typeCall.ts, 42, 93))

type z = map(<T>(v: T) => [T], { a: 1, b: 2, c: 3 });
>z : Symbol(z, Decl(typeCall.ts, 42, 119))
>map : Symbol(map, Decl(typeCall.ts, 40, 53))
>T : Symbol(T, Decl(typeCall.ts, 43, 14))
>v : Symbol(v, Decl(typeCall.ts, 43, 17))
>T : Symbol(T, Decl(typeCall.ts, 43, 14))
>T : Symbol(T, Decl(typeCall.ts, 43, 14))
>a : Symbol(a, Decl(typeCall.ts, 43, 32))
>b : Symbol(b, Decl(typeCall.ts, 43, 38))
>c : Symbol(c, Decl(typeCall.ts, 43, 44))

// binary function composition
type Fn1 = <T1 extends number>(v1: T1[]) => { [k: string]: T1 };
>Fn1 : Symbol(Fn1, Decl(typeCall.ts, 43, 53))
>T1 : Symbol(T1, Decl(typeCall.ts, 46, 12))
>v1 : Symbol(v1, Decl(typeCall.ts, 46, 31))
>T1 : Symbol(T1, Decl(typeCall.ts, 46, 12))
>k : Symbol(k, Decl(typeCall.ts, 46, 47))
>T1 : Symbol(T1, Decl(typeCall.ts, 46, 12))

type Fn2 = <T2>(v2: { [k: string]: T2 }) => ReadonlyArray<T2>;
>Fn2 : Symbol(Fn2, Decl(typeCall.ts, 46, 64))
>T2 : Symbol(T2, Decl(typeCall.ts, 47, 12))
>v2 : Symbol(v2, Decl(typeCall.ts, 47, 16))
>k : Symbol(k, Decl(typeCall.ts, 47, 23))
>T2 : Symbol(T2, Decl(typeCall.ts, 47, 12))
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.d.ts, --, --))
>T2 : Symbol(T2, Decl(typeCall.ts, 47, 12))

let fn1 = null! as Fn1;
>fn1 : Symbol(fn1, Decl(typeCall.ts, 48, 3))
>Fn1 : Symbol(Fn1, Decl(typeCall.ts, 43, 53))

let fn2 = null! as Fn2;
>fn2 : Symbol(fn2, Decl(typeCall.ts, 49, 3))
>Fn2 : Symbol(Fn2, Decl(typeCall.ts, 46, 64))

type Fn3 = <T3 extends number[]>(v3: T3) => Fn2(Fn1(T3));
>Fn3 : Symbol(Fn3, Decl(typeCall.ts, 49, 23))
>T3 : Symbol(T3, Decl(typeCall.ts, 50, 12))
>v3 : Symbol(v3, Decl(typeCall.ts, 50, 33))
>T3 : Symbol(T3, Decl(typeCall.ts, 50, 12))
>Fn2 : Symbol(Fn2, Decl(typeCall.ts, 46, 64))
>Fn1 : Symbol(Fn1, Decl(typeCall.ts, 43, 53))
>T3 : Symbol(T3, Decl(typeCall.ts, 50, 12))

// type Fn4 = Fn3(1); // errors, ok
let ones = null! as 1[];
>ones : Symbol(ones, Decl(typeCall.ts, 52, 3))

type Fn4b = Fn3(typeof ones);
>Fn4b : Symbol(Fn4b, Decl(typeCall.ts, 52, 24))
>Fn3 : Symbol(Fn3, Decl(typeCall.ts, 49, 23))
>ones : Symbol(ones, Decl(typeCall.ts, 52, 3))

// FAILS, wanted `ReadonlyArray<1>`, got `ReadonlyArray<{}>`.
type Fn4c = Fn3(1[]);
>Fn4c : Symbol(Fn4c, Decl(typeCall.ts, 53, 29))
>Fn3 : Symbol(Fn3, Decl(typeCall.ts, 49, 23))

// FAILS, wanted `ReadonlyArray<1>`, got `ReadonlyArray<{}>`.
// let x = fn2(fn1(1)); // errors with not assignable, ok
// type X = Fn2(Fn1(1)); // errors with not assignable, ok
let y = fn2(fn1(ones));
>y : Symbol(y, Decl(typeCall.ts, 59, 3))
>fn2 : Symbol(fn2, Decl(typeCall.ts, 49, 3))
>fn1 : Symbol(fn1, Decl(typeCall.ts, 48, 3))
>ones : Symbol(ones, Decl(typeCall.ts, 52, 3))

type Y = Fn2(Fn1(1[]));
>Y : Symbol(Y, Decl(typeCall.ts, 59, 23))
>Fn2 : Symbol(Fn2, Decl(typeCall.ts, 46, 64))
>Fn1 : Symbol(Fn1, Decl(typeCall.ts, 43, 53))

interface isT<T> {
>isT : Symbol(isT, Decl(typeCall.ts, 60, 23))
>T : Symbol(T, Decl(typeCall.ts, 62, 14))

  (v: never): '0';
>v : Symbol(v, Decl(typeCall.ts, 63, 3))

  (v: T): '1';
>v : Symbol(v, Decl(typeCall.ts, 64, 3))
>T : Symbol(T, Decl(typeCall.ts, 62, 14))

  (v: any): '0';
>v : Symbol(v, Decl(typeCall.ts, 65, 3))
}
type Matches<V, T> = isT<T>(V);
>Matches : Symbol(Matches, Decl(typeCall.ts, 66, 1))
>V : Symbol(V, Decl(typeCall.ts, 67, 13))
>T : Symbol(T, Decl(typeCall.ts, 67, 15))
>isT : Symbol(isT, Decl(typeCall.ts, 60, 23))
>T : Symbol(T, Decl(typeCall.ts, 67, 15))
>V : Symbol(V, Decl(typeCall.ts, 67, 13))

type isBool = isT<boolean>;
>isBool : Symbol(isBool, Decl(typeCall.ts, 67, 31))
>isT : Symbol(isT, Decl(typeCall.ts, 60, 23))

let falseBool: isBool(false); // 1
>falseBool : Symbol(falseBool, Decl(typeCall.ts, 69, 3))
>isBool : Symbol(isBool, Decl(typeCall.ts, 67, 31))

let trueBool: isBool(true); // 1
>trueBool : Symbol(trueBool, Decl(typeCall.ts, 70, 3))
>isBool : Symbol(isBool, Decl(typeCall.ts, 67, 31))

let strBool: isBool(string); // 0
>strBool : Symbol(strBool, Decl(typeCall.ts, 71, 3))
>isBool : Symbol(isBool, Decl(typeCall.ts, 67, 31))

let anyBool: isBool(any); // 0
>anyBool : Symbol(anyBool, Decl(typeCall.ts, 72, 3))
>isBool : Symbol(isBool, Decl(typeCall.ts, 67, 31))

let neverBool: isBool(never); // 0
>neverBool : Symbol(neverBool, Decl(typeCall.ts, 73, 3))
>isBool : Symbol(isBool, Decl(typeCall.ts, 67, 31))

interface ObjectHasStringIndex {
>ObjectHasStringIndex : Symbol(ObjectHasStringIndex, Decl(typeCall.ts, 73, 29))

  // <T extends { [k: string]: any }>(o: T): T[string];
  (o: { [k: string]: any }): '1';
>o : Symbol(o, Decl(typeCall.ts, 77, 3))
>k : Symbol(k, Decl(typeCall.ts, 77, 9))

  (o: {}): '0';
>o : Symbol(o, Decl(typeCall.ts, 78, 3))
}
let ObjectHasStringIndexTestT: ObjectHasStringIndex({ [k: string]: 123 }); // '1'
>ObjectHasStringIndexTestT : Symbol(ObjectHasStringIndexTestT, Decl(typeCall.ts, 80, 3))
>ObjectHasStringIndex : Symbol(ObjectHasStringIndex, Decl(typeCall.ts, 73, 29))
>k : Symbol(k, Decl(typeCall.ts, 80, 55))

let ObjectHasStringIndexTestF: ObjectHasStringIndex({ a: 123 }); // wanted '0', got '1'... so can't match for index, and erroring RHS yields `any`. ouch.
>ObjectHasStringIndexTestF : Symbol(ObjectHasStringIndexTestF, Decl(typeCall.ts, 81, 3))
>ObjectHasStringIndex : Symbol(ObjectHasStringIndex, Decl(typeCall.ts, 73, 29))
>a : Symbol(a, Decl(typeCall.ts, 81, 53))

type IndexCall<T extends () => { [k: string]: any }, K extends keyof (T())> = T()[K];
>IndexCall : Symbol(IndexCall, Decl(typeCall.ts, 81, 64))
>T : Symbol(T, Decl(typeCall.ts, 83, 15))
>k : Symbol(k, Decl(typeCall.ts, 83, 34))
>K : Symbol(K, Decl(typeCall.ts, 83, 52))
>T : Symbol(T, Decl(typeCall.ts, 83, 15))
>T : Symbol(T, Decl(typeCall.ts, 83, 15))
>K : Symbol(K, Decl(typeCall.ts, 83, 52))

type CallMember<T extends { [k: string]: () => any }, K extends keyof T> = T[K]();
>CallMember : Symbol(CallMember, Decl(typeCall.ts, 83, 85))
>T : Symbol(T, Decl(typeCall.ts, 84, 16))
>k : Symbol(k, Decl(typeCall.ts, 84, 29))
>K : Symbol(K, Decl(typeCall.ts, 84, 53))
>T : Symbol(T, Decl(typeCall.ts, 84, 16))
>T : Symbol(T, Decl(typeCall.ts, 84, 16))
>K : Symbol(K, Decl(typeCall.ts, 84, 53))

type MappedMemberCall<T extends { [k: string]: () => any }> = { [K in keyof T]: T[K]() };
>MappedMemberCall : Symbol(MappedMemberCall, Decl(typeCall.ts, 84, 82))
>T : Symbol(T, Decl(typeCall.ts, 85, 22))
>k : Symbol(k, Decl(typeCall.ts, 85, 35))
>K : Symbol(K, Decl(typeCall.ts, 85, 65))
>T : Symbol(T, Decl(typeCall.ts, 85, 22))
>T : Symbol(T, Decl(typeCall.ts, 85, 22))
>K : Symbol(K, Decl(typeCall.ts, 85, 65))

type HasKey<T, Key extends string> = (
>HasKey : Symbol(HasKey, Decl(typeCall.ts, 85, 89))
>T : Symbol(T, Decl(typeCall.ts, 87, 12))
>Key : Symbol(Key, Decl(typeCall.ts, 87, 14))

  { [K in keyof T]: 'true' } &
>K : Symbol(K, Decl(typeCall.ts, 88, 5))
>T : Symbol(T, Decl(typeCall.ts, 87, 12))

  { [key: string]: 'false' }
>key : Symbol(key, Decl(typeCall.ts, 89, 5))

)[Key];
>Key : Symbol(Key, Decl(typeCall.ts, 87, 14))

type HasKindKey<T extends () => any> = HasKey<T(), 'kind'>;
>HasKindKey : Symbol(HasKindKey, Decl(typeCall.ts, 90, 7))
>T : Symbol(T, Decl(typeCall.ts, 92, 16))
>HasKey : Symbol(HasKey, Decl(typeCall.ts, 85, 89))
>T : Symbol(T, Decl(typeCall.ts, 92, 16))

type MapHasKey<T extends { [k: string]: () => any }, Key extends string> = {
>MapHasKey : Symbol(MapHasKey, Decl(typeCall.ts, 92, 59))
>T : Symbol(T, Decl(typeCall.ts, 93, 15))
>k : Symbol(k, Decl(typeCall.ts, 93, 28))
>Key : Symbol(Key, Decl(typeCall.ts, 93, 52))

    [K in keyof T]: HasKey<T[K](), Key>
>K : Symbol(K, Decl(typeCall.ts, 94, 5))
>T : Symbol(T, Decl(typeCall.ts, 93, 15))
>HasKey : Symbol(HasKey, Decl(typeCall.ts, 85, 89))
>T : Symbol(T, Decl(typeCall.ts, 93, 15))
>K : Symbol(K, Decl(typeCall.ts, 94, 5))
>Key : Symbol(Key, Decl(typeCall.ts, 93, 52))

};

type KeyOfCall<T extends () => any> = keyof (T());
>KeyOfCall : Symbol(KeyOfCall, Decl(typeCall.ts, 95, 2))
>T : Symbol(T, Decl(typeCall.ts, 97, 15))
>T : Symbol(T, Decl(typeCall.ts, 97, 15))

type Strip1<T extends () => any> = { [K in keyof (T())]: T()[K] };
>Strip1 : Symbol(Strip1, Decl(typeCall.ts, 97, 50))
>T : Symbol(T, Decl(typeCall.ts, 99, 12))
>K : Symbol(K, Decl(typeCall.ts, 99, 38))
>T : Symbol(T, Decl(typeCall.ts, 99, 12))
>T : Symbol(T, Decl(typeCall.ts, 99, 12))
>K : Symbol(K, Decl(typeCall.ts, 99, 38))

type Strip2<T extends () => { [k: string]: () => any }> = { [K in keyof (T())]: T()[K]() };
>Strip2 : Symbol(Strip2, Decl(typeCall.ts, 99, 66))
>T : Symbol(T, Decl(typeCall.ts, 100, 12))
>k : Symbol(k, Decl(typeCall.ts, 100, 31))
>K : Symbol(K, Decl(typeCall.ts, 100, 61))
>T : Symbol(T, Decl(typeCall.ts, 100, 12))
>T : Symbol(T, Decl(typeCall.ts, 100, 12))
>K : Symbol(K, Decl(typeCall.ts, 100, 61))

type Obj = {
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

    x: () => number,
>x : Symbol(x, Decl(typeCall.ts, 102, 12))

    z: () => { kind: 'Just', value: string }
>z : Symbol(z, Decl(typeCall.ts, 103, 20))
>kind : Symbol(kind, Decl(typeCall.ts, 104, 14))
>value : Symbol(value, Decl(typeCall.ts, 104, 28))
}

type T1 = (() => number)();
>T1 : Symbol(T1, Decl(typeCall.ts, 105, 1))

type T7 = CallMember<Obj, 'x'>;
>T7 : Symbol(T7, Decl(typeCall.ts, 107, 27))
>CallMember : Symbol(CallMember, Decl(typeCall.ts, 83, 85))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T8 = IndexCall<() => Obj, 'x'>;
>T8 : Symbol(T8, Decl(typeCall.ts, 108, 31))
>IndexCall : Symbol(IndexCall, Decl(typeCall.ts, 81, 64))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T9 = MappedMemberCall<Obj>; // fails, unresolved, want { x: number, z: { kind: 'Just', value: string } }
>T9 : Symbol(T9, Decl(typeCall.ts, 109, 36))
>MappedMemberCall : Symbol(MappedMemberCall, Decl(typeCall.ts, 84, 82))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T13 = keyof (() => Obj)();
>T13 : Symbol(T13, Decl(typeCall.ts, 110, 32))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T14 = KeyOfCall<() => Obj>;
>T14 : Symbol(T14, Decl(typeCall.ts, 111, 31))
>KeyOfCall : Symbol(KeyOfCall, Decl(typeCall.ts, 95, 2))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T15 = Obj['z']()['kind'];
>T15 : Symbol(T15, Decl(typeCall.ts, 112, 32))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T16 = MapHasKey<Obj, 'kind'>; // fails, unresolved, want { x: 'false', z: 'true' }
>T16 : Symbol(T16, Decl(typeCall.ts, 113, 30))
>MapHasKey : Symbol(MapHasKey, Decl(typeCall.ts, 92, 59))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T17 = Strip1<() => Obj>; // fails, unresolved, want { x: () => number, z: () => { kind: 'Just', value: string } }
>T17 : Symbol(T17, Decl(typeCall.ts, 114, 34))
>Strip1 : Symbol(Strip1, Decl(typeCall.ts, 97, 50))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

type T19 = Strip2<() => Obj>; // fails, unresolved, want { x: number, z: { kind: 'Just', value: string } }
>T19 : Symbol(T19, Decl(typeCall.ts, 115, 29))
>Strip2 : Symbol(Strip2, Decl(typeCall.ts, 99, 66))
>Obj : Symbol(Obj, Decl(typeCall.ts, 100, 91))

let a1: () => string;
>a1 : Symbol(a1, Decl(typeCall.ts, 118, 3))

let b1: typeof a1();
>b1 : Symbol(b1, Decl(typeCall.ts, 119, 3))
>a1 : Symbol(a1, Decl(typeCall.ts, 118, 3))

type Assert<T extends () => any> = T();
>Assert : Symbol(Assert, Decl(typeCall.ts, 119, 20))
>T : Symbol(T, Decl(typeCall.ts, 120, 12))
>T : Symbol(T, Decl(typeCall.ts, 120, 12))

let c1: Assert<typeof a1>;
>c1 : Symbol(c1, Decl(typeCall.ts, 121, 3))
>Assert : Symbol(Assert, Decl(typeCall.ts, 119, 20))
>a1 : Symbol(a1, Decl(typeCall.ts, 118, 3))

declare function infer1<T extends () => any>(x: T): T();
>infer1 : Symbol(infer1, Decl(typeCall.ts, 121, 26))
>T : Symbol(T, Decl(typeCall.ts, 123, 24))
>x : Symbol(x, Decl(typeCall.ts, 123, 45))
>T : Symbol(T, Decl(typeCall.ts, 123, 24))
>T : Symbol(T, Decl(typeCall.ts, 123, 24))

infer1(null! as () => number);
>infer1 : Symbol(infer1, Decl(typeCall.ts, 121, 26))

declare function infer2<T extends () => any>(x: { a: T }): T();
>infer2 : Symbol(infer2, Decl(typeCall.ts, 124, 30))
>T : Symbol(T, Decl(typeCall.ts, 126, 24))
>x : Symbol(x, Decl(typeCall.ts, 126, 45))
>a : Symbol(a, Decl(typeCall.ts, 126, 49))
>T : Symbol(T, Decl(typeCall.ts, 126, 24))
>T : Symbol(T, Decl(typeCall.ts, 126, 24))

infer2(null! as { a: () => number });
>infer2 : Symbol(infer2, Decl(typeCall.ts, 124, 30))
>a : Symbol(a, Decl(typeCall.ts, 127, 17))

declare function infer3<T>(x: { a: () => T }): T;
>infer3 : Symbol(infer3, Decl(typeCall.ts, 127, 37))
>T : Symbol(T, Decl(typeCall.ts, 129, 24))
>x : Symbol(x, Decl(typeCall.ts, 129, 27))
>a : Symbol(a, Decl(typeCall.ts, 129, 31))
>T : Symbol(T, Decl(typeCall.ts, 129, 24))
>T : Symbol(T, Decl(typeCall.ts, 129, 24))

infer3(null! as { a: () => number });
>infer3 : Symbol(infer3, Decl(typeCall.ts, 127, 37))
>a : Symbol(a, Decl(typeCall.ts, 130, 17))

const res3: number = infer3(null! as { a: () => number });
>res3 : Symbol(res3, Decl(typeCall.ts, 131, 5))
>infer3 : Symbol(infer3, Decl(typeCall.ts, 127, 37))
>a : Symbol(a, Decl(typeCall.ts, 131, 38))

declare function infer4<T>(x: T, y: () => T): void;
>infer4 : Symbol(infer4, Decl(typeCall.ts, 131, 58))
>T : Symbol(T, Decl(typeCall.ts, 133, 24))
>x : Symbol(x, Decl(typeCall.ts, 133, 27))
>T : Symbol(T, Decl(typeCall.ts, 133, 24))
>y : Symbol(y, Decl(typeCall.ts, 133, 32))
>T : Symbol(T, Decl(typeCall.ts, 133, 24))

infer4(5, () => 5);
>infer4 : Symbol(infer4, Decl(typeCall.ts, 131, 58))

function assignability<T>(x: T, y: () => T) {
>assignability : Symbol(assignability, Decl(typeCall.ts, 134, 19))
>T : Symbol(T, Decl(typeCall.ts, 136, 23))
>x : Symbol(x, Decl(typeCall.ts, 136, 26))
>T : Symbol(T, Decl(typeCall.ts, 136, 23))
>y : Symbol(y, Decl(typeCall.ts, 136, 31))
>T : Symbol(T, Decl(typeCall.ts, 136, 23))

    const a: T = x;
>a : Symbol(a, Decl(typeCall.ts, 137, 9))
>T : Symbol(T, Decl(typeCall.ts, 136, 23))
>x : Symbol(x, Decl(typeCall.ts, 136, 26))

    const b: T = y();
>b : Symbol(b, Decl(typeCall.ts, 138, 9))
>T : Symbol(T, Decl(typeCall.ts, 136, 23))
>y : Symbol(y, Decl(typeCall.ts, 136, 31))
}

function comparability<T>(x: T, y: () => T) {
>comparability : Symbol(comparability, Decl(typeCall.ts, 139, 1))
>T : Symbol(T, Decl(typeCall.ts, 141, 23))
>x : Symbol(x, Decl(typeCall.ts, 141, 26))
>T : Symbol(T, Decl(typeCall.ts, 141, 23))
>y : Symbol(y, Decl(typeCall.ts, 141, 31))
>T : Symbol(T, Decl(typeCall.ts, 141, 23))

    x === x;
>x : Symbol(x, Decl(typeCall.ts, 141, 26))
>x : Symbol(x, Decl(typeCall.ts, 141, 26))

    y === y;
>y : Symbol(y, Decl(typeCall.ts, 141, 31))
>y : Symbol(y, Decl(typeCall.ts, 141, 31))

    // x === y; // rightfully errors
}

// function mappedAssignability<T>(x: T, y: CallMember<T>) {
//     const d: T() = y;
// }

// function mappedComparability<T>(x: T, y: CallMember<T>) {
//     x === x;
//     y === y;
//     x === y;
// }

// type IdMapped<T> = { [K in keyof T]: T[K] }

// function mappedRelations<T>(x: IdMapped<T>, y: Partial<T>, z: CallMember<T>) {
//     x === z;
//     y === z;

//     const a: IdMapped<T> = z;
//     const b: Partial<T> = z;
// }

// mappedRelations(null! as Obj, null! as Partial<Obj>, null! as CallMember<Obj>);
// mappedRelations(null! as CallMember<Obj>, null! as CallMember<Obj>, null! as CallMember<Obj>);

