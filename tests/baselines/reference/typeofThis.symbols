=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeofThis.ts ===
class Test {
>Test : Symbol(Test, Decl(typeofThis.ts, 0, 0))

    data = {};
>data : Symbol(Test.data, Decl(typeofThis.ts, 0, 12))

    constructor() {
        var copy: typeof this.data = {};
>copy : Symbol(copy, Decl(typeofThis.ts, 3, 11))
>this.data : Symbol(Test.data, Decl(typeofThis.ts, 0, 12))
>data : Symbol(Test.data, Decl(typeofThis.ts, 0, 12))
    }
}

class Test1 {
>Test1 : Symbol(Test1, Decl(typeofThis.ts, 5, 1))

    data = { foo: '' };
>data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>foo : Symbol(foo, Decl(typeofThis.ts, 8, 12))

    ['this'] = '';
>['this'] : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))
>'this' : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))

    constructor() {
        var copy: typeof this.data = { foo: '' };
>copy : Symbol(copy, Decl(typeofThis.ts, 11, 11))
>this.data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>foo : Symbol(foo, Decl(typeofThis.ts, 11, 38))

        var self: typeof this = this;
>self : Symbol(self, Decl(typeofThis.ts, 13, 11))
>this : Symbol(Test1, Decl(typeofThis.ts, 5, 1))

        self.data;
>self.data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))
>self : Symbol(self, Decl(typeofThis.ts, 13, 11))
>data : Symbol(Test1.data, Decl(typeofThis.ts, 7, 13))

        var str: typeof this.this = '';
>str : Symbol(str, Decl(typeofThis.ts, 16, 11))
>this.this : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))
>this : Symbol(Test1['this'], Decl(typeofThis.ts, 8, 23))
    }
}


function Test2() {
>Test2 : Symbol(Test2, Decl(typeofThis.ts, 18, 1))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 22, 7))
}

function Test3(this: { no: number }) {
>Test3 : Symbol(Test3, Decl(typeofThis.ts, 23, 1))
>this : Symbol(this, Decl(typeofThis.ts, 25, 15))
>no : Symbol(no, Decl(typeofThis.ts, 25, 22))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 26, 7))
>this : Symbol(this, Decl(typeofThis.ts, 25, 15))
}

function Test4(this: { no: number } | undefined) {
>Test4 : Symbol(Test4, Decl(typeofThis.ts, 27, 1))
>this : Symbol(this, Decl(typeofThis.ts, 29, 15))
>no : Symbol(no, Decl(typeofThis.ts, 29, 22))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 30, 7))
>this : Symbol(this, Decl(typeofThis.ts, 29, 15))
}

class Test5 {
>Test5 : Symbol(Test5, Decl(typeofThis.ts, 31, 1))

    no = 1;
>no : Symbol(Test5.no, Decl(typeofThis.ts, 33, 13))

    f = () => {
>f : Symbol(Test5.f, Decl(typeofThis.ts, 34, 11))

        let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 37, 11))
>this.no : Symbol(Test5.no, Decl(typeofThis.ts, 33, 13))
>no : Symbol(Test5.no, Decl(typeofThis.ts, 33, 13))

        let self: typeof this = this;
>self : Symbol(self, Decl(typeofThis.ts, 38, 11))
>this : Symbol(Test5, Decl(typeofThis.ts, 31, 1))
    }
}

namespace Test6 {
>Test6 : Symbol(Test6, Decl(typeofThis.ts, 40, 1))

    export let f = () => {
>f : Symbol(f, Decl(typeofThis.ts, 43, 14))

        let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 44, 11))
    }
}

module Test7 {
>Test7 : Symbol(Test7, Decl(typeofThis.ts, 46, 1))

    export let f = () => {
>f : Symbol(f, Decl(typeofThis.ts, 49, 14))

        let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 50, 11))
    }
}

const Test8 = () => {
>Test8 : Symbol(Test8, Decl(typeofThis.ts, 54, 5))

    let x: typeof this.no = 1;
>x : Symbol(x, Decl(typeofThis.ts, 55, 7))
}

