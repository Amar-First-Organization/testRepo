typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8518,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8518,40): error TS1005: ';' expected.
typescript_standalone.d.ts(8974,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8974,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9234,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9234,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9584,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9584,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9608,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9608,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9695,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9695,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10860,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10860,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10871,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10871,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10881,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10881,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10956,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10956,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11013,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11013,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11067,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11067,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11087,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11087,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11097,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11097,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11131,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11131,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11134,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11134,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11138,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11138,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11156,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11156,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11182,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11182,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11185,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11185,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11197,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11197,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11227,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11227,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11261,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11261,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11272,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11272,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11296,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11296,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11304,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11304,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11308,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11308,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11338,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11338,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11381,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11381,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11568,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11568,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11570,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11570,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11574,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11574,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11591,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11591,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11593,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11593,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11595,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11595,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11597,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11597,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11599,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11599,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11601,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11601,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11603,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11603,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11605,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11605,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11607,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11607,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11609,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11609,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11611,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11611,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11613,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11613,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11615,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11615,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11617,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11617,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11619,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11619,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11629,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11629,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11631,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11631,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11633,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11633,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11635,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11635,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11637,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11637,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11639,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11639,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11641,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11641,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11643,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11643,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11645,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11645,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11717,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11717,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11719,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11719,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11721,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11721,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11762,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11762,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_Watch.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The sample sources can be found
             at: https://github.com/Microsoft/TypeScript-wiki/blob/master/Using-the-Compiler-API.md#writing-an-incremental-program-watcher
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var process: any;
    declare var console: any;
    declare var os: any;
    
    import ts = require("typescript");
    
    const formatHost: ts.FormatDiagnosticsHost = {
        getCanonicalFileName: path => path,
        getCurrentDirectory: ts.sys.getCurrentDirectory,
        getNewLine: () => ts.sys.newLine,
    }
    
    function watchMain() {
        const configPath = ts.findConfigFile(/*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
        if (!configPath) {
            throw new Error("Could not find a valid 'tsconfig.json'.");
        }
    
        // TypeScript can use several different program creation "strategies":
        //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,
        //  * ts.createSemanticDiagnosticsBuilderProgram
        //  * ts.createAbstractBuilder
        // The first two produce "builder programs". These use an incremental strategy to only re-check and emit files whose
        // contents may have changed, or whose dependencies may have changes which may impact change the result of prior type-check and emit.
        // The last uses an ordinary program which does a full type check after every change.
        // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
        // For pure type-checking scenarios, or when another tool/process handles emit, using `createSemanticDiagnosticsBuilderProgram` may be more desirable.
    
        // Note that there is another overload for `createWatchCompilerHost` that takes a set of root files.
        const host = ts.createWatchCompilerHost(configPath, {}, ts.sys,
            ts.createSemanticDiagnosticsBuilderProgram,
            reportDiagnostic,
            reportWatchStatusChanged,
        );
    
        // You can technically override any given hook on the host, though you probably don't need to.
        // Note that we're assuming `origCreateProgram` and `origPostProgramCreate` doesn't use `this` at all.
        const origCreateProgram = host.createProgram;
        host.createProgram = (rootNames: ReadonlyArray<string>, options, host, oldProgram) => {
            console.log("** We're about to create the program! **");
            return origCreateProgram(rootNames, options, host, oldProgram);
        }
        const origPostProgramCreate = host.afterProgramCreate;
    
        host.afterProgramCreate = program => {
            console.log("** We finished making the program! **");
            origPostProgramCreate!(program);
        };
    
        // `createWatchProgram` creates an initial program, watches files, and updates the program over time.
        ts.createWatchProgram(host);
    }
    
    function reportDiagnostic(diagnostic: ts.Diagnostic) {
        console.error("Error", diagnostic.code, ":",
            ts.flattenDiagnosticMessageText(diagnostic.messageText, formatHost.getNewLine())
        );
    }
    
    /**
     * Prints a diagnostic every time the watch status changes.
     * This is mainly for messages like "Starting compilation" or "Compilation completed".
     */
    function reportWatchStatusChanged(diagnostic: ts.Diagnostic) {
        console.info(ts.formatDiagnostic(diagnostic, formatHost));
    }
    
    watchMain();
    