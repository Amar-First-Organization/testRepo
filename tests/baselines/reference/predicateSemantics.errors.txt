predicateSemantics.ts(7,16): error TS2871: This expression is always nullish.
predicateSemantics.ts(10,16): error TS2869: Right operand of ?? is unreachable because the left operand is never nullish.
predicateSemantics.ts(26,12): error TS2869: Right operand of ?? is unreachable because the left operand is never nullish.
predicateSemantics.ts(27,12): error TS2869: Right operand of ?? is unreachable because the left operand is never nullish.
predicateSemantics.ts(28,12): error TS2871: This expression is always nullish.
predicateSemantics.ts(29,12): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(30,12): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(33,8): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(34,11): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(35,8): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(36,8): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(47,8): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(48,8): error TS2873: This kind of expression is always falsy.
predicateSemantics.ts(51,5): error TS2737: BigInt literals are not available when targeting lower than ES2020.
predicateSemantics.ts(51,5): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(54,5): error TS2737: BigInt literals are not available when targeting lower than ES2020.
predicateSemantics.ts(54,5): error TS2873: This kind of expression is always falsy.
predicateSemantics.ts(56,5): error TS2873: This kind of expression is always falsy.
predicateSemantics.ts(56,6): error TS2737: BigInt literals are not available when targeting lower than ES2020.
predicateSemantics.ts(60,5): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(62,5): error TS2873: This kind of expression is always falsy.
predicateSemantics.ts(64,5): error TS2873: This kind of expression is always falsy.
predicateSemantics.ts(64,6): error TS2737: BigInt literals are not available when targeting lower than ES2020.
predicateSemantics.ts(66,5): error TS2872: This kind of expression is always truthy.
predicateSemantics.ts(66,6): error TS2737: BigInt literals are not available when targeting lower than ES2020.
predicateSemantics.ts(69,6): error TS2304: Cannot find name 'identifier'.


==== predicateSemantics.ts (26 errors) ====
    declare let cond: any;
    
    // OK: One or other operand is possibly nullish
    const test1 = (cond ? undefined : 32) ?? "possibly reached";
    
    // Not OK: Both operands nullish
    const test2 = (cond ? undefined : null) ?? "always reached";
                   ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2871: This expression is always nullish.
    
    // Not OK: Both operands non-nullish
    const test3 = (cond ? 132 : 17) ?? "unreachable";
                   ~~~~~~~~~~~~~~~
!!! error TS2869: Right operand of ?? is unreachable because the left operand is never nullish.
    
    // Parens
    const test4 = (cond ? (undefined) : (17)) ?? 42;
    
    // Should be OK (special case)
    if (!!true) {
    
    }
    
    // Should be OK (special cases)
    while (0) { }
    while (1) { }
    while (true) { }
    while (false) { }
    
    const p5 = {} ?? null;
               ~~
!!! error TS2869: Right operand of ?? is unreachable because the left operand is never nullish.
    const p6 = 0 > 1 ?? null;
               ~~~~~
!!! error TS2869: Right operand of ?? is unreachable because the left operand is never nullish.
    const p7 = null ?? null;
               ~~~~
!!! error TS2871: This expression is always nullish.
    const p8 = (class foo { }) && null;
               ~~~~~~~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
    const p9 = (class foo { }) || null;
               ~~~~~~~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
    
    // Outer expression tests
    while ({} as any) { }
           ~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
    while ({} satisfies unknown) { }
              ~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
    while ((<any>({}))) { }
           ~~~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
    while ((({}))) { }
           ~~~~~~
!!! error TS2872: This kind of expression is always truthy.
    
    // Should be OK
    console.log((cond || undefined) && 1 / cond);
    
    function foo(this: Object | undefined) {
        // Should be OK
        return this ?? 0;
    }
    
    // positive numbers
    while (+2) {}
           ~~
!!! error TS2872: This kind of expression is always truthy.
    while (+0.000) {}
           ~~~~~~
!!! error TS2873: This kind of expression is always falsy.
    
    // Not OK; always truthy.
    if (1n) { }
        ~~
!!! error TS2737: BigInt literals are not available when targeting lower than ES2020.
        ~~
!!! error TS2872: This kind of expression is always truthy.
    
    // Not OK; always falsy.
    if (0n) { } 
        ~~
!!! error TS2737: BigInt literals are not available when targeting lower than ES2020.
        ~~
!!! error TS2873: This kind of expression is always falsy.
    // Not OK; always falsy.
    if (-0n) { }
        ~~~
!!! error TS2873: This kind of expression is always falsy.
         ~~
!!! error TS2737: BigInt literals are not available when targeting lower than ES2020.
    
    // negative numbers
    // not OK - truthy
    if (-1.2) { }
        ~~~~
!!! error TS2872: This kind of expression is always truthy.
    // not OK - falsy
    if (-0.0000){}
        ~~~~~~~
!!! error TS2873: This kind of expression is always falsy.
    // not OK - falsy
    if (-0n){}
        ~~~
!!! error TS2873: This kind of expression is always falsy.
         ~~
!!! error TS2737: BigInt literals are not available when targeting lower than ES2020.
    // not OK - truthy
    if (-13n){}
        ~~~~
!!! error TS2872: This kind of expression is always truthy.
         ~~~
!!! error TS2737: BigInt literals are not available when targeting lower than ES2020.
    
    // OK
    if (-identifier) {}
         ~~~~~~~~~~
!!! error TS2304: Cannot find name 'identifier'.