=== tests/cases/conformance/types/conditional/inferTypes1.ts ===
type Unpacked<T> =
>Unpacked : Unpacked<T>
>T : T

    T extends (infer U)[] ? U :
>T : T
>U : U
>U : U

    T extends (...args: any[]) => infer U ? U :
>T : T
>args : any[]
>U : U
>U : U

    T extends Promise<infer U> ? U :
>T : T
>Promise : Promise<T>
>U : U
>U : U

    T;
>T : T

type T00 = Unpacked<string>;  // string
>T00 : string
>Unpacked : Unpacked<T>

type T01 = Unpacked<string[]>;  // string
>T01 : string
>Unpacked : Unpacked<T>

type T02 = Unpacked<() => string>;  // string
>T02 : string
>Unpacked : Unpacked<T>

type T03 = Unpacked<Promise<string>>;  // string
>T03 : string
>Unpacked : Unpacked<T>
>Promise : Promise<T>

type T04 = Unpacked<Unpacked<Promise<string>[]>>;  // string
>T04 : string
>Unpacked : Unpacked<T>
>Unpacked : Unpacked<T>
>Promise : Promise<T>

type T05 = Unpacked<any>;  // any
>T05 : any
>Unpacked : Unpacked<T>

type T06 = Unpacked<never>;  // never
>T06 : never
>Unpacked : Unpacked<T>

type ReturnType<T extends Function> = T extends ((...args: any[]) => infer R) | (new (...args: any[]) => infer R) ? R : any;
>ReturnType : ReturnType<T>
>T : T
>Function : Function
>T : T
>args : any[]
>R : R
>args : any[]
>R : R
>R : R

function f1(s: string) {
>f1 : (s: string) => { a: number; b: string; }
>s : string

    return { a: 1, b: s };
>{ a: 1, b: s } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>s : string
}

class C {
>C : C

    x = 0;
>x : number
>0 : 0

    y = 0;
>y : number
>0 : 0
}

type T10 = ReturnType<() => string>;  // string
>T10 : string
>ReturnType : ReturnType<T>

type T11 = ReturnType<(s: string) => void>;  // void
>T11 : void
>ReturnType : ReturnType<T>
>s : string

type T12 = ReturnType<(<T>() => T)>;  // {}
>T12 : {}
>ReturnType : ReturnType<T>
>T : T
>T : T

type T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]
>T13 : number[]
>ReturnType : ReturnType<T>
>T : T
>U : U
>U : U
>T : T

type T14 = ReturnType<typeof f1>;  // { a: number, b: string }
>T14 : { a: number; b: string; }
>ReturnType : ReturnType<T>
>f1 : (s: string) => { a: number; b: string; }

type T15 = ReturnType<typeof C>;  // C
>T15 : C
>ReturnType : ReturnType<T>
>C : typeof C

type T16 = ReturnType<any>;  // any
>T16 : any
>ReturnType : ReturnType<T>

type T17 = ReturnType<never>;  // any
>T17 : any
>ReturnType : ReturnType<T>

type T18 = ReturnType<string>;  // Error
>T18 : any
>ReturnType : ReturnType<T>

type T19 = ReturnType<Function>;  // any
>T19 : any
>ReturnType : ReturnType<T>
>Function : Function

type ArgumentType<T extends (x: any) => any> = T extends (a: infer A) => any ? A : any;
>ArgumentType : ArgumentType<T>
>T : T
>x : any
>T : T
>a : A
>A : A
>A : A

type T20 = ArgumentType<() => void>;  // never
>T20 : never
>ArgumentType : ArgumentType<T>

type T21 = ArgumentType<(x: string) => number>;  // string
>T21 : string
>ArgumentType : ArgumentType<T>
>x : string

type T22 = ArgumentType<(x?: string) => number>;  // string | undefined
>T22 : string | undefined
>ArgumentType : ArgumentType<T>
>x : string | undefined

type T23 = ArgumentType<(...args: string[]) => number>;  // string
>T23 : string
>ArgumentType : ArgumentType<T>
>args : string[]

type T24 = ArgumentType<(x: string, y: string) => number>;  // Error
>T24 : any
>ArgumentType : ArgumentType<T>
>x : string
>y : string

type T25 = ArgumentType<Function>;  // Error
>T25 : any
>ArgumentType : ArgumentType<T>
>Function : Function

type T26 = ArgumentType<any>;  // any
>T26 : any
>ArgumentType : ArgumentType<T>

type T27 = ArgumentType<never>;  // any
>T27 : any
>ArgumentType : ArgumentType<T>

type X1<T extends { x: any, y: any }> = T extends { x: infer X, y: infer Y } ? [X, Y] : any;
>X1 : X1<T>
>T : T
>x : any
>y : any
>T : T
>x : X
>X : X
>y : Y
>Y : Y
>X : X
>Y : Y

type T30 = X1<{ x: any, y: any }>;  // [any, any]
>T30 : [any, any]
>X1 : X1<T>
>x : any
>y : any

type T31 = X1<{ x: number, y: string }>;  // [number, string]
>T31 : [number, string]
>X1 : X1<T>
>x : number
>y : string

type T32 = X1<{ x: number, y: string, z: boolean }>;  // [number, string]
>T32 : [number, string]
>X1 : X1<T>
>x : number
>y : string
>z : boolean

type X2<T> = T extends { a: infer U, b: infer U } ? U : never;
>X2 : X2<T>
>T : T
>T : T
>a : U
>U : U
>b : U
>U : U
>U : U

type T40 = X2<{}>;  // never
>T40 : never
>X2 : X2<T>

type T41 = X2<{ a: string }>;  // never
>T41 : never
>X2 : X2<T>
>a : string

type T42 = X2<{ a: string, b: string }>;  // string
>T42 : string
>X2 : X2<T>
>a : string
>b : string

type T43 = X2<{ a: number, b: string }>;  // string | number
>T43 : string | number
>X2 : X2<T>
>a : number
>b : string

type T44 = X2<{ a: number, b: string, c: boolean }>;  // string | number
>T44 : string | number
>X2 : X2<T>
>a : number
>b : string
>c : boolean

type X3<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U : never;
>X3 : X3<T>
>T : T
>T : T
>a : (x: U) => void
>x : U
>U : U
>b : (x: U) => void
>x : U
>U : U
>U : U

type T50 = X3<{}>;  // never
>T50 : never
>X3 : X3<T>

type T51 = X3<{ a: (x: string) => void }>;  // never
>T51 : never
>X3 : X3<T>
>a : (x: string) => void
>x : string

type T52 = X3<{ a: (x: string) => void, b: (x: string) => void }>;  // string
>T52 : string
>X3 : X3<T>
>a : (x: string) => void
>x : string
>b : (x: string) => void
>x : string

type T53 = X3<{ a: (x: number) => void, b: (x: string) => void }>;  // string & number
>T53 : number & string
>X3 : X3<T>
>a : (x: number) => void
>x : number
>b : (x: string) => void
>x : string

type T54 = X3<{ a: (x: number) => void, b: () => void }>;  // number
>T54 : number
>X3 : X3<T>
>a : (x: number) => void
>x : number
>b : () => void

type T60 = infer U;  // Error
>T60 : U
>U : U

type T61<T> = infer A extends infer B ? infer C : infer D;  // Error
>T61 : never
>T : T
>A : A
>B : B
>C : C
>D : D

type T62<T> = U extends (infer U)[] ? U : U;  // Error
>T62 : any
>T : T
>U : No type information available!
>U : U
>U : U
>U : No type information available!

