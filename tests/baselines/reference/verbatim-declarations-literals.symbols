//// [tests/cases/compiler/verbatim-declarations-literals.ts] ////

=== verbatim-declarations-literals.ts ===
enum E { "some value" = 1 };
>E : Symbol(E, Decl(verbatim-declarations-literals.ts, 0, 0))
>"some value" : Symbol(E["some value"], Decl(verbatim-declarations-literals.ts, 0, 8))

const e: typeof E["some value"] = E["some value"];
>e : Symbol(e, Decl(verbatim-declarations-literals.ts, 1, 5))
>E : Symbol(E, Decl(verbatim-declarations-literals.ts, 0, 0))
>E : Symbol(E, Decl(verbatim-declarations-literals.ts, 0, 0))
>"some value" : Symbol(E["some value"], Decl(verbatim-declarations-literals.ts, 0, 8))

declare function f3<T>(a: T, b: T): T;
>f3 : Symbol(f3, Decl(verbatim-declarations-literals.ts, 1, 50))
>T : Symbol(T, Decl(verbatim-declarations-literals.ts, 3, 20))
>a : Symbol(a, Decl(verbatim-declarations-literals.ts, 3, 23))
>T : Symbol(T, Decl(verbatim-declarations-literals.ts, 3, 20))
>b : Symbol(b, Decl(verbatim-declarations-literals.ts, 3, 28))
>T : Symbol(T, Decl(verbatim-declarations-literals.ts, 3, 20))
>T : Symbol(T, Decl(verbatim-declarations-literals.ts, 3, 20))

const x3 = f3("abc", "def");  // "abc" | "def"
>x3 : Symbol(x3, Decl(verbatim-declarations-literals.ts, 4, 5))
>f3 : Symbol(f3, Decl(verbatim-declarations-literals.ts, 1, 50))

const octal = 0o16;
>octal : Symbol(octal, Decl(verbatim-declarations-literals.ts, 6, 5))

const octalParen = ((0o16));
>octalParen : Symbol(octalParen, Decl(verbatim-declarations-literals.ts, 7, 5))

const octalIndirect = octal;
>octalIndirect : Symbol(octalIndirect, Decl(verbatim-declarations-literals.ts, 8, 5))
>octal : Symbol(octal, Decl(verbatim-declarations-literals.ts, 6, 5))

const hex = 0x10;
>hex : Symbol(hex, Decl(verbatim-declarations-literals.ts, 10, 5))

const hexParen = ((0x10));
>hexParen : Symbol(hexParen, Decl(verbatim-declarations-literals.ts, 11, 5))

const hexIndirect = hex;
>hexIndirect : Symbol(hexIndirect, Decl(verbatim-declarations-literals.ts, 12, 5))
>hex : Symbol(hex, Decl(verbatim-declarations-literals.ts, 10, 5))

const seps = 1_000_000;
>seps : Symbol(seps, Decl(verbatim-declarations-literals.ts, 14, 5))

const sepsParen = (1_000_000);
>sepsParen : Symbol(sepsParen, Decl(verbatim-declarations-literals.ts, 15, 5))

const sepsIndirect = seps;
>sepsIndirect : Symbol(sepsIndirect, Decl(verbatim-declarations-literals.ts, 16, 5))
>seps : Symbol(seps, Decl(verbatim-declarations-literals.ts, 14, 5))

const singleQuote = 'x'
>singleQuote : Symbol(singleQuote, Decl(verbatim-declarations-literals.ts, 18, 5))

const singleQuoteParen = (('x'))
>singleQuoteParen : Symbol(singleQuoteParen, Decl(verbatim-declarations-literals.ts, 19, 5))

const singleQuoteIndirect = singleQuote;
>singleQuoteIndirect : Symbol(singleQuoteIndirect, Decl(verbatim-declarations-literals.ts, 20, 5))
>singleQuote : Symbol(singleQuote, Decl(verbatim-declarations-literals.ts, 18, 5))

const noSubstTemplate = `Test`
>noSubstTemplate : Symbol(noSubstTemplate, Decl(verbatim-declarations-literals.ts, 22, 5))

const noSubstTemplateParen = (`Test`)
>noSubstTemplateParen : Symbol(noSubstTemplateParen, Decl(verbatim-declarations-literals.ts, 23, 5))

const noSubstTemplateIndirect = noSubstTemplate;
>noSubstTemplateIndirect : Symbol(noSubstTemplateIndirect, Decl(verbatim-declarations-literals.ts, 24, 5))
>noSubstTemplate : Symbol(noSubstTemplate, Decl(verbatim-declarations-literals.ts, 22, 5))

