//// [tests/cases/compiler/discriminatedUnionJsxElement.tsx] ////

=== discriminatedUnionJsxElement.tsx ===
// Repro from #46021

declare namespace JSX {
>JSX : Symbol(JSX, Decl(discriminatedUnionJsxElement.tsx, 0, 0))

  interface Element<P, T> { props: P; type: T; }
>Element : Symbol(Element, Decl(discriminatedUnionJsxElement.tsx, 2, 23))
>P : Symbol(P, Decl(discriminatedUnionJsxElement.tsx, 3, 20))
>T : Symbol(T, Decl(discriminatedUnionJsxElement.tsx, 3, 22))
>props : Symbol(Element.props, Decl(discriminatedUnionJsxElement.tsx, 3, 27))
>P : Symbol(P, Decl(discriminatedUnionJsxElement.tsx, 3, 20))
>type : Symbol(Element.type, Decl(discriminatedUnionJsxElement.tsx, 3, 37))
>T : Symbol(T, Decl(discriminatedUnionJsxElement.tsx, 3, 22))
}

interface IData<MenuItemVariant extends ListItemVariant = ListItemVariant.OneLine> {
>IData : Symbol(IData, Decl(discriminatedUnionJsxElement.tsx, 4, 1))
>MenuItemVariant : Symbol(MenuItemVariant, Decl(discriminatedUnionJsxElement.tsx, 6, 16))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>OneLine : Symbol(ListItemVariant.OneLine, Decl(discriminatedUnionJsxElement.tsx, 17, 22))

    menuItemsVariant?: MenuItemVariant;
>menuItemsVariant : Symbol(IData.menuItemsVariant, Decl(discriminatedUnionJsxElement.tsx, 6, 84))
>MenuItemVariant : Symbol(MenuItemVariant, Decl(discriminatedUnionJsxElement.tsx, 6, 16))
}

function Menu<MenuItemVariant extends ListItemVariant = ListItemVariant.OneLine>(data: IData<MenuItemVariant>) {
>Menu : Symbol(Menu, Decl(discriminatedUnionJsxElement.tsx, 8, 1))
>MenuItemVariant : Symbol(MenuItemVariant, Decl(discriminatedUnionJsxElement.tsx, 10, 14))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>OneLine : Symbol(ListItemVariant.OneLine, Decl(discriminatedUnionJsxElement.tsx, 17, 22))
>data : Symbol(data, Decl(discriminatedUnionJsxElement.tsx, 10, 81))
>IData : Symbol(IData, Decl(discriminatedUnionJsxElement.tsx, 4, 1))
>MenuItemVariant : Symbol(MenuItemVariant, Decl(discriminatedUnionJsxElement.tsx, 10, 14))

    const listItemVariant = data.menuItemsVariant ?? ListItemVariant.OneLine;
>listItemVariant : Symbol(listItemVariant, Decl(discriminatedUnionJsxElement.tsx, 11, 9))
>data.menuItemsVariant : Symbol(IData.menuItemsVariant, Decl(discriminatedUnionJsxElement.tsx, 6, 84))
>data : Symbol(data, Decl(discriminatedUnionJsxElement.tsx, 10, 81))
>menuItemsVariant : Symbol(IData.menuItemsVariant, Decl(discriminatedUnionJsxElement.tsx, 6, 84))
>ListItemVariant.OneLine : Symbol(ListItemVariant.OneLine, Decl(discriminatedUnionJsxElement.tsx, 17, 22))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>OneLine : Symbol(ListItemVariant.OneLine, Decl(discriminatedUnionJsxElement.tsx, 17, 22))

    return <ListItem variant={listItemVariant} />;
>ListItem : Symbol(ListItem, Decl(discriminatedUnionJsxElement.tsx, 20, 1))
>variant : Symbol(variant, Decl(discriminatedUnionJsxElement.tsx, 12, 20))
>listItemVariant : Symbol(listItemVariant, Decl(discriminatedUnionJsxElement.tsx, 11, 9))
}

type IListItemData = { variant: ListItemVariant.Avatar; } | { variant: ListItemVariant.OneLine; };
>IListItemData : Symbol(IListItemData, Decl(discriminatedUnionJsxElement.tsx, 13, 1))
>variant : Symbol(variant, Decl(discriminatedUnionJsxElement.tsx, 15, 22))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>Avatar : Symbol(ListItemVariant.Avatar, Decl(discriminatedUnionJsxElement.tsx, 18, 12))
>variant : Symbol(variant, Decl(discriminatedUnionJsxElement.tsx, 15, 61))
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))
>OneLine : Symbol(ListItemVariant.OneLine, Decl(discriminatedUnionJsxElement.tsx, 17, 22))

enum ListItemVariant {
>ListItemVariant : Symbol(ListItemVariant, Decl(discriminatedUnionJsxElement.tsx, 15, 98))

    OneLine,
>OneLine : Symbol(ListItemVariant.OneLine, Decl(discriminatedUnionJsxElement.tsx, 17, 22))

    Avatar,
>Avatar : Symbol(ListItemVariant.Avatar, Decl(discriminatedUnionJsxElement.tsx, 18, 12))
}

function ListItem(_data: IListItemData) {
>ListItem : Symbol(ListItem, Decl(discriminatedUnionJsxElement.tsx, 20, 1))
>_data : Symbol(_data, Decl(discriminatedUnionJsxElement.tsx, 22, 18))
>IListItemData : Symbol(IListItemData, Decl(discriminatedUnionJsxElement.tsx, 13, 1))

    return null; 
}

