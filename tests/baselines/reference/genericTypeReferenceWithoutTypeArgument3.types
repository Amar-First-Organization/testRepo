=== tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument3.ts ===
// it is an error to use a generic type without type arguments
// all of these are errors 

declare class C<T> {
>C : C<T>

    foo: T;
>foo : T
}

declare var c: C;
>c : any (error)

declare var a: { x: C };
>a : { x: any (error); }
>x : any (error)

declare var b: { (x: C): C };
>b : (x: any (error)) => any (error)
>x : any (error)

declare var d: { [x: C]: C };
>d : {}
>x : any (error)

declare function f(x: C): C;
>f : (x: any (error)) => any (error)
>x : any (error)

declare class D extends C {}
>D : D
>C : typeof C

declare module M {
>M : typeof M

    export class E<T> { foo: T }
>E : E<T>
>foo : T
}

declare class D2 extends M.C { }
>D2 : D2
>M.C : any (error)
>M : typeof M
>C : any (error)

declare class D3<T extends M.E> { }
>D3 : D3<T>
>M : any (error)

declare function h<T extends C>(x: T);
>h : <T extends any (error)>(x: T) => any
>x : T

declare function i<T extends M.E>(x: T);
>i : <T extends any (error)>(x: T) => any
>M : any (error)
>x : T

