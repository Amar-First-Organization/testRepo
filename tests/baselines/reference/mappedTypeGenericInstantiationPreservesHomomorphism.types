//// [tests/cases/compiler/mappedTypeGenericInstantiationPreservesHomomorphism.ts] ////

=== internal.ts ===
export declare function usePrivateType<T extends unknown[]>(...args: T): PrivateMapped<T[any]>;
>usePrivateType : <T extends unknown[]>(...args: T) => PrivateMapped<T[any]>
>               : ^ ^^^^^^^^^         ^^^^^    ^^ ^^^^^                     
>args : T
>     : ^

type PrivateMapped<Obj> = {[K in keyof Obj]: Obj[K]};
>PrivateMapped : PrivateMapped<Obj>
>              : ^^^^^^^^^^^^^^^^^^

=== api.ts ===
import {usePrivateType} from './internal';
>usePrivateType : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 ? { [K_1 in keyof T_1]: T_1[K_1]; } : never
>               : ^ ^^^^^^^^^         ^^^^^    ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

export const mappedUnionWithPrivateType = <T extends unknown[]>(...args: T) => usePrivateType(...args);
>mappedUnionWithPrivateType : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 ? { [K_1 in keyof T_1]: T_1[K_1]; } : never
>                           : ^ ^^^^^^^^^         ^^^^^    ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><T extends unknown[]>(...args: T) => usePrivateType(...args) : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 ? { [K_1 in keyof T_1]: T_1[K_1]; } : never
>                                                             : ^ ^^^^^^^^^         ^^^^^    ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>args : T
>     : ^
>usePrivateType(...args) : T[any] extends infer T_1 ? { [K_1 in keyof T_1]: T_1[K_1]; } : never
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>usePrivateType : <T_1 extends unknown[]>(...args: T_1) => T_1[any] extends infer T_2 ? { [K_1 in keyof T_2]: T_2[K_1]; } : never
>               : ^^^^^^^^^^^^^         ^^^^^    ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>...args : unknown
>        : ^^^^^^^
>args : T
>     : ^

