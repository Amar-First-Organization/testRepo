//// [tests/cases/compiler/arrayToLocaleStringES2015.ts] ////

=== arrayToLocaleStringES2015.ts ===
const arr = [1, 2, 3];
>arr : number[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3

let str: string;
>str : string

str = arr.toLocaleString(); // OK
>str = arr.toLocaleString() : string
>str : string
>arr.toLocaleString() : string
>arr.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>arr : number[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }

str = arr.toLocaleString('en-US'); // OK
>str = arr.toLocaleString('en-US') : string
>str : string
>arr.toLocaleString('en-US') : string
>arr.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>arr : number[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>'en-US' : "en-US"

str = arr.toLocaleString('en-US', { style: 'currency', currency: 'EUR' }); // OK
>str = arr.toLocaleString('en-US', { style: 'currency', currency: 'EUR' }) : string
>str : string
>arr.toLocaleString('en-US', { style: 'currency', currency: 'EUR' }) : string
>arr.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>arr : number[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>'en-US' : "en-US"
>{ style: 'currency', currency: 'EUR' } : { style: "currency"; currency: string; }
>style : "currency"
>'currency' : "currency"
>currency : string
>'EUR' : "EUR"

const dates: readonly Date[] = [new Date(), new Date()];
>dates : readonly Date[]
>[new Date(), new Date()] : Date[]
>new Date() : Date
>Date : DateConstructor
>new Date() : Date
>Date : DateConstructor

let str2: string;
>str2 : string

str2 = dates.toLocaleString(); // OK
>str2 = dates.toLocaleString() : string
>str2 : string
>dates.toLocaleString() : string
>dates.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>dates : readonly Date[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }

str2 = dates.toLocaleString('fr'); // OK
>str2 = dates.toLocaleString('fr') : string
>str2 : string
>dates.toLocaleString('fr') : string
>dates.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>dates : readonly Date[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>'fr' : "fr"

str2 = dates.toLocaleString('fr', { timeZone: 'UTC' }); // OK
>str2 = dates.toLocaleString('fr', { timeZone: 'UTC' }) : string
>str2 : string
>dates.toLocaleString('fr', { timeZone: 'UTC' }) : string
>dates.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>dates : readonly Date[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>'fr' : "fr"
>{ timeZone: 'UTC' } : { timeZone: string; }
>timeZone : string
>'UTC' : "UTC"

const mixed = [1, new Date(), 59782, new Date()];
>mixed : (number | Date)[]
>[1, new Date(), 59782, new Date()] : (number | Date)[]
>1 : 1
>new Date() : Date
>Date : DateConstructor
>59782 : 59782
>new Date() : Date
>Date : DateConstructor

let str3: string;
>str3 : string

str3 = mixed.toLocaleString(); // OK
>str3 = mixed.toLocaleString() : string
>str3 : string
>mixed.toLocaleString() : string
>mixed.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>mixed : (number | Date)[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }

str3 = mixed.toLocaleString('de', { style: 'currency', currency: 'EUR' }); // OK
>str3 = mixed.toLocaleString('de', { style: 'currency', currency: 'EUR' }) : string
>str3 : string
>mixed.toLocaleString('de', { style: 'currency', currency: 'EUR' }) : string
>mixed.toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>mixed : (number | Date)[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>'de' : "de"
>{ style: 'currency', currency: 'EUR' } : { style: "currency"; currency: string; }
>style : "currency"
>'currency' : "currency"
>currency : string
>'EUR' : "EUR"

str3 = (mixed as ReadonlyArray<number | Date>).toLocaleString('de', { currency: 'EUR', style: 'currency', timeZone: 'UTC' }); // OK
>str3 = (mixed as ReadonlyArray<number | Date>).toLocaleString('de', { currency: 'EUR', style: 'currency', timeZone: 'UTC' }) : string
>str3 : string
>(mixed as ReadonlyArray<number | Date>).toLocaleString('de', { currency: 'EUR', style: 'currency', timeZone: 'UTC' }) : string
>(mixed as ReadonlyArray<number | Date>).toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>(mixed as ReadonlyArray<number | Date>) : readonly (number | Date)[]
>mixed as ReadonlyArray<number | Date> : readonly (number | Date)[]
>mixed : (number | Date)[]
>toLocaleString : { (): string; (locales?: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }
>'de' : "de"
>{ currency: 'EUR', style: 'currency', timeZone: 'UTC' } : { currency: string; style: "currency"; timeZone: string; }
>currency : string
>'EUR' : "EUR"
>style : "currency"
>'currency' : "currency"
>timeZone : string
>'UTC' : "UTC"

