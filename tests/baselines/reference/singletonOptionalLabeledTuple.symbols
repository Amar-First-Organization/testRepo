=== tests/cases/compiler/singletonOptionalLabeledTuple.ts ===
type AliasArray = [p?: number]
>AliasArray : Symbol(AliasArray, Decl(singletonOptionalLabeledTuple.ts, 0, 0))

// literal type vs type alias
type Literal = [p?: number] extends [unknown] ? true : false // Expect `Literal` to be `false`
>Literal : Symbol(Literal, Decl(singletonOptionalLabeledTuple.ts, 0, 30))

type Alias = AliasArray extends [unknown] ? true : false     // Expect `Alias` to be `false`
>Alias : Symbol(Alias, Decl(singletonOptionalLabeledTuple.ts, 3, 60))
>AliasArray : Symbol(AliasArray, Decl(singletonOptionalLabeledTuple.ts, 0, 0))

// labeled tuple vs normal tuple
type Labeled = [p?: number] extends [unknown] ? true : false   // Expect `Labeled` to be `false`
>Labeled : Symbol(Labeled, Decl(singletonOptionalLabeledTuple.ts, 4, 56))

type Normal = [number?] extends [unknown] ? true : false       // Expect `Normal` to be `false`
>Normal : Symbol(Normal, Decl(singletonOptionalLabeledTuple.ts, 7, 60))

