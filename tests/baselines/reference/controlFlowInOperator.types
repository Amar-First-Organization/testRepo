=== tests/cases/conformance/controlFlow/controlFlowInOperator.ts ===
const a = 'a';
>a : "a"
>'a' : "a"

const b = 'b';
>b : "b"
>'b' : "b"

const d = 'd';
>d : "d"
>'d' : "d"

// Type narrowing

type A = { [a]: number; };
>A : A
>[a] : number
>a : "a"

type B = { [b]: string; };
>B : B
>[b] : string
>b : "b"

declare const c: A | B;
>c : A | B

if ('a' in c) {
>'a' in c : boolean
>'a' : "a"
>c : A | B

    c;      // A
>c : A

    c['a']; // number
>c['a'] : number
>c : A
>'a' : "a"

} else {
    c;      // B
>c : B

    c['b']  // string
>c['b'] : string
>c : B
>'b' : "b"
}

if ('d' in c) {
>'d' in c : boolean
>'d' : "d"
>c : A | B

    c; // (A | B) & { d: unknown; }
>c : (A | B) & { d: unknown; }

} else {
    c; // (A | B)
>c : A | B
}

if (a in c) {
>a in c : boolean
>a : "a"
>c : A | B

    c;    // A
>c : A

    c[a]; // number;
>c[a] : number
>c : A
>a : "a"

} else {
    c;      // B
>c : B

    c[b]  // string
>c[b] : string
>c : B
>b : "b"
}

if (d in c) {
>d in c : boolean
>d : "d"
>c : A | B

    c; // (A | B) & { d: unknown; }
>c : (A | B) & { d: unknown; }

} else {
    c; // (A | B)
>c : A | B
}

// Type widening

declare const e: object;
>e : object

if ('a' in e) {
>'a' in e : boolean
>'a' : "a"
>e : object

    e;      // { a: unknown; }
>e : object & { a: unknown; }

    e['a']  // unknown
>e['a'] : unknown
>e : object & { a: unknown; }
>'a' : "a"

} else {
    e;      // object
>e : object
}

if (a in e) {
>a in e : boolean
>a : "a"
>e : object

    e;      // { a: unknown; }
>e : object & { a: unknown; }

    e[a]    // unknown
>e[a] : unknown
>e : object & { a: unknown; }
>a : "a"

} else {
    e;      // object
>e : object
}

// More complex control flows

e;              // object
>e : object

if ( 'a' in e ) {
>'a' in e : boolean
>'a' : "a"
>e : object

    e;          // { a: unknown; }
>e : object & { a: unknown; }

    if ( 'b' in e ) {
>'b' in e : boolean
>'b' : "b"
>e : object & { a: unknown; }

        e;      // { a: unknown; b: unknown; }
>e : object & { b: unknown; a: unknown; }

        e['a']; // unknown
>e['a'] : unknown
>e : object & { b: unknown; a: unknown; }
>'a' : "a"

        e['b']; // unknown
>e['b'] : unknown
>e : object & { b: unknown; a: unknown; }
>'b' : "b"

    } else {
        e;      // { a: unknown; }
>e : object & { a: unknown; }
    }
    e;          // { a: unknown; }
>e : object & { a: unknown; }
}
e;              // object
>e : object

e;              // object
>e : object

if ( a in e ) {
>a in e : boolean
>a : "a"
>e : object

    e;          // { a: unknown; }
>e : object & { a: unknown; }

    if ( b in e ) {
>b in e : boolean
>b : "b"
>e : object & { a: unknown; }

        e;      // { a: unknown; b: unknown; }
>e : object & { b: unknown; a: unknown; }

        e[a];   // unknown
>e[a] : unknown
>e : object & { b: unknown; a: unknown; }
>a : "a"

        e[b];   // unknown
>e[b] : unknown
>e : object & { b: unknown; a: unknown; }
>b : "b"

    } else {
        e;      // { a: unknown; }
>e : object & { a: unknown; }
    }
    e;          // { a: unknown; }
>e : object & { a: unknown; }
}
e;              // object
>e : object

e;          // object
>e : object

if ( 'a' in e ) {
>'a' in e : boolean
>'a' : "a"
>e : object

    e;      // { a: unknown; }
>e : object & { a: unknown; }

    e['a']; // unknown
>e['a'] : unknown
>e : object & { a: unknown; }
>'a' : "a"

} else if ( 'b' in e ) {
>'b' in e : boolean
>'b' : "b"
>e : object

    e;      // { b: unknown; }
>e : object & { b: unknown; }

    e['b']; // unknown
>e['b'] : unknown
>e : object & { b: unknown; }
>'b' : "b"

} else {
    e;      // object
>e : object
}
e;          // object
>e : object

e;          // object
>e : object

if ( a in e ) {
>a in e : boolean
>a : "a"
>e : object

    e;      // { a: unknown; }
>e : object & { a: unknown; }

    e[a];   // unknown
>e[a] : unknown
>e : object & { a: unknown; }
>a : "a"

} else if ( b in e ) {
>b in e : boolean
>b : "b"
>e : object

    e;      // { b: unknown; }
>e : object & { b: unknown; }

    e[b];   // unknown
>e[b] : unknown
>e : object & { b: unknown; }
>b : "b"

} else {
    e;      // object
>e : object
}
e;          // object
>e : object

declare const f: Array<object>
>f : object[]

for (const g of f) {
>g : object
>f : object[]

    g;          // object
>g : object

    if ('a' in g) {
>'a' in g : boolean
>'a' : "a"
>g : object

        g;      // { a: unknown; }
>g : object & { a: unknown; }

        g['a']; // unknown
>g['a'] : unknown
>g : object & { a: unknown; }
>'a' : "a"
    }
    g;          // object
>g : object
}

for (const g of f) {
>g : object
>f : object[]

    g;          // object
>g : object

    if (a in g) {
>a in g : boolean
>a : "a"
>g : object

        g;      // { a: unknown; }
>g : object & { a: unknown; }

        g[a];   // unknown
>g[a] : unknown
>g : object & { a: unknown; }
>a : "a"
    }
    g;          // object
>g : object
}

