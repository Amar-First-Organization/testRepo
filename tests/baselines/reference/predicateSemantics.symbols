//// [tests/cases/compiler/predicateSemantics.ts] ////

=== predicateSemantics.ts ===
declare let cond: any;
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))

// OK: One or other operand is possibly nullish
const test1 = (cond ? undefined : 32) ?? "possibly reached";
>test1 : Symbol(test1, Decl(predicateSemantics.ts, 3, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Not OK: Both operands nullish
const test2 = (cond ? undefined : null) ?? "always reached";
>test2 : Symbol(test2, Decl(predicateSemantics.ts, 6, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Not OK: Both operands non-nullish
const test3 = (cond ? 132 : 17) ?? "unreachable";
>test3 : Symbol(test3, Decl(predicateSemantics.ts, 9, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))

// Parens
const test4 = (cond ? (undefined) : (17)) ?? 42;
>test4 : Symbol(test4, Decl(predicateSemantics.ts, 12, 5))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Should be OK (special case)
if (!!true) {

}


