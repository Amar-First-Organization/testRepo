//// [tests/cases/conformance/types/conditional/inferTypesBuiltinHelpers3.ts] ////

=== inferTypesBuiltinHelpers3.ts ===
// https://github.com/microsoft/TypeScript/pull/55714#issuecomment-1715151081

type IfAny<T, Y, N> = 0 extends 1 & T ? Y : N;
>IfAny : IfAny<T, Y, N>

type Data = Record<string, unknown>;
>Data : { [x: string]: unknown; }

type DefaultFactory<T> = (props: Data) => T | null | undefined;
>DefaultFactory : DefaultFactory<T>
>props : Data

type ComponentObjectPropsOptions<P = Data> = {
>ComponentObjectPropsOptions : ComponentObjectPropsOptions<P>

  [K in keyof P]: Prop<P[K]> | null;
};
interface PropOptions<T = any, D = T> {
  type?: PropType<T> | true | null;
>type : true | PropType<T> | null | undefined
>true : true

  required?: boolean;
>required : boolean | undefined

  default?: D | DefaultFactory<D> | null | undefined | object;
>default : object | D | DefaultFactory<D> | null | undefined

  validator?(value: unknown): boolean;
>validator : ((value: unknown) => boolean) | undefined
>value : unknown
}
type PropMethod<T, TConstructor = any> = [T] extends [
>PropMethod : PropMethod<T, TConstructor>

  ((...args: any) => any) | undefined,
>args : any

]
  ? {
      new (): TConstructor;
      (): T;
      readonly prototype: TConstructor;
>prototype : TConstructor
    }
  : never;
type PropConstructor<T = any> =
>PropConstructor : PropConstructor<T>

  | {
      new (...args: any[]): T & {};
>args : any[]
    }
  | {
      (): T;
    }
  | PropMethod<T>;
type PropType<T> = PropConstructor<T> | PropConstructor<T>[];
>PropType : PropType<T>

type Prop<T, D = T> = PropOptions<T, D> | PropType<T>;
>Prop : Prop<T, D>

type InferPropType<T> = [T] extends [null]
>InferPropType : InferPropType<T>

  ? any // null & true would fail to infer
  : [T] extends [{ type: null | true }]
>type : true | null
>true : true

  ? // As TS issue https://github.com/Microsoft/TypeScript/issues/14829
    // somehow `ObjectConstructor` when inferred from { (): T } becomes `any`
    // `BooleanConstructor` when inferred from PropConstructor(with PropMethod) becomes `Boolean`
    any
  : [T] extends [ObjectConstructor | { type: ObjectConstructor }]
>type : ObjectConstructor

  ? Record<string, any>
  : [T] extends [BooleanConstructor | { type: BooleanConstructor }]
>type : BooleanConstructor

  ? boolean
  : [T] extends [DateConstructor | { type: DateConstructor }]
>type : DateConstructor

  ? Date
  : [T] extends [(infer U)[] | { type: (infer U)[] }]
>type : U[]

  ? U extends DateConstructor
    ? Date | InferPropType<U>
    : InferPropType<U>
  : [T] extends [Prop<infer V, infer D>]
  ? unknown extends V
    ? IfAny<V, V, D>
    : V
  : T;

type PartialKeys<T> = { [P in keyof T]?: unknown };
>PartialKeys : PartialKeys<T>

type AppendDefault<
>AppendDefault : AppendDefault<T, D>

  T extends ComponentObjectPropsOptions,
  D extends PartialKeys<T>,
> = {
  [P in keyof T]-?: unknown extends D[P]
    ? T[P]
    : T[P] extends Record<string, unknown>
    ? Omit<T[P], "type" | "default"> & {
        type: PropType<MergeDefault<T[P], D[P]>>;
>type : PropType<MergeDefault<T[P], D[P]>>

        default: MergeDefault<T[P], D[P]>;
>default : MergeDefault<T[P], D[P]>
      }
    : {
        type: PropType<MergeDefault<T[P], D[P]>>;
>type : PropType<MergeDefault<T[P], D[P]>>

        default: MergeDefault<T[P], D[P]>;
>default : MergeDefault<T[P], D[P]>

      };
};

type MergeDefault<T, D> = unknown extends D
>MergeDefault : MergeDefault<T, D>

  ? InferPropType<T>
  : NonNullable<InferPropType<T>> | D;

declare const makeVSelectionControlProps: <
>makeVSelectionControlProps : <Defaults extends PartialKeys<{ trueValue: null; falseValue: null; value: null; }> = {}>(defaults?: Defaults | undefined) => AppendDefault<{    trueValue: null;    falseValue: null;    value: null;}, Defaults>

  Defaults extends PartialKeys<{
    trueValue: null;
>trueValue : null

    falseValue: null;
>falseValue : null

    value: null;
>value : null

  }> = {},
>(
  defaults?: Defaults | undefined,
>defaults : Defaults | undefined

) => AppendDefault<
  {
    trueValue: null;
>trueValue : null

    falseValue: null;
>falseValue : null

    value: null;
>value : null

  },
  Defaults
>;

type Test1 = ReturnType<typeof makeVSelectionControlProps>;
>Test1 : AppendDefault<{ trueValue: null; falseValue: null; value: null; }, PartialKeys<{ trueValue: null; falseValue: null; value: null; }>>
>makeVSelectionControlProps : <Defaults extends PartialKeys<{ trueValue: null; falseValue: null; value: null; }> = {}>(defaults?: Defaults | undefined) => AppendDefault<{ trueValue: null; falseValue: null; value: null; }, Defaults>

