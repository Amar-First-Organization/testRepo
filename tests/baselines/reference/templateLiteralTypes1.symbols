=== tests/cases/conformance/types/literal/templateLiteralTypes1.ts ===
// Template types example from #12754

const createScopedActionType = <S extends string>(scope: S) => <T extends string>(type: T) => `${scope}/${type}` as `${S}/${T}`;
>createScopedActionType : Symbol(createScopedActionType, Decl(templateLiteralTypes1.ts, 2, 5))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 2, 32))
>scope : Symbol(scope, Decl(templateLiteralTypes1.ts, 2, 50))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 2, 32))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 2, 64))
>type : Symbol(type, Decl(templateLiteralTypes1.ts, 2, 82))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 2, 64))
>scope : Symbol(scope, Decl(templateLiteralTypes1.ts, 2, 50))
>type : Symbol(type, Decl(templateLiteralTypes1.ts, 2, 82))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 2, 32))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 2, 64))

const createActionInMyScope = createScopedActionType("MyScope");  // <T extends string>(type: T) => `MyScope/${T}`
>createActionInMyScope : Symbol(createActionInMyScope, Decl(templateLiteralTypes1.ts, 3, 5))
>createScopedActionType : Symbol(createScopedActionType, Decl(templateLiteralTypes1.ts, 2, 5))

const MY_ACTION = createActionInMyScope("MY_ACTION");  // 'MyScope/MY_ACTION'
>MY_ACTION : Symbol(MY_ACTION, Decl(templateLiteralTypes1.ts, 4, 5))
>createActionInMyScope : Symbol(createActionInMyScope, Decl(templateLiteralTypes1.ts, 3, 5))

// Union types are distributed over template types

type EventName<S extends string> = `${S}Changed`;
>EventName : Symbol(EventName, Decl(templateLiteralTypes1.ts, 4, 53))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 8, 15))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 8, 15))

type EN1 = EventName<'Foo' | 'Bar' | 'Baz'>;
>EN1 : Symbol(EN1, Decl(templateLiteralTypes1.ts, 8, 49))
>EventName : Symbol(EventName, Decl(templateLiteralTypes1.ts, 4, 53))

type Loc = `${'top' | 'middle' | 'bottom'}-${'left' | 'center' | 'right'}`;
>Loc : Symbol(Loc, Decl(templateLiteralTypes1.ts, 9, 44))

// Primitive literal types can be spread into templates

type ToString<T extends string | number | boolean | bigint> = `${T}`;
>ToString : Symbol(ToString, Decl(templateLiteralTypes1.ts, 10, 75))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 14, 14))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 14, 14))

type TS1 = ToString<'abc' | 42 | true | -1234n>;
>TS1 : Symbol(TS1, Decl(templateLiteralTypes1.ts, 14, 69))
>ToString : Symbol(ToString, Decl(templateLiteralTypes1.ts, 10, 75))

// Casing modifiers

type Cases<T extends string> = `${uppercase T} ${lowercase T} ${capitalize T} ${uncapitalize T}`;
>Cases : Symbol(Cases, Decl(templateLiteralTypes1.ts, 15, 48))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 19, 11))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 19, 11))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 19, 11))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 19, 11))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 19, 11))

type TCA1 = Cases<'bar'>;  // 'BAR bar Bar bar'
>TCA1 : Symbol(TCA1, Decl(templateLiteralTypes1.ts, 19, 97))
>Cases : Symbol(Cases, Decl(templateLiteralTypes1.ts, 15, 48))

type TCA2 = Cases<'BAR'>;  // 'BAR bar BAR bAR'
>TCA2 : Symbol(TCA2, Decl(templateLiteralTypes1.ts, 21, 25))
>Cases : Symbol(Cases, Decl(templateLiteralTypes1.ts, 15, 48))

// Assignability

function test<T extends 'foo' | 'bar'>(name: `get${capitalize T}`) {
>test : Symbol(test, Decl(templateLiteralTypes1.ts, 22, 25))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 26, 14))
>name : Symbol(name, Decl(templateLiteralTypes1.ts, 26, 39))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 26, 14))

    let s1: string = name;
>s1 : Symbol(s1, Decl(templateLiteralTypes1.ts, 27, 7))
>name : Symbol(name, Decl(templateLiteralTypes1.ts, 26, 39))

    let s2: 'getFoo' | 'getBar' = name;
>s2 : Symbol(s2, Decl(templateLiteralTypes1.ts, 28, 7))
>name : Symbol(name, Decl(templateLiteralTypes1.ts, 26, 39))
}

function fa1<T>(x: T, y: { [P in keyof T]: T[P] }, z: { [P in keyof T & string as `p_${P}`]: T[P] }) {
>fa1 : Symbol(fa1, Decl(templateLiteralTypes1.ts, 29, 1))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 31, 13))
>x : Symbol(x, Decl(templateLiteralTypes1.ts, 31, 16))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 31, 13))
>y : Symbol(y, Decl(templateLiteralTypes1.ts, 31, 21))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 31, 28))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 31, 13))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 31, 13))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 31, 28))
>z : Symbol(z, Decl(templateLiteralTypes1.ts, 31, 50))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 31, 57))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 31, 13))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 31, 57))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 31, 13))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 31, 57))

    y = x;
>y : Symbol(y, Decl(templateLiteralTypes1.ts, 31, 21))
>x : Symbol(x, Decl(templateLiteralTypes1.ts, 31, 16))

    z = x;  // Error
>z : Symbol(z, Decl(templateLiteralTypes1.ts, 31, 50))
>x : Symbol(x, Decl(templateLiteralTypes1.ts, 31, 16))
}

function fa2<T, U extends T, A extends string, B extends A>(x: { [P in B as `p_${P}`]: T }, y: { [Q in A as `p_${Q}`]: U }) {
>fa2 : Symbol(fa2, Decl(templateLiteralTypes1.ts, 34, 1))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 36, 13))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 36, 15))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 36, 13))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 36, 28))
>B : Symbol(B, Decl(templateLiteralTypes1.ts, 36, 46))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 36, 28))
>x : Symbol(x, Decl(templateLiteralTypes1.ts, 36, 60))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 36, 66))
>B : Symbol(B, Decl(templateLiteralTypes1.ts, 36, 46))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 36, 66))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 36, 13))
>y : Symbol(y, Decl(templateLiteralTypes1.ts, 36, 91))
>Q : Symbol(Q, Decl(templateLiteralTypes1.ts, 36, 98))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 36, 28))
>Q : Symbol(Q, Decl(templateLiteralTypes1.ts, 36, 98))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 36, 15))

    x = y;
>x : Symbol(x, Decl(templateLiteralTypes1.ts, 36, 60))
>y : Symbol(y, Decl(templateLiteralTypes1.ts, 36, 91))

    y = x;  // Error
>y : Symbol(y, Decl(templateLiteralTypes1.ts, 36, 91))
>x : Symbol(x, Decl(templateLiteralTypes1.ts, 36, 60))
}

// String transformations using recursive conditional types

type Join<T extends unknown[], D extends string> =
>Join : Symbol(Join, Decl(templateLiteralTypes1.ts, 39, 1))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 43, 10))
>D : Symbol(D, Decl(templateLiteralTypes1.ts, 43, 30))

    T extends [] ? '' :
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 43, 10))

    T extends [string | number | boolean | bigint] ? `${T[0]}` :
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 43, 10))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 43, 10))

    T extends [string | number | boolean | bigint, ...infer U] ? `${T[0]}${D}${Join<U, D>}` :
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 43, 10))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 46, 59))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 43, 10))
>D : Symbol(D, Decl(templateLiteralTypes1.ts, 43, 30))
>Join : Symbol(Join, Decl(templateLiteralTypes1.ts, 39, 1))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 46, 59))
>D : Symbol(D, Decl(templateLiteralTypes1.ts, 43, 30))

    string;

type TJ1 = Join<[1, 2, 3, 4], '.'>
>TJ1 : Symbol(TJ1, Decl(templateLiteralTypes1.ts, 47, 11))
>Join : Symbol(Join, Decl(templateLiteralTypes1.ts, 39, 1))

type TJ2 = Join<['foo', 'bar', 'baz'], '-'>;
>TJ2 : Symbol(TJ2, Decl(templateLiteralTypes1.ts, 49, 34))
>Join : Symbol(Join, Decl(templateLiteralTypes1.ts, 39, 1))

type TJ3 = Join<[], '.'>
>TJ3 : Symbol(TJ3, Decl(templateLiteralTypes1.ts, 50, 44))
>Join : Symbol(Join, Decl(templateLiteralTypes1.ts, 39, 1))

// Inference based on delimiters

type MatchPair<S extends string> = S extends `[${infer A},${infer B}]` ? [A, B] : unknown;
>MatchPair : Symbol(MatchPair, Decl(templateLiteralTypes1.ts, 51, 24))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 55, 15))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 55, 15))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 55, 54))
>B : Symbol(B, Decl(templateLiteralTypes1.ts, 55, 65))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 55, 54))
>B : Symbol(B, Decl(templateLiteralTypes1.ts, 55, 65))

type T20 = MatchPair<'[1,2]'>;  // ['1', '2']
>T20 : Symbol(T20, Decl(templateLiteralTypes1.ts, 55, 90))
>MatchPair : Symbol(MatchPair, Decl(templateLiteralTypes1.ts, 51, 24))

type T21 = MatchPair<'[foo,bar]'>;  // ['foo', 'bar']
>T21 : Symbol(T21, Decl(templateLiteralTypes1.ts, 57, 30))
>MatchPair : Symbol(MatchPair, Decl(templateLiteralTypes1.ts, 51, 24))

type T22 = MatchPair<' [1,2]'>;  // unknown
>T22 : Symbol(T22, Decl(templateLiteralTypes1.ts, 58, 34))
>MatchPair : Symbol(MatchPair, Decl(templateLiteralTypes1.ts, 51, 24))

type T23 = MatchPair<'[123]'>;  // unknown
>T23 : Symbol(T23, Decl(templateLiteralTypes1.ts, 59, 31))
>MatchPair : Symbol(MatchPair, Decl(templateLiteralTypes1.ts, 51, 24))

type T24 = MatchPair<'[1,2,3,4]'>;  // ['1', '2,3,4']
>T24 : Symbol(T24, Decl(templateLiteralTypes1.ts, 60, 30))
>MatchPair : Symbol(MatchPair, Decl(templateLiteralTypes1.ts, 51, 24))

type SnakeToCamelCase<S extends string> =
>SnakeToCamelCase : Symbol(SnakeToCamelCase, Decl(templateLiteralTypes1.ts, 61, 34))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 63, 22))

    S extends `${infer T}_${infer U}` ? `${lowercase T}${SnakeToPascalCase<U>}` :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 63, 22))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 64, 22))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 64, 33))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 64, 22))
>SnakeToPascalCase : Symbol(SnakeToPascalCase, Decl(templateLiteralTypes1.ts, 66, 25))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 64, 33))

    S extends `${infer T}` ? `${lowercase T}` :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 63, 22))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 65, 22))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 65, 22))

    SnakeToPascalCase<S>;
>SnakeToPascalCase : Symbol(SnakeToPascalCase, Decl(templateLiteralTypes1.ts, 66, 25))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 63, 22))

type SnakeToPascalCase<S extends string> =
>SnakeToPascalCase : Symbol(SnakeToPascalCase, Decl(templateLiteralTypes1.ts, 66, 25))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 68, 23))

    string extends S ? string :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 68, 23))

    S extends `${infer T}_${infer U}` ? `${capitalize `${lowercase T}`}${SnakeToPascalCase<U>}` :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 68, 23))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 70, 22))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 70, 33))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 70, 22))
>SnakeToPascalCase : Symbol(SnakeToPascalCase, Decl(templateLiteralTypes1.ts, 66, 25))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 70, 33))

    S extends `${infer T}` ? `${capitalize `${lowercase T}`}` :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 68, 23))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 71, 22))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 71, 22))

    never;

type RR0 = SnakeToPascalCase<'hello_world_foo'>;  // 'HelloWorldFoo'
>RR0 : Symbol(RR0, Decl(templateLiteralTypes1.ts, 72, 10))
>SnakeToPascalCase : Symbol(SnakeToPascalCase, Decl(templateLiteralTypes1.ts, 66, 25))

type RR1 = SnakeToPascalCase<'FOO_BAR_BAZ'>;  // 'FooBarBaz'
>RR1 : Symbol(RR1, Decl(templateLiteralTypes1.ts, 74, 48))
>SnakeToPascalCase : Symbol(SnakeToPascalCase, Decl(templateLiteralTypes1.ts, 66, 25))

type RR2 = SnakeToCamelCase<'hello_world_foo'>;  // 'helloWorldFoo'
>RR2 : Symbol(RR2, Decl(templateLiteralTypes1.ts, 75, 44))
>SnakeToCamelCase : Symbol(SnakeToCamelCase, Decl(templateLiteralTypes1.ts, 61, 34))

type RR3 = SnakeToCamelCase<'FOO_BAR_BAZ'>;  // 'fooBarBaz'
>RR3 : Symbol(RR3, Decl(templateLiteralTypes1.ts, 76, 47))
>SnakeToCamelCase : Symbol(SnakeToCamelCase, Decl(templateLiteralTypes1.ts, 61, 34))

// Single character inference

type FirstTwoAndRest<S extends string> = S extends `${infer A}${infer B}${infer R}` ? [`${A}${B}`, R] : unknown;
>FirstTwoAndRest : Symbol(FirstTwoAndRest, Decl(templateLiteralTypes1.ts, 77, 43))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 81, 21))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 81, 21))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 81, 59))
>B : Symbol(B, Decl(templateLiteralTypes1.ts, 81, 69))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 81, 79))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 81, 59))
>B : Symbol(B, Decl(templateLiteralTypes1.ts, 81, 69))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 81, 79))

type T25 = FirstTwoAndRest<'abcde'>;  // ['ab', 'cde']
>T25 : Symbol(T25, Decl(templateLiteralTypes1.ts, 81, 112))
>FirstTwoAndRest : Symbol(FirstTwoAndRest, Decl(templateLiteralTypes1.ts, 77, 43))

type T26 = FirstTwoAndRest<'ab'>;  // ['ab', '']
>T26 : Symbol(T26, Decl(templateLiteralTypes1.ts, 83, 36))
>FirstTwoAndRest : Symbol(FirstTwoAndRest, Decl(templateLiteralTypes1.ts, 77, 43))

type T27 = FirstTwoAndRest<'a'>;  // unknown
>T27 : Symbol(T27, Decl(templateLiteralTypes1.ts, 84, 33))
>FirstTwoAndRest : Symbol(FirstTwoAndRest, Decl(templateLiteralTypes1.ts, 77, 43))

type HexDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' |'8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f';
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))

type HexColor<S extends string> =
>HexColor : Symbol(HexColor, Decl(templateLiteralTypes1.ts, 87, 145))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 89, 14))

    S extends `#${infer R1}${infer R2}${infer G1}${infer G2}${infer B1}${infer B2}` ?
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 89, 14))
>R1 : Symbol(R1, Decl(templateLiteralTypes1.ts, 90, 23))
>R2 : Symbol(R2, Decl(templateLiteralTypes1.ts, 90, 34))
>G1 : Symbol(G1, Decl(templateLiteralTypes1.ts, 90, 45))
>G2 : Symbol(G2, Decl(templateLiteralTypes1.ts, 90, 56))
>B1 : Symbol(B1, Decl(templateLiteralTypes1.ts, 90, 67))
>B2 : Symbol(B2, Decl(templateLiteralTypes1.ts, 90, 78))

        [R1, R2, G1, G2, B1, B2] extends [HexDigit, HexDigit, HexDigit, HexDigit, HexDigit, HexDigit] ?
>R1 : Symbol(R1, Decl(templateLiteralTypes1.ts, 90, 23))
>R2 : Symbol(R2, Decl(templateLiteralTypes1.ts, 90, 34))
>G1 : Symbol(G1, Decl(templateLiteralTypes1.ts, 90, 45))
>G2 : Symbol(G2, Decl(templateLiteralTypes1.ts, 90, 56))
>B1 : Symbol(B1, Decl(templateLiteralTypes1.ts, 90, 67))
>B2 : Symbol(B2, Decl(templateLiteralTypes1.ts, 90, 78))
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))
>HexDigit : Symbol(HexDigit, Decl(templateLiteralTypes1.ts, 85, 32))

            S :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 89, 14))

            never :
        never;

type TH1 = HexColor<'#8080FF'>;  // '#8080FF'
>TH1 : Symbol(TH1, Decl(templateLiteralTypes1.ts, 94, 14))
>HexColor : Symbol(HexColor, Decl(templateLiteralTypes1.ts, 87, 145))

type TH2 = HexColor<'#80c0ff'>;  // '#80c0ff'
>TH2 : Symbol(TH2, Decl(templateLiteralTypes1.ts, 96, 31))
>HexColor : Symbol(HexColor, Decl(templateLiteralTypes1.ts, 87, 145))

type TH3 = HexColor<'#8080F'>;  // never
>TH3 : Symbol(TH3, Decl(templateLiteralTypes1.ts, 97, 31))
>HexColor : Symbol(HexColor, Decl(templateLiteralTypes1.ts, 87, 145))

type TH4 = HexColor<'#8080FFF'>;  // never
>TH4 : Symbol(TH4, Decl(templateLiteralTypes1.ts, 98, 30))
>HexColor : Symbol(HexColor, Decl(templateLiteralTypes1.ts, 87, 145))

// Recursive inference

type Trim<S extends string> =
>Trim : Symbol(Trim, Decl(templateLiteralTypes1.ts, 99, 32))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 103, 10))

    S extends ` ${infer T}` ? Trim<T> :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 103, 10))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 104, 23))
>Trim : Symbol(Trim, Decl(templateLiteralTypes1.ts, 99, 32))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 104, 23))

    S extends `${infer T} ` ? Trim<T> :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 103, 10))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 105, 22))
>Trim : Symbol(Trim, Decl(templateLiteralTypes1.ts, 99, 32))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 105, 22))

    S;
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 103, 10))

type TR1 = Trim<'xx   '>;  // 'xx'
>TR1 : Symbol(TR1, Decl(templateLiteralTypes1.ts, 106, 6))
>Trim : Symbol(Trim, Decl(templateLiteralTypes1.ts, 99, 32))

type TR2 = Trim<'   xx'>;  // 'xx'
>TR2 : Symbol(TR2, Decl(templateLiteralTypes1.ts, 108, 25))
>Trim : Symbol(Trim, Decl(templateLiteralTypes1.ts, 99, 32))

type TR3 = Trim<'   xx   '>;  // 'xx'
>TR3 : Symbol(TR3, Decl(templateLiteralTypes1.ts, 109, 25))
>Trim : Symbol(Trim, Decl(templateLiteralTypes1.ts, 99, 32))

type Split<S extends string, D extends string> =
>Split : Symbol(Split, Decl(templateLiteralTypes1.ts, 110, 28))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 112, 11))
>D : Symbol(D, Decl(templateLiteralTypes1.ts, 112, 28))

    string extends S ? string[] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 112, 11))

    S extends '' ? [] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 112, 11))

    S extends `${infer T}${D}${infer U}` ? [T, ...Split<U, D>] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 112, 11))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 115, 22))
>D : Symbol(D, Decl(templateLiteralTypes1.ts, 112, 28))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 115, 36))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 115, 22))
>Split : Symbol(Split, Decl(templateLiteralTypes1.ts, 110, 28))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 115, 36))
>D : Symbol(D, Decl(templateLiteralTypes1.ts, 112, 28))

    [S];
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 112, 11))

type T40 = Split<'foo', '.'>;  // ['foo']
>T40 : Symbol(T40, Decl(templateLiteralTypes1.ts, 116, 8))
>Split : Symbol(Split, Decl(templateLiteralTypes1.ts, 110, 28))

type T41 = Split<'foo.bar.baz', '.'>;  // ['foo', 'bar', 'baz']
>T41 : Symbol(T41, Decl(templateLiteralTypes1.ts, 118, 29))
>Split : Symbol(Split, Decl(templateLiteralTypes1.ts, 110, 28))

type T42 = Split<'foo.bar', ''>;  // ['f', 'o', 'o', '.', 'b', 'a', 'r']
>T42 : Symbol(T42, Decl(templateLiteralTypes1.ts, 119, 37))
>Split : Symbol(Split, Decl(templateLiteralTypes1.ts, 110, 28))

type T43 = Split<any, '.'>;  // string[]
>T43 : Symbol(T43, Decl(templateLiteralTypes1.ts, 120, 32))
>Split : Symbol(Split, Decl(templateLiteralTypes1.ts, 110, 28))

// Inference and property name paths

declare function getProp<T, P0 extends keyof T & string, P1 extends keyof T[P0] & string, P2 extends keyof T[P0][P1] & string>(obj: T, path: `${P0}.${P1}.${P2}`): T[P0][P1][P2];
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 125, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 125, 27))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 125, 25))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 125, 56))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 125, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 125, 27))
>P2 : Symbol(P2, Decl(templateLiteralTypes1.ts, 125, 89))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 125, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 125, 27))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 125, 56))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 125, 127))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 125, 25))
>path : Symbol(path, Decl(templateLiteralTypes1.ts, 125, 134))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 125, 27))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 125, 56))
>P2 : Symbol(P2, Decl(templateLiteralTypes1.ts, 125, 89))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 125, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 125, 27))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 125, 56))
>P2 : Symbol(P2, Decl(templateLiteralTypes1.ts, 125, 89))

declare function getProp<T, P0 extends keyof T & string, P1 extends keyof T[P0] & string>(obj: T, path: `${P0}.${P1}`): T[P0][P1];
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 126, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 126, 27))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 126, 25))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 126, 56))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 126, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 126, 27))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 126, 90))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 126, 25))
>path : Symbol(path, Decl(templateLiteralTypes1.ts, 126, 97))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 126, 27))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 126, 56))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 126, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 126, 27))
>P1 : Symbol(P1, Decl(templateLiteralTypes1.ts, 126, 56))

declare function getProp<T, P0 extends keyof T & string>(obj: T, path: P0): T[P0];
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 127, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 127, 27))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 127, 25))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 127, 57))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 127, 25))
>path : Symbol(path, Decl(templateLiteralTypes1.ts, 127, 64))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 127, 27))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 127, 25))
>P0 : Symbol(P0, Decl(templateLiteralTypes1.ts, 127, 27))

declare function getProp(obj: object, path: string): unknown;
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 128, 25))
>path : Symbol(path, Decl(templateLiteralTypes1.ts, 128, 37))

let p1 = getProp({ a: { b: {c: 42, d: 'hello' }}} as const, 'a');
>p1 : Symbol(p1, Decl(templateLiteralTypes1.ts, 130, 3))
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>a : Symbol(a, Decl(templateLiteralTypes1.ts, 130, 18))
>b : Symbol(b, Decl(templateLiteralTypes1.ts, 130, 23))
>c : Symbol(c, Decl(templateLiteralTypes1.ts, 130, 28))
>d : Symbol(d, Decl(templateLiteralTypes1.ts, 130, 34))

let p2 = getProp({ a: { b: {c: 42, d: 'hello' }}} as const, 'a.b');
>p2 : Symbol(p2, Decl(templateLiteralTypes1.ts, 131, 3))
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>a : Symbol(a, Decl(templateLiteralTypes1.ts, 131, 18))
>b : Symbol(b, Decl(templateLiteralTypes1.ts, 131, 23))
>c : Symbol(c, Decl(templateLiteralTypes1.ts, 131, 28))
>d : Symbol(d, Decl(templateLiteralTypes1.ts, 131, 34))

let p3 = getProp({ a: { b: {c: 42, d: 'hello' }}} as const, 'a.b.d');
>p3 : Symbol(p3, Decl(templateLiteralTypes1.ts, 132, 3))
>getProp : Symbol(getProp, Decl(templateLiteralTypes1.ts, 121, 27), Decl(templateLiteralTypes1.ts, 125, 177), Decl(templateLiteralTypes1.ts, 126, 130), Decl(templateLiteralTypes1.ts, 127, 82))
>a : Symbol(a, Decl(templateLiteralTypes1.ts, 132, 18))
>b : Symbol(b, Decl(templateLiteralTypes1.ts, 132, 23))
>c : Symbol(c, Decl(templateLiteralTypes1.ts, 132, 28))
>d : Symbol(d, Decl(templateLiteralTypes1.ts, 132, 34))

type PropType<T, Path extends string> =
>PropType : Symbol(PropType, Decl(templateLiteralTypes1.ts, 132, 69))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 134, 14))
>Path : Symbol(Path, Decl(templateLiteralTypes1.ts, 134, 16))

    string extends Path ? unknown :
>Path : Symbol(Path, Decl(templateLiteralTypes1.ts, 134, 16))

    Path extends keyof T ? T[Path] :
>Path : Symbol(Path, Decl(templateLiteralTypes1.ts, 134, 16))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 134, 14))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 134, 14))
>Path : Symbol(Path, Decl(templateLiteralTypes1.ts, 134, 16))

    Path extends `${infer K}.${infer R}` ? K extends keyof T ? PropType<T[K], R> : unknown :
>Path : Symbol(Path, Decl(templateLiteralTypes1.ts, 134, 16))
>K : Symbol(K, Decl(templateLiteralTypes1.ts, 137, 25))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 137, 36))
>K : Symbol(K, Decl(templateLiteralTypes1.ts, 137, 25))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 134, 14))
>PropType : Symbol(PropType, Decl(templateLiteralTypes1.ts, 132, 69))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 134, 14))
>K : Symbol(K, Decl(templateLiteralTypes1.ts, 137, 25))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 137, 36))

    unknown;

declare function getPropValue<T, P extends string>(obj: T, path: P): PropType<T, P>;
>getPropValue : Symbol(getPropValue, Decl(templateLiteralTypes1.ts, 138, 12))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 140, 30))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 140, 32))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 140, 51))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 140, 30))
>path : Symbol(path, Decl(templateLiteralTypes1.ts, 140, 58))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 140, 32))
>PropType : Symbol(PropType, Decl(templateLiteralTypes1.ts, 132, 69))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 140, 30))
>P : Symbol(P, Decl(templateLiteralTypes1.ts, 140, 32))

declare const s: string;
>s : Symbol(s, Decl(templateLiteralTypes1.ts, 141, 13))

const obj = { a: { b: {c: 42, d: 'hello' }}};
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 143, 5))
>a : Symbol(a, Decl(templateLiteralTypes1.ts, 143, 13))
>b : Symbol(b, Decl(templateLiteralTypes1.ts, 143, 18))
>c : Symbol(c, Decl(templateLiteralTypes1.ts, 143, 23))
>d : Symbol(d, Decl(templateLiteralTypes1.ts, 143, 29))

getPropValue(obj, 'a');  // { b: {c: number, d: string } }
>getPropValue : Symbol(getPropValue, Decl(templateLiteralTypes1.ts, 138, 12))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 143, 5))

getPropValue(obj, 'a.b');  // {c: number, d: string }
>getPropValue : Symbol(getPropValue, Decl(templateLiteralTypes1.ts, 138, 12))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 143, 5))

getPropValue(obj, 'a.b.d');  // string
>getPropValue : Symbol(getPropValue, Decl(templateLiteralTypes1.ts, 138, 12))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 143, 5))

getPropValue(obj, 'a.b.x');  // unknown
>getPropValue : Symbol(getPropValue, Decl(templateLiteralTypes1.ts, 138, 12))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 143, 5))

getPropValue(obj, s);  // unknown
>getPropValue : Symbol(getPropValue, Decl(templateLiteralTypes1.ts, 138, 12))
>obj : Symbol(obj, Decl(templateLiteralTypes1.ts, 143, 5))
>s : Symbol(s, Decl(templateLiteralTypes1.ts, 141, 13))

// Infer type variables in template literals have string constraint

type S1<T> = T extends `foo${infer U}bar` ? S2<U> : never;
>S1 : Symbol(S1, Decl(templateLiteralTypes1.ts, 149, 21))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 153, 8))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 153, 8))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 153, 34))
>S2 : Symbol(S2, Decl(templateLiteralTypes1.ts, 153, 58))
>U : Symbol(U, Decl(templateLiteralTypes1.ts, 153, 34))

type S2<S extends string> = S;
>S2 : Symbol(S2, Decl(templateLiteralTypes1.ts, 153, 58))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 154, 8))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 154, 8))

// Check that infer T declarations are validated

type TV1 = `${infer X}`;
>TV1 : Symbol(TV1, Decl(templateLiteralTypes1.ts, 154, 30))
>X : Symbol(X, Decl(templateLiteralTypes1.ts, 158, 19))

// Batched single character inferences for lower recursion depth

type Chars<S extends string> =
>Chars : Symbol(Chars, Decl(templateLiteralTypes1.ts, 158, 24))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 162, 11))

    string extends S ? string[] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 162, 11))

    S extends `${infer C0}${infer C1}${infer C2}${infer C3}${infer C4}${infer C5}${infer C6}${infer C7}${infer C8}${infer C9}${infer R}` ? [C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ...Chars<R>] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 162, 11))
>C0 : Symbol(C0, Decl(templateLiteralTypes1.ts, 164, 22))
>C1 : Symbol(C1, Decl(templateLiteralTypes1.ts, 164, 33))
>C2 : Symbol(C2, Decl(templateLiteralTypes1.ts, 164, 44))
>C3 : Symbol(C3, Decl(templateLiteralTypes1.ts, 164, 55))
>C4 : Symbol(C4, Decl(templateLiteralTypes1.ts, 164, 66))
>C5 : Symbol(C5, Decl(templateLiteralTypes1.ts, 164, 77))
>C6 : Symbol(C6, Decl(templateLiteralTypes1.ts, 164, 88))
>C7 : Symbol(C7, Decl(templateLiteralTypes1.ts, 164, 99))
>C8 : Symbol(C8, Decl(templateLiteralTypes1.ts, 164, 110))
>C9 : Symbol(C9, Decl(templateLiteralTypes1.ts, 164, 121))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 164, 132))
>C0 : Symbol(C0, Decl(templateLiteralTypes1.ts, 164, 22))
>C1 : Symbol(C1, Decl(templateLiteralTypes1.ts, 164, 33))
>C2 : Symbol(C2, Decl(templateLiteralTypes1.ts, 164, 44))
>C3 : Symbol(C3, Decl(templateLiteralTypes1.ts, 164, 55))
>C4 : Symbol(C4, Decl(templateLiteralTypes1.ts, 164, 66))
>C5 : Symbol(C5, Decl(templateLiteralTypes1.ts, 164, 77))
>C6 : Symbol(C6, Decl(templateLiteralTypes1.ts, 164, 88))
>C7 : Symbol(C7, Decl(templateLiteralTypes1.ts, 164, 99))
>C8 : Symbol(C8, Decl(templateLiteralTypes1.ts, 164, 110))
>C9 : Symbol(C9, Decl(templateLiteralTypes1.ts, 164, 121))
>Chars : Symbol(Chars, Decl(templateLiteralTypes1.ts, 158, 24))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 164, 132))

    S extends `${infer C}${infer R}` ? [C, ...Chars<R>] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 162, 11))
>C : Symbol(C, Decl(templateLiteralTypes1.ts, 165, 22))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 165, 32))
>C : Symbol(C, Decl(templateLiteralTypes1.ts, 165, 22))
>Chars : Symbol(Chars, Decl(templateLiteralTypes1.ts, 158, 24))
>R : Symbol(R, Decl(templateLiteralTypes1.ts, 165, 32))

    S extends '' ? [] :
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 162, 11))

    never;

type L1 = Chars<'FooBarBazThisIsALongerString'>;  // ['F', 'o', 'o', 'B', 'a', 'r', ...]
>L1 : Symbol(L1, Decl(templateLiteralTypes1.ts, 167, 10))
>Chars : Symbol(Chars, Decl(templateLiteralTypes1.ts, 158, 24))

// Infer never when source isn't a literal type that matches the pattern

type Foo<T> = T extends `*${infer S}*` ? S : never;
>Foo : Symbol(Foo, Decl(templateLiteralTypes1.ts, 169, 48))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 173, 9))
>T : Symbol(T, Decl(templateLiteralTypes1.ts, 173, 9))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 173, 33))
>S : Symbol(S, Decl(templateLiteralTypes1.ts, 173, 33))

type TF1 = Foo<any>;      // never
>TF1 : Symbol(TF1, Decl(templateLiteralTypes1.ts, 173, 51))
>Foo : Symbol(Foo, Decl(templateLiteralTypes1.ts, 169, 48))

type TF2 = Foo<string>;   // never
>TF2 : Symbol(TF2, Decl(templateLiteralTypes1.ts, 175, 20))
>Foo : Symbol(Foo, Decl(templateLiteralTypes1.ts, 169, 48))

type TF3 = Foo<'abc'>;    // never
>TF3 : Symbol(TF3, Decl(templateLiteralTypes1.ts, 176, 23))
>Foo : Symbol(Foo, Decl(templateLiteralTypes1.ts, 169, 48))

type TF4 = Foo<'*abc*'>;  // 'abc'
>TF4 : Symbol(TF4, Decl(templateLiteralTypes1.ts, 177, 22))
>Foo : Symbol(Foo, Decl(templateLiteralTypes1.ts, 169, 48))

// Cross product unions limited to 100,000 constituents

type A = any;
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))

type U1 = {a1:A} | {b1:A} | {c1:A} | {d1:A} | {e1:A} | {f1:A} | {g1:A} | {h1:A} | {i1:A} | {j1:A};
>U1 : Symbol(U1, Decl(templateLiteralTypes1.ts, 182, 13))
>a1 : Symbol(a1, Decl(templateLiteralTypes1.ts, 184, 11))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>b1 : Symbol(b1, Decl(templateLiteralTypes1.ts, 184, 20))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>c1 : Symbol(c1, Decl(templateLiteralTypes1.ts, 184, 29))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>d1 : Symbol(d1, Decl(templateLiteralTypes1.ts, 184, 38))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>e1 : Symbol(e1, Decl(templateLiteralTypes1.ts, 184, 47))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>f1 : Symbol(f1, Decl(templateLiteralTypes1.ts, 184, 56))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>g1 : Symbol(g1, Decl(templateLiteralTypes1.ts, 184, 65))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>h1 : Symbol(h1, Decl(templateLiteralTypes1.ts, 184, 74))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>i1 : Symbol(i1, Decl(templateLiteralTypes1.ts, 184, 83))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>j1 : Symbol(j1, Decl(templateLiteralTypes1.ts, 184, 92))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))

type U2 = {a2:A} | {b2:A} | {c2:A} | {d2:A} | {e2:A} | {f2:A} | {g2:A} | {h2:A} | {i2:A} | {j2:A};
>U2 : Symbol(U2, Decl(templateLiteralTypes1.ts, 184, 98))
>a2 : Symbol(a2, Decl(templateLiteralTypes1.ts, 185, 11))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>b2 : Symbol(b2, Decl(templateLiteralTypes1.ts, 185, 20))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>c2 : Symbol(c2, Decl(templateLiteralTypes1.ts, 185, 29))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>d2 : Symbol(d2, Decl(templateLiteralTypes1.ts, 185, 38))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>e2 : Symbol(e2, Decl(templateLiteralTypes1.ts, 185, 47))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>f2 : Symbol(f2, Decl(templateLiteralTypes1.ts, 185, 56))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>g2 : Symbol(g2, Decl(templateLiteralTypes1.ts, 185, 65))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>h2 : Symbol(h2, Decl(templateLiteralTypes1.ts, 185, 74))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>i2 : Symbol(i2, Decl(templateLiteralTypes1.ts, 185, 83))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>j2 : Symbol(j2, Decl(templateLiteralTypes1.ts, 185, 92))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))

type U3 = {a3:A} | {b3:A} | {c3:A} | {d3:A} | {e3:A} | {f3:A} | {g3:A} | {h3:A} | {i3:A} | {j3:A};
>U3 : Symbol(U3, Decl(templateLiteralTypes1.ts, 185, 98))
>a3 : Symbol(a3, Decl(templateLiteralTypes1.ts, 186, 11))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>b3 : Symbol(b3, Decl(templateLiteralTypes1.ts, 186, 20))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>c3 : Symbol(c3, Decl(templateLiteralTypes1.ts, 186, 29))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>d3 : Symbol(d3, Decl(templateLiteralTypes1.ts, 186, 38))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>e3 : Symbol(e3, Decl(templateLiteralTypes1.ts, 186, 47))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>f3 : Symbol(f3, Decl(templateLiteralTypes1.ts, 186, 56))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>g3 : Symbol(g3, Decl(templateLiteralTypes1.ts, 186, 65))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>h3 : Symbol(h3, Decl(templateLiteralTypes1.ts, 186, 74))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>i3 : Symbol(i3, Decl(templateLiteralTypes1.ts, 186, 83))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>j3 : Symbol(j3, Decl(templateLiteralTypes1.ts, 186, 92))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))

type U4 = {a4:A} | {b4:A} | {c4:A} | {d4:A} | {e4:A} | {f4:A} | {g4:A} | {h4:A} | {i4:A} | {j4:A};
>U4 : Symbol(U4, Decl(templateLiteralTypes1.ts, 186, 98))
>a4 : Symbol(a4, Decl(templateLiteralTypes1.ts, 187, 11))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>b4 : Symbol(b4, Decl(templateLiteralTypes1.ts, 187, 20))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>c4 : Symbol(c4, Decl(templateLiteralTypes1.ts, 187, 29))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>d4 : Symbol(d4, Decl(templateLiteralTypes1.ts, 187, 38))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>e4 : Symbol(e4, Decl(templateLiteralTypes1.ts, 187, 47))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>f4 : Symbol(f4, Decl(templateLiteralTypes1.ts, 187, 56))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>g4 : Symbol(g4, Decl(templateLiteralTypes1.ts, 187, 65))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>h4 : Symbol(h4, Decl(templateLiteralTypes1.ts, 187, 74))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>i4 : Symbol(i4, Decl(templateLiteralTypes1.ts, 187, 83))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>j4 : Symbol(j4, Decl(templateLiteralTypes1.ts, 187, 92))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))

type U5 = {a5:A} | {b5:A} | {c5:A} | {d5:A} | {e5:A} | {f5:A} | {g5:A} | {h5:A} | {i5:A} | {j5:A};
>U5 : Symbol(U5, Decl(templateLiteralTypes1.ts, 187, 98))
>a5 : Symbol(a5, Decl(templateLiteralTypes1.ts, 188, 11))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>b5 : Symbol(b5, Decl(templateLiteralTypes1.ts, 188, 20))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>c5 : Symbol(c5, Decl(templateLiteralTypes1.ts, 188, 29))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>d5 : Symbol(d5, Decl(templateLiteralTypes1.ts, 188, 38))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>e5 : Symbol(e5, Decl(templateLiteralTypes1.ts, 188, 47))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>f5 : Symbol(f5, Decl(templateLiteralTypes1.ts, 188, 56))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>g5 : Symbol(g5, Decl(templateLiteralTypes1.ts, 188, 65))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>h5 : Symbol(h5, Decl(templateLiteralTypes1.ts, 188, 74))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>i5 : Symbol(i5, Decl(templateLiteralTypes1.ts, 188, 83))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))
>j5 : Symbol(j5, Decl(templateLiteralTypes1.ts, 188, 92))
>A : Symbol(A, Decl(templateLiteralTypes1.ts, 178, 24))

type U100000 = U1 & U2 & U3 & U4 & U5;  // Error
>U100000 : Symbol(U100000, Decl(templateLiteralTypes1.ts, 188, 98))
>U1 : Symbol(U1, Decl(templateLiteralTypes1.ts, 182, 13))
>U2 : Symbol(U2, Decl(templateLiteralTypes1.ts, 184, 98))
>U3 : Symbol(U3, Decl(templateLiteralTypes1.ts, 185, 98))
>U4 : Symbol(U4, Decl(templateLiteralTypes1.ts, 186, 98))
>U5 : Symbol(U5, Decl(templateLiteralTypes1.ts, 187, 98))

type Digits = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
>Digits : Symbol(Digits, Decl(templateLiteralTypes1.ts, 190, 38))

type D100000 = `${Digits}${Digits}${Digits}${Digits}${Digits}`;  // Error
>D100000 : Symbol(D100000, Decl(templateLiteralTypes1.ts, 192, 52))
>Digits : Symbol(Digits, Decl(templateLiteralTypes1.ts, 190, 38))
>Digits : Symbol(Digits, Decl(templateLiteralTypes1.ts, 190, 38))
>Digits : Symbol(Digits, Decl(templateLiteralTypes1.ts, 190, 38))
>Digits : Symbol(Digits, Decl(templateLiteralTypes1.ts, 190, 38))
>Digits : Symbol(Digits, Decl(templateLiteralTypes1.ts, 190, 38))

type TDigits = [0] | [1] | [2] | [3] | [4] | [5] | [6] | [7] | [8] | [9];
>TDigits : Symbol(TDigits, Decl(templateLiteralTypes1.ts, 194, 63))

type T100000 = [...TDigits, ...TDigits, ...TDigits, ...TDigits, ...TDigits];  // Error
>T100000 : Symbol(T100000, Decl(templateLiteralTypes1.ts, 196, 73))
>TDigits : Symbol(TDigits, Decl(templateLiteralTypes1.ts, 194, 63))
>TDigits : Symbol(TDigits, Decl(templateLiteralTypes1.ts, 194, 63))
>TDigits : Symbol(TDigits, Decl(templateLiteralTypes1.ts, 194, 63))
>TDigits : Symbol(TDigits, Decl(templateLiteralTypes1.ts, 194, 63))
>TDigits : Symbol(TDigits, Decl(templateLiteralTypes1.ts, 194, 63))

