=== tests/cases/conformance/types/conditional/conditionalTypesExcessProperties.ts ===
type Something<T> = { test: string } &  (T extends object ? {
>Something : Something<T>
>test : string

    arg: T
>arg : T

} : {
    arg?: undefined
>arg : undefined

    });

function testFunc2<A extends object>(a: A, sa: Something<A>) {
>testFunc2 : <A extends object>(a: A, sa: Something<A>) => void
>a : A
>sa : Something<A>

    sa = { test: 'hi', arg: a }; // not excess (but currently still not assignable)
>sa = { test: 'hi', arg: a } : { test: string; arg: object; }
>sa : Something<A>
>{ test: 'hi', arg: a } : { test: string; arg: object; }
>test : string
>'hi' : "hi"
>arg : object
>a : object

    sa = { test: 'bye', arg: a, arr: a } // excess
>sa = { test: 'bye', arg: a, arr: a } : { test: string; arg: object; arr: A; }
>sa : Something<A>
>{ test: 'bye', arg: a, arr: a } : { test: string; arg: object; arr: A; }
>test : string
>'bye' : "bye"
>arg : object
>a : object
>arr : A
>a : A
}

