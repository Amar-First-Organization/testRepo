=== tests/cases/compiler/restTupleUnionWithRestContextualParams.ts ===
const f1: (...args: [number, string, ...boolean[]] | [string, number, ...boolean[]]) => void = (a, b, c) => {};
>f1 : (...args: [number, string, ...boolean[]] | [string, number, ...boolean[]]) => void
>args : [number, string, ...boolean[]] | [string, number, ...boolean[]]
>(a, b, c) => {} : (a: string | number, b: string | number, c: boolean) => void
>a : string | number
>b : string | number
>c : boolean

const f2: (x: string, ...args: [string] | [number, boolean]) => void = (a, b, c) => {};
>f2 : (x: string, ...args: [string] | [number, boolean]) => void
>x : string
>args : [string] | [number, boolean]
>(a, b, c) => {} : (a: string, b: string | number, c: boolean | undefined) => void
>a : string
>b : string | number
>c : boolean | undefined

const f3: (...args: [type: "one"] | [type: "two", x: string]) => void = (type, x) => {}
>f3 : (...args: [type: "one"] | [type: "two", x: string]) => void
>args : [type: "one"] | [type: "two", x: string]
>(type, x) => {} : (type: "one" | "two", x: string | undefined) => void
>type : "one" | "two"
>x : string | undefined

const f4: (...args: [type: "one", x?: number] | [type: "two", x: string]) => void = (type, x) => {}
>f4 : (...args: [type: "one", x?: number] | [type: "two", x: string]) => void
>args : [type: "one", x?: number | undefined] | [type: "two", x: string]
>(type, x) => {} : (type: "one" | "two", x: string | number | undefined) => void
>type : "one" | "two"
>x : string | number | undefined

// #45972
type Fn1 = (...args: [...strs: string[], num1: number, num2: number]) => void;
>Fn1 : (...args: [...strs: string[], num1: number, num2: number]) => void
>args : [...strs: string[], num1: number, num2: number]

const f5: Fn1 = () => {}
>f5 : Fn1
>() => {} : () => void

const f6: Fn1 = (arg1) => {}
>f6 : Fn1
>(arg1) => {} : (arg1: string | number) => void
>arg1 : string | number

const f7: Fn1 = (arg1, arg2) => {}
>f7 : Fn1
>(arg1, arg2) => {} : (arg1: string | number, arg2: string | number) => void
>arg1 : string | number
>arg2 : string | number

const f8: Fn1 = (arg1, arg2, arg3) => {}
>f8 : Fn1
>(arg1, arg2, arg3) => {} : (arg1: string | number, arg2: string | number, arg3: string | number) => void
>arg1 : string | number
>arg2 : string | number
>arg3 : string | number

// #45972#issuecomment-1140417029
const f9: Fn1 = (...[arg1]: [string | number]) => {}
>f9 : Fn1
>(...[arg1]: [string | number]) => {} : (__0_0: string | number) => void
>arg1 : string | number

const f10: Fn1 = (...[arg1, arg2]: [string | number, string | number]) => {}
>f10 : Fn1
>(...[arg1, arg2]: [string | number, string | number]) => {} : (__0_0: string | number, __0_1: string | number) => void
>arg1 : string | number
>arg2 : string | number

const f11: Fn1 = (...[arg1, arg2, arg3]: [string | number, string | number, string | number]) => {}
>f11 : Fn1
>(...[arg1, arg2, arg3]: [string | number, string | number, string | number]) => {} : (__0_0: string | number, __0_1: string | number, __0_2: string | number) => void
>arg1 : string | number
>arg2 : string | number
>arg3 : string | number

