=== tests/cases/conformance/es6/destructuring/destructuringParameterProperties3.ts ===
class C1<T, U, V> {
>C1 : C1<T, U, V>

    constructor(private k: T, private [a, b, c]: [T,U,V]) {
>k : T
>a : T
>b : U
>c : V

        if ((b === undefined && c === undefined) || (this.b === undefined && this.c === undefined)) {
>(b === undefined && c === undefined) || (this.b === undefined && this.c === undefined) : boolean
>(b === undefined && c === undefined) : boolean
>b === undefined && c === undefined : boolean
>b === undefined : boolean
>b : U
>undefined : undefined
>c === undefined : boolean
>c : V
>undefined : undefined
>(this.b === undefined && this.c === undefined) : boolean
>this.b === undefined && this.c === undefined : boolean
>this.b === undefined : boolean
>this.b : any (error)
>this : this
>b : any (error)
>undefined : undefined
>this.c === undefined : boolean
>this.c : any (error)
>this : this
>c : any (error)
>undefined : undefined

            this.a = a || k;
>this.a = a || k : T
>this.a : any (error)
>this : this
>a : any (error)
>a || k : T
>a : T
>k : T
        }
    }

    public getA() {
>getA : () => any (error)

        return this.a
>this.a : any (error)
>this : this
>a : any (error)
    }

    public getB() {
>getB : () => any (error)

        return this.b
>this.b : any (error)
>this : this
>b : any (error)
    }

    public getC() {
>getC : () => any (error)

        return this.c;
>this.c : any (error)
>this : this
>c : any (error)
    }
}

var x = new C1(undefined, [0, true, ""]);
>x : C1<number, boolean, string>
>new C1(undefined, [0, true, ""]) : C1<number, boolean, string>
>C1 : typeof C1
>undefined : undefined
>[0, true, ""] : [number, true, string]
>0 : 0
>true : true
>"" : ""

var [x_a, x_b, x_c] = [x.getA(), x.getB(), x.getC()];
>x_a : any (error)
>x_b : any (error)
>x_c : any (error)
>[x.getA(), x.getB(), x.getC()] : [any (error), any (error), any (error)]
>x.getA() : any (error)
>x.getA : () => any (error)
>x : C1<number, boolean, string>
>getA : () => any (error)
>x.getB() : any (error)
>x.getB : () => any (error)
>x : C1<number, boolean, string>
>getB : () => any (error)
>x.getC() : any (error)
>x.getC : () => any (error)
>x : C1<number, boolean, string>
>getC : () => any (error)

var y = new C1(10, [0, true, true]);
>y : C1<number, boolean, boolean>
>new C1(10, [0, true, true]) : C1<number, boolean, boolean>
>C1 : typeof C1
>10 : 10
>[0, true, true] : [number, true, true]
>0 : 0
>true : true
>true : true

var [y_a, y_b, y_c] = [y.getA(), y.getB(), y.getC()];
>y_a : any (error)
>y_b : any (error)
>y_c : any (error)
>[y.getA(), y.getB(), y.getC()] : [any (error), any (error), any (error)]
>y.getA() : any (error)
>y.getA : () => any (error)
>y : C1<number, boolean, boolean>
>getA : () => any (error)
>y.getB() : any (error)
>y.getB : () => any (error)
>y : C1<number, boolean, boolean>
>getB : () => any (error)
>y.getC() : any (error)
>y.getC : () => any (error)
>y : C1<number, boolean, boolean>
>getC : () => any (error)

var z = new C1(10, [undefined, "", ""]);
>z : C1<10, string, string>
>new C1(10, [undefined, "", ""]) : C1<10, string, string>
>C1 : typeof C1
>10 : 10
>[undefined, "", ""] : [undefined, string, string]
>undefined : undefined
>"" : ""
>"" : ""

var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
>z_a : any (error)
>z_b : any (error)
>z_c : any (error)
>[z.getA(), z.getB(), z.getC()] : [any (error), any (error), any (error)]
>z.getA() : any (error)
>z.getA : () => any (error)
>z : C1<10, string, string>
>getA : () => any (error)
>z.getB() : any (error)
>z.getB : () => any (error)
>z : C1<10, string, string>
>getB : () => any (error)
>z.getC() : any (error)
>z.getC : () => any (error)
>z : C1<10, string, string>
>getC : () => any (error)

var w = new C1(10, [undefined, undefined, undefined]);
>w : C1<10, any, any>
>new C1(10, [undefined, undefined, undefined]) : C1<10, any, any>
>C1 : typeof C1
>10 : 10
>[undefined, undefined, undefined] : [undefined, undefined, undefined]
>undefined : undefined
>undefined : undefined
>undefined : undefined

var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
>z_a : any (error)
>z_b : any (error)
>z_c : any (error)
>[z.getA(), z.getB(), z.getC()] : [any (error), any (error), any (error)]
>z.getA() : any (error)
>z.getA : () => any (error)
>z : C1<10, string, string>
>getA : () => any (error)
>z.getB() : any (error)
>z.getB : () => any (error)
>z : C1<10, string, string>
>getB : () => any (error)
>z.getC() : any (error)
>z.getC : () => any (error)
>z : C1<10, string, string>
>getC : () => any (error)

