=== tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression4.ts ===
if (Ca.test(c.href) || Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) && !/(\\?|&)q=/.test(c.href)) / (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j"), /(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)), b = !0;
>Ca.test(c.href) || Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) && !/(\\?|&)q=/.test(c.href) : any
>Ca.test(c.href) : any (error)
>Ca.test : any (error)
>Ca : any (error)
>test : any (error)
>c.href : any (error)
>c : any (error)
>href : any (error)
>Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) && !/(\\?|&)q=/.test(c.href) : boolean
>Ba.test(c.href) && /(\\?|&)adurl=/.test(c.href) : boolean
>Ba.test(c.href) : any (error)
>Ba.test : any (error)
>Ba : any (error)
>test : any (error)
>c.href : any (error)
>c : any (error)
>href : any (error)
>/(\\?|&)adurl=/.test(c.href) : boolean
>/(\\?|&)adurl=/.test : (string: string) => boolean
>/(\\?|&)adurl=/ : RegExp
>test : (string: string) => boolean
>c.href : any (error)
>c : any (error)
>href : any (error)
>!/(\\?|&)q=/.test(c.href) : boolean
>/(\\?|&)q=/.test(c.href) : boolean
>/(\\?|&)q=/.test : (string: string) => boolean
>/(\\?|&)q=/ : RegExp
>test : (string: string) => boolean
>c.href : any (error)
>c : any (error)
>href : any (error)
>/ (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j"), /(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)), b = !0 : true
>/ (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j"), /(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)) : any
>/ (\\ ? | & ) rct = j / .test(c.href) || (d += "&rct=j") : string | true
>/ (\\ ? | & ) rct = j / .test(c.href) : boolean
>/ (\\ ? | & ) rct = j / .test : (string: string) => boolean
>/ (\\ ? | & ) rct = j / : RegExp
>test : (string: string) => boolean
>c.href : any (error)
>c : any (error)
>href : any (error)
>(d += "&rct=j") : string
>d += "&rct=j" : string
>d : any (error)
>"&rct=j" : "&rct=j"
>/(\\?|&)q=/.test(c.href) || (d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)) : any
>/(\\?|&)q=/.test(c.href) : boolean
>/(\\?|&)q=/.test : (string: string) => boolean
>/(\\?|&)q=/ : RegExp
>test : (string: string) => boolean
>c.href : any (error)
>c : any (error)
>href : any (error)
>(d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length)) : any (error)
>d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A), d = d.substring(0, 1948 - c.href.length) : any (error)
>d += "&q=" + encodeURIComponent(W("q") || W("as_q") || A) : string
>d : any (error)
>"&q=" + encodeURIComponent(W("q") || W("as_q") || A) : string
>"&q=" : "&q="
>encodeURIComponent(W("q") || W("as_q") || A) : string
>encodeURIComponent : (uriComponent: string) => string
>W("q") || W("as_q") || A : any
>W("q") || W("as_q") : any
>W("q") : any (error)
>W : any (error)
>"q" : "q"
>W("as_q") : any (error)
>W : any (error)
>"as_q" : "as_q"
>A : any (error)
>d = d.substring(0, 1948 - c.href.length) : any (error)
>d : any (error)
>d.substring(0, 1948 - c.href.length) : any (error)
>d.substring : any (error)
>d : any (error)
>substring : any (error)
>0 : 0
>1948 - c.href.length : number
>1948 : 1948
>c.href.length : any (error)
>c.href : any (error)
>c : any (error)
>href : any (error)
>length : any (error)
>b = !0 : true
>b : any (error)
>!0 : true
>0 : 0

