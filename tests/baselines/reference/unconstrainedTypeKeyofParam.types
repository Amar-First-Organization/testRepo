//// [tests/cases/compiler/unconstrainedTypeKeyofParam.ts] ////

=== unconstrainedTypeKeyofParam.ts ===
function f3<T, U extends T>(x: T, y: U, k: keyof T) {
>f3 : { <T, U extends T>(x: T, y: U, k: keyof T): void; <T_1 extends unknown, K extends keyof T_1>(obj: T_1, key: K): T_1[K]; }
>   : ^^^ ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^       ^^ ^^^^^^^^^         ^^   ^^   ^^   ^^ ^^^^^^^^^^^^
>x : T
>  : ^
>y : U
>  : ^
>k : keyof T
>  : ^^^^^^^

    x[k] = y[k];
>x[k] = y[k] : U[keyof T]
>            : ^^^^^^^^^^
>x[k] : T[keyof T]
>     : ^^^^^^^^^^
>x : T
>  : ^
>k : keyof T
>  : ^^^^^^^
>y[k] : U[keyof T]
>     : ^^^^^^^^^^
>y : U
>  : ^
>k : keyof T
>  : ^^^^^^^

    y[k] = x[k]; 
>y[k] = x[k] : T[keyof T]
>            : ^^^^^^^^^^
>y[k] : U[keyof T]
>     : ^^^^^^^^^^
>y : U
>  : ^
>k : keyof T
>  : ^^^^^^^
>x[k] : T[keyof T]
>     : ^^^^^^^^^^
>x : T
>  : ^
>k : keyof T
>  : ^^^^^^^
}

function f<T, K extends keyof T>(obj: T, key: K) {
>f : <T, K extends keyof T>(obj: T, key: K) => T[K]
>  : ^ ^^ ^^^^^^^^^       ^^   ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>key : K
>    : ^

    return obj[key];
>obj[key] : T[K]
>         : ^^^^
>obj : T
>    : ^
>key : K
>    : ^
}

function f2<T extends {} | null | undefined , K extends keyof T>(obj: T, key: K) {
>f2 : <T extends {} | null | undefined, K extends keyof T>(obj: T, key: K) => {} | null | undefined
>   : ^ ^^^^^^^^^                     ^^ ^^^^^^^^^       ^^   ^^ ^^   ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>key : K
>    : ^

    return obj[key];
>obj[key] : {} | null | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^
}

function f3<T extends unknown, K extends keyof T>(obj: T, key: K) {
>f3 : { <T_1, U extends T_1>(x: T_1, y: U, k: keyof T_1): void; <T extends unknown, K extends keyof T>(obj: T, key: K): T[K]; }
>   : ^^^^^^^^ ^^^^^^^^^   ^^ ^^   ^^ ^^ ^^ ^^         ^^^^^^^^^^ ^^^^^^^^^       ^^ ^^^^^^^^^       ^^   ^^ ^^   ^^ ^^^^^^^^^^
>obj : T
>    : ^
>key : K
>    : ^

    return obj[key];
>obj[key] : T[K]
>         : ^^^^
>obj : T
>    : ^
>key : K
>    : ^
}

function f4<T, U extends T, K extends keyof U>(obj: U, key: K) {
>f4 : <T, U extends T, K extends keyof U>(obj: U, key: K) => U[K]
>   : ^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^       ^^   ^^ ^^   ^^ ^^^^^^^^^
>obj : U
>    : ^
>key : K
>    : ^

    return obj[key];
>obj[key] : U[K]
>         : ^^^^
>obj : U
>    : ^
>key : K
>    : ^
}

function f5<T extends {} | null | undefined, U extends T, K extends keyof U>(obj: U, key: K) {
>f5 : <T extends {} | null | undefined, U extends T, K extends keyof U>(obj: U, key: K) => {} | null | undefined
>   : ^ ^^^^^^^^^                     ^^ ^^^^^^^^^ ^^ ^^^^^^^^^       ^^   ^^ ^^   ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : K
>    : ^

    return obj[key];
>obj[key] : {} | null | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^
}

function f6<T extends unknown, U extends T, K extends keyof U>(obj: U, key: K) {
>f6 : <T extends unknown, U extends T, K extends keyof U>(obj: U, key: K) => U[K]
>   : ^ ^^^^^^^^^       ^^ ^^^^^^^^^ ^^ ^^^^^^^^^       ^^   ^^ ^^   ^^ ^^^^^^^^^
>obj : U
>    : ^
>key : K
>    : ^

    return obj[key];
>obj[key] : U[K]
>         : ^^^^
>obj : U
>    : ^
>key : K
>    : ^
}

// ************
function g1<T>(obj: T, key: keyof T) {
>g1 : <T>(obj: T, key: keyof T) => T[keyof T]
>   : ^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^
>obj : T
>    : ^
>key : keyof T
>    : ^^^^^^^

    return obj[key];
>obj[key] : T[keyof T]
>         : ^^^^^^^^^^
>obj : T
>    : ^
>key : keyof T
>    : ^^^^^^^
}

function g2<T extends {} | null | undefined>(obj: T, key: keyof T) {
>g2 : <T extends {} | null | undefined>(obj: T, key: keyof T) => any
>   : ^ ^^^^^^^^^                     ^^   ^^ ^^   ^^       ^^^^^^^^
>obj : T
>    : ^
>key : keyof T
>    : ^^^^^^^

    return obj[key];
>obj[key] : any
>         : ^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : keyof T
>    : ^^^^^^^
}

function g3<T extends unknown>(obj: T, key: keyof T) {
>g3 : <T extends unknown>(obj: T, key: keyof T) => NonNullable<T>[keyof T]
>   : ^ ^^^^^^^^^       ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>key : keyof T
>    : ^^^^^^^

    return obj[key];
>obj[key] : NonNullable<T>[keyof T]
>         : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>key : keyof T
>    : ^^^^^^^
}

function g4<T, U extends T>(obj: U, key: keyof U) {
>g4 : <T, U extends T>(obj: U, key: keyof U) => NonNullable<U>[keyof U]
>   : ^ ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^

    return obj[key];
>obj[key] : NonNullable<U>[keyof U]
>         : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^
}

function g5<T extends {} | null | undefined, U extends T>(obj: U, key: keyof U) {
>g5 : <T extends {} | null | undefined, U extends T>(obj: U, key: keyof U) => any
>   : ^ ^^^^^^^^^                     ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^

    return obj[key];
>obj[key] : any
>         : ^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : keyof U
>    : ^^^^^^^
}

function g6<T extends unknown, U extends T>(obj: U, key: keyof U) {
>g6 : <T extends unknown, U extends T>(obj: U, key: keyof U) => NonNullable<U>[keyof U]
>   : ^ ^^^^^^^^^       ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^

    return obj[key];
>obj[key] : NonNullable<U>[keyof U]
>         : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^
}

// **************
function h1<T, K extends keyof T>(obj: T, other: T, key: K) {
>h1 : <T, K extends keyof T>(obj: T, other: T, key: K) => void
>   : ^ ^^ ^^^^^^^^^       ^^   ^^ ^^     ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>other : T
>      : ^
>key : K
>    : ^

    obj[key]; 
>obj[key] : T[K]
>         : ^^^^
>obj : T
>    : ^
>key : K
>    : ^

    other[key];
>other[key] : T[K]
>           : ^^^^
>other : T
>      : ^
>key : K
>    : ^

    return;
}

function h2<T extends {} | null | undefined , K extends keyof T>(obj: T, other: T, key: K) {
>h2 : <T extends {} | null | undefined, K extends keyof T>(obj: T, other: T, key: K) => void
>   : ^ ^^^^^^^^^                     ^^ ^^^^^^^^^       ^^   ^^ ^^     ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>other : T
>      : ^
>key : K
>    : ^

    obj[key]; 
>obj[key] : {} | null | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^

    other[key];
>other[key] : {} | null | undefined
>           : ^^^^^^^^^^^^^^^^^^^^^
>other : {} | null | undefined
>      : ^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^

    return;}

function h3<T extends unknown, K extends keyof T>(obj: T, other: T, key: K) {
>h3 : <T extends unknown, K extends keyof T>(obj: T, other: T, key: K) => void
>   : ^ ^^^^^^^^^       ^^ ^^^^^^^^^       ^^   ^^ ^^     ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>other : T
>      : ^
>key : K
>    : ^

    obj[key]; 
>obj[key] : T[K]
>         : ^^^^
>obj : T
>    : ^
>key : K
>    : ^

    other[key];
>other[key] : T[K]
>           : ^^^^
>other : T
>      : ^
>key : K
>    : ^

    return;
}

// **************
function i1<T, U extends T, K extends keyof T>(obj: T, other: U, key: K) {
>i1 : <T, U extends T, K extends keyof T>(obj: T, other: U, key: K) => void
>   : ^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^       ^^   ^^ ^^     ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>other : U
>      : ^
>key : K
>    : ^

    obj[key]; 
>obj[key] : T[K]
>         : ^^^^
>obj : T
>    : ^
>key : K
>    : ^

    other[key];
>other[key] : U[K]
>           : ^^^^
>other : U
>      : ^
>key : K
>    : ^

    return;
}

function i2<T extends {} | null | undefined , U extends T, K extends keyof T>(obj: T, other: U, key: K) {
>i2 : <T extends {} | null | undefined, U extends T, K extends keyof T>(obj: T, other: U, key: K) => void
>   : ^ ^^^^^^^^^                     ^^ ^^^^^^^^^ ^^ ^^^^^^^^^       ^^   ^^ ^^     ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>other : U
>      : ^
>key : K
>    : ^

    obj[key]; 
>obj[key] : {} | null | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^

    other[key];
>other[key] : {} | null | undefined
>           : ^^^^^^^^^^^^^^^^^^^^^
>other : {} | null | undefined
>      : ^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^

    return;}

function i3<T extends unknown, U extends T, K extends keyof T>(obj: T, other: U, key: K) {
>i3 : <T extends unknown, U extends T, K extends keyof T>(obj: T, other: U, key: K) => void
>   : ^ ^^^^^^^^^       ^^ ^^^^^^^^^ ^^ ^^^^^^^^^       ^^   ^^ ^^     ^^ ^^   ^^ ^^^^^^^^^
>obj : T
>    : ^
>other : U
>      : ^
>key : K
>    : ^

    obj[key]; 
>obj[key] : T[K]
>         : ^^^^
>obj : T
>    : ^
>key : K
>    : ^

    other[key];
>other[key] : U[K]
>           : ^^^^
>other : U
>      : ^
>key : K
>    : ^

    return;
}


// ************
function j1<T, U extends T>(obj: U, key: keyof T) {
>j1 : { <T, U extends T>(obj: U, key: keyof T): U[keyof T]; <T_1, U_1 extends T_1>(obj: U_1, key: keyof U_1): NonNullable<U_1>[keyof U_1]; }
>   : ^^^ ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^   ^^   ^^   ^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof T
>    : ^^^^^^^

    return obj[key];
>obj[key] : U[keyof T]
>         : ^^^^^^^^^^
>obj : U
>    : ^
>key : keyof T
>    : ^^^^^^^
}

function j2<T extends {} | null | undefined, U extends T>(obj: U, key: keyof T) {
>j2 : { <T extends {} | null | undefined, U extends T>(obj: U, key: keyof T): any; <T_1 extends {} | null | undefined, U_1 extends T_1>(obj: U_1, key: keyof U_1): any; }
>   : ^^^ ^^^^^^^^^                     ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^                     ^^^^^^^^^^^^^^   ^^   ^^   ^^   ^^         ^^^^^^^^^
>obj : U
>    : ^
>key : keyof T
>    : ^^^^^^^

    return obj[key];
>obj[key] : any
>         : ^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : keyof T
>    : ^^^^^^^
}

function j3<T extends unknown, U extends T>(obj: U, key: keyof T) {
>j3 : { <T extends unknown, U extends T>(obj: U, key: keyof T): NonNullable<U>[keyof T]; <T_1 extends unknown, U_1 extends T_1>(obj: U_1, key: keyof U_1): NonNullable<U_1>[keyof U_1]; }
>   : ^^^ ^^^^^^^^^       ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^   ^^   ^^   ^^   ^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof T
>    : ^^^^^^^

    return obj[key];
>obj[key] : NonNullable<U>[keyof T]
>         : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof T
>    : ^^^^^^^
}


// ************
function j1<T, U extends T>(obj: U, key: keyof U) {
>j1 : { <T_1, U_1 extends T_1>(obj: U_1, key: keyof T_1): U_1[keyof T_1]; <T, U extends T>(obj: U, key: keyof U): NonNullable<U>[keyof U]; }
>   : ^^^^^^^^^^^^^^^^^^^^   ^^   ^^   ^^   ^^         ^^^^^^^^^^^^^^^^^^^^ ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^

    return obj[key];
>obj[key] : NonNullable<U>[keyof U]
>         : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^
}

function j2<T extends {} | null | undefined, U extends T>(obj: U, key: keyof U) {
>j2 : { <T_1 extends {} | null | undefined, U_1 extends T_1>(obj: U_1, key: keyof T_1): any; <T extends {} | null | undefined, U extends T>(obj: U, key: keyof U): any; }
>   : ^^^^^^^^^^^^^^^                     ^^^^^^^^^^^^^^   ^^   ^^   ^^   ^^         ^^^^^^^^^ ^^^^^^^^^                     ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^

    return obj[key];
>obj[key] : any
>         : ^^^
>obj : {} | null | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^
>key : keyof U
>    : ^^^^^^^
}

function j3<T extends unknown, U extends T>(obj: U, key: keyof U) {
>j3 : { <T_1 extends unknown, U_1 extends T_1>(obj: U_1, key: keyof T_1): NonNullable<U_1>[keyof T_1]; <T extends unknown, U extends T>(obj: U, key: keyof U): NonNullable<U>[keyof U]; }
>   : ^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^   ^^   ^^   ^^   ^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^       ^^ ^^^^^^^^^ ^^   ^^ ^^   ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^

    return obj[key];
>obj[key] : NonNullable<U>[keyof U]
>         : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : U
>    : ^
>key : keyof U
>    : ^^^^^^^
}

