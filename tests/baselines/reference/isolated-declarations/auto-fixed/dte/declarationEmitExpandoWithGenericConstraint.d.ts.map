//// [tests/cases/compiler/declarationEmitExpandoWithGenericConstraint.ts] ////

//// [declarationEmitExpandoWithGenericConstraint.ts]
export interface Point {
    readonly x: number;
    readonly y: number;
}

export interface Rect<p extends Point> {
    readonly a: p;
    readonly b: p;
}

export const Point: {
    (x: number, y: number): Point;
    zero(): Point;
} = (x: number, y: number): Point => ({ x, y });
export const Rect = <p extends Point>(a: p, b: p): Rect<p> => ({ a, b });

Point.zero = (): Point => Point(0, 0);

/// [Declarations] ////



//// [declarationEmitExpandoWithGenericConstraint.d.ts]
export interface Point {
    readonly x: number;
    readonly y: number;
}
export interface Rect<p extends Point> {
    readonly a: p;
    readonly b: p;
}
export declare const Point: {
    (x: number, y: number): Point;
    zero(): Point;
};
export declare const Rect: <p extends Point>(a: p, b: p) => Rect<p>;
//# sourceMappingURL=declarationEmitExpandoWithGenericConstraint.d.ts.map

/// [Declarations Maps] ////


//// [declarationEmitExpandoWithGenericConstraint.d.ts.map]
{"version":3,"file":"declarationEmitExpandoWithGenericConstraint.d.ts","sourceRoot":"","sources":["declarationEmitExpandoWithGenericConstraint.ts"],"names":[],"mappings":"AAAA,MAAM,WAAW,KAAK;IAClB,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;IACnB,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;CACtB;AAED,MAAM,WAAW,IAAI,CAAC,CAAC,SAAS,KAAK;IACjC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACd,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;CACjB;AAED,eAAO,MAAM,KAAK,EAAE;IAChB,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC;IAC9B,IAAI,IAAI,KAAK,CAAC;CAC6B,CAAC;AAChD,eAAO,MAAM,IAAI,GAAI,CAAC,SAAS,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAG,IAAI,CAAC,CAAC,CAAe,CAAC"}

//// https://sokra.github.io/source-map-visualization#base64,ZXhwb3J0IGludGVyZmFjZSBQb2ludCB7DQogICAgcmVhZG9ubHkgeDogbnVtYmVyOw0KICAgIHJlYWRvbmx5IHk6IG51bWJlcjsNCn0NCmV4cG9ydCBpbnRlcmZhY2UgUmVjdDxwIGV4dGVuZHMgUG9pbnQ+IHsNCiAgICByZWFkb25seSBhOiBwOw0KICAgIHJlYWRvbmx5IGI6IHA7DQp9DQpleHBvcnQgZGVjbGFyZSBjb25zdCBQb2ludDogew0KICAgICh4OiBudW1iZXIsIHk6IG51bWJlcik6IFBvaW50Ow0KICAgIHplcm8oKTogUG9pbnQ7DQp9Ow0KZXhwb3J0IGRlY2xhcmUgY29uc3QgUmVjdDogPHAgZXh0ZW5kcyBQb2ludD4oYTogcCwgYjogcCkgPT4gUmVjdDxwPjsNCi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY2xhcmF0aW9uRW1pdEV4cGFuZG9XaXRoR2VuZXJpY0NvbnN0cmFpbnQuZC50cy5tYXA=,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjbGFyYXRpb25FbWl0RXhwYW5kb1dpdGhHZW5lcmljQ29uc3RyYWludC5kLnRzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVjbGFyYXRpb25FbWl0RXhwYW5kb1dpdGhHZW5lcmljQ29uc3RyYWludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFdBQVcsS0FBSztJQUNsQixRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztJQUNuQixRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztDQUN0QjtBQUVELE1BQU0sV0FBVyxJQUFJLENBQUMsQ0FBQyxTQUFTLEtBQUs7SUFDakMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZCxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNqQjtBQUVELGVBQU8sTUFBTSxLQUFLLEVBQUU7SUFDaEIsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQzlCLElBQUksSUFBSSxLQUFLLENBQUM7Q0FDNkIsQ0FBQztBQUNoRCxlQUFPLE1BQU0sSUFBSSxHQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQWUsQ0FBQyJ9,ZXhwb3J0IGludGVyZmFjZSBQb2ludCB7CiAgICByZWFkb25seSB4OiBudW1iZXI7CiAgICByZWFkb25seSB5OiBudW1iZXI7Cn0KCmV4cG9ydCBpbnRlcmZhY2UgUmVjdDxwIGV4dGVuZHMgUG9pbnQ+IHsKICAgIHJlYWRvbmx5IGE6IHA7CiAgICByZWFkb25seSBiOiBwOwp9CgpleHBvcnQgY29uc3QgUG9pbnQ6IHsKICAgICh4OiBudW1iZXIsIHk6IG51bWJlcik6IFBvaW50OwogICAgemVybygpOiBQb2ludDsKfSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcik6IFBvaW50ID0+ICh7IHgsIHkgfSk7CmV4cG9ydCBjb25zdCBSZWN0ID0gPHAgZXh0ZW5kcyBQb2ludD4oYTogcCwgYjogcCk6IFJlY3Q8cD4gPT4gKHsgYSwgYiB9KTsKClBvaW50Lnplcm8gPSAoKTogUG9pbnQgPT4gUG9pbnQoMCwgMCk7

