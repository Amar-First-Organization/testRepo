//// [tests/cases/conformance/types/typeAliases/builtinIteratorReturn.ts] ////

=== builtinIteratorReturn.ts ===
declare const array: number[];
>array : number[]
>      : ^^^^^^^^

declare const map: Map<string, number>;
>map : Map<string, number>
>    : ^^^^^^^^^^^^^^^^^^^

declare const set: Set<number>;
>set : Set<number>
>    : ^^^^^^^^^^^

const i0 = array[Symbol.iterator]();
>i0 : IterableIterator<number, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array[Symbol.iterator]() : IterableIterator<number, void>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array[Symbol.iterator] : () => IterableIterator<number, void>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>Symbol.iterator : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>iterator : unique symbol
>         : ^^^^^^^^^^^^^

const i1 = array.values();
>i1 : IterableIterator<number, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array.values() : IterableIterator<number, void>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array.values : () => IterableIterator<number, void>
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>values : () => IterableIterator<number, void>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const i2 = array.keys();
>i2 : IterableIterator<number, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array.keys() : IterableIterator<number, void>
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array.keys : () => IterableIterator<number, void>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>keys : () => IterableIterator<number, void>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const i3 = array.entries();
>i3 : IterableIterator<[number, number], void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array.entries() : IterableIterator<[number, number], void>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array.entries : () => IterableIterator<[number, number], void>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>entries : () => IterableIterator<[number, number], void>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

for (const x of array);
>x : number
>  : ^^^^^^
>array : number[]
>      : ^^^^^^^^

const i4 = map[Symbol.iterator]();
>i4 : IterableIterator<[string, number], void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map[Symbol.iterator]() : IterableIterator<[string, number], void>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map[Symbol.iterator] : () => IterableIterator<[string, number], void>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : Map<string, number>
>    : ^^^^^^^^^^^^^^^^^^^
>Symbol.iterator : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>iterator : unique symbol
>         : ^^^^^^^^^^^^^

const i5 = map.values();
>i5 : IterableIterator<number, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map.values() : IterableIterator<number, void>
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map.values : () => IterableIterator<number, void>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : Map<string, number>
>    : ^^^^^^^^^^^^^^^^^^^
>values : () => IterableIterator<number, void>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const i6 = map.keys();
>i6 : IterableIterator<string, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map.keys() : IterableIterator<string, void>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map.keys : () => IterableIterator<string, void>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : Map<string, number>
>    : ^^^^^^^^^^^^^^^^^^^
>keys : () => IterableIterator<string, void>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const i7 = map.entries();
>i7 : IterableIterator<[string, number], void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map.entries() : IterableIterator<[string, number], void>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map.entries : () => IterableIterator<[string, number], void>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : Map<string, number>
>    : ^^^^^^^^^^^^^^^^^^^
>entries : () => IterableIterator<[string, number], void>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

for (const x of map);
>x : [string, number]
>  : ^^^^^^^^^^^^^^^^
>map : Map<string, number>
>    : ^^^^^^^^^^^^^^^^^^^

const i8 = set[Symbol.iterator]();
>i8 : IterableIterator<number, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set[Symbol.iterator]() : IterableIterator<number, void>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set[Symbol.iterator] : () => IterableIterator<number, void>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set : Set<number>
>    : ^^^^^^^^^^^
>Symbol.iterator : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>iterator : unique symbol
>         : ^^^^^^^^^^^^^

const i9 = set.values();
>i9 : IterableIterator<number, void>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set.values() : IterableIterator<number, void>
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set.values : () => IterableIterator<number, void>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set : Set<number>
>    : ^^^^^^^^^^^
>values : () => IterableIterator<number, void>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const i10 = set.keys();
>i10 : IterableIterator<number, void>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set.keys() : IterableIterator<number, void>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set.keys : () => IterableIterator<number, void>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set : Set<number>
>    : ^^^^^^^^^^^
>keys : () => IterableIterator<number, void>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const i11 = set.entries();
>i11 : IterableIterator<[number, number], void>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set.entries() : IterableIterator<[number, number], void>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set.entries : () => IterableIterator<[number, number], void>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>set : Set<number>
>    : ^^^^^^^^^^^
>entries : () => IterableIterator<[number, number], void>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

for (const x of set);
>x : number
>  : ^^^^^^
>set : Set<number>
>    : ^^^^^^^^^^^

declare const i12: IterableIterator<number, undefined>;
>i12 : IterableIterator<number, undefined>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const i13: IterableIterator<number, any>;
>i13 : IterableIterator<number>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^

declare const i14: IterableIterator<number, boolean>;
>i14 : IterableIterator<number, boolean>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const i15: Iterable<number, undefined>;
>i15 : Iterable<number, undefined>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const i16: Iterable<number, any>;
>i16 : Iterable<number>
>    : ^^^^^^^^^^^^^^^^

declare const i17: Iterable<number, boolean>;
>i17 : Iterable<number, boolean>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^

