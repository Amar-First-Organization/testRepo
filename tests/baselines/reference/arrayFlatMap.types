=== tests/cases/compiler/arrayFlatMap.ts ===
const array: number[] = [];
>array : number[]
>[] : undefined[]

const readonlyArray: ReadonlyArray<number> = [];
>readonlyArray : readonly number[]
>[] : undefined[]

array.flatMap((): ReadonlyArray<number> => []); // ok
>array.flatMap((): ReadonlyArray<number> => []) : number[]
>array.flatMap : <U, This = undefined>(callback: (this: This, value: number, index: number, array: number[]) => U, thisArg?: This) => (U extends readonly (infer V)[] ? V : U)[]
>array : number[]
>flatMap : <U, This = undefined>(callback: (this: This, value: number, index: number, array: number[]) => U, thisArg?: This) => (U extends readonly (infer V)[] ? V : U)[]
>(): ReadonlyArray<number> => [] : () => readonly number[]
>[] : undefined[]

readonlyArray.flatMap((): ReadonlyArray<number> => []); // ok
>readonlyArray.flatMap((): ReadonlyArray<number> => []) : number[]
>readonlyArray.flatMap : <U, This = undefined>(callback: (this: This, value: number, index: number, array: number[]) => U, thisArg?: This) => (U extends readonly (infer V)[] ? V : U)[]
>readonlyArray : readonly number[]
>flatMap : <U, This = undefined>(callback: (this: This, value: number, index: number, array: number[]) => U, thisArg?: This) => (U extends readonly (infer V)[] ? V : U)[]
>(): ReadonlyArray<number> => [] : () => readonly number[]
>[] : undefined[]

// #19535

const [x] = [""].flatMap(undefined as () => string[] | string[][]);
>x : string | string[]
>[""].flatMap(undefined as () => string[] | string[][]) : (string | string[])[]
>[""].flatMap : <U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U, thisArg?: This) => (U extends readonly (infer V)[] ? V : U)[]
>[""] : string[]
>"" : ""
>flatMap : <U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U, thisArg?: This) => (U extends readonly (infer V)[] ? V : U)[]
>undefined as () => string[] | string[][] : () => string[] | string[][]
>undefined : undefined

x == "";
>x == "" : boolean
>x : string | string[]
>"" : ""

