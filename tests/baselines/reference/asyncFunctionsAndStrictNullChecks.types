=== tests/cases/compiler/asyncFunctionsAndStrictNullChecks.ts ===

declare namespace Windows.Foundation {
>Windows : any
>Foundation : any

    interface IPromise<TResult> {
>IPromise : IPromise<TResult>
>TResult : TResult

        then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: TResult) => IPromise<U>
>value : TResult
>TResult : TResult
>IPromise : IPromise<TResult>
>U : U
>error : (error: any) => IPromise<U>
>error : any
>IPromise : IPromise<TResult>
>U : U
>progress : (progress: any) => void
>progress : any
>IPromise : IPromise<TResult>
>U : U

        then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: TResult) => IPromise<U>
>value : TResult
>TResult : TResult
>IPromise : IPromise<TResult>
>U : U
>error : (error: any) => U
>error : any
>U : U
>progress : (progress: any) => void
>progress : any
>IPromise : IPromise<TResult>
>U : U

        then<U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: TResult) => U
>value : TResult
>TResult : TResult
>U : U
>error : (error: any) => IPromise<U>
>error : any
>IPromise : IPromise<TResult>
>U : U
>progress : (progress: any) => void
>progress : any
>IPromise : IPromise<TResult>
>U : U

        then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>U : U
>success : (value: TResult) => U
>value : TResult
>TResult : TResult
>U : U
>error : (error: any) => U
>error : any
>U : U
>progress : (progress: any) => void
>progress : any
>IPromise : IPromise<TResult>
>U : U

        done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
>done : <U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
>U : U
>success : (value: TResult) => any
>value : TResult
>TResult : TResult
>error : (error: any) => any
>error : any
>progress : (progress: any) => void
>progress : any

        cancel(): void;
>cancel : () => void
    }
}

async function sample(promise: Windows.Foundation.IPromise<number>) {
>sample : (promise: Windows.Foundation.IPromise<number>) => Promise<void>
>promise : Windows.Foundation.IPromise<number>
>Windows : any
>Foundation : any
>IPromise : Windows.Foundation.IPromise<TResult>

    var number = await promise;
>number : number
>await promise : number
>promise : Windows.Foundation.IPromise<number>
}


declare function resolve1<T>(value: T): Promise<T>;
>resolve1 : <T>(value: T) => Promise<T>
>T : T
>value : T
>T : T
>Promise : Promise<T>
>T : T

declare function resolve2<T>(value: T): Windows.Foundation.IPromise<T>;
>resolve2 : <T>(value: T) => Windows.Foundation.IPromise<T>
>T : T
>value : T
>T : T
>Windows : any
>Foundation : any
>IPromise : Windows.Foundation.IPromise<TResult>
>T : T

async function sample2(x?: number) {
>sample2 : (x?: number) => Promise<void>
>x : number

    let x1 = await resolve1(x);
>x1 : number | undefined
>await resolve1(x) : number | undefined
>resolve1(x) : Promise<number | undefined>
>resolve1 : <T>(value: T) => Promise<T>
>x : number | undefined

    let x2 = await resolve2(x);
>x2 : number | undefined
>await resolve2(x) : number | undefined
>resolve2(x) : Windows.Foundation.IPromise<number | undefined>
>resolve2 : <T>(value: T) => Windows.Foundation.IPromise<T>
>x : number | undefined
}

