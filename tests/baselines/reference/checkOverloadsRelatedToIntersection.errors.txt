-57087-101.ts(48,5): error TS2345: Argument of type '{ (x: 1): 1; (x: 2): 2; (x: 3): "3"; }' is not assignable to parameter of type '((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")'.
  Type '{ (x: 1): 1; (x: 2): 2; (x: 3): "3"; }' is not assignable to type '(x: 1 | 2) => 1 | 2'.
    Types of parameters 'x' and 'x' are incompatible.
      Type '1 | 2' is not assignable to type '1'.
        Type '2' is not assignable to type '1'.
-57087-104.ts(76,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & B & C'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
    Type '"1"' is not assignable to type '"10"'.
-57087-104.ts(77,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & C & B'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
-57087-104.ts(78,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & A & C'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
    Types of parameters 'x' and 'x' are incompatible.
      Type '3' is not assignable to type '1'.
-57087-104.ts(79,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & C & A'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
-57087-104.ts(80,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & A & B'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
    Types of parameters 'x' and 'x' are incompatible.
      Type '2' is not assignable to type '1'.
-57087-104.ts(81,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & B & A'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
-57087-104.ts(82,6): error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'W'.
  Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A & B & C'.
-57087-104.ts(101,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & B & C'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
    Types of parameters 'x' and 'x' are incompatible.
      Type '1' is not assignable to type '2'.
-57087-104.ts(102,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & C & B'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
-57087-104.ts(103,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & A & C'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
    Types of parameters 'x' and 'x' are incompatible.
      Type '3' is not assignable to type '2'.
-57087-104.ts(104,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & C & A'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
-57087-104.ts(105,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & A & B'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
    Types of parameters 'x' and 'x' are incompatible.
      Type '1' is not assignable to type '2'.
-57087-104.ts(106,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & B & A'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
-57087-104.ts(109,6): error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'W'.
  Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A & B & C'.
-57087-105.ts(43,5): error TS2345: Argument of type '{ (x: A): string; (x: C): number; (x: B): 1; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
  Type '{ (x: A): string; (x: C): number; (x: B): 1; }' is not assignable to type '{ (x: C): number; (x: B): "1"; }'.
    Types of parameters 'x' and 'x' are incompatible.
      Property 'a' is missing in type 'B' but required in type 'A'.
-57087-105.ts(55,5): error TS2345: Argument of type '{ (x: A): string; (x: C): number; (x: B): string; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
  Type '{ (x: A): string; (x: C): number; (x: B): string; }' is not assignable to type '{ (x: A): string; (x: B): 1; }'.
    Types of parameters 'x' and 'x' are incompatible.
      Type 'B' is not assignable to type 'A'.
-57087-105.ts(68,5): error TS2345: Argument of type '{ (x: C): number; (x: B): 1; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
  Type '{ (x: C): number; (x: B): 1; }' is not assignable to type '{ (x: A): string; (x: B): 1; }'.
    Types of parameters 'x' and 'x' are incompatible.
      Property 'c' is missing in type 'A' but required in type 'C'.
-57087-105.ts(81,5): error TS2345: Argument of type '{ (x: { a?: string | undefined; }): string; (x: C): number; (x: B): 1; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
  Type '{ (x: { a?: string | undefined; }): string; (x: C): number; (x: B): 1; }' is not assignable to type '{ (x: C): number; (x: B): "1"; }'.
    Type 'string' is not assignable to type '"1"'.
-57087-131.ts(21,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-131.ts(29,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-131.ts(37,6): error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-131.ts(45,6): error TS1360: Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
    Type '"01"' is not assignable to type '"02"'.
-57087-131.ts(53,6): error TS1360: Type '{ (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
  Type '{ (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31A'.
    Target signature provides too few arguments. Expected 2 or more, but got 0.
-57087-133.ts(20,6): error TS1360: Type '{ (): "02"; (x: 1, y?: 1 | undefined): "211"; (...args: 1[]): "101"; (...args: 1[]): "201"; (x: 2, y?: any): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
  Type '{ (): "02"; (x: 1, y?: 1 | undefined): "211"; (...args: 1[]): "101"; (...args: 1[]): "201"; (x: 2, y?: any): "221"; }' is not assignable to type 'Garg33A'.
    Type '"02"' is not assignable to type '"01"'.
-57087-133.ts(31,6): error TS1360: Type '{ (): "02"; (x: 1, y?: 1 | undefined): "211"; (...args: 1[]): "101"; (...args: 1[]): "201"; (x: 2, y?: any): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
-57087-133.ts(40,6): error TS1360: Type '{ (x: 2, y?: any): "221"; (...args: 1[]): "201"; (...args: 1[]): "101"; (x: 1, y?: 1 | undefined): "211"; (): "02"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
  Type '{ (x: 2, y?: any): "221"; (...args: 1[]): "201"; (...args: 1[]): "101"; (x: 1, y?: 1 | undefined): "211"; (): "02"; }' is not assignable to type 'Garg33A'.
    Target signature provides too few arguments. Expected 1 or more, but got 0.
-57087-135.ts(20,6): error TS1360: Type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; }' does not satisfy the expected type 'Garg35A & Garg35B & Garg35C'.
  Type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; }' is not assignable to type 'Garg35B'.
    Types of parameters '__0' and '__0' are incompatible.
      Type '{ x?: 2 | undefined; y?: Garg35C | undefined; }' is not assignable to type '{ x?: 1 | undefined; y?: Garg35B | undefined; }'.
        Types of property 'x' are incompatible.
          Type '2 | undefined' is not assignable to type '1 | undefined'.
            Type '2' is not assignable to type '1'.
-57087-135.ts(27,6): error TS1360: Type '{ ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "C1"; ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "C2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "B1"; }' does not satisfy the expected type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; } & Garg35A & Garg35B & Garg35C'.
  Type '{ ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "C1"; ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "C2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "B1"; }' is not assignable to type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; }'.
    Types of parameters '__0' and '__0' are incompatible.
      Type '{ x?: 1 | undefined; y?: Garg35B | undefined; }' is not assignable to type '{ x: 2; y?: Garg35A | undefined; }'.
        Types of property 'x' are incompatible.
          Type '1 | undefined' is not assignable to type '2'.
            Type 'undefined' is not assignable to type '2'.


==== -57087-101.ts (1 errors) ====
    /**********************/
    
    namespace ns0 {
    interface FMap<T,R> {
        f:(x:T)=>R
        g(f:(x:T)=>R):R;
    }
    declare const x1: FMap<1|2,1|2>;
    x1.g(x1.f); // no error
    declare const x2: FMap<2|3,"2"|"3">;
    x2.g(x2.f); // no error
    const x = Math.random() < 0.5 ? x1 : x2;
    x.g; // (method) FMap<T, R>.g(f: ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")): 1 | 2 | "2" | "3"
    
    /*
     * Exact expansion of x.g, with the intersection of the two function types expanded.
     * Catch-all with "never" return is not required to pass the test.
     */
    function ft0(x:1|2):1|2;
    function ft0(x:2|3):"2"|"3";
    function ft0(x:1|2|3){
        if (x!==3) return x1.f(x);
        else return x2.f(x);
    }
    x.g(ft0); // should not be error
    
    /*
     * Condtion for passing are:
     * (a1) Every source overload is matches at least one target overload
     * (a2) Every target overload is matched by at least one souce overload
     * where "matching" is defined as
     * (b1) the target result is void OR the target result and source result overlap // should be source result subset of target result ?
     * (b2) the target and source parameters match identically up to the number of required source parameters.
     * This test case fails because: source (x:1) is not identical to target (x:1|2) or (x:2|3)
     */
    
    function ft1(x:1):1;
    function ft1(x:2):2;
    function ft1(x:3):"3";
    function ft1(x:1|2|3) {
        switch (x) {
            case 1: return 1;
            case 2: return 2;
            case 3: return "3";
        }
        throw "unexpected error"
    }
    x.g(ft1); // should be error
        ~~~
!!! error TS2345: Argument of type '{ (x: 1): 1; (x: 2): 2; (x: 3): "3"; }' is not assignable to parameter of type '((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")'.
!!! error TS2345:   Type '{ (x: 1): 1; (x: 2): 2; (x: 3): "3"; }' is not assignable to type '(x: 1 | 2) => 1 | 2'.
!!! error TS2345:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS2345:       Type '1 | 2' is not assignable to type '1'.
!!! error TS2345:         Type '2' is not assignable to type '1'.
    
    
    }
    
    
    /**********************/
==== -57087-102.ts (0 errors) ====
    namespace ns1 {
    interface FMap<T,R> {
        f:(x:T)=>R
        g(f:(x:T)=>R):R;
    }
    declare const x1: FMap<1|2,1|2>;
    x1.g(x1.f); // no error
    declare const x2: FMap<2|3,"2"|"3">;
    x2.g(x2.f); // no error
    const x = Math.random() < 0.5 ? x1 : x2;
    x.g; // (method) FMap<T, R>.g(f: ((x: 1 | 2) => 1 | 2) & ((x: 2 | 3) => "2" | "3")): 1 | 2 | "2" | "3"
    
    
    /**
     * The following function ft3 should fail.  However, it currently does not
     * The new code only handles cases that fail the in the original code.
     * However, using such long overload chains is not desireable anyway - so we don't need to fix this?
     * Maybe fail on when the number of source overloads is greater than the total number of target overloads?
     */
    
    function ft3(x:1):"3"; // should cause x.g(ft3) to error
    function ft3(x:3):"3";
    function ft3(x:2):2|"2";
    function ft3(x:1|2):1|2; // (4) identical to x1.f
    function ft3(x:2|3):"2"|"3"; // (5) identical to x2.f
    function ft3(x:1|2|3){
        if (x===1) return x1.f(x);
        if (x===3) return x2.f(x);
        return Math.random() < 0.5 ? x1.f(x) : x2.f(x);
    }
    x.g(ft3); // should error (but currently doesn't)
    
    /**
     * The following function ft4 should not fail, and it currently does not.
     * However, using such long overload chains is not friendly anyway, so it is irrelevant.
     */
    
    function ft4(x:1):1;
    function ft4(x:3):"3";
    function ft4(x:2):2|"2";
    function ft4(x:1|2):1|2; // (4) identical to x1.f
    function ft4(x:2|3):"2"|"3"; // (5) identical to x2.f
    function ft4(x:1|2|3){
        if (x===1) return x1.f(x);
        if (x===3) return x2.f(x);
        return Math.random() < 0.5 ? x1.f(x) : x2.f(x);
    }
    x.g(ft4); // should not error
    
    
    }
    
    
    /**********************/
==== -57087-104.ts (14 errors) ====
    namespace ns2 {
    interface C {
      (x:1):"1";
      (x:2):"20";
      (x:number):number | "1" | "20";
    };
    interface B {
      (x:2):"2"
      (x:3):"30"
      (x:number):number | "2" | "30";
    };
    interface A {
      (x:3):"3"
      (x:1):"10"
      (x:number):number | "3" | "10";
    };
    
    type W = (A & B & C)|(A & C & B)|(B & A & C)|(B & C & A)|(C & A & B)|(C & B & A);
    
    /*
    * Scenario:
    * (1) Overloads: Usng fully expanded domain support for C & B & A, so that all errors are detected at compile time
    * (2) Implementation:
    *     - Note extra lines added to make the function signature compatible with the implementation
    * Disadvatage: More verbosity in number of overloads and in implementation.
    * Number of overloads could impact compile time, and makes life harder for downstream users of the function
    */
    function foo2(x:1):"1";
    function foo2(x:2):"20";
    function foo2(x:number):number;
    function foo2(x:2):"2"
    function foo2(x:3):"30"
    function foo2(x:number):number;
    function foo2(x:3):"3"
    function foo2(x:1):"10"
    function foo2(x:number):number;
    function foo2(x:number){
      if (x===1) return "1";
      if (x===2) return "2";
      if (x===3) return "3";
      // (*) These nonsense unused extra lines need to be added to make the function signature compatible with the implementation
      if (x===1) return "10";
      if (x===2) return "20";
      if (x===3) return "30";
      return x;
    }
    
    foo2 satisfies A & B & C; // should satisfy
    foo2 satisfies A & C & B; // should satisfy
    foo2 satisfies B & A & C; // should satisfy
    foo2 satisfies B & C & A; // should satisfy
    foo2 satisfies C & A & B; // should satisfy
    foo2 satisfies C & B & A; // should satisfy
    foo2 satisfies W; // should satisfy
    
    
    /*
    * Scenario: Select some overloads from the orignal set of overloads.
    * Advantages:
    *     - Less verbosity in number of overloads
    *     - Less verbosity in implementation
    * Number of overloads could impact compile time, and makes life harder for downstream users of the function
    */
    function foo1(x:1):"1";
    function foo1(x:2):"2";
    function foo1(x:3):"3";
    function foo1(x:number):number;
    function foo1(x:number){
      if (x===1) return "1";
      if (x===2) return "2";
      if (x===3) return "3";
      return x;
    }
    
    // The `&`-intersection operator result should be independent of the order of it's operands.
    foo1 satisfies A & B & C; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & B & C'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
!!! error TS1360:     Type '"1"' is not assignable to type '"10"'.
    foo1 satisfies A & C & B; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & C & B'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
    foo1 satisfies B & A & C; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & A & C'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
!!! error TS1360:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS1360:       Type '3' is not assignable to type '1'.
    foo1 satisfies B & C & A; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & C & A'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
    foo1 satisfies C & A & B; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & A & B'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
!!! error TS1360:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS1360:       Type '2' is not assignable to type '1'.
    foo1 satisfies C & B & A; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & B & A'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
    foo1 satisfies W; // should not error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'W'.
!!! error TS1360:   Type '{ (x: 1): "1"; (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A & B & C'.
    
    /*
    */
    
    //function foo3(x:1):"1"; //  Omitted domain support should cause satisfies error
    function foo3(x:2):"2";
    function foo3(x:3):"3";
    function foo3(x:number):number;
    function foo3(x:number): number | "1" | "2" | "3"{
      //if (x===1) return "1";
      if (x===2) return "2";
      if (x===3) return "3";
      return x;
      // In this case, a final throw "unexpected error" would never be reached anyway.
      // if (typeof x === "number") return x; // pointless
      // throw "unexpected error";
    }
    
    foo3 satisfies A & B & C; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & B & C'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
!!! error TS1360:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS1360:       Type '1' is not assignable to type '2'.
    foo3 satisfies A & C & B; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'A & C & B'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A'.
    foo3 satisfies B & A & C; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & A & C'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
!!! error TS1360:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS1360:       Type '3' is not assignable to type '2'.
    foo3 satisfies B & C & A; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'B & C & A'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'B'.
    foo3 satisfies C & A & B; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & A & B'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
!!! error TS1360:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS1360:       Type '1' is not assignable to type '2'.
    foo3 satisfies C & B & A; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'C & B & A'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'C'.
    
    
    foo3 satisfies W; // should be error
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' does not satisfy the expected type 'W'.
!!! error TS1360:   Type '{ (x: 2): "2"; (x: 3): "3"; (x: number): number; }' is not assignable to type 'A & B & C'.
    
    
    }
    
    
    /**********************/
==== -57087-105.ts (4 errors) ====
    namespace ns3 {
    type A = { a: string };
    type B = { b: 1 };
    type C = { c: number };
    
    
    interface X1 {
        f(x:A):string
        f(x:B):1
        g(f: X1["f"],arg:A|B):()=>ReturnType<X1["f"]>
    }
    interface X2 {
        f(x:C):number
        f(x:B):"1";
        g(f: X2["f"],arg:C|B):()=>ReturnType<X2["f"]>
    }
    
    declare const x1: X1;
    declare const arg1: A|B;
    x1.g(x1.f,arg1); // should be no error
    declare const x2: X2;
    declare const arg2: C|B;
    x2.g(x2.f,arg2); // should be no error
    const x = Math.random() < 0.5 ? x1 : x2;
    x.g;
    const arg = Math.random() < 0.5 ? arg1 : arg2;
    
    
    
    type ArgCastType = (A & C) | (A & B) | (B & C);
    
    
    function ftw(x:A):string;
    function ftw(x:C):number;
    function ftw(x:B):1;
    function ftw(x: A|B|C) {
        if ("a" in x) return x.a;
        if ("c" in x) return x.c;
        return 1;
    }
    
    // The necessity of the argument cast is a separate issue!
    x.g(ftw,arg as any as any as ArgCastType); // should not be error
        ~~~
!!! error TS2345: Argument of type '{ (x: A): string; (x: C): number; (x: B): 1; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
!!! error TS2345:   Type '{ (x: A): string; (x: C): number; (x: B): 1; }' is not assignable to type '{ (x: C): number; (x: B): "1"; }'.
!!! error TS2345:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS2345:       Property 'a' is missing in type 'B' but required in type 'A'.
!!! related TS2728 -57087-105.ts:2:12: 'a' is declared here.
    
    function ftx(x:A):string;
    function ftx(x:C):number;
    function ftx(x:B):string; // should cause x.g(ft2) to error
    function ftx(x: A|B|C) {
        if ("a" in x) return x.a;
        if ("c" in x) return x.c;
        return x.b;
    }
    
    // The necessity of the argument cast is a separate issue!
    x.g(ftx,arg as any as any as ArgCastType); // should be error
        ~~~
!!! error TS2345: Argument of type '{ (x: A): string; (x: C): number; (x: B): string; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
!!! error TS2345:   Type '{ (x: A): string; (x: C): number; (x: B): string; }' is not assignable to type '{ (x: A): string; (x: B): 1; }'.
!!! error TS2345:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS2345:       Type 'B' is not assignable to type 'A'.
    
    //function fty(x:A):string;  // should cause x.g(ft2) to error
    function fty(x:C):number;
    function fty(x:B):1;
    function fty(x: {a?: string, c?: number, b?: 1|"1"}) {
        if (x.a) return x.a;
        if (x.c) return x.c;
        if (x.b) return x.b;
        throw "unexpected error"
    }
    
    // The necessity of the argument cast is a separate issue!
    x.g(fty,arg as any as any as ArgCastType); // should be error
        ~~~
!!! error TS2345: Argument of type '{ (x: C): number; (x: B): 1; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
!!! error TS2345:   Type '{ (x: C): number; (x: B): 1; }' is not assignable to type '{ (x: A): string; (x: B): 1; }'.
!!! error TS2345:     Types of parameters 'x' and 'x' are incompatible.
!!! error TS2345:       Property 'c' is missing in type 'A' but required in type 'C'.
!!! related TS2728 -57087-105.ts:4:12: 'c' is declared here.
    
    function ftz(x:{a?:string}):string;  // should cause x.g(ft2) to error
    function ftz(x:C):number;
    function ftz(x:B):1;
    function ftz(x: {a?: string, c?: number, b?: 1|"1"}) {
        if (x.a) return x.a;
        if (x.c) return x.c;
        if (x.b) return x.b;
        throw "unexpected error"
    }
    
    // The necessity of the argument cast is a separate issue!
    x.g(ftz,arg as any as any as ArgCastType); // should be error
        ~~~
!!! error TS2345: Argument of type '{ (x: { a?: string | undefined; }): string; (x: C): number; (x: B): 1; }' is not assignable to parameter of type '{ (x: A): string; (x: B): 1; } & { (x: C): number; (x: B): "1"; }'.
!!! error TS2345:   Type '{ (x: { a?: string | undefined; }): string; (x: C): number; (x: B): 1; }' is not assignable to type '{ (x: C): number; (x: B): "1"; }'.
!!! error TS2345:     Type 'string' is not assignable to type '"1"'.
    
    }
    
    
    /**********************/
==== -57087-131.ts (5 errors) ====
    namespace ns4 {
    interface Garg31A {
        (): "01";
        (x:1, y:1): "211"
    };
    declare const g31A: Garg31A;
    
    interface Garg31B {
        (): "02";
        (x:2, y:2): "222";
        (x:2, y:1): "221"
    };
    declare const g31B: Garg31B;
    
    declare const f31a: {
        (): "01";
        (x: 1, y: 1): "211";
        (x: 2, y: 2): "222";
        (x: 2, y: 1): "221";
    };
    f31a satisfies Garg31A & Garg31B; // should satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    declare const f31b: {
        (): "01";
        (x: 1, y: 1): "211";
        (x: 2, y: 2): "221" /*should cause "f31b satisfies" to error */;
        (x: 2, y: 1): "221";
    };
    f31b satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "221"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    declare const f31c: {
        (): "01"; (x: 1, y: 1): "211";
        (x: 2, y: 2): "222";
        (x: 2, y: 1): "221";
        (x: 1, y: 2): "221" /*should cause "f31c satisfies" to error */;
    };
    f31c satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; (x: 1, y: 2): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    declare const f31d:{
        (): "01";
        (x?: 1, y?: 1): "211"; /*should cause "f31d satisfies" to error */
        (x: 2, y: 2): "222";
        (x: 2, y: 1): "221";
    };
    f31d satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (): "01"; (x?: 1 | undefined, y?: 1 | undefined): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31B'.
!!! error TS1360:     Type '"01"' is not assignable to type '"02"'.
    
    declare const f31f: {
        //(): "01"; // missing domain support cannot be detected at compiler time with final never
        (x: 1, y: 1): "211";
        (x: 2, y: 2): "222";
        (x: 2, y: 1): "221";
    }
    f31f satisfies Garg31A & Garg31B; // should not satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' does not satisfy the expected type 'Garg31A & Garg31B'.
!!! error TS1360:   Type '{ (x: 1, y: 1): "211"; (x: 2, y: 2): "222"; (x: 2, y: 1): "221"; }' is not assignable to type 'Garg31A'.
!!! error TS1360:     Target signature provides too few arguments. Expected 2 or more, but got 0.
    
    
    
    }
    
    
    /**********************/
==== -57087-133.ts (3 errors) ====
    namespace ns5 {
    interface Garg33A {
        (): "01";
        (x:1, y?:1): "111";
        (...args: [...1[]]): "101";
    };
    interface Garg33B {
        (): "02";
        (x:1, y?:1): "211";
        (...args:1[]): "201";
        (x:2, y?:any): "221"
    };
    
    declare const f33a: {
        (): "02";
        (x:1, y?:1): "211";
        (...args:1[]): "201";
        (x:2, y?:any): "221"
    }
    f33b satisfies Garg33A & Garg33B; // should  satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "02"; (x: 1, y?: 1 | undefined): "211"; (...args: 1[]): "101"; (...args: 1[]): "201"; (x: 2, y?: any): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
!!! error TS1360:   Type '{ (): "02"; (x: 1, y?: 1 | undefined): "211"; (...args: 1[]): "101"; (...args: 1[]): "201"; (x: 2, y?: any): "221"; }' is not assignable to type 'Garg33A'.
!!! error TS1360:     Type '"02"' is not assignable to type '"01"'.
    // because (...args: [...1[]]):=>"101"  === (...args:1[]) => "201";
    
    
    declare const f33b: {
        (): "02";
        (x:1, y?:1): "211";
        (...args: [...1[]]): "101";
        (...args:1[]): "201";
        (x:2, y?:any): "221"
    }
    f33b satisfies Garg33A & Garg33B; // should satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ (): "02"; (x: 1, y?: 1 | undefined): "211"; (...args: 1[]): "101"; (...args: 1[]): "201"; (x: 2, y?: any): "221"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
    
    declare const f33c: {
        (x:2, y?:any): "221"
        (...args:1[]): "201";
        (...args: [...1[]]): "101";
        (x:1, y?:1): "211";
        (): "02";
    }
    f33c satisfies Garg33A & Garg33B; // should satisfy (even though reversed order of overloads)
         ~~~~~~~~~
!!! error TS1360: Type '{ (x: 2, y?: any): "221"; (...args: 1[]): "201"; (...args: 1[]): "101"; (x: 1, y?: 1 | undefined): "211"; (): "02"; }' does not satisfy the expected type 'Garg33A & Garg33B'.
!!! error TS1360:   Type '{ (x: 2, y?: any): "221"; (...args: 1[]): "201"; (...args: 1[]): "101"; (x: 1, y?: 1 | undefined): "211"; (): "02"; }' is not assignable to type 'Garg33A'.
!!! error TS1360:     Target signature provides too few arguments. Expected 1 or more, but got 0.
    
    
    
    }
    
    
    /**********************/
==== -57087-135.ts (2 errors) ====
    namespace ns6 {
    interface Garg35A {
        ({x,y}:{x?:1, y?:Garg35B}): "A1"
        ({x,y}:{x?:2, y?:Garg35C}): "A2"
    };
    interface Garg35B {
        ({x,y}:{x?:2, y?:Garg35C}): "B1"
        ({x,y}:{x:2, y?:Garg35A}): "B2";
    };
    interface Garg35C {
        ({x,y}:{x:2, y?:Garg35A}): "C1";
        ({x,y}:{x?:1, y?:Garg35B}): "C2"
    };
    
    declare const f35a: {
        ({x,y}:{x?:1, y?:Garg35B}): "A1"
        ({x,y}:{x:2, y?:Garg35A}): "B2";
        ({x,y}:{x?:2, y?:Garg35C}): "A2"
    }
    f35a satisfies Garg35A & Garg35B & Garg35C; // should satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; }' does not satisfy the expected type 'Garg35A & Garg35B & Garg35C'.
!!! error TS1360:   Type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; }' is not assignable to type 'Garg35B'.
!!! error TS1360:     Types of parameters '__0' and '__0' are incompatible.
!!! error TS1360:       Type '{ x?: 2 | undefined; y?: Garg35C | undefined; }' is not assignable to type '{ x?: 1 | undefined; y?: Garg35B | undefined; }'.
!!! error TS1360:         Types of property 'x' are incompatible.
!!! error TS1360:           Type '2 | undefined' is not assignable to type '1 | undefined'.
!!! error TS1360:             Type '2' is not assignable to type '1'.
    
    declare const f35b: {
        ({x,y}:{x:2, y?:Garg35A}): "C1";
        ({x,y}:{x?:1, y?:Garg35B}): "C2"
        ({x,y}:{x?:2, y?:Garg35C}): "B1"
    }
    f35b satisfies typeof f35a & Garg35A & Garg35B & Garg35C; // should satisfy
         ~~~~~~~~~
!!! error TS1360: Type '{ ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "C1"; ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "C2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "B1"; }' does not satisfy the expected type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; } & Garg35A & Garg35B & Garg35C'.
!!! error TS1360:   Type '{ ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "C1"; ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "C2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "B1"; }' is not assignable to type '{ ({ x, y }: { x?: 1 | undefined; y?: Garg35B | undefined; }): "A1"; ({ x, y }: { x: 2; y?: Garg35A | undefined; }): "B2"; ({ x, y }: { x?: 2 | undefined; y?: Garg35C | undefined; }): "A2"; }'.
!!! error TS1360:     Types of parameters '__0' and '__0' are incompatible.
!!! error TS1360:       Type '{ x?: 1 | undefined; y?: Garg35B | undefined; }' is not assignable to type '{ x: 2; y?: Garg35A | undefined; }'.
!!! error TS1360:         Types of property 'x' are incompatible.
!!! error TS1360:           Type '1 | undefined' is not assignable to type '2'.
!!! error TS1360:             Type 'undefined' is not assignable to type '2'.
    
    
    }