=== tests/cases/compiler/global.ts ===
namespace n {
>n : typeof n

    function id<T>(x: T): T {
>id : <T>(x: T) => T
>x : T

        return x;
>x : T
    }

    function templateObjectFactory() {
>templateObjectFactory : () => TemplateStringsArray<["hello world"]>

        return id`hello world`;
>id`hello world` : TemplateStringsArray<["hello world"]>
>id : <T>(x: T) => T
>`hello world` : "hello world"
    }
    let result = templateObjectFactory() === templateObjectFactory();
>result : boolean
>templateObjectFactory() === templateObjectFactory() : boolean
>templateObjectFactory() : TemplateStringsArray<["hello world"]>
>templateObjectFactory : () => TemplateStringsArray<["hello world"]>
>templateObjectFactory() : TemplateStringsArray<["hello world"]>
>templateObjectFactory : () => TemplateStringsArray<["hello world"]>
}
=== tests/cases/compiler/module.ts ===
export { }
function id<T>(x: T): T {
>id : <T>(x: T) => T
>x : T

    return x;
>x : T
}

function templateObjectFactory() {
>templateObjectFactory : () => TemplateStringsArray<["hello world"]>

    return id`hello world`;
>id`hello world` : TemplateStringsArray<["hello world"]>
>id : <T>(x: T) => T
>`hello world` : "hello world"
}
let result = templateObjectFactory() === templateObjectFactory();
>result : boolean
>templateObjectFactory() === templateObjectFactory() : boolean
>templateObjectFactory() : TemplateStringsArray<["hello world"]>
>templateObjectFactory : () => TemplateStringsArray<["hello world"]>
>templateObjectFactory() : TemplateStringsArray<["hello world"]>
>templateObjectFactory : () => TemplateStringsArray<["hello world"]>

