//// [tests/cases/conformance/expressions/typeAssertions/constAssertions.ts] ////



/// [Declarations] ////



//// [constAssertions.d.ts]
declare let v1: "abc";
declare let v2: "abc";
declare let v3: 10;
declare let v4: -10;
declare let v5: 10;
declare let v6: 10n;
declare let v7: -10n;
declare let v8: true;
declare let v9: false;
declare let c1: "abc";
declare let c2: "abc";
declare let c3: 10;
declare let c4: -10;
declare let c5: 10;
declare let c6: 10n;
declare let c7: -10n;
declare let c8: true;
declare let c9: false;
declare let vv1: "abc";
declare let vc1: "abc";
declare let a1: readonly [];
declare let a2: readonly [1, 2, 3];
declare let a3: readonly [10, "hello", true];
declare let a4: readonly [1, 2, 3];
declare let a5: number[];
declare let a6: readonly number[];
declare let a7: number[];
declare let a8: readonly ["abc", ...number[]];
declare let a9: (number | "abc")[];
declare let d: {
    [x: string]: string;
};
declare let o1: {
    readonly x: 10;
    readonly y: 20;
};
declare let o2: {
    readonly [x: string]: 1 | 2 | 3 | (() => void) | 4;
    readonly a: 1;
    readonly b: 2;
    readonly c: 3;
    readonly d: () => void;
};
declare let o3: {
    readonly a: 1;
    readonly b: 2;
    readonly c: 3;
    readonly d: () => void;
    readonly x: 10;
    readonly y: 20;
};
declare let o4: {
    a: number;
    b: number;
};
declare let o5: {
    readonly a: number;
    readonly b: number;
};
declare let o6: {
    a: number;
    b: number;
};
declare let o7: {
    readonly [x: string]: string;
};
declare let o8: {
    [x: string]: string;
};
declare let o9: {
    readonly x: 10;
    readonly foo: () => void;
};
declare let p1: 10;
declare let p2: -10;
declare let p3: readonly [10];
declare let p4: readonly [readonly [readonly [readonly [10]]]];
declare let x1: {
    readonly x: 10;
    readonly y: readonly [20, 30];
    readonly z: {
        readonly a: {
            readonly b: 42;
        };
    };
};
declare let q1: 10;
declare let q2: "abc";
declare let q3: true;
declare let q4: readonly [1, 2, 3];
declare let q5: {
    readonly x: 10;
    readonly y: 20;
};
declare function id<T>(x: T): T;
declare let e1: "abc";
declare let e2: 0 | 1;
declare let e3: 1;
declare let t1: "foo";
declare let t2: "bar";
declare let t3: "foo-bar";
declare let t4: "(foo)-(bar)";
declare function ff1(x: 'foo' | 'bar', y: 1 | 2): "foo-1" | "foo-2" | "bar-1" | "bar-2";
declare function ff2<T extends string, U extends string>(x: T, y: U): `${T}-${U}`;
declare const ts1: "foo-bar";
declare const ts2: "foo-1" | "foo-0";
declare const ts3: "top-left" | "top-right" | "bottom-left" | "bottom-right";
declare function ff3(x: 'foo' | 'bar', y: object): `foo${string}` | `bar${string}`;
type Action = "verify" | "write";
type ContentMatch = "match" | "nonMatch";
type Outcome = `${Action}_${ContentMatch}`;
declare function ff4(verify: boolean, contentMatches: boolean): "verify_match" | "verify_nonMatch" | "write_match" | "write_nonMatch";
declare function ff5(verify: boolean, contentMatches: boolean): "verify_match" | "verify_nonMatch" | "write_match" | "write_nonMatch";
declare function accessorNames<S extends string>(propName: S): readonly [`get-${S}`, `set-${S}`];
declare const ns1: readonly ["get-foo", "set-foo"];
interface Foo54374 {
    a: 1;
    b: 2;
}
declare const fooConst54374: Foo54374;
//# sourceMappingURL=constAssertions.d.ts.map

/// [Declarations Maps] ////


//// [constAssertions.d.ts.map]
{"version":3,"file":"constAssertions.d.ts","sourceRoot":"","sources":["constAssertions.ts"],"names":[],"mappings":"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"}

//// https://sokra.github.io/source-map-visualization#base64,ZGVjbGFyZSBsZXQgdjE6ICJhYmMiOw0KZGVjbGFyZSBsZXQgdjI6ICJhYmMiOw0KZGVjbGFyZSBsZXQgdjM6IDEwOw0KZGVjbGFyZSBsZXQgdjQ6IC0xMDsNCmRlY2xhcmUgbGV0IHY1OiAxMDsNCmRlY2xhcmUgbGV0IHY2OiAxMG47DQpkZWNsYXJlIGxldCB2NzogLTEwbjsNCmRlY2xhcmUgbGV0IHY4OiB0cnVlOw0KZGVjbGFyZSBsZXQgdjk6IGZhbHNlOw0KZGVjbGFyZSBsZXQgYzE6ICJhYmMiOw0KZGVjbGFyZSBsZXQgYzI6ICJhYmMiOw0KZGVjbGFyZSBsZXQgYzM6IDEwOw0KZGVjbGFyZSBsZXQgYzQ6IC0xMDsNCmRlY2xhcmUgbGV0IGM1OiAxMDsNCmRlY2xhcmUgbGV0IGM2OiAxMG47DQpkZWNsYXJlIGxldCBjNzogLTEwbjsNCmRlY2xhcmUgbGV0IGM4OiB0cnVlOw0KZGVjbGFyZSBsZXQgYzk6IGZhbHNlOw0KZGVjbGFyZSBsZXQgdnYxOiAiYWJjIjsNCmRlY2xhcmUgbGV0IHZjMTogImFiYyI7DQpkZWNsYXJlIGxldCBhMTogcmVhZG9ubHkgW107DQpkZWNsYXJlIGxldCBhMjogcmVhZG9ubHkgWzEsIDIsIDNdOw0KZGVjbGFyZSBsZXQgYTM6IHJlYWRvbmx5IFsxMCwgImhlbGxvIiwgdHJ1ZV07DQpkZWNsYXJlIGxldCBhNDogcmVhZG9ubHkgWzEsIDIsIDNdOw0KZGVjbGFyZSBsZXQgYTU6IG51bWJlcltdOw0KZGVjbGFyZSBsZXQgYTY6IHJlYWRvbmx5IG51bWJlcltdOw0KZGVjbGFyZSBsZXQgYTc6IG51bWJlcltdOw0KZGVjbGFyZSBsZXQgYTg6IHJlYWRvbmx5IFsiYWJjIiwgLi4ubnVtYmVyW11dOw0KZGVjbGFyZSBsZXQgYTk6IChudW1iZXIgfCAiYWJjIilbXTsNCmRlY2xhcmUgbGV0IGQ6IHsNCiAgICBbeDogc3RyaW5nXTogc3RyaW5nOw0KfTsNCmRlY2xhcmUgbGV0IG8xOiB7DQogICAgcmVhZG9ubHkgeDogMTA7DQogICAgcmVhZG9ubHkgeTogMjA7DQp9Ow0KZGVjbGFyZSBsZXQgbzI6IHsNCiAgICByZWFkb25seSBbeDogc3RyaW5nXTogMSB8IDIgfCAzIHwgKCgpID0+IHZvaWQpIHwgNDsNCiAgICByZWFkb25seSBhOiAxOw0KICAgIHJlYWRvbmx5IGI6IDI7DQogICAgcmVhZG9ubHkgYzogMzsNCiAgICByZWFkb25seSBkOiAoKSA9PiB2b2lkOw0KfTsNCmRlY2xhcmUgbGV0IG8zOiB7DQogICAgcmVhZG9ubHkgYTogMTsNCiAgICByZWFkb25seSBiOiAyOw0KICAgIHJlYWRvbmx5IGM6IDM7DQogICAgcmVhZG9ubHkgZDogKCkgPT4gdm9pZDsNCiAgICByZWFkb25seSB4OiAxMDsNCiAgICByZWFkb25seSB5OiAyMDsNCn07DQpkZWNsYXJlIGxldCBvNDogew0KICAgIGE6IG51bWJlcjsNCiAgICBiOiBudW1iZXI7DQp9Ow0KZGVjbGFyZSBsZXQgbzU6IHsNCiAgICByZWFkb25seSBhOiBudW1iZXI7DQogICAgcmVhZG9ubHkgYjogbnVtYmVyOw0KfTsNCmRlY2xhcmUgbGV0IG82OiB7DQogICAgYTogbnVtYmVyOw0KICAgIGI6IG51bWJlcjsNCn07DQpkZWNsYXJlIGxldCBvNzogew0KICAgIHJlYWRvbmx5IFt4OiBzdHJpbmddOiBzdHJpbmc7DQp9Ow0KZGVjbGFyZSBsZXQgbzg6IHsNCiAgICBbeDogc3RyaW5nXTogc3RyaW5nOw0KfTsNCmRlY2xhcmUgbGV0IG85OiB7DQogICAgcmVhZG9ubHkgeDogMTA7DQogICAgcmVhZG9ubHkgZm9vOiAoKSA9PiB2b2lkOw0KfTsNCmRlY2xhcmUgbGV0IHAxOiAxMDsNCmRlY2xhcmUgbGV0IHAyOiAtMTA7DQpkZWNsYXJlIGxldCBwMzogcmVhZG9ubHkgWzEwXTsNCmRlY2xhcmUgbGV0IHA0OiByZWFkb25seSBbcmVhZG9ubHkgW3JlYWRvbmx5IFtyZWFkb25seSBbMTBdXV1dOw0KZGVjbGFyZSBsZXQgeDE6IHsNCiAgICByZWFkb25seSB4OiAxMDsNCiAgICByZWFkb25seSB5OiByZWFkb25seSBbMjAsIDMwXTsNCiAgICByZWFkb25seSB6OiB7DQogICAgICAgIHJlYWRvbmx5IGE6IHsNCiAgICAgICAgICAgIHJlYWRvbmx5IGI6IDQyOw0KICAgICAgICB9Ow0KICAgIH07DQp9Ow0KZGVjbGFyZSBsZXQgcTE6IDEwOw0KZGVjbGFyZSBsZXQgcTI6ICJhYmMiOw0KZGVjbGFyZSBsZXQgcTM6IHRydWU7DQpkZWNsYXJlIGxldCBxNDogcmVhZG9ubHkgWzEsIDIsIDNdOw0KZGVjbGFyZSBsZXQgcTU6IHsNCiAgICByZWFkb25seSB4OiAxMDsNCiAgICByZWFkb25seSB5OiAyMDsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGlkPFQ+KHg6IFQpOiBUOw0KZGVjbGFyZSBsZXQgZTE6ICJhYmMiOw0KZGVjbGFyZSBsZXQgZTI6IDAgfCAxOw0KZGVjbGFyZSBsZXQgZTM6IDE7DQpkZWNsYXJlIGxldCB0MTogImZvbyI7DQpkZWNsYXJlIGxldCB0MjogImJhciI7DQpkZWNsYXJlIGxldCB0MzogImZvby1iYXIiOw0KZGVjbGFyZSBsZXQgdDQ6ICIoZm9vKS0oYmFyKSI7DQpkZWNsYXJlIGZ1bmN0aW9uIGZmMSh4OiAnZm9vJyB8ICdiYXInLCB5OiAxIHwgMik6ICJmb28tMSIgfCAiZm9vLTIiIHwgImJhci0xIiB8ICJiYXItMiI7DQpkZWNsYXJlIGZ1bmN0aW9uIGZmMjxUIGV4dGVuZHMgc3RyaW5nLCBVIGV4dGVuZHMgc3RyaW5nPih4OiBULCB5OiBVKTogYCR7VH0tJHtVfWA7DQpkZWNsYXJlIGNvbnN0IHRzMTogImZvby1iYXIiOw0KZGVjbGFyZSBjb25zdCB0czI6ICJmb28tMSIgfCAiZm9vLTAiOw0KZGVjbGFyZSBjb25zdCB0czM6ICJ0b3AtbGVmdCIgfCAidG9wLXJpZ2h0IiB8ICJib3R0b20tbGVmdCIgfCAiYm90dG9tLXJpZ2h0IjsNCmRlY2xhcmUgZnVuY3Rpb24gZmYzKHg6ICdmb28nIHwgJ2JhcicsIHk6IG9iamVjdCk6IGBmb28ke3N0cmluZ31gIHwgYGJhciR7c3RyaW5nfWA7DQp0eXBlIEFjdGlvbiA9ICJ2ZXJpZnkiIHwgIndyaXRlIjsNCnR5cGUgQ29udGVudE1hdGNoID0gIm1hdGNoIiB8ICJub25NYXRjaCI7DQp0eXBlIE91dGNvbWUgPSBgJHtBY3Rpb259XyR7Q29udGVudE1hdGNofWA7DQpkZWNsYXJlIGZ1bmN0aW9uIGZmNCh2ZXJpZnk6IGJvb2xlYW4sIGNvbnRlbnRNYXRjaGVzOiBib29sZWFuKTogInZlcmlmeV9tYXRjaCIgfCAidmVyaWZ5X25vbk1hdGNoIiB8ICJ3cml0ZV9tYXRjaCIgfCAid3JpdGVfbm9uTWF0Y2giOw0KZGVjbGFyZSBmdW5jdGlvbiBmZjUodmVyaWZ5OiBib29sZWFuLCBjb250ZW50TWF0Y2hlczogYm9vbGVhbik6ICJ2ZXJpZnlfbWF0Y2giIHwgInZlcmlmeV9ub25NYXRjaCIgfCAid3JpdGVfbWF0Y2giIHwgIndyaXRlX25vbk1hdGNoIjsNCmRlY2xhcmUgZnVuY3Rpb24gYWNjZXNzb3JOYW1lczxTIGV4dGVuZHMgc3RyaW5nPihwcm9wTmFtZTogUyk6IHJlYWRvbmx5IFtgZ2V0LSR7U31gLCBgc2V0LSR7U31gXTsNCmRlY2xhcmUgY29uc3QgbnMxOiByZWFkb25seSBbImdldC1mb28iLCAic2V0LWZvbyJdOw0KaW50ZXJmYWNlIEZvbzU0Mzc0IHsNCiAgICBhOiAxOw0KICAgIGI6IDI7DQp9DQpkZWNsYXJlIGNvbnN0IGZvb0NvbnN0NTQzNzQ6IEZvbzU0Mzc0Ow0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RBc3NlcnRpb25zLmQudHMubWFw,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RBc3NlcnRpb25zLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25zdEFzc2VydGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBQSxJQUFJLEVBQUUsT0FBaUIsQ0FBQztBQUN4QixRQUFBLElBQUksRUFBRSxPQUFpQixDQUFDO0FBQ3hCLFFBQUEsSUFBSSxFQUFFLElBQWMsQ0FBQztBQUNyQixRQUFBLElBQUksRUFBRSxFQUFHLENBQUMsRUFBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxFQUFFLEVBQUksRUFBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxFQUFFLEVBQUcsR0FBWSxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxFQUFFLEVBQUcsQ0FBQyxHQUFZLENBQUM7QUFDdkIsUUFBQSxJQUFJLEVBQUUsRUFBRyxJQUFhLENBQUM7QUFDdkIsUUFBQSxJQUFJLEVBQUUsRUFBRyxLQUFjLENBQUM7QUFFeEIsUUFBQSxJQUFJLEVBQUUsT0FBaUIsQ0FBQztBQUN4QixRQUFBLElBQUksRUFBRSxPQUFpQixDQUFDO0FBQ3hCLFFBQUEsSUFBSSxFQUFFLElBQWMsQ0FBQztBQUNyQixRQUFBLElBQUksRUFBRSxFQUFHLENBQUMsRUFBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxFQUFFLEVBQUksRUFBVyxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxFQUFFLEVBQUcsR0FBWSxDQUFDO0FBQ3RCLFFBQUEsSUFBSSxFQUFFLEVBQUcsQ0FBQyxHQUFZLENBQUM7QUFDdkIsUUFBQSxJQUFJLEVBQUUsRUFBRyxJQUFhLENBQUM7QUFDdkIsUUFBQSxJQUFJLEVBQUUsRUFBRyxLQUFjLENBQUM7QUFFeEIsUUFBQSxJQUFJLEdBQUcsRUFBRSxLQUFVLENBQUM7QUFDcEIsUUFBQSxJQUFJLEdBQUcsRUFBRSxLQUFVLENBQUM7QUFFcEIsUUFBQSxJQUFJLEVBQUUsYUFBYyxDQUFDO0FBQ3JCLFFBQUEsSUFBSSxFQUFFLG9CQUFxQixDQUFDO0FBQzVCLFFB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QUcsVUFBVSxDQUFDO0FBQ3pDLEtBQUssT0FBTyxHQUFHLEdBQUcsTUFBTSxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRTNDLGlCQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxPQUFPLEdBQUcsY0FBYyxHQUFHLGlCQUFpQixHQUFHLGFBQWEsR0FBRyxnQkFBZ0IsQ0FLNUg7QUFFRCxpQkFBUyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsT0FBTyxHQUFHLGNBQWMsR0FBRyxpQkFBaUIsR0FBRyxhQUFhLEdBQUcsZ0JBQWdCLENBSzVIO0FBRUQsaUJBQVMsYUFBYSxDQUFDLENBQUMsU0FBUyxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBRXZGO0FBRUQsUUFBQSxNQUFNLEdBQUcsRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBd0IsQ0FBQztBQUdsRSxVQUFVLFFBQVE7SUFDaEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNMLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDTjtBQUVELFFBQUEsTUFBTSxhQUFhLEVBQUUsUUFHWCxDQUFBIn0=,bGV0IHYxID0gJ2FiYycgYXMgY29uc3Q7CmxldCB2MiA9IGBhYmNgIGFzIGNvbnN0OwpsZXQgdjMgPSAxMCBhcyBjb25zdDsKbGV0IHY0ID0gLTEwIGFzIGNvbnN0OwpsZXQgdjUgPSArMTAgYXMgY29uc3Q7CmxldCB2NiA9IDEwbiBhcyBjb25zdDsKbGV0IHY3ID0gLTEwbiBhcyBjb25zdDsKbGV0IHY4ID0gdHJ1ZSBhcyBjb25zdDsKbGV0IHY5ID0gZmFsc2UgYXMgY29uc3Q7CgpsZXQgYzEgPSAnYWJjJyBhcyBjb25zdDsKbGV0IGMyID0gYGFiY2AgYXMgY29uc3Q7CmxldCBjMyA9IDEwIGFzIGNvbnN0OwpsZXQgYzQgPSAtMTAgYXMgY29uc3Q7CmxldCBjNSA9ICsxMCBhcyBjb25zdDsKbGV0IGM2ID0gMTBuIGFzIGNvbnN0OwpsZXQgYzcgPSAtMTBuIGFzIGNvbnN0OwpsZXQgYzggPSB0cnVlIGFzIGNvbnN0OwpsZXQgYzkgPSBmYWxzZSBhcyBjb25zdDsKCmxldCB2djE6ICJhYmMiID0gdjE7CmxldCB2YzE6ICJhYmMiID0gYzE7CgpsZXQgYTEgPSBbXSBhcyBjb25zdDsKbGV0IGEyID0gWzEsIDIsIDNdIGFzIGNvbnN0OwpsZXQgYTMgPSBbMTAsICdoZWxsbycsIHRydWVdIGFzIGNvbnN0OwpsZXQgYTQ6IHJlYWRvbmx5IFsxLCAyLCAzXSA9IFsuLi5bMSwgMiwgM11dIGFzIGNvbnN0OwpsZXQgYTU6IG51bWJlcltdID0gWzEsIDIsIDNdOwpsZXQgYTY6IHJlYWRvbmx5IG51bWJlcltdID0gWy4uLmE1XSBhcyBjb25zdDsKbGV0IGE3OiBudW1iZXJbXSA9IFsuLi5hNl07CmxldCBhODogcmVhZG9ubHkgWyJhYmMiLCAuLi5udW1iZXJbXV0gPSBbJ2FiYycsIC4uLmE3XSBhcyBjb25zdDsKbGV0IGE5OiAobnVtYmVyIHwgImFiYyIpW10gPSBbLi4uYThdOwoKZGVjbGFyZSBsZXQgZDogeyBbeDogc3RyaW5nXTogc3RyaW5nIH07CgpsZXQgbzEgPSB7IHg6IDEwLCB5OiAyMCB9IGFzIGNvbnN0OwpsZXQgbzI6IHsKICAgIHJlYWRvbmx5IFt4OiBzdHJpbmddOiAxIHwgMiB8IDMgfCAoKCkgPT4gdm9pZCkgfCA0OwogICAgcmVhZG9ubHkgYTogMTsKICAgIHJlYWRvbmx5IGI6IDI7CiAgICByZWFkb25seSBjOiAzOwogICAgcmVhZG9ubHkgZDogKCkgPT4gdm9pZDsKfSA9IHsgYTogMSwgJ2InOiAyLCBbJ2MnXTogMywgZCgpIHt9LCBbJ2UnICsgJyddOiA0IH0gYXMgY29uc3Q7CmxldCBvMzogewogICAgcmVhZG9ubHkgYTogMTsKICAgIHJlYWRvbmx5IGI6IDI7CiAgICByZWFkb25seSBjOiAzOwogICAgcmVhZG9ubHkgZDogKCkgPT4gdm9pZDsKICAgIHJlYWRvbmx5IHg6IDEwOwogICAgcmVhZG9ubHkgeTogMjA7Cn0gPSB7IC4uLm8xLCAuLi5vMiB9IGFzIGNvbnN0OwpsZXQgbzQgPSB7IGE6IDEsIGI6IDIgfTsKbGV0IG81OiB7CiAgICByZWFkb25seSBhOiBudW1iZXI7CiAgICByZWFkb25seSBiOiBudW1iZXI7Cn0gPSB7IC4uLm80IH0gYXMgY29uc3Q7CmxldCBvNjogewogICAgYTogbnVtYmVyOwogICAgYjogbnVtYmVyOwp9ID0geyAuLi5vNSB9OwpsZXQgbzc6IHsKICAgIHJlYWRvbmx5IFt4OiBzdHJpbmddOiBzdHJpbmc7Cn0gPSB7IC4uLmQgfSBhcyBjb25zdDsKbGV0IG84OiB7CiAgICBbeDogc3RyaW5nXTogc3RyaW5nOwp9ID0geyAuLi5vNyB9OwpsZXQgbzkgPSB7IHg6IDEwLCBmb28oKTogdm9pZCB7IHRoaXMueCA9IDIwIH0gfSBhcyBjb25zdDsgIC8vIEVycm9yCgpsZXQgcDEgPSAoMTApIGFzIGNvbnN0OwpsZXQgcDIgPSAoKC0xMCkpIGFzIGNvbnN0OwpsZXQgcDMgPSAoWygxMCldKSBhcyBjb25zdDsKbGV0IHA0ID0gW1tbWzEwXV1dXSBhcyBjb25zdDsKCmxldCB4MSA9IHsgeDogMTAsIHk6IFsyMCwgMzBdLCB6OiB7IGE6IHsgYjogNDIgfSB9IH0gYXMgY29uc3Q7CgpsZXQgcTEgPSA8Y29uc3Q+IDEwOwpsZXQgcTIgPSA8Y29uc3Q+ICdhYmMnOwpsZXQgcTMgPSA8Y29uc3Q+IHRydWU7CmxldCBxNCA9IDxjb25zdD4gWzEsIDIsIDNdOwpsZXQgcTUgPSA8Y29uc3Q+IHsgeDogMTAsIHk6IDIwIH07CgpkZWNsYXJlIGZ1bmN0aW9uIGlkPFQ+KHg6IFQpOiBUOwoKbGV0IGUxOiAiYWJjIiA9IHYxIGFzIGNvbnN0OyAgLy8gRXJyb3IKbGV0IGUyOiAwIHwgMSA9ICh0cnVlID8gMSA6IDApIGFzIGNvbnN0OyAgLy8gRXJyb3IKbGV0IGUzOiAxID0gaWQoMSkgYXMgY29uc3Q7ICAvLyBFcnJvcgoKbGV0IHQxID0gJ2ZvbycgYXMgY29uc3Q7CmxldCB0MiA9ICdiYXInIGFzIGNvbnN0OwpsZXQgdDM6ICJmb28tYmFyIiA9IGAke3QxfS0ke3QyfWAgYXMgY29uc3Q7CmxldCB0NDogIihmb28pLShiYXIpIiA9IGAke2AoJHt0MX0pYH0tJHtgKCR7dDJ9KWB9YCBhcyBjb25zdDsKCmZ1bmN0aW9uIGZmMSh4OiAnZm9vJyB8ICdiYXInLCB5OiAxIHwgMik6ICJmb28tMSIgfCAiZm9vLTIiIHwgImJhci0xIiB8ICJiYXItMiIgewogICAgcmV0dXJuIGAke3h9LSR7eX1gIGFzIGNvbnN0Owp9CgpmdW5jdGlvbiBmZjI8VCBleHRlbmRzIHN0cmluZywgVSBleHRlbmRzIHN0cmluZz4oeDogVCwgeTogVSk6IGAke1R9LSR7VX1gIHsKICAgIHJldHVybiBgJHt4fS0ke3l9YCBhcyBjb25zdDsKfQoKY29uc3QgdHMxOiAiZm9vLWJhciIgPSBmZjIoJ2ZvbycsICdiYXInKTsKY29uc3QgdHMyOiAiZm9vLTEiIHwgImZvby0wIiA9IGZmMignZm9vJywgISF0cnVlID8gJzAnIDogJzEnKTsKY29uc3QgdHMzOiAidG9wLWxlZnQiIHwgInRvcC1yaWdodCIgfCAiYm90dG9tLWxlZnQiIHwgImJvdHRvbS1yaWdodCIgPSBmZjIoISF0cnVlID8gJ3RvcCcgOiAnYm90dG9tJywgISF0cnVlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7CgpmdW5jdGlvbiBmZjMoeDogJ2ZvbycgfCAnYmFyJywgeTogb2JqZWN0KTogYGZvbyR7c3RyaW5nfWAgfCBgYmFyJHtzdHJpbmd9YCB7CiAgICByZXR1cm4gYCR7eH0ke3l9YCBhcyBjb25zdDsKfQoKdHlwZSBBY3Rpb24gPSAidmVyaWZ5IiB8ICJ3cml0ZSI7CnR5cGUgQ29udGVudE1hdGNoID0gIm1hdGNoIiB8ICJub25NYXRjaCI7CnR5cGUgT3V0Y29tZSA9IGAke0FjdGlvbn1fJHtDb250ZW50TWF0Y2h9YDsKCmZ1bmN0aW9uIGZmNCh2ZXJpZnk6IGJvb2xlYW4sIGNvbnRlbnRNYXRjaGVzOiBib29sZWFuKTogInZlcmlmeV9tYXRjaCIgfCAidmVyaWZ5X25vbk1hdGNoIiB8ICJ3cml0ZV9tYXRjaCIgfCAid3JpdGVfbm9uTWF0Y2giIHsKICAgIGNvbnN0IGFjdGlvbiA6IEFjdGlvbiA9IHZlcmlmeSA/IGB2ZXJpZnlgIDogYHdyaXRlYDsKICAgIGNvbnN0IGNvbnRlbnRNYXRjaDogQ29udGVudE1hdGNoID0gY29udGVudE1hdGNoZXMgPyBgbWF0Y2hgIDogYG5vbk1hdGNoYDsKICAgIGNvbnN0IG91dGNvbWU6IE91dGNvbWUgPSBgJHthY3Rpb259XyR7Y29udGVudE1hdGNofWAgYXMgY29uc3Q7CiAgICByZXR1cm4gb3V0Y29tZTsKfQoKZnVuY3Rpb24gZmY1KHZlcmlmeTogYm9vbGVhbiwgY29udGVudE1hdGNoZXM6IGJvb2xlYW4pOiAidmVyaWZ5X21hdGNoIiB8ICJ2ZXJpZnlfbm9uTWF0Y2giIHwgIndyaXRlX21hdGNoIiB8ICJ3cml0ZV9ub25NYXRjaCIgewogICAgY29uc3QgYWN0aW9uID0gdmVyaWZ5ID8gYHZlcmlmeWAgOiBgd3JpdGVgOwogICAgY29uc3QgY29udGVudE1hdGNoID0gY29udGVudE1hdGNoZXMgPyBgbWF0Y2hgIDogYG5vbk1hdGNoYDsKICAgIGNvbnN0IG91dGNvbWUgPSBgJHthY3Rpb259XyR7Y29udGVudE1hdGNofWAgYXMgY29uc3Q7CiAgICByZXR1cm4gb3V0Y29tZTsKfQoKZnVuY3Rpb24gYWNjZXNzb3JOYW1lczxTIGV4dGVuZHMgc3RyaW5nPihwcm9wTmFtZTogUyk6IHJlYWRvbmx5IFtgZ2V0LSR7U31gLCBgc2V0LSR7U31gXSB7CiAgICByZXR1cm4gW2BnZXQtJHtwcm9wTmFtZX1gLCBgc2V0LSR7cHJvcE5hbWV9YF0gYXMgY29uc3Q7Cn0KCmNvbnN0IG5zMTogcmVhZG9ubHkgWyJnZXQtZm9vIiwgInNldC1mb28iXSA9IGFjY2Vzc29yTmFtZXMoJ2ZvbycpOwoKLy8gcmVwcm8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzU0Mzc0CmludGVyZmFjZSBGb281NDM3NCB7CiAgYTogMTsKICBiOiAyOwp9Cgpjb25zdCBmb29Db25zdDU0Mzc0OiBGb281NDM3NCA9IHsKICBhOiAxLAogIGI6IDMKfSBhcyBjb25zdAo=

