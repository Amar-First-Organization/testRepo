error TS5109: Option 'moduleResolution' must be set to 'Node18' (or left unspecified) when option 'module' is set to 'Node18'.
/index.ts(1,39): error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/index.ts(2,38): error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/index.ts(6,44): error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/index.ts(6,50): error TS1454: `resolution-mode` can only be set for type-only imports.
/index.ts(7,43): error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/index.ts(7,49): error TS1454: `resolution-mode` can only be set for type-only imports.
/index.ts(10,39): error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/index.ts(11,38): error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?


!!! error TS5109: Option 'moduleResolution' must be set to 'Node18' (or left unspecified) when option 'module' is set to 'Node18'.
==== /index.ts (8 errors) ====
    import type { RequireInterface } from "pkg" with { "resolution-mode": "require" };
                                          ~~~~~
!!! error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    import type { ImportInterface } from "pkg" with { "resolution-mode": "import" };
                                         ~~~~~
!!! error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    
    export interface LocalInterface extends RequireInterface, ImportInterface {}
    
    import {type RequireInterface as Req} from "pkg" with { "resolution-mode": "require" };
                                               ~~~~~
!!! error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1454: `resolution-mode` can only be set for type-only imports.
    import {type ImportInterface as Imp} from "pkg" with { "resolution-mode": "import" };
                                              ~~~~~
!!! error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1454: `resolution-mode` can only be set for type-only imports.
    export interface Loc extends Req, Imp {}
    
    export type { RequireInterface } from "pkg" with { "resolution-mode": "require" };
                                          ~~~~~
!!! error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    export type { ImportInterface } from "pkg" with { "resolution-mode": "import" };
                                         ~~~~~
!!! error TS2792: Cannot find module 'pkg'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    
==== /node_modules/pkg/package.json (0 errors) ====
    {
        "name": "pkg",
        "version": "0.0.1",
        "exports": {
            "import": "./import.js",
            "require": "./require.js"
        }
    }
==== /node_modules/pkg/import.d.ts (0 errors) ====
    export interface ImportInterface {}
==== /node_modules/pkg/require.d.ts (0 errors) ====
    export interface RequireInterface {}