//// [tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_umd.ts] ////

=== arbitraryModuleNamespaceIdentifiers_umd.ts ===
const someValue = "someValue";
>someValue : Symbol(someValue, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 0, 5))

type someType = "someType";
>someType : Symbol(someType, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 0, 30))

export { someValue as "<X>" };
>someValue : Symbol(someValue, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 0, 5))
>"<X>" : Symbol(valueZ["<X>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 3, 8))

import { "<X>" as valueX } from "./arbitraryModuleNamespaceIdentifiers_umd";
>valueX : Symbol(valueX, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 4, 8))

if (valueX !== "someValue") throw "should be someValue";
>valueX : Symbol(valueX, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 4, 8))

export { "<X>" as "<Y>" } from "./arbitraryModuleNamespaceIdentifiers_umd";
>"<Y>" : Symbol(valueZ["<Y>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 7, 8))

import { "<Y>" as valueY } from "./arbitraryModuleNamespaceIdentifiers_umd";
>valueY : Symbol(valueY, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 8, 8))

if (valueY !== "someValue") throw "should be someValue";
>valueY : Symbol(valueY, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 8, 8))

export * as "<Z>" from "./arbitraryModuleNamespaceIdentifiers_umd";
>"<Z>" : Symbol(valueZ["<Z>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 11, 6))

import { "<Z>" as valueZ } from "./arbitraryModuleNamespaceIdentifiers_umd";
>valueZ : Symbol(valueZ, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 12, 8))

if (valueZ["<X>"] !== "someValue") throw "should be someValue";
>valueZ : Symbol(valueZ, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 12, 8))
>"<X>" : Symbol(valueZ["<X>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 3, 8))

if (valueZ["<Y>"] !== "someValue") throw "should be someValue";
>valueZ : Symbol(valueZ, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 12, 8))
>"<Y>" : Symbol(valueZ["<Y>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 7, 8))

if (valueZ["<Z>"] !== valueZ) throw "should be export namespace";
>valueZ : Symbol(valueZ, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 12, 8))
>"<Z>" : Symbol(valueZ["<Z>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 11, 6))
>valueZ : Symbol(valueZ, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 12, 8))

export { type someType as "<A>" };
>someType : Symbol(someType, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 0, 30))
>"<A>" : Symbol(valueZ["<A>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 17, 8))

import { type "<A>" as typeA } from "./arbitraryModuleNamespaceIdentifiers_umd";
>typeA : Symbol(typeA, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 18, 8))

const importTest: typeA = "expect error about someType";
>importTest : Symbol(importTest, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 19, 5))
>typeA : Symbol(typeA, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 18, 8))

export { type "<A>" as "<B>" } from "./arbitraryModuleNamespaceIdentifiers_umd";
>"<B>" : Symbol(valueZ["<B>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 21, 8))

import { type "<B>" as typeB } from "./arbitraryModuleNamespaceIdentifiers_umd";
>typeB : Symbol(typeB, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 22, 8))

const reimportTest: typeB = "expect error about someType";
>reimportTest : Symbol(reimportTest, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 23, 5))
>typeB : Symbol(typeB, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 22, 8))

export type * as "<C>" from "./arbitraryModuleNamespaceIdentifiers_umd";
>"<C>" : Symbol(valueZ["<C>"], Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 25, 11))

import { type "<C>" as typeC } from "./arbitraryModuleNamespaceIdentifiers_umd";
>typeC : Symbol(typeC, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 26, 8))

export type otherType = "otherType";
>otherType : Symbol(valueZ.otherType, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 26, 80))

const importStarTestA: typeC.otherType = "expect error about otherType";
>importStarTestA : Symbol(importStarTestA, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 28, 5))
>typeC : Symbol(typeC, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 26, 8))
>otherType : Symbol(valueZ.otherType, Decl(arbitraryModuleNamespaceIdentifiers_umd.ts, 26, 80))

