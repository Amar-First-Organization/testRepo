=== tests/cases/compiler/arrayReduce.ts ===
function toStrings(arr: ReadonlyArray<object>): string[] {
>toStrings : (arr: readonly object[]) => string[]
>arr : readonly object[]

	return arr.reduce((acc, obj) => {
>arr.reduce((acc, obj) => {		acc.push(obj.toString());		return acc;	}, [] as string[]) : string[]
>arr.reduce : { (callbackfn: (previousValue: object, currentValue: object, currentIndex: number, array: readonly object[]) => object): object; <U>(callbackfn: (previousValue: U, currentValue: object, currentIndex: number, array: readonly object[]) => U, initialValue: U): U; }
>arr : readonly object[]
>reduce : { (callbackfn: (previousValue: object, currentValue: object, currentIndex: number, array: readonly object[]) => object): object; <U>(callbackfn: (previousValue: U, currentValue: object, currentIndex: number, array: readonly object[]) => U, initialValue: U): U; }
>(acc, obj) => {		acc.push(obj.toString());		return acc;	} : (acc: string[], obj: object) => string[]
>acc : string[]
>obj : object

		acc.push(obj.toString());
>acc.push(obj.toString()) : number
>acc.push : (...items: string[]) => number
>acc : string[]
>push : (...items: string[]) => number
>obj.toString() : string
>obj.toString : () => string
>obj : object
>toString : () => string

		return acc;
>acc : string[]

	}, [] as string[]);
>[] as string[] : string[]
>[] : undefined[]
}

interface Operation { readonly kind: "add" | "subtract"; readonly value: number; }
>kind : "add" | "subtract"
>value : number

function add(arr: ReadonlyArray<Operation>): Operation {
>add : (arr: readonly Operation[]) => Operation
>arr : readonly Operation[]

	return arr.reduce(({ value }, { kind, value: v }) => {
>arr.reduce(({ value }, { kind, value: v }) => {		return { kind: "add", value: kind === "add" ? value + v : value - v };	}, { kind: "add", value: 5 }) : { kind: "add"; value: number; }
>arr.reduce : { (callbackfn: (previousValue: Operation, currentValue: Operation, currentIndex: number, array: readonly Operation[]) => Operation): Operation; <U>(callbackfn: (previousValue: U, currentValue: Operation, currentIndex: number, array: readonly Operation[]) => U, initialValue: U): U; }
>arr : readonly Operation[]
>reduce : { (callbackfn: (previousValue: Operation, currentValue: Operation, currentIndex: number, array: readonly Operation[]) => Operation): Operation; <U>(callbackfn: (previousValue: U, currentValue: Operation, currentIndex: number, array: readonly Operation[]) => U, initialValue: U): U; }
>({ value }, { kind, value: v }) => {		return { kind: "add", value: kind === "add" ? value + v : value - v };	} : ({ value }: { kind: "add"; value: number; }, { kind, value: v }: Operation) => { kind: "add"; value: number; }
>value : number
>kind : "add" | "subtract"
>value : any
>v : number

		return { kind: "add", value: kind === "add" ? value + v : value - v };
>{ kind: "add", value: kind === "add" ? value + v : value - v } : { kind: "add"; value: number; }
>kind : "add"
>"add" : "add"
>value : number
>kind === "add" ? value + v : value - v : number
>kind === "add" : boolean
>kind : "add" | "subtract"
>"add" : "add"
>value + v : number
>value : number
>v : number
>value - v : number
>value : number
>v : number

	}, { kind: "add", value: 5 });
>{ kind: "add", value: 5 } : { kind: "add"; value: number; }
>kind : "add"
>"add" : "add"
>value : number
>5 : 5
}

