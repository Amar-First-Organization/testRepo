//// [tests/cases/compiler/jsxNamespacePrefixIntrinsics.tsx] ////

=== jsxNamespacePrefixIntrinsics.tsx ===
declare namespace JSX {
  interface IntrinsicElements {
    "ns:element": {
>"ns:element" : { "ns:attribute": string; }
>             : ^^^^^^^^^^^^^^^^^^      ^^^

      "ns:attribute": string;
>"ns:attribute" : string
>               : ^^^^^^

    },
    "ns:NamespacedUpcaseAlsoIntrinsic": any,
>"ns:NamespacedUpcaseAlsoIntrinsic" : any
>                                   : ^^^

    "NS:NamespacedUpcaseAlsoIntrinsic": any
>"NS:NamespacedUpcaseAlsoIntrinsic" : any
>                                   : ^^^
  }
  interface Element<P, T> { props: P; type: T; }
>props : P
>      : ^
>type : T
>     : ^
}

const valid = <ns:element ns:attribute="yep" />;
>valid : JSX.Element<P, T>
>      : ^^^^^^^^^^^^^^^^^
><ns:element ns:attribute="yep" /> : JSX.Element<P, T>
>                                  : ^^^^^^^^^^^^^^^^^
>ns : any
>   : ^^^
>element : any
>        : ^^^
>ns:attribute : string
>             : ^^^^^^
>ns : any
>   : ^^^
>attribute : any
>          : ^^^

const validUpcase1 = <ns:NamespacedUpcaseAlsoIntrinsic />;
>validUpcase1 : JSX.Element<P, T>
>             : ^^^^^^^^^^^^^^^^^
><ns:NamespacedUpcaseAlsoIntrinsic /> : JSX.Element<P, T>
>                                     : ^^^^^^^^^^^^^^^^^
>ns : any
>   : ^^^
>NamespacedUpcaseAlsoIntrinsic : any
>                              : ^^^

const validUpcase2 = <NS:NamespacedUpcaseAlsoIntrinsic />;
>validUpcase2 : JSX.Element<P, T>
>             : ^^^^^^^^^^^^^^^^^
><NS:NamespacedUpcaseAlsoIntrinsic /> : JSX.Element<P, T>
>                                     : ^^^^^^^^^^^^^^^^^
>NS : any
>   : ^^^
>NamespacedUpcaseAlsoIntrinsic : any
>                              : ^^^

const invalid1 = <element />;
>invalid1 : JSX.Element<P, T>
>         : ^^^^^^^^^^^^^^^^^
><element /> : JSX.Element<P, T>
>            : ^^^^^^^^^^^^^^^^^
>element : any
>        : ^^^

const invalid2 = <ns:element attribute="nope" />;
>invalid2 : JSX.Element<P, T>
>         : ^^^^^^^^^^^^^^^^^
><ns:element attribute="nope" /> : JSX.Element<P, T>
>                                : ^^^^^^^^^^^^^^^^^
>ns : any
>   : ^^^
>element : any
>        : ^^^
>attribute : string
>          : ^^^^^^

const invalid3 = <ns:element ns:invalid="nope" />;
>invalid3 : JSX.Element<P, T>
>         : ^^^^^^^^^^^^^^^^^
><ns:element ns:invalid="nope" /> : JSX.Element<P, T>
>                                 : ^^^^^^^^^^^^^^^^^
>ns : any
>   : ^^^
>element : any
>        : ^^^
>ns:invalid : string
>           : ^^^^^^
>ns : any
>   : ^^^
>invalid : any
>        : ^^^

