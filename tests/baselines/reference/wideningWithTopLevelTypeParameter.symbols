=== tests/cases/compiler/wideningWithTopLevelTypeParameter.ts ===
class FormControl<T> {
>FormControl : Symbol(FormControl, Decl(wideningWithTopLevelTypeParameter.ts, 0, 0))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 0, 18))

    constructor(t: T extends undefined ? never : T) {}
>t : Symbol(t, Decl(wideningWithTopLevelTypeParameter.ts, 1, 16))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 0, 18))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 0, 18))
}

const a = new FormControl('');  // string
>a : Symbol(a, Decl(wideningWithTopLevelTypeParameter.ts, 4, 5))
>FormControl : Symbol(FormControl, Decl(wideningWithTopLevelTypeParameter.ts, 0, 0))

class FormControl2<T> {
>FormControl2 : Symbol(FormControl2, Decl(wideningWithTopLevelTypeParameter.ts, 4, 30))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 6, 19))

    constructor(t: T | string) {}
>t : Symbol(t, Decl(wideningWithTopLevelTypeParameter.ts, 7, 16))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 6, 19))
}

const b = new FormControl2('');  // string
>b : Symbol(b, Decl(wideningWithTopLevelTypeParameter.ts, 10, 5))
>FormControl2 : Symbol(FormControl2, Decl(wideningWithTopLevelTypeParameter.ts, 4, 30))

class FormControl3<T> {
>FormControl3 : Symbol(FormControl3, Decl(wideningWithTopLevelTypeParameter.ts, 10, 31))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 12, 19))

    constructor(t: T extends undefined ? never : T | string) {}
>t : Symbol(t, Decl(wideningWithTopLevelTypeParameter.ts, 13, 16))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 12, 19))
>T : Symbol(T, Decl(wideningWithTopLevelTypeParameter.ts, 12, 19))
}

const c = new FormControl3('');  // string
>c : Symbol(c, Decl(wideningWithTopLevelTypeParameter.ts, 16, 5))
>FormControl3 : Symbol(FormControl3, Decl(wideningWithTopLevelTypeParameter.ts, 10, 31))

