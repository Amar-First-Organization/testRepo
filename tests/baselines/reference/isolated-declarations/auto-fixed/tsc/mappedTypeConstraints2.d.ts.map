//// [tests/cases/conformance/types/mapped/mappedTypeConstraints2.ts] ////



/// [Declarations] ////



//// [mappedTypeConstraints2.d.ts]
type Mapped1<K extends string> = {
    [P in K]: {
        a: P;
    };
};
declare function f1<K extends string>(obj: Mapped1<K>, key: K): void;
type Mapped2<K extends string> = {
    [P in K as `get${P}`]: {
        a: P;
    };
};
declare function f2<K extends string>(obj: Mapped2<K>, key: `get${K}`): void;
type Mapped3<K extends string> = {
    [P in K as Uppercase<P>]: {
        a: P;
    };
};
declare function f3<K extends string>(obj: Mapped3<K>, key: Uppercase<K>): void;
type Foo<T extends string> = {
    [RemappedT in T as `get${RemappedT}`]: RemappedT;
};
declare const get: <T extends string>(t: T, foo: Foo<T>) => T;
interface Bounds {
    min: number;
    max: number;
}
type NumericBoundsOf<T> = {
    [K in keyof T as T[K] extends number | undefined ? K : never]: Bounds;
};
declare function validate<T extends object>(obj: T, bounds: NumericBoundsOf<T>): boolean;
type ObjectWithUnderscoredKeys<K extends string> = {
    [k in K as `_${k}`]: true;
};
declare function genericTest<K extends string>(objectWithUnderscoredKeys: ObjectWithUnderscoredKeys<K>, key: K): void;
//# sourceMappingURL=mappedTypeConstraints2.d.ts.map

/// [Declarations Maps] ////


//// [mappedTypeConstraints2.d.ts.map]
{"version":3,"file":"mappedTypeConstraints2.d.ts","sourceRoot":"","sources":["mappedTypeConstraints2.ts"],"names":[],"mappings":"AAAA,KAAK,OAAO,CAAC,CAAC,SAAS,MAAM,IAAI;KAAG,CAAC,IAAI,CAAC,GAAG;QAAE,CAAC,EAAE,CAAC,CAAA;KAAE;CAAE,CAAC;AAExD,iBAAS,EAAE,CAAC,CAAC,SAAS,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAE3D;AAED,KAAK,OAAO,CAAC,CAAC,SAAS,MAAM,IAAI;KAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,EAAE,GAAG;QAAE,CAAC,EAAE,CAAC,CAAA;KAAE;CAAE,CAAC;AAErE,iBAAS,EAAE,CAAC,CAAC,SAAS,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG,IAAI,CAEnE;AAED,KAAK,OAAO,CAAC,CAAC,SAAS,MAAM,IAAI;KAAG,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG;QAAE,CAAC,EAAE,CAAC,CAAA;KAAE;CAAE,CAAC;AAExE,iBAAS,EAAE,CAAC,CAAC,SAAS,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAEtE;AAID,KAAK,GAAG,CAAC,CAAC,SAAS,MAAM,IAAI;KACxB,SAAS,IAAI,CAAC,IAAI,MAAM,SAAS,EAAE,GAAG,SAAS;CACnD,CAAC;AAEF,QAAA,MAAM,GAAG,wBAAyB,CAAC,OAAO,IAAI,CAAC,CAAC,KAAG,CAAmB,CAAC;AAIvE,UAAU,MAAM;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;CACf;AAED,KAAK,eAAe,CAAC,CAAC,IAAI;KACrB,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,MAAM,GAAG,SAAS,GAAG,CAAC,GAAG,KAAK,GAAG,MAAM;CACxE,CAAA;AAED,iBAAS,QAAQ,CAAC,CAAC,SAAS,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,OAAO,CAS/E;AAID,KAAK,yBAAyB,CAAC,CAAC,SAAS,MAAM,IAAI;KAC9C,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI;CAC5B,CAAC;AAEF,iBAAS,WAAW,CAAC,CAAC,SAAS,MAAM,EAAE,yBAAyB,EAAE,yBAAyB,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAE5G"}

//// https://sokra.github.io/source-map-visualization#base64,dHlwZSBNYXBwZWQxPEsgZXh0ZW5kcyBzdHJpbmc+ID0gew0KICAgIFtQIGluIEtdOiB7DQogICAgICAgIGE6IFA7DQogICAgfTsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGYxPEsgZXh0ZW5kcyBzdHJpbmc+KG9iajogTWFwcGVkMTxLPiwga2V5OiBLKTogdm9pZDsNCnR5cGUgTWFwcGVkMjxLIGV4dGVuZHMgc3RyaW5nPiA9IHsNCiAgICBbUCBpbiBLIGFzIGBnZXQke1B9YF06IHsNCiAgICAgICAgYTogUDsNCiAgICB9Ow0KfTsNCmRlY2xhcmUgZnVuY3Rpb24gZjI8SyBleHRlbmRzIHN0cmluZz4ob2JqOiBNYXBwZWQyPEs+LCBrZXk6IGBnZXQke0t9YCk6IHZvaWQ7DQp0eXBlIE1hcHBlZDM8SyBleHRlbmRzIHN0cmluZz4gPSB7DQogICAgW1AgaW4gSyBhcyBVcHBlcmNhc2U8UD5dOiB7DQogICAgICAgIGE6IFA7DQogICAgfTsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGYzPEsgZXh0ZW5kcyBzdHJpbmc+KG9iajogTWFwcGVkMzxLPiwga2V5OiBVcHBlcmNhc2U8Sz4pOiB2b2lkOw0KdHlwZSBGb288VCBleHRlbmRzIHN0cmluZz4gPSB7DQogICAgW1JlbWFwcGVkVCBpbiBUIGFzIGBnZXQke1JlbWFwcGVkVH1gXTogUmVtYXBwZWRUOw0KfTsNCmRlY2xhcmUgY29uc3QgZ2V0OiA8VCBleHRlbmRzIHN0cmluZz4odDogVCwgZm9vOiBGb288VD4pID0+IFQ7DQppbnRlcmZhY2UgQm91bmRzIHsNCiAgICBtaW46IG51bWJlcjsNCiAgICBtYXg6IG51bWJlcjsNCn0NCnR5cGUgTnVtZXJpY0JvdW5kc09mPFQ+ID0gew0KICAgIFtLIGluIGtleW9mIFQgYXMgVFtLXSBleHRlbmRzIG51bWJlciB8IHVuZGVmaW5lZCA/IEsgOiBuZXZlcl06IEJvdW5kczsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIHZhbGlkYXRlPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCwgYm91bmRzOiBOdW1lcmljQm91bmRzT2Y8VD4pOiBib29sZWFuOw0KdHlwZSBPYmplY3RXaXRoVW5kZXJzY29yZWRLZXlzPEsgZXh0ZW5kcyBzdHJpbmc+ID0gew0KICAgIFtrIGluIEsgYXMgYF8ke2t9YF06IHRydWU7DQp9Ow0KZGVjbGFyZSBmdW5jdGlvbiBnZW5lcmljVGVzdDxLIGV4dGVuZHMgc3RyaW5nPihvYmplY3RXaXRoVW5kZXJzY29yZWRLZXlzOiBPYmplY3RXaXRoVW5kZXJzY29yZWRLZXlzPEs+LCBrZXk6IEspOiB2b2lkOw0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwcGVkVHlwZUNvbnN0cmFpbnRzMi5kLnRzLm1hcA==,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGVkVHlwZUNvbnN0cmFpbnRzMi5kLnRzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFwcGVkVHlwZUNvbnN0cmFpbnRzMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxLQUFLLE9BQU8sQ0FBQyxDQUFDLFNBQVMsTUFBTSxJQUFJO0tBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRztRQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7S0FBRTtDQUFFLENBQUM7QUFFeEQsaUJBQVMsRUFBRSxDQUFDLENBQUMsU0FBUyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FFM0Q7QUFFRCxLQUFLLE9BQU8sQ0FBQyxDQUFDLFNBQVMsTUFBTSxJQUFJO0tBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxHQUFHO1FBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUFFO0NBQUUsQ0FBQztBQUVyRSxpQkFBUyxFQUFFLENBQUMsQ0FBQyxTQUFTLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FFbkU7QUFFRCxLQUFLLE9BQU8sQ0FBQyxDQUFDLFNBQVMsTUFBTSxJQUFJO0tBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUc7UUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQUU7Q0FBRSxDQUFDO0FBRXhFLGlCQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBRXRFO0FBSUQsS0FBSyxHQUFHLENBQUMsQ0FBQyxTQUFTLE1BQU0sSUFBSTtLQUN4QixTQUFTLElBQUksQ0FBQyxJQUFJLE1BQU0sU0FBUyxFQUFFLEdBQUcsU0FBUztDQUNuRCxDQUFDO0FBRUYsUUFBQSxNQUFNLEdBQUcsd0JBQXlCLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQW1CLENBQUM7QUFJdkUsVUFBVSxNQUFNO0lBQ1osR0FBRyxFQUFFLE1BQU0sQ0FBQztJQUNaLEdBQUcsRUFBRSxNQUFNLENBQUM7Q0FDZjtBQUVELEtBQUssZUFBZSxDQUFDLENBQUMsSUFBSTtLQUNyQixDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLE1BQU0sR0FBRyxTQUFTLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxNQUFNO0NBQ3hFLENBQUE7QUFFRCxpQkFBUyxRQUFRLENBQUMsQ0FBQyxTQUFTLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQVMvRTtBQUlELEtBQUsseUJBQXlCLENBQUMsQ0FBQyxTQUFTLE1BQU0sSUFBSTtLQUM5QyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSTtDQUM1QixDQUFDO0FBRUYsaUJBQVMsV0FBVyxDQUFDLENBQUMsU0FBUyxNQUFNLEVBQUUseUJBQXlCLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBRTVHIn0=,dHlwZSBNYXBwZWQxPEsgZXh0ZW5kcyBzdHJpbmc+ID0geyBbUCBpbiBLXTogeyBhOiBQIH0gfTsKCmZ1bmN0aW9uIGYxPEsgZXh0ZW5kcyBzdHJpbmc+KG9iajogTWFwcGVkMTxLPiwga2V5OiBLKTogdm9pZCB7CiAgICBjb25zdCB4OiB7IGE6IEsgfSA9IG9ialtrZXldOwp9Cgp0eXBlIE1hcHBlZDI8SyBleHRlbmRzIHN0cmluZz4gPSB7IFtQIGluIEsgYXMgYGdldCR7UH1gXTogeyBhOiBQIH0gfTsKCmZ1bmN0aW9uIGYyPEsgZXh0ZW5kcyBzdHJpbmc+KG9iajogTWFwcGVkMjxLPiwga2V5OiBgZ2V0JHtLfWApOiB2b2lkIHsKICAgIGNvbnN0IHg6IHsgYTogSyB9ID0gb2JqW2tleV07ICAvLyBFcnJvcgp9Cgp0eXBlIE1hcHBlZDM8SyBleHRlbmRzIHN0cmluZz4gPSB7IFtQIGluIEsgYXMgVXBwZXJjYXNlPFA+XTogeyBhOiBQIH0gfTsKCmZ1bmN0aW9uIGYzPEsgZXh0ZW5kcyBzdHJpbmc+KG9iajogTWFwcGVkMzxLPiwga2V5OiBVcHBlcmNhc2U8Sz4pOiB2b2lkIHsKICAgIGNvbnN0IHg6IHsgYTogSyB9ID0gb2JqW2tleV07ICAvLyBFcnJvcgp9CgovLyBSZXBybyBmcm9tICM0Nzc5NAoKdHlwZSBGb288VCBleHRlbmRzIHN0cmluZz4gPSB7CiAgICBbUmVtYXBwZWRUIGluIFQgYXMgYGdldCR7UmVtYXBwZWRUfWBdOiBSZW1hcHBlZFQ7Cn07Cgpjb25zdCBnZXQgPSA8VCBleHRlbmRzIHN0cmluZz4odDogVCwgZm9vOiBGb288VD4pOiBUID0+IGZvb1tgZ2V0JHt0fWBdOyAgLy8gVHlwZSAnRm9vPFQ+W2BnZXQke1R9YF0nIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ1QnCgovLyBSZXBybyBmcm9tICM0ODYyNgoKaW50ZXJmYWNlIEJvdW5kcyB7CiAgICBtaW46IG51bWJlcjsKICAgIG1heDogbnVtYmVyOwp9Cgp0eXBlIE51bWVyaWNCb3VuZHNPZjxUPiA9IHsKICAgIFtLIGluIGtleW9mIFQgYXMgVFtLXSBleHRlbmRzIG51bWJlciB8IHVuZGVmaW5lZCA/IEsgOiBuZXZlcl06IEJvdW5kczsKfQoKZnVuY3Rpb24gdmFsaWRhdGU8VCBleHRlbmRzIG9iamVjdD4ob2JqOiBULCBib3VuZHM6IE51bWVyaWNCb3VuZHNPZjxUPik6IGJvb2xlYW4gewogICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHsKICAgICAgICBjb25zdCBib3VuZHNGb3JLZXkgPSBib3VuZHNba2V5IGFzIGtleW9mIE51bWVyaWNCb3VuZHNPZjxUPl07CiAgICAgICAgaWYgKGJvdW5kc0ZvcktleSkgewogICAgICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSBib3VuZHNGb3JLZXk7CiAgICAgICAgICAgIGlmIChtaW4gPiB2YWwgfHwgbWF4IDwgdmFsKSByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCi8vIHJlcHJvIGZyb20gIzUwMDMwCgp0eXBlIE9iamVjdFdpdGhVbmRlcnNjb3JlZEtleXM8SyBleHRlbmRzIHN0cmluZz4gPSB7CiAgICBbayBpbiBLIGFzIGBfJHtrfWBdOiB0cnVlOwp9OwoKZnVuY3Rpb24gZ2VuZXJpY1Rlc3Q8SyBleHRlbmRzIHN0cmluZz4ob2JqZWN0V2l0aFVuZGVyc2NvcmVkS2V5czogT2JqZWN0V2l0aFVuZGVyc2NvcmVkS2V5czxLPiwga2V5OiBLKTogdm9pZCB7CiAgY29uc3Qgc2hvdWxkQmVUcnVlOiB0cnVlID0gb2JqZWN0V2l0aFVuZGVyc2NvcmVkS2V5c1tgXyR7a2V5fWBdOwp9Cg==

