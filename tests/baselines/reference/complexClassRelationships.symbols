=== tests/cases/compiler/complexClassRelationships.ts ===
// There should be no errors in this file

class BaseCollection<T extends Base> {
>BaseCollection : Symbol(BaseCollection, Decl(complexClassRelationships.ts, 0, 0))
>T : Symbol(T, Decl(complexClassRelationships.ts, 2, 21))
>Base : Symbol(Base, Decl(complexClassRelationships.ts, 6, 1))

    constructor(f: () => T) {
>f : Symbol(f, Decl(complexClassRelationships.ts, 3, 16))
>T : Symbol(T, Decl(complexClassRelationships.ts, 2, 21))

        (item: Thing) => { return [item.Components]; };
>item : Symbol(item, Decl(complexClassRelationships.ts, 4, 9))
>Thing : Symbol(Thing, Decl(complexClassRelationships.ts, 16, 1))
>item.Components : Symbol(Thing.Components, Decl(complexClassRelationships.ts, 18, 13))
>item : Symbol(item, Decl(complexClassRelationships.ts, 4, 9))
>Components : Symbol(Thing.Components, Decl(complexClassRelationships.ts, 18, 13))
    }
}
class Base {
>Base : Symbol(Base, Decl(complexClassRelationships.ts, 6, 1))

    ownerCollection: BaseCollection<Base>;
>ownerCollection : Symbol(ownerCollection, Decl(complexClassRelationships.ts, 7, 12))
>BaseCollection : Symbol(BaseCollection, Decl(complexClassRelationships.ts, 0, 0))
>Base : Symbol(Base, Decl(complexClassRelationships.ts, 6, 1))
}

class Derived extends Base {
>Derived : Symbol(Derived, Decl(complexClassRelationships.ts, 9, 1))
>Base : Symbol(Base, Decl(complexClassRelationships.ts, 6, 1))

    public static createEmpty(): Derived {
>createEmpty : Symbol(Derived.createEmpty, Decl(complexClassRelationships.ts, 11, 28))
>Derived : Symbol(Derived, Decl(complexClassRelationships.ts, 9, 1))

        var item = new Derived();
>item : Symbol(item, Decl(complexClassRelationships.ts, 13, 11))
>Derived : Symbol(Derived, Decl(complexClassRelationships.ts, 9, 1))

        return item;
>item : Symbol(item, Decl(complexClassRelationships.ts, 13, 11))
    }
}

class Thing {
>Thing : Symbol(Thing, Decl(complexClassRelationships.ts, 16, 1))

    public get Components(): ComponentCollection<any> { return null }
>Components : Symbol(Components, Decl(complexClassRelationships.ts, 18, 13))
>ComponentCollection : Symbol(ComponentCollection, Decl(complexClassRelationships.ts, 20, 1))
}

class ComponentCollection<T> {
>ComponentCollection : Symbol(ComponentCollection, Decl(complexClassRelationships.ts, 20, 1))
>T : Symbol(T, Decl(complexClassRelationships.ts, 22, 26))

    private static sortComponents(p: Foo) {
>sortComponents : Symbol(ComponentCollection.sortComponents, Decl(complexClassRelationships.ts, 22, 30))
>p : Symbol(p, Decl(complexClassRelationships.ts, 23, 34))
>Foo : Symbol(Foo, Decl(complexClassRelationships.ts, 26, 1))

        return p.prop1;
>p.prop1 : Symbol(Foo.prop1, Decl(complexClassRelationships.ts, 28, 11))
>p : Symbol(p, Decl(complexClassRelationships.ts, 23, 34))
>prop1 : Symbol(Foo.prop1, Decl(complexClassRelationships.ts, 28, 11))
    }
}

class Foo {
>Foo : Symbol(Foo, Decl(complexClassRelationships.ts, 26, 1))

    public get prop1() {
>prop1 : Symbol(prop1, Decl(complexClassRelationships.ts, 28, 11))

        return new GenericType<string>(this);
>GenericType : Symbol(GenericType, Decl(complexClassRelationships.ts, 38, 1))
>this : Symbol(Foo, Decl(complexClassRelationships.ts, 26, 1))
    }
    public populate() {
>populate : Symbol(populate, Decl(complexClassRelationships.ts, 31, 5))

        this.prop2;
>this.prop2 : Symbol(prop2, Decl(complexClassRelationships.ts, 34, 5))
>this : Symbol(Foo, Decl(complexClassRelationships.ts, 26, 1))
>prop2 : Symbol(prop2, Decl(complexClassRelationships.ts, 34, 5))
    }
    public get prop2(): BaseCollection<Derived> {
>prop2 : Symbol(prop2, Decl(complexClassRelationships.ts, 34, 5))
>BaseCollection : Symbol(BaseCollection, Decl(complexClassRelationships.ts, 0, 0))
>Derived : Symbol(Derived, Decl(complexClassRelationships.ts, 9, 1))

        return new BaseCollection<Derived>(Derived.createEmpty);
>BaseCollection : Symbol(BaseCollection, Decl(complexClassRelationships.ts, 0, 0))
>Derived : Symbol(Derived, Decl(complexClassRelationships.ts, 9, 1))
>Derived.createEmpty : Symbol(Derived.createEmpty, Decl(complexClassRelationships.ts, 11, 28))
>Derived : Symbol(Derived, Decl(complexClassRelationships.ts, 9, 1))
>createEmpty : Symbol(Derived.createEmpty, Decl(complexClassRelationships.ts, 11, 28))
    }
}

class GenericType<T> {
>GenericType : Symbol(GenericType, Decl(complexClassRelationships.ts, 38, 1))
>T : Symbol(T, Decl(complexClassRelationships.ts, 40, 18))

    constructor(parent: FooBase) { }
>parent : Symbol(parent, Decl(complexClassRelationships.ts, 41, 16))
>FooBase : Symbol(FooBase, Decl(complexClassRelationships.ts, 42, 1))
}

class FooBase {
>FooBase : Symbol(FooBase, Decl(complexClassRelationships.ts, 42, 1))

    public populate() {
>populate : Symbol(populate, Decl(complexClassRelationships.ts, 44, 15))

    }
}
