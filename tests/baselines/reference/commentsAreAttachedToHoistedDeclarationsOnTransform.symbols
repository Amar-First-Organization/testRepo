=== tests/cases/compiler/commentsAreAttachedToHoistedDeclarationsOnTransform.ts ===
async function example() {
>example : Symbol(example, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 0, 0))

    // result.value will be promise
    const promise = Promise.resolve("foo");
>promise : Symbol(promise, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 2, 9))
>Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))

    await promise;
>promise : Symbol(promise, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 2, 9))

    // result.value will be "foo"
    return "foo";
}

async function example2() {
>example2 : Symbol(example2, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 7, 1))

    // test abc
    let abc;
>abc : Symbol(abc, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 11, 7))

    // test def
    let def,
>def : Symbol(def, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 14, 7))

        // ghi
        ghi;
>ghi : Symbol(ghi, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 14, 12))


    // result.value will be promise
    const promise = Promise.resolve("foo");
>promise : Symbol(promise, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 20, 9))
>Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))

    await promise;
>promise : Symbol(promise, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 20, 9))

    // result.value will be "foo"
    return "foo";
}

async function example3() {
>example3 : Symbol(example3, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 25, 1))

  // comment1
  let a = 1;
>a : Symbol(a, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 29, 5))

  // comment2
  let b;
>b : Symbol(b, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 31, 5))
}

async function example4() {
>example4 : Symbol(example4, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 32, 1))

  /** comment1 */
  let a = 1;
>a : Symbol(a, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 36, 5))

  /** comment2 */
  let b;
>b : Symbol(b, Decl(commentsAreAttachedToHoistedDeclarationsOnTransform.ts, 38, 5))
}
