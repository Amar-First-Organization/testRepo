=== tests/cases/conformance/inlineConst/inlineConst.ts ===
declare function output(x: any, y?: any)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>x : Symbol(x, Decl(inlineConst.ts, 0, 24))
>y : Symbol(y, Decl(inlineConst.ts, 0, 31))

declare function bazz()
>bazz : Symbol(bazz, Decl(inlineConst.ts, 0, 40))

declare function bazzz()
>bazzz : Symbol(bazzz, Decl(inlineConst.ts, 1, 23))

const a = 1 + 2;
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

const foo = {
>foo : Symbol(foo, Decl(inlineConst.ts, 5, 5))

    a: 123
>a : Symbol(a, Decl(inlineConst.ts, 5, 13))
}
const bar = {
>bar : Symbol(bar, Decl(inlineConst.ts, 8, 5))

    a
>a : Symbol(a, Decl(inlineConst.ts, 8, 13))
}
class Foo {
>Foo : Symbol(Foo, Decl(inlineConst.ts, 10, 1))

    a = 456
>a : Symbol(Foo.a, Decl(inlineConst.ts, 11, 11))
}
class Bar {
>Bar : Symbol(Bar, Decl(inlineConst.ts, 13, 1))

    get a() { return 1 }
>a : Symbol(Bar.a, Decl(inlineConst.ts, 14, 11), Decl(inlineConst.ts, 15, 24))

    set a(v) { }
>a : Symbol(Bar.a, Decl(inlineConst.ts, 14, 11), Decl(inlineConst.ts, 15, 24))
>v : Symbol(v, Decl(inlineConst.ts, 16, 10))
}
class Baz {
>Baz : Symbol(Baz, Decl(inlineConst.ts, 17, 1))

    _a: number = 1
>_a : Symbol(Baz._a, Decl(inlineConst.ts, 18, 11))

    get [a]() { return a }
>[a] : Symbol(Baz[a], Decl(inlineConst.ts, 19, 18))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

    set [a](a) { this._a = a }
>[a] : Symbol(Baz[a], Decl(inlineConst.ts, 21, 26))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>a : Symbol(a, Decl(inlineConst.ts, 22, 12))
>this._a : Symbol(Baz._a, Decl(inlineConst.ts, 18, 11))
>this : Symbol(Baz, Decl(inlineConst.ts, 17, 1))
>_a : Symbol(Baz._a, Decl(inlineConst.ts, 18, 11))
>a : Symbol(a, Decl(inlineConst.ts, 22, 12))
}

if (a) { }
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

if (a === 2) { }
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

const b = a + 1
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

if (b) { }
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

const c = a + b
>c : Symbol(c, Decl(inlineConst.ts, 29, 5))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

if (c) { }
>c : Symbol(c, Decl(inlineConst.ts, 29, 5))

if (foo.a) {
>foo.a : Symbol(a, Decl(inlineConst.ts, 5, 13))
>foo : Symbol(foo, Decl(inlineConst.ts, 5, 5))
>a : Symbol(a, Decl(inlineConst.ts, 5, 13))

    a.toString()
>a.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
}
if (foo[a]) {
>foo : Symbol(foo, Decl(inlineConst.ts, 5, 5))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

    a['toString']()
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>'toString' : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
}
for (let i = 0; i < 10; ++i) {
>i : Symbol(i, Decl(inlineConst.ts, 37, 8))
>i : Symbol(i, Decl(inlineConst.ts, 37, 8))
>i : Symbol(i, Decl(inlineConst.ts, 37, 8))

    output(i)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>i : Symbol(i, Decl(inlineConst.ts, 37, 8))
}
output(+a)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

output(-a)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

output(~a)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))

output(a < b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

output(a > b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

output(a <= b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

output(a >= b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

output(a == b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

output(a != b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

output(a === b)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>b : Symbol(b, Decl(inlineConst.ts, 27, 5))

const f = a, g = bazz
>f : Symbol(f, Decl(inlineConst.ts, 50, 5))
>a : Symbol(a, Decl(inlineConst.ts, 4, 5))
>g : Symbol(g, Decl(inlineConst.ts, 50, 12))
>bazz : Symbol(bazz, Decl(inlineConst.ts, 0, 40))

if (f) { }
>f : Symbol(f, Decl(inlineConst.ts, 50, 5))

if (g) { }
>g : Symbol(g, Decl(inlineConst.ts, 50, 12))

const h = (bazz() || bazzz())
>h : Symbol(h, Decl(inlineConst.ts, 53, 5))
>bazz : Symbol(bazz, Decl(inlineConst.ts, 0, 40))
>bazzz : Symbol(bazzz, Decl(inlineConst.ts, 1, 23))

const i = "test"
>i : Symbol(i, Decl(inlineConst.ts, 54, 5))

output(i, i.length)
>output : Symbol(output, Decl(inlineConst.ts, 0, 0))
>i : Symbol(i, Decl(inlineConst.ts, 54, 5))
>i.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(inlineConst.ts, 54, 5))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

const args: string[] = []
>args : Symbol(args, Decl(inlineConst.ts, 56, 5))

const configPath = args.forEach(arg => arg.lastIndexOf(i, 0) === 0 && arg.substr(i.length))
>configPath : Symbol(configPath, Decl(inlineConst.ts, 57, 5))
>args.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
>args : Symbol(args, Decl(inlineConst.ts, 56, 5))
>forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(inlineConst.ts, 57, 32))
>arg.lastIndexOf : Symbol(String.lastIndexOf, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(inlineConst.ts, 57, 32))
>lastIndexOf : Symbol(String.lastIndexOf, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(inlineConst.ts, 54, 5))
>arg.substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(inlineConst.ts, 57, 32))
>substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --))
>i.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(inlineConst.ts, 54, 5))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

const j = "123" + "456"
>j : Symbol(j, Decl(inlineConst.ts, 58, 5))

if (j === "123456") { }
>j : Symbol(j, Decl(inlineConst.ts, 58, 5))

if (j) { }
>j : Symbol(j, Decl(inlineConst.ts, 58, 5))

