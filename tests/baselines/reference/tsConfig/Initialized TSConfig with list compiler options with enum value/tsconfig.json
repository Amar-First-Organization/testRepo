{
  "compilerOptions": {
    /* Overview of all Compiler Options: https://www.typescriptlang.org/docs/handbook/compiler-options.html */

    /* Basic Options */
    // "incremental": true,                              /* Enable incremental compilation */
    "target": "es5",                                     /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "commonjs",                                /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["es5","es2015.core"],                        /* Specify library files to be included in the compilation. */
    // "allowJs": true,                                  /* Allow javascript files to be compiled. */
    // "checkJs": true,                                  /* Report errors in .js files. */
    // "jsx": "preserve",                                /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                              /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                           /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                                /* Generates corresponding '.map' file. */
    // "outFile": "./",                                  /* Concatenate and emit output to single file. */
    // "outDir": "./",                                   /* Redirect output structure to the directory. */
    // "rootDir": "./",                                  /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                                /* Enable project compilation */
    // "tsBuildInfoFile": "./",                          /* Specify file to store incremental compilation information */
    // "removeComments": true,                           /* Do not emit comments to output. */
    // "noEmit": true,                                   /* Do not emit outputs. */
    // "importHelpers": true,                            /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,                       /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,                          /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Advanced Options */
    // "listFiles": true,                                /* Print names of files part of the compilation. */
    // "listEmittedFiles": true,                         /* Print names of generated files part of the compilation. */
    // "traceResolution": true,                          /* Enable tracing of the name resolution process. */
    // "diagnostics": true,                              /* Show diagnostic information. */
    // "extendedDiagnostics": true,                      /* Show verbose diagnostic information. */
    // "generateCpuProfile": "./",                       /* Generates a CPU profile. */
    // "locale": "",                                     /* The locale used when displaying messages to the user (e.g. 'en-us') */
    // "emitDeclarationOnly": true,                      /* Only emit '.d.ts' declaration files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'. */
    // "resolveJsonModule": true,                        /* Include modules imported with '.json' extension */
    // "out": "",                                        /* [Deprecated] Use '--outFile' instead. Concatenate and emit output to single file */
    // "reactNamespace": "",                             /* [Deprecated] Use '--jsxFactory' instead. Specify the object invoked for createElement when targeting 'react' JSX emit */
    // "skipDefaultLibCheck": true,                      /* [Deprecated] Use '--skipLibCheck' instead. Skip type checking of default library declaration files. */
    // "charset": "",                                    /* The character set of the input files. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix). */
    // "noErrorTruncation": true,                        /* Do not truncate error messages. */
    // "noLib": true,                                    /* Do not include the default library file (lib.d.ts). */
    // "noResolve": true,                                /* Do not add triple-slash references or imported modules to the list of compiled files. */
    // "stripInternal": true,                            /* Do not emit declarations for code that has an '@internal' annotation. */
    // "disableSizeLimit": true,                         /* Disable size limitations on JavaScript projects. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable use of source files instead of declaration files from referenced projects. */
    // "noImplicitUseStrict": true,                      /* Do not emit 'use strict' directives in module output. */
    // "noEmitHelpers": true,                            /* Do not generate custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Do not emit outputs if any errors were reported. */
    // "preserveConstEnums": true,                       /* Do not erase const enum declarations in generated code. */
    // "declarationDir": "./",                           /* Output directory for generated declaration files. */
    // "skipLibCheck": true,                             /* Skip type checking of declaration files. */
    // "allowUnusedLabels": true,                        /* Do not report errors on unused labels. */
    // "allowUnreachableCode": true,                     /* Do not report errors on unreachable code. */
    // "suppressExcessPropertyErrors": true,             /* Suppress excess property checks for object literals. */
    // "suppressImplicitAnyIndexErrors": true,           /* Suppress noImplicitAny errors for indexing objects lacking index signatures. */
    "forceConsistentCasingInFileNames": true,            /* Disallow inconsistently-cased references to the same file. */
    // "maxNodeModuleJsDepth": 1,                        /* The maximum dependency depth to search under node_modules and load JavaScript files. */
    // "noStrictGenericChecks": true,                    /* Disable strict checking of generic signatures in function types. */
    // "useDefineForClassFields": true,                  /* Emit class fields with Define instead of Set. */
    // "keyofStringsOnly": true,                         /* Resolve 'keyof' to string valued property names only (no numbers or symbols). */

    /* Strict Type-Checking Options */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* Enable strict null checks. */
    // "strictFunctionTypes": true,                      /* Enable strict checking of function types. */
    // "strictBindCallApply": true,                      /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,             /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                           /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                             /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                           /* Report errors on unused locals. */
    // "noUnusedParameters": true,                       /* Report errors on unused parameters. */
    // "noImplicitReturns": true,                        /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,               /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",                       /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                                  /* Base directory to resolve non-absolute module names. */
    // "paths": {},                                      /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                                   /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                                  /* List of folders to include type definitions from. */
    // "types": [],                                      /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,             /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true                              /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,                         /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                                 /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                            /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,                   /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,                    /* Enables experimental support for emitting type metadata for decorators. */
  }
}
