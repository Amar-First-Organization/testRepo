=== tests/cases/compiler/server.ts ===
var foo = 2;
>foo : Symbol(foo, Decl(server.ts, 0, 3))

foo = 3;
>foo : Symbol(foo, Decl(server.ts, 0, 3))

var baz = 3;
>baz : Symbol(baz, Decl(server.ts, 3, 3))

baz = 4;
>baz : Symbol(baz, Decl(server.ts, 3, 3))

var buzz = 10;
>buzz : Symbol(buzz, Decl(server.ts, 6, 3))

buzz += 3;
>buzz : Symbol(buzz, Decl(server.ts, 6, 3))

var bizz = 8;
>bizz : Symbol(bizz, Decl(server.ts, 9, 3))

bizz++; // compiles to exports.bizz = bizz += 1
>bizz : Symbol(bizz, Decl(server.ts, 9, 3))

bizz--; // similarly
>bizz : Symbol(bizz, Decl(server.ts, 9, 3))

++bizz; // compiles to exports.bizz = ++bizz
>bizz : Symbol(bizz, Decl(server.ts, 9, 3))

for (foo of [1, 2]) {}
>foo : Symbol(foo, Decl(server.ts, 0, 3))

export var exportedFoo = 0;
>exportedFoo : Symbol(exportedFoo, Decl(server.ts, 16, 10))

for (exportedFoo of [1, 2]) {}
>exportedFoo : Symbol(exportedFoo, Decl(server.ts, 16, 10))

export var doubleExportedFoo = 0;
>doubleExportedFoo : Symbol(doubleExportedFoo, Decl(server.ts, 19, 10))

for (doubleExportedFoo of [1, 2]) {}
>doubleExportedFoo : Symbol(doubleExportedFoo, Decl(server.ts, 19, 10))

let bar = '';
>bar : Symbol(bar, Decl(server.ts, 22, 3))

for (bar in {}) {}
>bar : Symbol(bar, Decl(server.ts, 22, 3))

export { foo, bar, baz, baz as quux, buzz, bizz, doubleExportedFoo as otherFoo };
>foo : Symbol(foo, Decl(server.ts, 25, 8))
>bar : Symbol(bar, Decl(server.ts, 25, 13))
>baz : Symbol(baz, Decl(server.ts, 25, 18))
>baz : Symbol(baz, Decl(server.ts, 3, 3))
>quux : Symbol(quux, Decl(server.ts, 25, 23))
>buzz : Symbol(buzz, Decl(server.ts, 25, 36))
>bizz : Symbol(bizz, Decl(server.ts, 25, 42))
>doubleExportedFoo : Symbol(doubleExportedFoo, Decl(server.ts, 19, 10))
>otherFoo : Symbol(otherFoo, Decl(server.ts, 25, 48))

