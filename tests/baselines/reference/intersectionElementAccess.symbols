=== tests/cases/conformance/types/intersection/intersectionElementAccess.ts ===
let numberObject: number & { foo: any };
>numberObject : Symbol(numberObject, Decl(intersectionElementAccess.ts, 0, 3))
>foo : Symbol(foo, Decl(intersectionElementAccess.ts, 0, 28))

let stringObject: string & { foo: any };
>stringObject : Symbol(stringObject, Decl(intersectionElementAccess.ts, 1, 3))
>foo : Symbol(foo, Decl(intersectionElementAccess.ts, 1, 28))

let numberString: number & string;
>numberString : Symbol(numberString, Decl(intersectionElementAccess.ts, 2, 3))

let object: {
>object : Symbol(object, Decl(intersectionElementAccess.ts, 4, 3))

	[ index: number ]: { stringIndexer: any, numberIndexer: any },
>index : Symbol(index, Decl(intersectionElementAccess.ts, 5, 2))
>stringIndexer : Symbol(stringIndexer, Decl(intersectionElementAccess.ts, 5, 21))
>numberIndexer : Symbol(numberIndexer, Decl(intersectionElementAccess.ts, 5, 41))

	[ key: string]: { stringIndexer: any }
>key : Symbol(key, Decl(intersectionElementAccess.ts, 6, 2))
>stringIndexer : Symbol(stringIndexer, Decl(intersectionElementAccess.ts, 6, 18))
}

let a = object[numberObject];
>a : Symbol(a, Decl(intersectionElementAccess.ts, 9, 3))
>object : Symbol(object, Decl(intersectionElementAccess.ts, 4, 3))
>numberObject : Symbol(numberObject, Decl(intersectionElementAccess.ts, 0, 3))

let b = object[stringObject];
>b : Symbol(b, Decl(intersectionElementAccess.ts, 10, 3))
>object : Symbol(object, Decl(intersectionElementAccess.ts, 4, 3))
>stringObject : Symbol(stringObject, Decl(intersectionElementAccess.ts, 1, 3))

let c = object[numberString];
>c : Symbol(c, Decl(intersectionElementAccess.ts, 11, 3))
>object : Symbol(object, Decl(intersectionElementAccess.ts, 4, 3))
>numberString : Symbol(numberString, Decl(intersectionElementAccess.ts, 2, 3))

