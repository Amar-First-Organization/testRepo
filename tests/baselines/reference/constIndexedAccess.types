=== tests/cases/compiler/constIndexedAccess.ts ===

const enum numbers {
>numbers : numbers

	zero,
>zero : numbers

	one
>one : numbers
}

interface access {
>access : access

	0: string;
	1: number;
}

let test: access;
>test : access
>access : access

let s = test[0];
>s : string
>test[0] : string
>test : access
>0 : number

let n = test[1];
>n : number
>test[1] : number
>test : access
>1 : number

let s1 = test[numbers.zero];
>s1 : string
>test[numbers.zero] : string
>test : access
>numbers.zero : numbers
>numbers : typeof numbers
>zero : numbers

let n1 = test[numbers.one];
>n1 : number
>test[numbers.one] : number
>test : access
>numbers.one : numbers
>numbers : typeof numbers
>one : numbers

// TODO: Not working
const zero = 0;
>zero : number
>0 : number

const one = 1;
>one : number
>1 : number

let s2 = test[zero];
>s2 : any
>test[zero] : any
>test : access
>zero : number

let n2 = test[one];
>n2 : any
>test[one] : any
>test : access
>one : number

const zeroRef = zero;
>zeroRef : number
>zero : number

const oneRef = one;
>oneRef : number
>one : number

let s3 = test[zeroRef];
>s3 : any
>test[zeroRef] : any
>test : access
>zeroRef : number

let n3 = test[oneRef];
>n3 : any
>test[oneRef] : any
>test : access
>oneRef : number

const zeroRefEnum = numbers.zero;
>zeroRefEnum : numbers
>numbers.zero : numbers
>numbers : typeof numbers
>zero : numbers

const oneRefEnum = numbers.one;
>oneRefEnum : numbers
>numbers.one : numbers
>numbers : typeof numbers
>one : numbers

let s4 = test[zeroRefEnum];
>s4 : any
>test[zeroRefEnum] : any
>test : access
>zeroRefEnum : numbers

let n4 = test[oneRefEnum];
>n4 : any
>test[oneRefEnum] : any
>test : access
>oneRefEnum : numbers

