=== tests/cases/compiler/arrowFunctionParsingGenericInObject.ts ===
const fails1 = () => ({
>fails1 : Symbol(fails1, Decl(arrowFunctionParsingGenericInObject.ts, 0, 5))

    test: <T = undefined>(value: T): T => value,
>test : Symbol(test, Decl(arrowFunctionParsingGenericInObject.ts, 0, 23))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 1, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 1, 26))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 1, 11))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 1, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 1, 26))

    extraValue: () => {},
>extraValue : Symbol(extraValue, Decl(arrowFunctionParsingGenericInObject.ts, 1, 48))

})

const works1 = () => ({
>works1 : Symbol(works1, Decl(arrowFunctionParsingGenericInObject.ts, 5, 5))

    test: <T>(value: T): T => value,
>test : Symbol(test, Decl(arrowFunctionParsingGenericInObject.ts, 5, 23))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 6, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 6, 14))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 6, 11))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 6, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 6, 14))

    extraValue: () => {},
>extraValue : Symbol(extraValue, Decl(arrowFunctionParsingGenericInObject.ts, 6, 36))

})

const works2 = () => ({
>works2 : Symbol(works2, Decl(arrowFunctionParsingGenericInObject.ts, 10, 5))

    extraValue: () => {},
>extraValue : Symbol(extraValue, Decl(arrowFunctionParsingGenericInObject.ts, 10, 23))

    test: <T = undefined>(value: T): T => value,
>test : Symbol(test, Decl(arrowFunctionParsingGenericInObject.ts, 11, 25))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 12, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 12, 26))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 12, 11))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 12, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 12, 26))

})

const fails2 = () => ({
>fails2 : Symbol(fails2, Decl(arrowFunctionParsingGenericInObject.ts, 15, 5))

    extraValue: '',
>extraValue : Symbol(extraValue, Decl(arrowFunctionParsingGenericInObject.ts, 15, 23))

    test: <T = undefined>(value: T): T => value,
>test : Symbol(test, Decl(arrowFunctionParsingGenericInObject.ts, 16, 19))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 17, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 17, 26))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 17, 11))
>T : Symbol(T, Decl(arrowFunctionParsingGenericInObject.ts, 17, 11))
>value : Symbol(value, Decl(arrowFunctionParsingGenericInObject.ts, 17, 26))

})

