narrowUnionOfObjectsByPrimitiveProperty.ts(35,20): error TS2550: Property 'repeat' does not exist on type 'string'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
narrowUnionOfObjectsByPrimitiveProperty.ts(55,13): error TS2550: Property 'repeat' does not exist on type 'string'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
narrowUnionOfObjectsByPrimitiveProperty.ts(60,1): error TS2322: Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: string; other: string; } | { prop: number; other: number; }'.
  Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: number; other: number; }'.
    Types of property 'prop' are incompatible.
      Type 'string | number' is not assignable to type 'number'.
        Type 'string' is not assignable to type 'number'.
narrowUnionOfObjectsByPrimitiveProperty.ts(68,1): error TS2322: Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: string; other: string; } | { prop: number; other: number; }'.
  Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: number; other: number; }'.
    Types of property 'prop' are incompatible.
      Type 'string | number' is not assignable to type 'number'.
        Type 'string' is not assignable to type 'number'.
narrowUnionOfObjectsByPrimitiveProperty.ts(71,14): error TS2550: Property 'repeat' does not exist on type 'string'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.


==== narrowUnionOfObjectsByPrimitiveProperty.ts (5 errors) ====
    interface State<Type> {
      state: Type;
    }
    
    interface UserName {
      first: string;
      last?: string;
    }
    
    const nameState = {} as {
      value: string;
      state: State<string>;
    } | {
      value: UserName;
      state: State<UserName>;
    }
    
    if (typeof nameState.value === "string") {
      nameState.state satisfies  State<string>;
    } else {
      nameState.state satisfies State<UserName>;
    }
    
    
    declare const arr: [string, number] | [number, string];
    if (typeof arr[0] === "string") {
      arr[1] satisfies number;
    } else {
      arr[1] satisfies string;
    }
    
    
    function aStringOrANumber<T extends { a: string } | { a: number }>(param: T): T extends { a: string } ? string : T extends { a: number } ? number : never {
      if (typeof param.a === "string") {
        return param.a.repeat(3);
                       ~~~~~~
!!! error TS2550: Property 'repeat' does not exist on type 'string'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
      }
      if (typeof param.a === "number") {
        return Math.exp(param.a);
      }
      throw new Error()
    }
    
    aStringOrANumber({ a: "string" })
    aStringOrANumber({ a: 42 })
    
    
    // The following two tests ensure that the discriminativeness of property 'prop'
    // is treated differently in assignability and narrowing, and that the discriminativeness is properly cached.
    declare let obj: { prop: string, other: string } | { prop: number, other: number }
    
    // Here, we first perform narrowing, but the subsequent assignability should not be affected.
    // We expect an error there because of an incorrect value assigned to 'prop'.
    // See contextualTypeWithUnionTypeObjectLiteral.ts
    if(typeof obj.prop === "string") {
      obj.other.repeat(3);
                ~~~~~~
!!! error TS2550: Property 'repeat' does not exist on type 'string'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    } else {
      Math.exp(obj.other);
    }
    
    obj = { prop: Math.random() > 0.5 ? "whatever" : 42, other: "irrelevant" as never }
    ~~~
!!! error TS2322: Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: string; other: string; } | { prop: number; other: number; }'.
!!! error TS2322:   Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: number; other: number; }'.
!!! error TS2322:     Types of property 'prop' are incompatible.
!!! error TS2322:       Type 'string | number' is not assignable to type 'number'.
!!! error TS2322:         Type 'string' is not assignable to type 'number'.
    
    
    declare let obj2: { prop: string, other: string } | { prop: number, other: number }
    
    // Here, we first assign a value to 'obj2' and then perform narrowing.
    // We expect an error here because of an incorrect value assigned to 'prop', like above,
    // but the subsequent narrowing should not be affected by the assignability.
    obj2 = { prop: Math.random() > 0.5 ? "whatever" : 42, other: "irrelevant" as never }
    ~~~~
!!! error TS2322: Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: string; other: string; } | { prop: number; other: number; }'.
!!! error TS2322:   Type '{ prop: string | number; other: never; }' is not assignable to type '{ prop: number; other: number; }'.
!!! error TS2322:     Types of property 'prop' are incompatible.
!!! error TS2322:       Type 'string | number' is not assignable to type 'number'.
!!! error TS2322:         Type 'string' is not assignable to type 'number'.
    
    if(typeof obj2.prop === "string") {
      obj2.other.repeat(3);
                 ~~~~~~
!!! error TS2550: Property 'repeat' does not exist on type 'string'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    } else {
      Math.exp(obj2.other);
    }