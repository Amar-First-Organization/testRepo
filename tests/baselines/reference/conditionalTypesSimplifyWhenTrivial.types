=== tests/cases/compiler/conditionalTypesSimplifyWhenTrivial.ts ===
const fn1 = <Params>(
>fn1 : <Params>(params: Pick<Params, keyof Params>) => Params
><Params>(    params: Pick<Params, Exclude<keyof Params, never>>,): Params => params : <Params>(params: Pick<Params, keyof Params>) => Params

    params: Pick<Params, Exclude<keyof Params, never>>,
>params : Pick<Params, keyof Params>

): Params => params;
>params : Pick<Params, keyof Params>

function fn2<T>(x: Exclude<T, never>) {
>fn2 : <T>(x: T) => void
>x : T

    var y: T = x;
>y : T
>x : T

    x = y;
>x = y : T
>x : T
>y : T
}

const fn3 = <Params>(
>fn3 : <Params>(params: Pick<Params, keyof Params>) => Params
><Params>(    params: Pick<Params, Extract<keyof Params, keyof Params>>,): Params => params : <Params>(params: Pick<Params, keyof Params>) => Params

    params: Pick<Params, Extract<keyof Params, keyof Params>>,
>params : Pick<Params, keyof Params>

): Params => params;
>params : Pick<Params, keyof Params>

function fn4<T>(x: Extract<T, T>) {
>fn4 : <T>(x: T) => void
>x : T

    var y: T = x;
>y : T
>x : T

    x = y;
>x = y : T
>x : T
>y : T
}

