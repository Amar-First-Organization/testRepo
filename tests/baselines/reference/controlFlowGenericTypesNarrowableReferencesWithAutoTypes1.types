//// [tests/cases/compiler/controlFlowGenericTypesNarrowableReferencesWithAutoTypes1.ts] ////

=== controlFlowGenericTypesNarrowableReferencesWithAutoTypes1.ts ===
const foo_autoType = <T extends 1 | 2>(bar: T) => {
>foo_autoType : <T extends 1 | 2>(bar: T) => T
>             : ^ ^^^^^^^^^     ^^   ^^ ^^^^^^
><T extends 1 | 2>(bar: T) => {  let test1;  test1 = bar;  return test1;} : <T extends 1 | 2>(bar: T) => T
>                                                                         : ^ ^^^^^^^^^     ^^   ^^ ^^^^^^
>bar : T
>    : ^

  let test1;
>test1 : any

  test1 = bar;
>test1 = bar : T
>            : ^
>test1 : any
>bar : T
>    : ^

  return test1;
>test1 : T
>      : ^

};

const foo_autoArrayType = <T extends 1 | 2>(bar: T) => {
>foo_autoArrayType : <T extends 1 | 2>(bar: T) => T[]
>                  : ^ ^^^^^^^^^     ^^   ^^ ^^^^^^^^
><T extends 1 | 2>(bar: T) => {  let test1 = [];  test1.push(bar);  return test1;} : <T extends 1 | 2>(bar: T) => T[]
>                                                                                  : ^ ^^^^^^^^^     ^^   ^^ ^^^^^^^^
>bar : T
>    : ^

  let test1 = [];
>test1 : any[]
>      : ^^^^^
>[] : never[]
>   : ^^^^^^^

  test1.push(bar);
>test1.push(bar) : number
>                : ^^^^^^
>test1.push : (...items: any[]) => number
>           : ^^^^     ^^^^^^^^^^^^      
>test1 : any[]
>      : ^^^^^
>push : (...items: any[]) => number
>     : ^^^^     ^^^^^^^^^^^^      
>bar : T
>    : ^

  return test1;
>test1 : T[]
>      : ^^^

};

