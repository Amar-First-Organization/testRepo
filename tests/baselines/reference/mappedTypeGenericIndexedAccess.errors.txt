tests/cases/compiler/mappedTypeGenericIndexedAccess.ts(18,13): error TS2322: Type 'Types[T][]' is not assignable to type '{ first?: { a1: true; }[] | undefined; second?: { a2: true; }[] | undefined; third?: { a3: true; }[] | undefined; }[T]'.
  Type 'Types[T][]' is not assignable to type '{ a1: true; }[] & { a2: true; }[] & { a3: true; }[]'.
    Type 'Types[T][]' is not assignable to type '{ a1: true; }[]'.
      Type 'Types[T]' is not assignable to type '{ a1: true; }'.


==== tests/cases/compiler/mappedTypeGenericIndexedAccess.ts (1 errors) ====
    // Repro from #49242
    
    type Types = {
        first: { a1: true };
        second: { a2: true };
        third: { a3: true };
    }
    
    class Test {
        entries: { [T in keyof Types]?: Types[T][] };
    
        constructor() {
            this.entries = {};
        }
    
        addEntry<T extends keyof Types>(name: T, entry: Types[T]) {
            if (!this.entries[name]) {
                this.entries[name] = [];
                ~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type 'Types[T][]' is not assignable to type '{ first?: { a1: true; }[] | undefined; second?: { a2: true; }[] | undefined; third?: { a3: true; }[] | undefined; }[T]'.
!!! error TS2322:   Type 'Types[T][]' is not assignable to type '{ a1: true; }[] & { a2: true; }[] & { a3: true; }[]'.
!!! error TS2322:     Type 'Types[T][]' is not assignable to type '{ a1: true; }[]'.
!!! error TS2322:       Type 'Types[T]' is not assignable to type '{ a1: true; }'.
            }
            this.entries[name]?.push(entry);
        }
    }
    
    // Repro from #49338
    
    type TypesMap = {
        [0]: { foo: 'bar'; };
        [1]: { a: 'b'; };
    };
    
    type P<T extends keyof TypesMap> = { t: T; } & TypesMap[T];
    
    type TypeHandlers = {
        [T in keyof TypesMap]?: (p: P<T>) => void;
    };
    
    const typeHandlers: TypeHandlers = {
        [0]: (p) => console.log(p.foo),
        [1]: (p) => console.log(p.a),
    };
    
    const onSomeEvent = <T extends keyof TypesMap>(p: P<T>) =>
        typeHandlers[p.t]?.(p);
    