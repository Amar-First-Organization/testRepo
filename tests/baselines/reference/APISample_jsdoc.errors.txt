typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8913,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8913,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9173,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9173,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9523,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9523,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9547,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9547,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9634,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9634,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10799,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10799,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10810,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10810,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10820,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10820,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10895,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10895,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10952,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10952,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11006,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11006,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11026,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11026,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11036,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11036,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11070,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11070,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11073,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11073,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11077,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11077,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11095,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11095,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11121,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11121,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11124,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11124,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11136,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11136,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11166,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11166,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11200,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11200,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11211,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11211,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11235,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11235,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11243,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11243,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11247,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11247,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11277,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11277,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11320,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11320,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11507,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11507,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11509,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11509,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11513,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11513,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11515,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11515,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11517,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11517,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11519,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11519,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11521,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11521,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11530,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11530,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11532,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11532,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11534,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11534,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11536,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11536,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11538,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11538,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11540,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11540,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11542,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11542,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11544,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11544,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11546,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11546,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11548,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11548,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11550,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11550,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11552,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11552,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11554,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11554,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11556,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11556,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11558,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11558,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11568,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11568,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11570,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11570,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11572,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11572,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11574,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11574,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11584,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11584,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11656,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11656,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11658,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11658,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11660,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11660,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11662,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11662,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11738,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11738,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_jsdoc.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The original sources can be found
     *       at: https://github.com/YousefED/typescript-json-schema
     *           https://github.com/vega/ts-json-schema-generator
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var console: any;
    
    import * as ts from "typescript";
    
    // excerpted from https://github.com/YousefED/typescript-json-schema
    // (converted from a method and modified; for example, `this: any` to compensate, among other changes)
    function parseCommentsIntoDefinition(this: any,
                                         symbol: ts.Symbol,
                                         definition: {description?: string, [s: string]: string | undefined},
                                         otherAnnotations: { [s: string]: true}): void {
        if (!symbol) {
            return;
        }
    
        // the comments for a symbol
        let comments = symbol.getDocumentationComment(undefined);
    
        if (comments.length) {
            definition.description = comments.map(comment => comment.kind === "lineBreak" ? comment.text : comment.text.trim().replace(/\r\n/g, "\n")).join("");
        }
    
        // jsdocs are separate from comments
        const jsdocs = symbol.getJsDocTags();
        jsdocs.forEach(doc => {
            // if we have @TJS-... annotations, we have to parse them
            const { name, text } = doc;
            if (this.userValidationKeywords[name]) {
                definition[name] = this.parseValue(text);
            } else {
                // special annotations
                otherAnnotations[doc.name] = true;
            }
        });
    }
    
    
    // excerpted from https://github.com/vega/ts-json-schema-generator
    export interface Annotations {
        [name: string]: any;
    }
    function getAnnotations(this: any, node: ts.Node): Annotations | undefined {
        const symbol: ts.Symbol = (node as any).symbol;
        if (!symbol) {
            return undefined;
        }
    
        const jsDocTags: ts.JSDocTagInfo[] = symbol.getJsDocTags();
        if (!jsDocTags || !jsDocTags.length) {
            return undefined;
        }
    
        const annotations: Annotations = jsDocTags.reduce((result: Annotations, jsDocTag: ts.JSDocTagInfo) => {
            const value = this.parseJsDocTag(jsDocTag);
            if (value !== undefined) {
                result[jsDocTag.name] = value;
            }
    
            return result;
        }, {});
        return Object.keys(annotations).length ? annotations : undefined;
    }
    
    // these examples are artificial and mostly nonsensical
    function parseSpecificTags(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.Parameter) {
            return ts.getJSDocParameterTags(node as ts.ParameterDeclaration);
        }
        if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
            const func = node as ts.FunctionDeclaration;
            if (ts.hasJSDocParameterTags(func)) {
                const flat: ts.JSDocTag[] = [];
                for (const tags of func.parameters.map(ts.getJSDocParameterTags)) {
                    if (tags) flat.push(...tags);
                }
                return flat;
            }
        }
    }
    
    function getReturnTypeFromJSDoc(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
            return ts.getJSDocReturnType(node);
        }
        let type = ts.getJSDocType(node);
        if (type && type.kind === ts.SyntaxKind.FunctionType) {
            return (type as ts.FunctionTypeNode).type;
        }
    }
    
    function getAllTags(node: ts.Node) {
        ts.getJSDocTags(node);
    }
    
    function getSomeOtherTags(node: ts.Node) {
        const tags: (ts.JSDocTag | undefined)[] = [];
        tags.push(ts.getJSDocAugmentsTag(node));
        tags.push(ts.getJSDocClassTag(node));
        tags.push(ts.getJSDocReturnTag(node));
        const type = ts.getJSDocTypeTag(node);
        if (type) {
            tags.push(type);
        }
        tags.push(ts.getJSDocTemplateTag(node));
        return tags;
    }
    