//// [tests/cases/compiler/unconstrainedTypeComparisons.ts] ////

=== unconstrainedTypeComparisons.ts ===
function f<T extends {} | undefined | null>(a: T, b: T): boolean {
>f : <T extends {} | undefined | null>(a: T, b: T) => boolean
>  : ^ ^^^^^^^^^                     ^^ ^^ ^^ ^^ ^^^^^       
>a : T
>  : ^
>b : T
>  : ^

  return a > b;
>a > b : boolean
>      : ^^^^^^^
>a : T
>  : ^
>b : T
>  : ^
}

function g<T>(a: T, b: T): boolean {
>g : <T>(a: T, b: T) => boolean
>  : ^ ^^ ^^ ^^ ^^ ^^^^^       
>a : T
>  : ^
>b : T
>  : ^

  return a > b;
>a > b : boolean
>      : ^^^^^^^
>a : T
>  : ^
>b : T
>  : ^
}

function h<T extends unknown>(a: T, b: T): boolean {
>h : <T extends unknown>(a: T, b: T) => boolean
>  : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^       
>a : T
>  : ^
>b : T
>  : ^

  return a > b;
>a > b : boolean
>      : ^^^^^^^
>a : T
>  : ^
>b : T
>  : ^
}

function i<T>(a: T, b: T): boolean {
>i : <T>(a: T, b: T) => boolean
>  : ^ ^^ ^^ ^^ ^^ ^^^^^       
>a : T
>  : ^
>b : T
>  : ^

  if (a === undefined) {
>a === undefined : boolean
>                : ^^^^^^^
>a : T
>  : ^
>undefined : undefined
>          : ^^^^^^^^^

      return true;
>true : true
>     : ^^^^
  }

  return a > b;
>a > b : boolean
>      : ^^^^^^^
>a : T & ({} | null)
>  : ^^^^^^^^^^^^^^^
>b : T
>  : ^
}
