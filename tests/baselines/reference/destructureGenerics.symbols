=== tests/cases/compiler/destructureGenerics.ts ===
declare function f<T extends any[]>(...args: T): T;
>f : Symbol(f, Decl(destructureGenerics.ts, 0, 0))
>T : Symbol(T, Decl(destructureGenerics.ts, 0, 19))
>args : Symbol(args, Decl(destructureGenerics.ts, 0, 36))
>T : Symbol(T, Decl(destructureGenerics.ts, 0, 19))
>T : Symbol(T, Decl(destructureGenerics.ts, 0, 19))

var x = f(1,2);
>x : Symbol(x, Decl(destructureGenerics.ts, 1, 3), Decl(destructureGenerics.ts, 2, 3))
>f : Symbol(f, Decl(destructureGenerics.ts, 0, 0))

var x: [1, 2];
>x : Symbol(x, Decl(destructureGenerics.ts, 1, 3), Decl(destructureGenerics.ts, 2, 3))

declare function g<T extends [number, number]>(...args: T): T;
>g : Symbol(g, Decl(destructureGenerics.ts, 2, 14))
>T : Symbol(T, Decl(destructureGenerics.ts, 3, 19))
>args : Symbol(args, Decl(destructureGenerics.ts, 3, 47))
>T : Symbol(T, Decl(destructureGenerics.ts, 3, 19))
>T : Symbol(T, Decl(destructureGenerics.ts, 3, 19))

var z = g(1,2);
>z : Symbol(z, Decl(destructureGenerics.ts, 4, 3), Decl(destructureGenerics.ts, 5, 3))
>g : Symbol(g, Decl(destructureGenerics.ts, 2, 14))

var z: [1,2];
>z : Symbol(z, Decl(destructureGenerics.ts, 4, 3), Decl(destructureGenerics.ts, 5, 3))

declare function h<T>(...args: T[]): T;
>h : Symbol(h, Decl(destructureGenerics.ts, 5, 13))
>T : Symbol(T, Decl(destructureGenerics.ts, 6, 19))
>args : Symbol(args, Decl(destructureGenerics.ts, 6, 22))
>T : Symbol(T, Decl(destructureGenerics.ts, 6, 19))
>T : Symbol(T, Decl(destructureGenerics.ts, 6, 19))

var b = h(1,2,3);
>b : Symbol(b, Decl(destructureGenerics.ts, 7, 3), Decl(destructureGenerics.ts, 8, 3))
>h : Symbol(h, Decl(destructureGenerics.ts, 5, 13))

var b: number;
>b : Symbol(b, Decl(destructureGenerics.ts, 7, 3), Decl(destructureGenerics.ts, 8, 3))

