=== tests/cases/compiler/functionParameterInferType.ts ===
function t<
>t : <O extends { [key: string]: (...args: any[]) => (arg: number) => void; }>(input: O) => void

  O extends { [key: string]: (...args: any[]) => (arg: number) => void }
>key : string
>args : any[]
>arg : number

>(input: O) {}
>input : O

t({
>t({  fn1: (input: string) => (data) => {},  fn2: (input: string) => {    return (data) => {};  },  fn3(input: string) {    return (data) => {};  },  fn4: (input: string) => {    if (input) {      return (data: number) => {};    } else {      for (;;) {        return (data) => {};      }    }  },}) : void
>t : <O extends { [key: string]: (...args: any[]) => (arg: number) => void; }>(input: O) => void
>{  fn1: (input: string) => (data) => {},  fn2: (input: string) => {    return (data) => {};  },  fn3(input: string) {    return (data) => {};  },  fn4: (input: string) => {    if (input) {      return (data: number) => {};    } else {      for (;;) {        return (data) => {};      }    }  },} : { fn1: (input: string) => (data: number) => void; fn2: (input: string) => (data: number) => void; fn3(input: string): (data: number) => void; fn4: (input: string) => (data: number) => void; }

  fn1: (input: string) => (data) => {},
>fn1 : (input: string) => (data: number) => void
>(input: string) => (data) => {} : (input: string) => (data: number) => void
>input : string
>(data) => {} : (data: number) => void
>data : number

  fn2: (input: string) => {
>fn2 : (input: string) => (data: number) => void
>(input: string) => {    return (data) => {};  } : (input: string) => (data: number) => void
>input : string

    return (data) => {};
>(data) => {} : (data: number) => void
>data : number

  },
  fn3(input: string) {
>fn3 : (input: string) => (data: number) => void
>input : string

    return (data) => {};
>(data) => {} : (data: number) => void
>data : number

  },
  fn4: (input: string) => {
>fn4 : (input: string) => (data: number) => void
>(input: string) => {    if (input) {      return (data: number) => {};    } else {      for (;;) {        return (data) => {};      }    }  } : (input: string) => (data: number) => void
>input : string

    if (input) {
>input : string

      return (data: number) => {};
>(data: number) => {} : (data: number) => void
>data : number

    } else {
      for (;;) {
        return (data) => {};
>(data) => {} : (data: number) => void
>data : number
      }
    }
  },
});

