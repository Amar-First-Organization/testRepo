=== tests/cases/conformance/jsdoc/declarations/timer.js ===
/**
 * @param {number} timeout
 */
function Timer(timeout) {
>Timer : typeof Timer
>timeout : number

    this.timeout = timeout;
>this.timeout = timeout : number
>this.timeout : any
>this : any
>timeout : any
>timeout : number
}
module.exports = Timer;
>module.exports = Timer : typeof Timer
>module.exports : typeof Timer
>module : { "tests/cases/conformance/jsdoc/declarations/timer": typeof Timer; }
>exports : typeof Timer
>Timer : typeof Timer

=== tests/cases/conformance/jsdoc/declarations/hook.js ===
/**
 * @typedef {(arg: import("./context")) => void} HookHandler
 */
/**
 * @param {HookHandler} handle
 */
function Hook(handle) {
>Hook : typeof import("tests/cases/conformance/jsdoc/declarations/hook")
>handle : (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: import("tests/cases/conformance/jsdoc/declarations/context").Input, handle?: any): import("tests/cases/conformance/jsdoc/declarations/context").State; }) => void

    this.handle = handle;
>this.handle = handle : (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: import("tests/cases/conformance/jsdoc/declarations/context").Input, handle?: any): import("tests/cases/conformance/jsdoc/declarations/context").State; }) => void
>this.handle : any
>this : any
>handle : any
>handle : (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: import("tests/cases/conformance/jsdoc/declarations/context").Input, handle?: any): import("tests/cases/conformance/jsdoc/declarations/context").State; }) => void
}
module.exports = Hook;
>module.exports = Hook : typeof import("tests/cases/conformance/jsdoc/declarations/hook")
>module.exports : typeof import("tests/cases/conformance/jsdoc/declarations/hook")
>module : { "tests/cases/conformance/jsdoc/declarations/hook": typeof import("tests/cases/conformance/jsdoc/declarations/hook"); }
>exports : typeof import("tests/cases/conformance/jsdoc/declarations/hook")
>Hook : typeof import("tests/cases/conformance/jsdoc/declarations/hook")

=== tests/cases/conformance/jsdoc/declarations/context.js ===
/**
 * Imports
 *
 * @typedef {import("./timer")} Timer
 * @typedef {import("./hook")} Hook
 * @typedef {import("./hook").HookHandler} HookHandler
 */

/**
 * Input type definition
 *
 * @typedef {Object} Input
 * @prop {Timer} timer
 * @prop {Hook} hook
 */
 
/**
 * State type definition
 *
 * @typedef {Object} State
 * @prop {Timer} timer
 * @prop {Hook} hook
 */

/**
 * New `Context`
 *
 * @class
 * @param {Input} input
 */

function Context(input) {
>Context : typeof import("tests/cases/conformance/jsdoc/declarations/context")
>input : Input

    if (!(this instanceof Context)) {
>!(this instanceof Context) : boolean
>(this instanceof Context) : boolean
>this instanceof Context : boolean
>this : import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }
>Context : typeof import("tests/cases/conformance/jsdoc/declarations/context")

      return new Context(input)
>new Context(input) : import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & any) => void): State; }
>Context : typeof import("tests/cases/conformance/jsdoc/declarations/context")
>input : Input
    }
    this.state = this.construct(input);
>this.state = this.construct(input) : State
>this.state : State
>this : import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }
>state : State
>this.construct(input) : State
>this.construct : (input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void) => State
>this : import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }
>construct : (input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void) => State
>input : Input
}
Context.prototype = {
>Context.prototype = {    /**     * @param {Input} input     * @param {HookHandler=} handle     * @returns {State}     */    construct(input, handle = () => void 0) {        return input;    }} : { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }
>Context.prototype : { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }
>Context : typeof import("tests/cases/conformance/jsdoc/declarations/context")
>prototype : { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }
>{    /**     * @param {Input} input     * @param {HookHandler=} handle     * @returns {State}     */    construct(input, handle = () => void 0) {        return input;    }} : { construct(input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void): State; }

    /**
     * @param {Input} input
     * @param {HookHandler=} handle
     * @returns {State}
     */
    construct(input, handle = () => void 0) {
>construct : (input: Input, handle?: (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void) => State
>input : Input
>handle : (arg: import("tests/cases/conformance/jsdoc/declarations/context") & { construct(input: Input, handle?: any): State; }) => void
>() => void 0 : () => any
>void 0 : undefined
>0 : 0

        return input;
>input : Input
    }
}
module.exports = Context;
>module.exports = Context : typeof import("tests/cases/conformance/jsdoc/declarations/context")
>module.exports : typeof import("tests/cases/conformance/jsdoc/declarations/context")
>module : { "tests/cases/conformance/jsdoc/declarations/context": typeof import("tests/cases/conformance/jsdoc/declarations/context"); }
>exports : typeof import("tests/cases/conformance/jsdoc/declarations/context")
>Context : typeof import("tests/cases/conformance/jsdoc/declarations/context")

