=== tests/cases/compiler/getterControlFlowStrictNull.ts ===
class A {
>A : A

   a(): string | null {
>a : () => string | null
>null : null

        if (Math.random() > 0.5) {
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

            return '';
>'' : ""
        }

        // it does error here as expected
    }
}
class B {
>B : B

    get a(): string | null {
>a : string | null
>null : null

        if (Math.random() > 0.5) {
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

            return '';
>'' : ""
        }

        // it should error here because it returns undefined
    }
}
class C {
>C : C

    get a() {
>a : number

        if (Math.random() > 0.5) {
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

            return 0;
>0 : 0
        }

        // it should error here because it returns undefined
    }

    set a(value: number) {
>a : number
>value : number
    }
}

// Repro from #45006
const x: string | number = Math.random() < 0.5 ? "str" : 123;
>x : string | number
>Math.random() < 0.5 ? "str" : 123 : "str" | 123
>Math.random() < 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>"str" : "str"
>123 : 123

if (typeof x === "string") {
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"

  let obj = {
>obj : { readonly prop: string; method(): string; }
>{    get prop() { return x.toUpperCase() },    method() { return x.toUpperCase() }  } : { readonly prop: string; method(): string; }

    get prop() { return x.toUpperCase() },
>prop : string
>x.toUpperCase() : string
>x.toUpperCase : () => string
>x : string
>toUpperCase : () => string

    method() { return x.toUpperCase() }
>method : () => string
>x.toUpperCase() : string
>x.toUpperCase : () => string
>x : string
>toUpperCase : () => string
  }
}
