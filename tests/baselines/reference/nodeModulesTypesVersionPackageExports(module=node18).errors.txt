error TS5109: Option 'moduleResolution' must be set to 'Node18' (or left unspecified) when option 'module' is set to 'Node18'.
index.cts(2,22): error TS2792: Cannot find module 'inner'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
index.mts(2,22): error TS2792: Cannot find module 'inner'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
index.ts(2,22): error TS2792: Cannot find module 'inner'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?


!!! error TS5109: Option 'moduleResolution' must be set to 'Node18' (or left unspecified) when option 'module' is set to 'Node18'.
==== index.ts (1 errors) ====
    // esm format file
    import * as mod from "inner";
                         ~~~~~~~
!!! error TS2792: Cannot find module 'inner'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    mod.correctVersionApplied;
    
==== index.mts (1 errors) ====
    // esm format file
    import * as mod from "inner";
                         ~~~~~~~
!!! error TS2792: Cannot find module 'inner'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    mod.correctVersionApplied;
    
==== index.cts (1 errors) ====
    // cjs format file
    import * as mod from "inner";
                         ~~~~~~~
!!! error TS2792: Cannot find module 'inner'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    mod.correctVersionApplied;
    
==== node_modules/inner/index.d.ts (0 errors) ====
    // cjs format file
    export const noConditionsApplied = true;
==== node_modules/inner/index.d.mts (0 errors) ====
    // esm format file
    export const importConditionApplied = true;
==== node_modules/inner/index.d.cts (0 errors) ====
    // cjs format file
    export const wrongConditionApplied = true;
==== node_modules/inner/old-types.d.ts (0 errors) ====
    export const noVersionApplied = true;
==== node_modules/inner/new-types.d.ts (0 errors) ====
    export const correctVersionApplied = true;
==== node_modules/inner/future-types.d.ts (0 errors) ====
    export const futureVersionApplied = true;
==== package.json (0 errors) ====
    {
        "name": "package",
        "private": true,
        "type": "module",
    }
==== node_modules/inner/package.json (0 errors) ====
    {
        "name": "inner",
        "private": true,
        "exports": {
            ".": {
                "types@>=10000": "./future-types.d.ts",
                "types@>=1": "./new-types.d.ts",
                "types": "./old-types.d.ts",
                "import": "./index.mjs",
                "node": "./index.js"
            },
        }
    }