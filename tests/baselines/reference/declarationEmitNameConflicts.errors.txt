error TS-1: Pre-emit (0) and post-emit (3) diagnostic counts do not match! This can indicate that a semantic _error_ was added by the emit resolver - such an error may not be reflected on the command line or in the editor, but may be captured in a baseline here!


!!! error TS-1: Pre-emit (0) and post-emit (3) diagnostic counts do not match! This can indicate that a semantic _error_ was added by the emit resolver - such an error may not be reflected on the command line or in the editor, but may be captured in a baseline here!
!!! related TS-1: The excess diagnostics are:
!!! related TS2749 tests/cases/compiler/declarationEmit_nameConflicts_0.ts:10:23: 'M.f' refers to a value, but is being used as a type here. Did you mean 'typeof M.f'?
!!! related TS2724 tests/cases/compiler/declarationEmit_nameConflicts_0.ts:11:25: '"tests/cases/compiler/declarationEmit_nameConflicts_0".M' has no exported member named 'C'. Did you mean 'c'?
!!! related TS2749 tests/cases/compiler/declarationEmit_nameConflicts_0.ts:23:24: 'M.P.f' refers to a value, but is being used as a type here. Did you mean 'typeof M.P.f'?
==== tests/cases/compiler/declarationEmit_nameConflicts_0.ts (0 errors) ====
    import im = require('./declarationEmit_nameConflicts_1');
    export module M {
        export function f() { }
        export class C { }
        export module N {
            export function g() { };
            export interface I { }
        }
    
        export import a = M.f;
        export import b = M.C;
        export import c = N;
        export import d = im;
    }
    
    export module M.P {
        export function f() { }
        export class C { }
        export module N {
            export function g() { };
            export interface I { }
        }
        export import im = M.P.f;
        export var a = M.a; // emitted incorrectly as typeof f
        export var b = M.b; // ok
        export var c = M.c; // ok
        export var g = M.c.g; // ok
        export var d = M.d; // emitted incorrectly as typeof im
    }
    
    export module M.Q {
        export function f() { }
        export class C { }
        export module N {
            export function g() { };
            export interface I { }
        }
        export interface b extends M.b { } // ok
        export interface I extends M.c.I { } // ok
        export module c {
            export interface I extends M.c.I { } // ok
        }
    }
==== tests/cases/compiler/declarationEmit_nameConflicts_1.ts (0 errors) ====
    module f { export class c { } }
    export = f;
    