=== tests/cases/conformance/salsa/a.js ===
class C {
>C : Symbol(C, Decl(a.js, 0, 0))

    constructor() {
        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inConstructor = 0;
>this.inConstructor : Symbol(C.inConstructor, Decl(a.js, 2, 28), Decl(a.js, 5, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inConstructor : Symbol(C.inConstructor, Decl(a.js, 2, 28), Decl(a.js, 5, 14))
        }
        else {
            this.inConstructor = "string"
>this.inConstructor : Symbol(C.inConstructor, Decl(a.js, 2, 28), Decl(a.js, 5, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inConstructor : Symbol(C.inConstructor, Decl(a.js, 2, 28), Decl(a.js, 5, 14))
        }
        this.inMultiple = 0;
>this.inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))
    }
    method() {
>method : Symbol(C.method, Decl(a.js, 9, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inMethod = 0;
>this.inMethod : Symbol(C.inMethod, Decl(a.js, 11, 28), Decl(a.js, 14, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMethod : Symbol(C.inMethod, Decl(a.js, 11, 28), Decl(a.js, 14, 14))
        }
        else {
            this.inMethod = "string"
>this.inMethod : Symbol(C.inMethod, Decl(a.js, 11, 28), Decl(a.js, 14, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMethod : Symbol(C.inMethod, Decl(a.js, 11, 28), Decl(a.js, 14, 14))
        }
        this.inMultiple = "string";
>this.inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))

        this.inMultipleMethods = "string";
>this.inMultipleMethods : Symbol(C.inMultipleMethods, Decl(a.js, 17, 35), Decl(a.js, 36, 32))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMultipleMethods : Symbol(C.inMultipleMethods, Decl(a.js, 17, 35), Decl(a.js, 36, 32))

        var action = () => {
>action : Symbol(action, Decl(a.js, 20, 11))

            if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

                this.inNestedArrowFunction = 0;
>this.inNestedArrowFunction : Symbol(C.inNestedArrowFunction, Decl(a.js, 21, 32), Decl(a.js, 24, 18))
>this : Symbol(C, Decl(a.js, 0, 0))
>inNestedArrowFunction : Symbol(C.inNestedArrowFunction, Decl(a.js, 21, 32), Decl(a.js, 24, 18))
            }
            else {
                this.inNestedArrowFunction = "string"
>this.inNestedArrowFunction : Symbol(C.inNestedArrowFunction, Decl(a.js, 21, 32), Decl(a.js, 24, 18))
>this : Symbol(C, Decl(a.js, 0, 0))
>inNestedArrowFunction : Symbol(C.inNestedArrowFunction, Decl(a.js, 21, 32), Decl(a.js, 24, 18))
            }
        };
    }
    get() {
>get : Symbol(C.get, Decl(a.js, 28, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inGetter = 0;
>this.inGetter : Symbol(C.inGetter, Decl(a.js, 30, 28), Decl(a.js, 33, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inGetter : Symbol(C.inGetter, Decl(a.js, 30, 28), Decl(a.js, 33, 14))
        }
        else {
            this.inGetter = "string"
>this.inGetter : Symbol(C.inGetter, Decl(a.js, 30, 28), Decl(a.js, 33, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inGetter : Symbol(C.inGetter, Decl(a.js, 30, 28), Decl(a.js, 33, 14))
        }
        this.inMultiple = false;
>this.inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))

        this.inMultipleMethods = false;
>this.inMultipleMethods : Symbol(C.inMultipleMethods, Decl(a.js, 17, 35), Decl(a.js, 36, 32))
>this : Symbol(C, Decl(a.js, 0, 0))
>inMultipleMethods : Symbol(C.inMultipleMethods, Decl(a.js, 17, 35), Decl(a.js, 36, 32))
    }
    set() {
>set : Symbol(C.set, Decl(a.js, 38, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inSetter = 0;
>this.inSetter : Symbol(C.inSetter, Decl(a.js, 40, 28), Decl(a.js, 43, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inSetter : Symbol(C.inSetter, Decl(a.js, 40, 28), Decl(a.js, 43, 14))
        }
        else {
            this.inSetter = "string"
>this.inSetter : Symbol(C.inSetter, Decl(a.js, 40, 28), Decl(a.js, 43, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inSetter : Symbol(C.inSetter, Decl(a.js, 40, 28), Decl(a.js, 43, 14))
        }
    }
    prop = () => {
>prop : Symbol(C.prop, Decl(a.js, 46, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inPropertyDeclaration = 0;
>this.inPropertyDeclaration : Symbol(C.inPropertyDeclaration, Decl(a.js, 48, 28), Decl(a.js, 51, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inPropertyDeclaration : Symbol(C.inPropertyDeclaration, Decl(a.js, 48, 28), Decl(a.js, 51, 14))
        }
        else {
            this.inPropertyDeclaration = "string"
>this.inPropertyDeclaration : Symbol(C.inPropertyDeclaration, Decl(a.js, 48, 28), Decl(a.js, 51, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inPropertyDeclaration : Symbol(C.inPropertyDeclaration, Decl(a.js, 48, 28), Decl(a.js, 51, 14))
        }
    }
    static method() {
>method : Symbol(C.method, Decl(a.js, 54, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inStaticMethod = 0;
>this.inStaticMethod : Symbol(C.inStaticMethod, Decl(a.js, 56, 28), Decl(a.js, 59, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticMethod : Symbol(C.inStaticMethod, Decl(a.js, 56, 28), Decl(a.js, 59, 14))
        }
        else {
            this.inStaticMethod = "string"
>this.inStaticMethod : Symbol(C.inStaticMethod, Decl(a.js, 56, 28), Decl(a.js, 59, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticMethod : Symbol(C.inStaticMethod, Decl(a.js, 56, 28), Decl(a.js, 59, 14))
        }

        var action = () => {
>action : Symbol(action, Decl(a.js, 63, 11))

            if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

                this.inStaticNestedArrowFunction = 0;
>this.inStaticNestedArrowFunction : Symbol(C.inStaticNestedArrowFunction, Decl(a.js, 64, 32), Decl(a.js, 67, 18))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticNestedArrowFunction : Symbol(C.inStaticNestedArrowFunction, Decl(a.js, 64, 32), Decl(a.js, 67, 18))
            }
            else {
                this.inStaticNestedArrowFunction = "string"
>this.inStaticNestedArrowFunction : Symbol(C.inStaticNestedArrowFunction, Decl(a.js, 64, 32), Decl(a.js, 67, 18))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticNestedArrowFunction : Symbol(C.inStaticNestedArrowFunction, Decl(a.js, 64, 32), Decl(a.js, 67, 18))
            }
        };
    }
    static get() {
>get : Symbol(C.get, Decl(a.js, 71, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inStaticGetter = 0;
>this.inStaticGetter : Symbol(C.inStaticGetter, Decl(a.js, 73, 28), Decl(a.js, 76, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticGetter : Symbol(C.inStaticGetter, Decl(a.js, 73, 28), Decl(a.js, 76, 14))
        }
        else {
            this.inStaticGetter = "string"
>this.inStaticGetter : Symbol(C.inStaticGetter, Decl(a.js, 73, 28), Decl(a.js, 76, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticGetter : Symbol(C.inStaticGetter, Decl(a.js, 73, 28), Decl(a.js, 76, 14))
        }
    }
    static set() {
>set : Symbol(C.set, Decl(a.js, 79, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inStaticSetter = 0;
>this.inStaticSetter : Symbol(C.inStaticSetter, Decl(a.js, 81, 28), Decl(a.js, 84, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticSetter : Symbol(C.inStaticSetter, Decl(a.js, 81, 28), Decl(a.js, 84, 14))
        }
        else {
            this.inStaticSetter = "string"
>this.inStaticSetter : Symbol(C.inStaticSetter, Decl(a.js, 81, 28), Decl(a.js, 84, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticSetter : Symbol(C.inStaticSetter, Decl(a.js, 81, 28), Decl(a.js, 84, 14))
        }
    }
    static prop = () => {
>prop : Symbol(C.prop, Decl(a.js, 87, 5))

        if (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.d.ts, --, --))

            this.inStaticPropertyDeclaration = 0;
>this.inStaticPropertyDeclaration : Symbol(C.inStaticPropertyDeclaration, Decl(a.js, 89, 28), Decl(a.js, 92, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticPropertyDeclaration : Symbol(C.inStaticPropertyDeclaration, Decl(a.js, 89, 28), Decl(a.js, 92, 14))
        }
        else {
            this.inStaticPropertyDeclaration = "string"
>this.inStaticPropertyDeclaration : Symbol(C.inStaticPropertyDeclaration, Decl(a.js, 89, 28), Decl(a.js, 92, 14))
>this : Symbol(C, Decl(a.js, 0, 0))
>inStaticPropertyDeclaration : Symbol(C.inStaticPropertyDeclaration, Decl(a.js, 89, 28), Decl(a.js, 92, 14))
        }
    }
}

=== tests/cases/conformance/salsa/b.ts ===
var c = new C();
>c : Symbol(c, Decl(b.ts, 0, 3))
>C : Symbol(C, Decl(a.js, 0, 0))

var stringOrNumber: string | number;
>stringOrNumber : Symbol(stringOrNumber, Decl(b.ts, 2, 3), Decl(b.ts, 3, 3))

var stringOrNumber = c.inConstructor;
>stringOrNumber : Symbol(stringOrNumber, Decl(b.ts, 2, 3), Decl(b.ts, 3, 3))
>c.inConstructor : Symbol(C.inConstructor, Decl(a.js, 2, 28), Decl(a.js, 5, 14))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inConstructor : Symbol(C.inConstructor, Decl(a.js, 2, 28), Decl(a.js, 5, 14))

var stringOrNumberOrUndefined: string | number | undefined;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)

var stringOrNumberOrUndefined = c.inMethod;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>c.inMethod : Symbol(C.inMethod, Decl(a.js, 11, 28), Decl(a.js, 14, 14))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inMethod : Symbol(C.inMethod, Decl(a.js, 11, 28), Decl(a.js, 14, 14))

var stringOrNumberOrUndefined = c.inGetter;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>c.inGetter : Symbol(C.inGetter, Decl(a.js, 30, 28), Decl(a.js, 33, 14))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inGetter : Symbol(C.inGetter, Decl(a.js, 30, 28), Decl(a.js, 33, 14))

var stringOrNumberOrUndefined = c.inSetter;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>c.inSetter : Symbol(C.inSetter, Decl(a.js, 40, 28), Decl(a.js, 43, 14))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inSetter : Symbol(C.inSetter, Decl(a.js, 40, 28), Decl(a.js, 43, 14))

var stringOrNumberOrUndefined = c.inPropertyDeclaration;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>c.inPropertyDeclaration : Symbol(C.inPropertyDeclaration, Decl(a.js, 48, 28), Decl(a.js, 51, 14))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inPropertyDeclaration : Symbol(C.inPropertyDeclaration, Decl(a.js, 48, 28), Decl(a.js, 51, 14))

var stringOrNumberOrUndefined = c.inNestedArrowFunction
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>c.inNestedArrowFunction : Symbol(C.inNestedArrowFunction, Decl(a.js, 21, 32), Decl(a.js, 24, 18))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inNestedArrowFunction : Symbol(C.inNestedArrowFunction, Decl(a.js, 21, 32), Decl(a.js, 24, 18))

var stringOrNumberOrBoolean: string | number | boolean;
>stringOrNumberOrBoolean : Symbol(stringOrNumberOrBoolean, Decl(b.ts, 13, 3))

var number: number;
>number : Symbol(number, Decl(b.ts, 15, 3), Decl(b.ts, 16, 3))

var number = c.inMultiple;
>number : Symbol(number, Decl(b.ts, 15, 3), Decl(b.ts, 16, 3))
>c.inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inMultiple : Symbol(C.inMultiple, Decl(a.js, 7, 9), Decl(a.js, 16, 9), Decl(a.js, 35, 9))

var stringOrBooleanOrUndefined : string | boolean | undefined;
>stringOrBooleanOrUndefined : Symbol(stringOrBooleanOrUndefined, Decl(b.ts, 17, 3), Decl(b.ts, 18, 3))

var stringOrBooleanOrUndefined = c.inMultipleMethods;
>stringOrBooleanOrUndefined : Symbol(stringOrBooleanOrUndefined, Decl(b.ts, 17, 3), Decl(b.ts, 18, 3))
>c.inMultipleMethods : Symbol(C.inMultipleMethods, Decl(a.js, 17, 35), Decl(a.js, 36, 32))
>c : Symbol(c, Decl(b.ts, 0, 3))
>inMultipleMethods : Symbol(C.inMultipleMethods, Decl(a.js, 17, 35), Decl(a.js, 36, 32))


var stringOrNumberOrUndefined = C.inStaticMethod;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>C.inStaticMethod : Symbol(C.inStaticMethod, Decl(a.js, 56, 28), Decl(a.js, 59, 14))
>C : Symbol(C, Decl(a.js, 0, 0))
>inStaticMethod : Symbol(C.inStaticMethod, Decl(a.js, 56, 28), Decl(a.js, 59, 14))

var stringOrNumberOrUndefined = C.inStaticGetter;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>C.inStaticGetter : Symbol(C.inStaticGetter, Decl(a.js, 73, 28), Decl(a.js, 76, 14))
>C : Symbol(C, Decl(a.js, 0, 0))
>inStaticGetter : Symbol(C.inStaticGetter, Decl(a.js, 73, 28), Decl(a.js, 76, 14))

var stringOrNumberOrUndefined = C.inStaticSetter;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>C.inStaticSetter : Symbol(C.inStaticSetter, Decl(a.js, 81, 28), Decl(a.js, 84, 14))
>C : Symbol(C, Decl(a.js, 0, 0))
>inStaticSetter : Symbol(C.inStaticSetter, Decl(a.js, 81, 28), Decl(a.js, 84, 14))

var stringOrNumberOrUndefined = C.inStaticPropertyDeclaration;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>C.inStaticPropertyDeclaration : Symbol(C.inStaticPropertyDeclaration, Decl(a.js, 89, 28), Decl(a.js, 92, 14))
>C : Symbol(C, Decl(a.js, 0, 0))
>inStaticPropertyDeclaration : Symbol(C.inStaticPropertyDeclaration, Decl(a.js, 89, 28), Decl(a.js, 92, 14))

var stringOrNumberOrUndefined = C.inStaticNestedArrowFunction;
>stringOrNumberOrUndefined : Symbol(stringOrNumberOrUndefined, Decl(b.ts, 5, 3), Decl(b.ts, 7, 3), Decl(b.ts, 8, 3), Decl(b.ts, 9, 3), Decl(b.ts, 10, 3) ... and 6 more)
>C.inStaticNestedArrowFunction : Symbol(C.inStaticNestedArrowFunction, Decl(a.js, 64, 32), Decl(a.js, 67, 18))
>C : Symbol(C, Decl(a.js, 0, 0))
>inStaticNestedArrowFunction : Symbol(C.inStaticNestedArrowFunction, Decl(a.js, 64, 32), Decl(a.js, 67, 18))

