=== tests/cases/compiler/inDoesNotOperateOnPrimitiveTypes.ts ===
const validHasKey = <T extends object>(
>validHasKey : <T extends object>(thing: T, key: string) => boolean
><T extends object>(  thing: T,  key: string,): boolean => {  return key in thing;} : <T extends object>(thing: T, key: string) => boolean

  thing: T,
>thing : T

  key: string,
>key : string

): boolean => {
  return key in thing;
>key in thing : boolean
>key : string
>thing : T

};

const alsoValidHasKey = <T>(
>alsoValidHasKey : <T>(thing: T, key: string) => boolean
><T>(  thing: T,  key: string,): boolean => {  return key in thing;} : <T>(thing: T, key: string) => boolean

  thing: T,
>thing : T

  key: string,
>key : string

): boolean => {
  return key in thing;
>key in thing : boolean
>key : string
>thing : T

};

function invalidHasKey<T extends string | number>(
>invalidHasKey : <T extends string | number>(thing: T, key: string) => boolean

  thing: T,
>thing : T

  key: string,
>key : string

): boolean {
  return key in thing;
>key in thing : boolean
>key : string
>thing : T
}

