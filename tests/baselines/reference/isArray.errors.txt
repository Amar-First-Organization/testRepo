tests/cases/compiler/isArray.ts(21,33): error TS2339: Property 'push' does not exist on type 'readonly string[]'.
tests/cases/compiler/isArray.ts(22,33): error TS2339: Property 'push' does not exist on type 'readonly string[]'.
tests/cases/compiler/isArray.ts(28,38): error TS2345: Argument of type '10' is not assignable to parameter of type 'string'.
tests/cases/compiler/isArray.ts(36,33): error TS2339: Property 'push' does not exist on type 'readonly string[] | number[]'.
  Property 'push' does not exist on type 'readonly string[]'.
tests/cases/compiler/isArray.ts(40,33): error TS2339: Property 'push' does not exist on type 'readonly string[] | number[]'.
  Property 'push' does not exist on type 'readonly string[]'.
tests/cases/compiler/isArray.ts(44,38): error TS2345: Argument of type '10' is not assignable to parameter of type 'string'.
tests/cases/compiler/isArray.ts(50,33): error TS2339: Property 'push' does not exist on type 'MyReadOnlyArray<string>'.
tests/cases/compiler/isArray.ts(51,41): error TS2345: Argument of type '10' is not assignable to parameter of type 'string'.
tests/cases/compiler/isArray.ts(61,33): error TS2339: Property 'push' does not exist on type 'readonly T[]'.
tests/cases/compiler/isArray.ts(70,33): error TS2339: Property 'push' does not exist on type 'readonly [T]'.


==== tests/cases/compiler/isArray.ts (10 errors) ====
    interface MyArray<T> extends Array<T> { manifest: any; }
    interface MyReadOnlyArray<T> extends ReadonlyArray<T> { manifest: any; }
    
    function fn1(arg: string | string[]) {
        if (Array.isArray(arg)) arg.push(""); // Should OK
    }
    
    function fn2(arg: unknown) {
        if (Array.isArray(arg)) arg.push(""); // Should OK
    }
    
    function fn3(arg: object) {
        if (Array.isArray(arg)) arg.push(""); // Should OK
    }
    
    function fn4(arg: {}) {
        if (Array.isArray(arg)) arg.push(""); // Should OK
    }
    
    function fn5(arg: string | ReadonlyArray<string>) {
        if (Array.isArray(arg)) arg.push(10); // Should FAIL
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'readonly string[]'.
        if (Array.isArray(arg)) arg.push(""); // Should FAIL
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'readonly string[]'.
        if (Array.isArray(arg)) arg.indexOf(""); // Should OK
        if (!Array.isArray(arg)) arg.toUpperCase(); // Should OK
    }
    
    function fn6(arg: string | string[]) {
        if (Array.isArray(arg)) arg.push(10); // Should FAIL
                                         ~~
!!! error TS2345: Argument of type '10' is not assignable to parameter of type 'string'.
    }
    
    function fn7(arg: boolean | number[] | string[]) {
        if (Array.isArray(arg)) arg.push(null as any as string & number); // Should OK
    }
    
    function fn8(arg: string | number[] | readonly string[]) {
        if (Array.isArray(arg)) arg.push(10); // Should FAIL
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'readonly string[] | number[]'.
!!! error TS2339:   Property 'push' does not exist on type 'readonly string[]'.
    }
    
    function fn9(arg: string | number[] | readonly string[]) {
        if (Array.isArray(arg)) arg.push(10); // Should FAIL
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'readonly string[] | number[]'.
!!! error TS2339:   Property 'push' does not exist on type 'readonly string[]'.
    }
    
    function fn10(arg: string | MyArray<string>) {
        if (Array.isArray(arg)) arg.push(10); // Should FAIL
                                         ~~
!!! error TS2345: Argument of type '10' is not assignable to parameter of type 'string'.
        if (Array.isArray(arg)) arg.push(""); // Should OK
        if (Array.isArray(arg)) arg.manifest; // Should OK
    }
    
    function fn11(arg: string | MyReadOnlyArray<string>) {
        if (Array.isArray(arg)) arg.push(""); // Should FAIL
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'MyReadOnlyArray<string>'.
        if (Array.isArray(arg)) arg.indexOf(10); // Should FAIL
                                            ~~
!!! error TS2345: Argument of type '10' is not assignable to parameter of type 'string'.
        if (Array.isArray(arg)) arg.indexOf(""); // Should OK
        if (Array.isArray(arg)) arg.manifest; // Should OK
    }
    
    function fn12<T>(arg: T | T[]) {
        if (Array.isArray(arg)) arg.push(null as any as T); // Should OK
    }
    
    function fn13<T>(arg: T | ReadonlyArray<T>) {
        if (Array.isArray(arg)) arg.push(null as any as T); // Should fail
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'readonly T[]'.
        if (Array.isArray(arg)) arg.indexOf(null as any as T); // OK
    }
    
    function fn14<T>(arg: T | [T]) {
        if (Array.isArray(arg)) arg.push(null as any as T); // Should OK
    }
    
    function fn15<T>(arg: T | readonly [T]) {
        if (Array.isArray(arg)) arg.push(null as any as T); // Should fail
                                    ~~~~
!!! error TS2339: Property 'push' does not exist on type 'readonly [T]'.
        if (Array.isArray(arg)) arg.indexOf(null as any as T); // Should OK
    }
    
    function fn16<T extends string | string[]>(arg: T) {
        if (Array.isArray(arg)) arg.push("10"); // Should OK
    }
    
    function fn17() {
        const s: Array<string | string[]> = [];
        const arrs = s.filter(Array.isArray);
        arrs.push(["one"]);
    }
    