tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(67,9): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(68,9): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(69,9): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(70,9): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(71,9): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(72,9): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(73,9): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(74,9): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(96,12): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(97,12): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(98,12): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(99,12): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(100,12): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(101,12): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(102,12): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(103,12): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(125,19): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(126,18): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(127,18): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(128,18): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(129,18): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(130,18): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(131,18): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(132,18): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(156,12): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(157,11): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(158,11): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(159,11): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(160,11): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(161,11): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(162,11): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(163,11): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(187,5): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(188,5): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(189,5): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(190,5): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(191,5): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(192,5): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(193,5): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(194,5): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(216,5): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(217,5): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(218,5): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(219,5): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(220,5): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(221,5): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(222,5): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(223,5): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(245,5): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(246,5): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(247,5): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(248,5): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(249,5): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(250,5): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(251,5): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(252,5): error TS4111: The type 'Type & Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(276,6): error TS4111: The type '() => void' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(277,6): error TS4111: The type 'Interface' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(278,6): error TS4111: The type 'Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(279,6): error TS4111: The type 'Symbol' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(280,6): error TS4111: The type 'string[]' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(281,6): error TS4111: The type 'Class' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(282,6): error TS4111: The type 'Interface | Type' is disallowed in truthiness position
tests/cases/conformance/booleanCoercion/booleanCoercion1.ts(283,6): error TS4111: The type 'Type & Interface' is disallowed in truthiness position


==== tests/cases/conformance/booleanCoercion/booleanCoercion1.ts (64 errors) ====
    declare let anyValue: any;
    declare let unknownValue: unknown;
    declare let undefinedValue: undefined;
    declare let nullValue: null;
    declare let stringValue: string;
    declare let stringLiteral: "123";
    declare let numberValue: number;
    declare let numberLiteral: 123;
    declare let booleanValue: boolean;
    declare let booleanLiteral: true;
    declare let bigintValue: bigint;
    declare let bugintLiteral: 123n;
    
    enum Enum {
        EnumValue
    }
    
    
    interface Interface {
        foo: string
    }
    
    type Type = {
        foo: string
    }
    
    class Class {
        foo: string
    }
    
    declare function functionValue(): void;
    declare let interfaceLiteralValue: Interface
    declare let typeLiteralValue: Type;
    declare let symbolValue: Symbol
    declare let array: string[]
    declare let classValue: Class
    
    declare let unionTypeWork1: number | string
    declare let unionTypeWork2: number | undefined
    declare let unionTypeWork3: number | Type
    declare let intersectionTypeWork1: number & Type
    
    declare let unionTypeNotWork1: Type | Interface
    declare let intersectionTypeNotWork1: Type & Interface
    
    function testExoression<T>(typeParameter: T) {
        // if
        if (anyValue) { }
        if (unknownValue) { }
        if (undefinedValue) { }
        if (nullValue) { }
        if (stringValue) { }
        if (stringLiteral) { }
        if (numberValue) { }
        if (numberLiteral) { }
        if (booleanValue) { }
        if (booleanLiteral) { }
        if (bigintValue) { }
        if (bugintLiteral) { }
        if (typeParameter) { }
        if (Enum.EnumValue) { }
        if (unionTypeWork1) { }
        if (unionTypeWork2) { }
        if (unionTypeWork3) { }
        if (intersectionTypeWork1) { }
    
        if (functionValue) { }
            ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        if (interfaceLiteralValue) { }
            ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        if (typeLiteralValue) { }
            ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        if (symbolValue) { }
            ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        if (array) { }
            ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        if (classValue) { }
            ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        if (unionTypeNotWork1) { }
            ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        if (intersectionTypeNotWork1) { }
            ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    
        // while
        while (anyValue) { }
        while (unknownValue) { }
        while (undefinedValue) { }
        while (nullValue) { }
        while (stringValue) { }
        while (stringLiteral) { }
        while (numberValue) { }
        while (numberLiteral) { }
        while (booleanValue) { }
        while (booleanLiteral) { }
        while (bigintValue) { }
        while (bugintLiteral) { }
        while (typeParameter) { }
        while (Enum.EnumValue) { }
        while (unionTypeWork1) { }
        while (unionTypeWork2) { }
        while (unionTypeWork3) { }
        while (intersectionTypeWork1) { }
    
        while (functionValue) { }
               ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        while (interfaceLiteralValue) { }
               ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        while (typeLiteralValue) { }
               ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        while (symbolValue) { }
               ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        while (array) { }
               ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        while (classValue) { }
               ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        while (unionTypeNotWork1) { }
               ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        while (intersectionTypeNotWork1) { }
               ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    
        // do while
        do { } while (anyValue)
        do { } while (unknownValue)
        do { } while (undefinedValue)
        do { } while (nullValue)
        do { } while (stringValue)
        do { } while (stringLiteral)
        do { } while (numberValue)
        do { } while (numberLiteral)
        do { } while (booleanValue)
        do { } while (booleanLiteral)
        do { } while (bigintValue)
        do { } while (bugintLiteral)
        do { } while (typeParameter)
        do { } while (Enum.EnumValue)
        do {} while (unionTypeWork1)
        do {} while (unionTypeWork2)
        do {} while (unionTypeWork3)
        do {} while (intersectionTypeWork1)
    
        do { } while (functionValue)
                      ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        do {} while (interfaceLiteralValue)
                     ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        do {} while (typeLiteralValue)
                     ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        do {} while (symbolValue)
                     ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        do {} while (array)
                     ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        do {} while (classValue)
                     ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        do {} while (unionTypeNotWork1)
                     ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        do {} while (intersectionTypeNotWork1)
                     ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    }
    
    function middleExpression<T>(typeParameter: T) {
        // for
        for (; anyValue;) { }
        for (; unknownValue;) { }
        for (; undefinedValue;) { }
        for (; nullValue;) { }
        for (; stringValue;) { }
        for (; stringLiteral;) { }
        for (; numberValue;) { }
        for (; numberLiteral;) { }
        for (; booleanValue;) { }
        for (; booleanLiteral;) { }
        for (; bigintValue;) { }
        for (; bugintLiteral;) { }
        for (; typeParameter;) { }
        for (; Enum.EnumValue;) { }
        for (;unionTypeWork1;) { }
        for (;unionTypeWork2;) { }
        for (;unionTypeWork3;) { }
        for (;intersectionTypeWork1;) { }
    
        for (; functionValue;) { }
               ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        for (;interfaceLiteralValue;) { }
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        for (;typeLiteralValue;) { }
              ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        for (;symbolValue;) { }
              ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        for (;array;) { }
              ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        for (;classValue;) { }
              ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        for (;unionTypeNotWork1;) { }
              ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        for (;intersectionTypeNotWork1;) { }
              ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    }
    
    function firstOperand<T>(typeParameter: T) {
        // conditional
        anyValue ? 1 : 2;
        unknownValue ? 1 : 2;
        undefinedValue ? 1 : 2;
        nullValue ? 1 : 2;
        stringValue ? 1 : 2;
        stringLiteral ? 1 : 2;
        numberValue ? 1 : 2;
        numberLiteral ? 1 : 2;
        booleanValue ? 1 : 2;
        booleanLiteral ? 1 : 2;
        bigintValue ? 1 : 2;
        bugintLiteral ? 1 : 2;
        typeParameter ? 1 : 2;
        Enum.EnumValue ? 1 : 2;
        unionTypeWork1 ? 1 : 2
        unionTypeWork2 ? 1 : 2
        unionTypeWork3 ? 1 : 2
        intersectionTypeWork1 ? 1 : 2
    
        functionValue ? 1 : 2;
        ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        interfaceLiteralValue ? 1 : 2;
        ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        typeLiteralValue ? 1 : 2;
        ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        symbolValue ? 1 : 2;
        ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        array ? 1 : 2;
        ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        classValue ? 1 : 2;
        ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        unionTypeNotWork1 ? 1 : 2;
        ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        intersectionTypeNotWork1 ? 1 : 2;
        ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    
        // and
        anyValue && 1;
        unknownValue && 1;
        undefinedValue && 1;
        nullValue && 1;
        stringValue && 1;
        stringLiteral && 1;
        numberValue && 1;
        numberLiteral && 1;
        booleanValue && 1;
        booleanLiteral && 1;
        bigintValue && 1;
        bugintLiteral && 1;
        typeParameter && 1;
        Enum.EnumValue && 1;
        unionTypeWork1 && 1;
        unionTypeWork2 && 1;
        unionTypeWork3 && 1;
        intersectionTypeWork1 && 1;
    
        functionValue && 1;
        ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        interfaceLiteralValue && 1;
        ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        typeLiteralValue && 1;
        ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        symbolValue && 1;
        ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        array && 1;
        ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        classValue && 1;
        ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        unionTypeNotWork1 && 1;
        ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        intersectionTypeNotWork1 && 1;
        ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    
        // or
        anyValue || 1;
        unknownValue || 1;
        undefinedValue || 1;
        nullValue || 1;
        stringValue || 1;
        stringLiteral || 1;
        numberValue || 1;
        numberLiteral || 1;
        booleanValue || 1;
        booleanLiteral || 1;
        bigintValue || 1;
        bugintLiteral || 1;
        typeParameter || 1;
        Enum.EnumValue || 1;
        unionTypeWork1 || 1;
        unionTypeWork2 || 1;
        unionTypeWork3 || 1;
        intersectionTypeWork1 || 1;
    
        functionValue || 1;
        ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        interfaceLiteralValue || 1;
        ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        typeLiteralValue || 1;
        ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        symbolValue || 1;
        ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        array || 1;
        ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        classValue || 1;
        ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        unionTypeNotWork1 || 1;
        ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        intersectionTypeNotWork1 || 1;
        ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    }
    
    function notOperand<T>(typeParameter: T) {
        // not
        !anyValue;
        !unknownValue;
        !undefinedValue;
        !nullValue;
        !stringValue;
        !stringLiteral;
        !numberValue;
        !numberLiteral;
        !booleanValue;
        !booleanLiteral;
        !bigintValue;
        !bugintLiteral;
        !typeParameter;
        !Enum.EnumValue;
        !unionTypeWork1;
        !unionTypeWork2;
        !unionTypeWork3;
        !intersectionTypeWork1;
    
        !functionValue;
         ~~~~~~~~~~~~~
!!! error TS4111: The type '() => void' is disallowed in truthiness position
        !interfaceLiteralValue;
         ~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface' is disallowed in truthiness position
        !typeLiteralValue;
         ~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type' is disallowed in truthiness position
        !symbolValue;
         ~~~~~~~~~~~
!!! error TS4111: The type 'Symbol' is disallowed in truthiness position
        !array;
         ~~~~~
!!! error TS4111: The type 'string[]' is disallowed in truthiness position
        !classValue;
         ~~~~~~~~~~
!!! error TS4111: The type 'Class' is disallowed in truthiness position
        !unionTypeNotWork1;
         ~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Interface | Type' is disallowed in truthiness position
        !intersectionTypeNotWork1;
         ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS4111: The type 'Type & Interface' is disallowed in truthiness position
    }
    
    declare const guard: number
    function questionOrAssignment<T>(typeParameter: T) {
        // question
        anyValue ?? 1;
        unknownValue ?? 1;
        undefinedValue ?? 1;
        nullValue ?? 1;
        stringValue ?? 1;
        stringLiteral ?? 1;
        numberValue ?? 1;
        numberLiteral ?? 1;
        booleanValue ?? 1;
        booleanLiteral ?? 1;
        bigintValue ?? 1;
        bugintLiteral ?? 1;
        typeParameter ?? 1;
        Enum.EnumValue ?? 1;
        unionTypeWork1 ?? 1;
        unionTypeWork2 ?? 1;
        unionTypeWork3 ?? 1;
        intersectionTypeWork1 ?? 1;
        functionValue ?? 1;
        interfaceLiteralValue ?? 1;
        typeLiteralValue ?? 1;
        symbolValue ?? 1;
        array ?? 1;
        classValue ?? 1;
        unionTypeNotWork1 ?? 1;
        intersectionTypeNotWork1 ?? 1;
    
        // &&=
        if (guard === 1) {
            anyValue &&= 1;
            unknownValue &&= 1;
            undefinedValue &&= undefined;
            nullValue &&= null;
            stringValue &&= "";
            stringLiteral &&= "123";
            numberValue &&= 1;
            numberLiteral &&= 123;
            booleanValue &&= true;
            booleanLiteral &&= true;
            bigintValue &&= 1n;
            bugintLiteral &&= 123n;
            typeParameter &&= {} as any;
            unionTypeWork1 &&= 1;
            unionTypeWork2 &&= 1;
            unionTypeWork3 &&= 1;
            intersectionTypeWork1 &&= 1 as any;
            interfaceLiteralValue &&= { foo: '' };
            typeLiteralValue &&= { foo: '' };;
            symbolValue &&= Symbol("");
            array &&= [];
            unionTypeNotWork1 &&= { foo: '' };;
            intersectionTypeNotWork1 &&= { foo: '' };;
        }
    
        // ||=
        if (guard === 1) {
            anyValue ||= 1;
            unknownValue ||= 1;
            undefinedValue ||= undefined;
            nullValue ||= null;
            stringValue ||= "";
            stringLiteral ||= "123";
            numberValue ||= 1;
            numberLiteral ||= 123;
            booleanValue ||= true;
            booleanLiteral ||= true;
            bigintValue ||= 1n;
            bugintLiteral ||= 123n;
            typeParameter ||= {} as any;
            unionTypeWork1 ||= 1;
            unionTypeWork2 ||= 1;
            unionTypeWork3 ||= 1;
            intersectionTypeWork1 ||= 1 as any;
            interfaceLiteralValue ||= { foo: '' };
            typeLiteralValue ||= { foo: '' };;
            symbolValue ||= Symbol("");
            array ||= [];
            unionTypeNotWork1 ||= { foo: '' };;
            intersectionTypeNotWork1 ||= { foo: '' };;
        }
    
        // ??=
        if (guard === 1) {
            anyValue ??= 1;
            unknownValue ??= 1;
            undefinedValue ??= undefined;
            nullValue ??= null;
            stringValue ??= "";
            stringLiteral ??= "123";
            numberValue ??= 1;
            numberLiteral ??= 123;
            booleanValue ??= true;
            booleanLiteral ??= true;
            bigintValue ??= 1n;
            bugintLiteral ??= 123n;
            typeParameter ??= {} as any;
            unionTypeWork1 ??= 1;
            unionTypeWork2 ??= 1;
            unionTypeWork3 ??= 1;
            intersectionTypeWork1 ??= 1 as any;
            interfaceLiteralValue ??= { foo: '' };
            typeLiteralValue ??= { foo: '' };;
            symbolValue ??= Symbol("");
            array ??= [];
            unionTypeNotWork1 ??= { foo: '' };;
            intersectionTypeNotWork1 ??= { foo: '' };;
        }
    }
    