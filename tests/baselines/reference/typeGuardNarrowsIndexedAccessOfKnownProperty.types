=== tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty.ts ===
interface Square {
    kind: "square";
>kind : "square"

    size: number;
>size : number
}
 interface Rectangle {
    kind: "rectangle";
>kind : "rectangle"

    width: number;
>width : number

    height: number;
>height : number
}
 interface Circle {
    kind: "circle";
>kind : "circle"

    radius: number;
>radius : number
}
 type Shape = Square | Rectangle | Circle;
>Shape : Shape

interface Subshape {
    "0": {
>"0" : { sub: { under: { shape: Shape; }; }; }

        sub: {
>sub : { under: { shape: Shape; }; }

            under: {
>under : { shape: Shape; }

                shape: Shape;
>shape : Shape
            }
        }
    }
}
function area(s: Shape): number {
>area : (s: Shape) => number
>s : Shape

    switch(s['kind']) {
>s['kind'] : "square" | "rectangle" | "circle"
>s : Shape
>'kind' : "kind"

        case "square": return s.size * s['size'];
>"square" : "square"
>s.size * s['size'] : number
>s.size : number
>s : Square
>size : number
>s['size'] : number
>s : Square
>'size' : "size"

        case "rectangle": return s.width * s['height'];
>"rectangle" : "rectangle"
>s.width * s['height'] : number
>s.width : number
>s : Rectangle
>width : number
>s['height'] : number
>s : Rectangle
>'height' : "height"

        case "circle": return Math.PI * s['radius'] * s.radius;
>"circle" : "circle"
>Math.PI * s['radius'] * s.radius : number
>Math.PI * s['radius'] : number
>Math.PI : number
>Math : Math
>PI : number
>s['radius'] : number
>s : Circle
>'radius' : "radius"
>s.radius : number
>s : Circle
>radius : number
    }
}
function subarea(s: Subshape): number {
>subarea : (s: Subshape) => number
>s : Subshape

    switch(s[0]["sub"].under["shape"]["kind"]) {
>s[0]["sub"].under["shape"]["kind"] : "square" | "rectangle" | "circle"
>s[0]["sub"].under["shape"] : Shape
>s[0]["sub"].under : { shape: Shape; }
>s[0]["sub"] : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>"sub" : "sub"
>under : { shape: Shape; }
>"shape" : "shape"
>"kind" : "kind"

        case "square": return s[0].sub.under.shape.size * s[0].sub.under.shape.size;
>"square" : "square"
>s[0].sub.under.shape.size * s[0].sub.under.shape.size : number
>s[0].sub.under.shape.size : number
>s[0].sub.under.shape : Square
>s[0].sub.under : { shape: Shape; }
>s[0].sub : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>sub : { under: { shape: Shape; }; }
>under : { shape: Shape; }
>shape : Square
>size : number
>s[0].sub.under.shape.size : number
>s[0].sub.under.shape : Square
>s[0].sub.under : { shape: Shape; }
>s[0].sub : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>sub : { under: { shape: Shape; }; }
>under : { shape: Shape; }
>shape : Square
>size : number

        case "rectangle": return s[0]["sub"]["under"]["shape"]["width"] * s[0]["sub"]["under"]["shape"].height;
>"rectangle" : "rectangle"
>s[0]["sub"]["under"]["shape"]["width"] * s[0]["sub"]["under"]["shape"].height : number
>s[0]["sub"]["under"]["shape"]["width"] : number
>s[0]["sub"]["under"]["shape"] : Rectangle
>s[0]["sub"]["under"] : { shape: Shape; }
>s[0]["sub"] : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>"sub" : "sub"
>"under" : "under"
>"shape" : "shape"
>"width" : "width"
>s[0]["sub"]["under"]["shape"].height : number
>s[0]["sub"]["under"]["shape"] : Rectangle
>s[0]["sub"]["under"] : { shape: Shape; }
>s[0]["sub"] : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>"sub" : "sub"
>"under" : "under"
>"shape" : "shape"
>height : number

        case "circle": return Math.PI * s[0].sub.under["shape"].radius * s[0]["sub"].under.shape["radius"];
>"circle" : "circle"
>Math.PI * s[0].sub.under["shape"].radius * s[0]["sub"].under.shape["radius"] : number
>Math.PI * s[0].sub.under["shape"].radius : number
>Math.PI : number
>Math : Math
>PI : number
>s[0].sub.under["shape"].radius : number
>s[0].sub.under["shape"] : Circle
>s[0].sub.under : { shape: Shape; }
>s[0].sub : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>sub : { under: { shape: Shape; }; }
>under : { shape: Shape; }
>"shape" : "shape"
>radius : number
>s[0]["sub"].under.shape["radius"] : number
>s[0]["sub"].under.shape : Circle
>s[0]["sub"].under : { shape: Shape; }
>s[0]["sub"] : { under: { shape: Shape; }; }
>s[0] : { sub: { under: { shape: Shape; }; }; }
>s : Subshape
>0 : 0
>"sub" : "sub"
>under : { shape: Shape; }
>shape : Circle
>"radius" : "radius"
    }
}

interface X {
    0: "xx",
>0 : "xx"

    1: number
>1 : number
}

interface Y {
    0: "yy",
>0 : "yy"

    1: string
>1 : string
}

type A = ["aa", number];
>A : ["aa", number]

type B = ["bb", string];
>B : ["bb", string]

type Z = X | Y;
>Z : Z

type C = A | B;
>C : C

function check(z: Z, c: C) {
>check : (z: Z, c: C) => void
>z : Z
>c : C

    z[0] // fine, typescript sees "xx" | "yy"
>z[0] : "xx" | "yy"
>z : Z
>0 : 0

    switch (z[0]) {
>z[0] : "xx" | "yy"
>z : Z
>0 : 0

        case "xx":
>"xx" : "xx"

            var xx: number = z[1] // should be number
>xx : number
>z[1] : number
>z : X
>1 : 1

            break;
        case "yy":
>"yy" : "yy"

            var yy: string = z[1] // should be string
>yy : string
>z[1] : string
>z : Y
>1 : 1

            break;
    }
    c[0] // fine, typescript sees "xx" | "yy"
>c[0] : "aa" | "bb"
>c : C
>0 : 0

    switch (c[0]) {
>c[0] : "aa" | "bb"
>c : C
>0 : 0

        case "aa":
>"aa" : "aa"

            var aa: number = c[1] // should be number
>aa : number
>c[1] : number
>c : ["aa", number]
>1 : 1

            break;
        case "bb":
>"bb" : "bb"

            var bb: string = c[1] // should be string
>bb : string
>c[1] : string
>c : ["bb", string]
>1 : 1

            break;
    }
}

export function g(pair: [number, string?]): string {
>g : (pair: [number, (string | undefined)?]) => string
>pair : [number, (string | undefined)?]

    return pair[1] ? pair[1] : 'nope';
>pair[1] ? pair[1] : 'nope' : string
>pair[1] : string | undefined
>pair : [number, (string | undefined)?]
>1 : 1
>pair[1] : string
>pair : [number, (string | undefined)?]
>1 : 1
>'nope' : "nope"
}

