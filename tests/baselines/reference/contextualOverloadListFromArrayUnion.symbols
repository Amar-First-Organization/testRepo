=== tests/cases/compiler/one.ts ===
declare const y: never[] | string[];
>y : Symbol(y, Decl(one.ts, 0, 13))

export const yThen = y.map(item => item.length);
>yThen : Symbol(yThen, Decl(one.ts, 1, 12))
>y.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>y : Symbol(y, Decl(one.ts, 0, 13))
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(one.ts, 1, 27))
>item.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(one.ts, 1, 27))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

=== tests/cases/compiler/two.ts ===
declare const y: number[][] | string[];
>y : Symbol(y, Decl(two.ts, 0, 13))

export const yThen = y.map(item => item.length);
>yThen : Symbol(yThen, Decl(two.ts, 1, 12))
>y.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>y : Symbol(y, Decl(two.ts, 0, 13))
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(two.ts, 1, 27))
>item.length : Symbol(length, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(two.ts, 1, 27))
>length : Symbol(length, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

