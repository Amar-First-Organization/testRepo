=== tests/cases/compiler/strictNullEmptyDestructuring.ts ===
// Repro from #20873

let [] = null;
>null : null

let { } = null;
>null : null

({} = null);
>({} = null) : any (error)
>{} = null : any (error)
>{} : {}
>null : null

let { } = undefined;
>undefined : undefined

({} = undefined);
>({} = undefined) : any (error)
>{} = undefined : any (error)
>{} : {}
>undefined : undefined

let { } = Math.random() ? {} : null;
>Math.random() ? {} : null : {} | null
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>{} : {}
>null : null

({} = Math.random() ? {} : null);
>({} = Math.random() ? {} : null) : {}
>{} = Math.random() ? {} : null : {}
>{} : {}
>Math.random() ? {} : null : {} | null
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>{} : {}
>null : null

let { } = Math.random() ? {} : undefined;
>Math.random() ? {} : undefined : {} | undefined
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>{} : {}
>undefined : undefined

({} = Math.random() ? {} : undefined);
>({} = Math.random() ? {} : undefined) : {}
>{} = Math.random() ? {} : undefined : {}
>{} : {}
>Math.random() ? {} : undefined : {} | undefined
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>{} : {}
>undefined : undefined

let { } = Math.random() ? null : undefined;
>Math.random() ? null : undefined : null | undefined
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>null : null
>undefined : undefined

({} = Math.random() ? null : undefined);
>({} = Math.random() ? null : undefined) : any (error)
>{} = Math.random() ? null : undefined : any (error)
>{} : {}
>Math.random() ? null : undefined : null | undefined
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>null : null
>undefined : undefined

