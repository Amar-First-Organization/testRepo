//// [tests/cases/conformance/classes/mixinAbstractClassesReturnTypeInference.ts] ////

=== mixinAbstractClassesReturnTypeInference.ts ===
interface Mixin1 {
    mixinMethod(): void;
>mixinMethod : () => void
>            : ^^^^^^    
}

abstract class AbstractBase {
>AbstractBase : AbstractBase
>             : ^^^^^^^^^^^^

    abstract abstractBaseMethod(): void;
>abstractBaseMethod : () => void
>                   : ^^^^^^    
}

function Mixin2<TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) {
>Mixin2 : <TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) => TBase & ((abstract new (...args: any[]) => MixinClass) & { prototype: Mixin2<any>.MixinClass; staticMixinMethod(): void; })
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^   ^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^
>args : any[]
>     : ^^^^^
>baseClass : TBase
>          : ^^^^^

    // must be `abstract` because we cannot know *all* of the possible abstract members that need to be
    // implemented for this to be concrete.
    abstract class MixinClass extends baseClass implements Mixin1 {
>MixinClass : MixinClass
>           : ^^^^^^^^^^
>baseClass : TBase
>          : ^^^^^

        mixinMethod(): void {}
>mixinMethod : () => void
>            : ^^^^^^    

        static staticMixinMethod(): void {}
>staticMixinMethod : () => void
>                  : ^^^^^^    
    }
    return MixinClass;
>MixinClass : TBase & ((abstract new (...args: any[]) => MixinClass) & { prototype: Mixin2<any>.MixinClass; staticMixinMethod(): void; })
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

class DerivedFromAbstract2 extends Mixin2(AbstractBase) {
>DerivedFromAbstract2 : DerivedFromAbstract2
>                     : ^^^^^^^^^^^^^^^^^^^^
>Mixin2(AbstractBase) : AbstractBase & Mixin2<typeof AbstractBase>.MixinClass
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Mixin2 : <TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) => TBase & ((abstract new (...args: any[]) => MixinClass) & { prototype: Mixin2<any>.MixinClass; staticMixinMethod(): void; })
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AbstractBase : typeof AbstractBase
>             : ^^^^^^^^^^^^^^^^^^^

    abstractBaseMethod() {}
>abstractBaseMethod : () => void
>                   : ^^^^^^^^^^
}

