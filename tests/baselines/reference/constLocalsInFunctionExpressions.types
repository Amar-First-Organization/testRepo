=== tests/cases/conformance/controlFlow/constLocalsInFunctionExpressions.ts ===
declare function getStringOrNumber(): string | number;
>getStringOrNumber : () => string | number

function f1() {
>f1 : () => void

    const x = getStringOrNumber();
>x : string | number
>getStringOrNumber() : string | number
>getStringOrNumber : () => string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>typeof x : string
>x : string | number
>"string" : "string"

        const f = () => x.length;
>f : () => number
>() => x.length : () => number
>x.length : number
>x : string
>length : number
    }
}

function f2() {
>f2 : () => void

    const x = getStringOrNumber();
>x : string | number
>getStringOrNumber() : string | number
>getStringOrNumber : () => string | number

    if (typeof x !== "string") {
>typeof x !== "string" : boolean
>typeof x : string
>x : string | number
>"string" : "string"

        return;
    }
    const f = () => x.length;
>f : () => number
>() => x.length : () => number
>x.length : number
>x : string
>length : number
}

function f3() {
>f3 : () => void

    const x = getStringOrNumber();
>x : string | number
>getStringOrNumber() : string | number
>getStringOrNumber : () => string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>typeof x : string
>x : string | number
>"string" : "string"

        const f = function() { return x.length; };
>f : () => number
>function() { return x.length; } : () => number
>x.length : number
>x : string
>length : number
    }
}

function f4() {
>f4 : () => void

    const x = getStringOrNumber();
>x : string | number
>getStringOrNumber() : string | number
>getStringOrNumber : () => string | number

    if (typeof x !== "string") {
>typeof x !== "string" : boolean
>typeof x : string
>x : string | number
>"string" : "string"

        return;
    }
    const f = function() { return x.length; };
>f : () => number
>function() { return x.length; } : () => number
>x.length : number
>x : string
>length : number
}

function f5() {
>f5 : () => void

    const x = getStringOrNumber();
>x : string | number
>getStringOrNumber() : string | number
>getStringOrNumber : () => string | number

    if (typeof x === "string") {
>typeof x === "string" : boolean
>typeof x : string
>x : string | number
>"string" : "string"

        const f = () => () => x.length;
>f : () => () => number
>() => () => x.length : () => () => number
>() => x.length : () => number
>x.length : number
>x : string
>length : number
    }
}

declare function getReadonlyFieldStringOrNumber(): { readonly a: string | number };
>getReadonlyFieldStringOrNumber : () => { readonly a: string | number; }
>a : string | number

function f6() {
>f6 : () => void

    const x = getReadonlyFieldStringOrNumber();
>x : { readonly a: string | number; }
>getReadonlyFieldStringOrNumber() : { readonly a: string | number; }
>getReadonlyFieldStringOrNumber : () => { readonly a: string | number; }

    if (typeof x.a === 'string') {
>typeof x.a === 'string' : boolean
>typeof x.a : string
>x.a : string | number
>x : { readonly a: string | number; }
>a : string | number
>'string' : "string"

        const f: () => number = () => x.a.length;
>f : () => number
>() => x.a.length : () => number
>x.a.length : number
>x.a : string
>x : { readonly a: string | number; }
>a : string
>length : number
    }
}

