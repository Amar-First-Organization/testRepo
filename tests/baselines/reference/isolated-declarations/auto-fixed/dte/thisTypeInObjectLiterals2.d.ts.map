//// [tests/cases/conformance/types/thisType/thisTypeInObjectLiterals2.ts] ////



/// [Declarations] ////



//// [thisTypeInObjectLiterals2.d.ts]
declare let obj1: {
    a: number;
    f(): number;
    b: string;
    c: {
        g(): void;
    };
    readonly d: number;
    e: string;
};
type Point = {
    x: number;
    y: number;
    z?: number;
    moveBy(dx: number, dy: number, dz?: number): void;
};
declare let p1: Point;
declare let p2: Point | null;
declare let p3: Point | undefined;
declare let p4: Point | null | undefined;
declare function f1(p: Point): void;
declare function f2(p: Point | null | undefined): void;
type ObjectDescriptor<D, M> = {
    data?: D;
    methods?: M & ThisType<D & M>;
};
declare function makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M;
declare let x1: {
    x: number;
    y: number;
} & {
    moveBy(dx: number, dy: number): void;
};
type ObjectDescriptor2<D, M> = ThisType<D & M> & {
    data?: D;
    methods?: M;
};
declare function makeObject2<D, M>(desc: ObjectDescriptor<D, M>): D & M;
declare let x2: {
    x: number;
    y: number;
} & {
    moveBy(dx: number, dy: number): void;
};
type PropDesc<T> = {
    value?: T;
    get?(): T;
    set?(value: T): void;
};
type PropDescMap<T> = {
    [K in keyof T]: PropDesc<T[K]>;
};
declare function defineProp<T, K extends string, U>(obj: T, name: K, desc: PropDesc<U> & ThisType<T>): T & Record<K, U>;
declare function defineProps<T, U>(obj: T, descs: PropDescMap<U> & ThisType<T>): T & U;
declare let p10: Point & Record<"foo", number>;
declare let p11: Point & Record<"bar", number>;
declare let p12: Point & {
    foo: number;
    bar: number;
};
type Accessors<T> = {
    [K in keyof T]: (() => T[K]) | Computed<T[K]>;
};
type Dictionary<T> = {
    [x: string]: T;
};
type Computed<T> = {
    get?(): T;
    set?(value: T): void;
};
type VueOptions<D, M, P> = ThisType<D & M & P> & {
    data?: D | (() => D);
    methods?: M;
    computed?: Accessors<P>;
};
declare const Vue: new <D, M, P>(options: VueOptions<D, M, P>) => D & M & P;
declare let vue: {
    x: number;
    y: number;
} & {
    f(x: string): number;
} & {
    test: number;
    hello: string;
};
//# sourceMappingURL=thisTypeInObjectLiterals2.d.ts.map

/// [Declarations Maps] ////


//// [thisTypeInObjectLiterals2.d.ts.map]
{"version":3,"file":"thisTypeInObjectLiterals2.d.ts","sourceRoot":"","sources":["thisTypeInObjectLiterals2.ts"],"names":[],"mappings":"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"}

//// https://sokra.github.io/source-map-visualization#base64,ZGVjbGFyZSBsZXQgb2JqMTogew0KICAgIGE6IG51bWJlcjsNCiAgICBmKCk6IG51bWJlcjsNCiAgICBiOiBzdHJpbmc7DQogICAgYzogew0KICAgICAgICBnKCk6IHZvaWQ7DQogICAgfTsNCiAgICByZWFkb25seSBkOiBudW1iZXI7DQogICAgZTogc3RyaW5nOw0KfTsNCnR5cGUgUG9pbnQgPSB7DQogICAgeDogbnVtYmVyOw0KICAgIHk6IG51bWJlcjsNCiAgICB6PzogbnVtYmVyOw0KICAgIG1vdmVCeShkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBkej86IG51bWJlcik6IHZvaWQ7DQp9Ow0KZGVjbGFyZSBsZXQgcDE6IFBvaW50Ow0KZGVjbGFyZSBsZXQgcDI6IFBvaW50IHwgbnVsbDsNCmRlY2xhcmUgbGV0IHAzOiBQb2ludCB8IHVuZGVmaW5lZDsNCmRlY2xhcmUgbGV0IHA0OiBQb2ludCB8IG51bGwgfCB1bmRlZmluZWQ7DQpkZWNsYXJlIGZ1bmN0aW9uIGYxKHA6IFBvaW50KTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gZjIocDogUG9pbnQgfCBudWxsIHwgdW5kZWZpbmVkKTogdm9pZDsNCnR5cGUgT2JqZWN0RGVzY3JpcHRvcjxELCBNPiA9IHsNCiAgICBkYXRhPzogRDsNCiAgICBtZXRob2RzPzogTSAmIFRoaXNUeXBlPEQgJiBNPjsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIG1ha2VPYmplY3Q8RCwgTT4oZGVzYzogT2JqZWN0RGVzY3JpcHRvcjxELCBNPik6IEQgJiBNOw0KZGVjbGFyZSBsZXQgeDE6IHsNCiAgICB4OiBudW1iZXI7DQogICAgeTogbnVtYmVyOw0KfSAmIHsNCiAgICBtb3ZlQnkoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IHZvaWQ7DQp9Ow0KdHlwZSBPYmplY3REZXNjcmlwdG9yMjxELCBNPiA9IFRoaXNUeXBlPEQgJiBNPiAmIHsNCiAgICBkYXRhPzogRDsNCiAgICBtZXRob2RzPzogTTsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIG1ha2VPYmplY3QyPEQsIE0+KGRlc2M6IE9iamVjdERlc2NyaXB0b3I8RCwgTT4pOiBEICYgTTsNCmRlY2xhcmUgbGV0IHgyOiB7DQogICAgeDogbnVtYmVyOw0KICAgIHk6IG51bWJlcjsNCn0gJiB7DQogICAgbW92ZUJ5KGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiB2b2lkOw0KfTsNCnR5cGUgUHJvcERlc2M8VD4gPSB7DQogICAgdmFsdWU/OiBUOw0KICAgIGdldD8oKTogVDsNCiAgICBzZXQ/KHZhbHVlOiBUKTogdm9pZDsNCn07DQp0eXBlIFByb3BEZXNjTWFwPFQ+ID0gew0KICAgIFtLIGluIGtleW9mIFRdOiBQcm9wRGVzYzxUW0tdPjsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGRlZmluZVByb3A8VCwgSyBleHRlbmRzIHN0cmluZywgVT4ob2JqOiBULCBuYW1lOiBLLCBkZXNjOiBQcm9wRGVzYzxVPiAmIFRoaXNUeXBlPFQ+KTogVCAmIFJlY29yZDxLLCBVPjsNCmRlY2xhcmUgZnVuY3Rpb24gZGVmaW5lUHJvcHM8VCwgVT4ob2JqOiBULCBkZXNjczogUHJvcERlc2NNYXA8VT4gJiBUaGlzVHlwZTxUPik6IFQgJiBVOw0KZGVjbGFyZSBsZXQgcDEwOiBQb2ludCAmIFJlY29yZDwiZm9vIiwgbnVtYmVyPjsNCmRlY2xhcmUgbGV0IHAxMTogUG9pbnQgJiBSZWNvcmQ8ImJhciIsIG51bWJlcj47DQpkZWNsYXJlIGxldCBwMTI6IFBvaW50ICYgew0KICAgIGZvbzogbnVtYmVyOw0KICAgIGJhcjogbnVtYmVyOw0KfTsNCnR5cGUgQWNjZXNzb3JzPFQ+ID0gew0KICAgIFtLIGluIGtleW9mIFRdOiAoKCkgPT4gVFtLXSkgfCBDb21wdXRlZDxUW0tdPjsNCn07DQp0eXBlIERpY3Rpb25hcnk8VD4gPSB7DQogICAgW3g6IHN0cmluZ106IFQ7DQp9Ow0KdHlwZSBDb21wdXRlZDxUPiA9IHsNCiAgICBnZXQ/KCk6IFQ7DQogICAgc2V0Pyh2YWx1ZTogVCk6IHZvaWQ7DQp9Ow0KdHlwZSBWdWVPcHRpb25zPEQsIE0sIFA+ID0gVGhpc1R5cGU8RCAmIE0gJiBQPiAmIHsNCiAgICBkYXRhPzogRCB8ICgoKSA9PiBEKTsNCiAgICBtZXRob2RzPzogTTsNCiAgICBjb21wdXRlZD86IEFjY2Vzc29yczxQPjsNCn07DQpkZWNsYXJlIGNvbnN0IFZ1ZTogbmV3IDxELCBNLCBQPihvcHRpb25zOiBWdWVPcHRpb25zPEQsIE0sIFA+KSA9PiBEICYgTSAmIFA7DQpkZWNsYXJlIGxldCB2dWU6IHsNCiAgICB4OiBudW1iZXI7DQogICAgeTogbnVtYmVyOw0KfSAmIHsNCiAgICBmKHg6IHN0cmluZyk6IG51bWJlcjsNCn0gJiB7DQogICAgdGVzdDogbnVtYmVyOw0KICAgIGhlbGxvOiBzdHJpbmc7DQp9Ow0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhpc1R5cGVJbk9iamVjdExpdGVyYWxzMi5kLnRzLm1hcA==,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhpc1R5cGVJbk9iamVjdExpdGVyYWxzMi5kLnRzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGhpc1R5cGVJbk9iamVjdExpdGVyYWxzMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxRQUFBLElBQUksSUFBSTs7U0FFQyxNQUFNOzs7YUFLRixJQUFJOztnQkFJSixNQUFNO09BR04sTUFBTTtDQU1sQixDQUFDO0FBS0YsS0FBSyxLQUFLLEdBQUc7SUFDVCxDQUFDLEVBQUUsTUFBTSxDQUFDO0lBQ1YsQ0FBQyxFQUFFLE1BQU0sQ0FBQztJQUNWLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztJQUNYLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQztDQUNyRCxDQUFBO0FBRUQsUUFBQSxJQUFJLEVBQUUsRUFBRSxLQVVQLENBQUM7QUFFRixRQUFBLElBQUksRUFBRSxFQUFFLEtBQUssR0FBRyxJQVVmLENBQUM7QUFFRixRQUFBLElBQUksRUFBRSxFQUFFLEtBQUssR0FBRyxTQVVmLENBQUM7QUFFRixRQUFBLElBQUksRUFBRSxFQUFFLEtBQUssR0FBRyxJQUFJLEdBQUcsU0FVdEIsQ0FBQztBQUVGLE9BQU8sVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUM7QUFjcEMsT0FBTyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBaUJ2RCxLQUFLLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUk7SUFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDakMsQ0FBQTtBQUVELE9BQU8sVUFBVSxVQUFVLENBQUMs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LENBQUMsQ0FBQztJQUNWLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0NBQ3hCLENBQUE7QUFFRCxLQUFLLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRztJQUM3QyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNaLFFBQVEsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMzQixDQUFBO0FBRUQsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRTVFLFFBQUEsSUFBSSxHQUFHLEVBQUU7SUFDTCxDQUFDLEVBQUUsTUFBTSxDQUFDO0lBQ1YsQ0FBQyxFQUFFLE1BQU0sQ0FBQztDQUNiLEdBQUc7SUFDQSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDeEIsR0FBRztJQUNBLElBQUksRUFBRSxNQUFNLENBQUM7SUFDYixLQUFLLEVBQUUsTUFBTSxDQUFDO0NBb0JoQixDQUFDIn0=,Ly8gSW4gbWV0aG9kcyBvZiBhbiBvYmplY3QgbGl0ZXJhbCB3aXRoIG5vIGNvbnRleHR1YWwgdHlwZSwgJ3RoaXMnIGhhcyB0aGUgdHlwZQovLyBvZiB0aGUgb2JqZWN0IGxpdGVyYWwuCgpsZXQgb2JqMSA9IHsKICAgIGE6IDEsCiAgICBmKCk6IG51bWJlciB7CiAgICAgICAgcmV0dXJuIHRoaXMuYTsKICAgIH0sCiAgICBiOiAiaGVsbG8iLAogICAgYzogewogICAgICAgIGcoKTogdm9pZCB7CiAgICAgICAgICAgIHRoaXMuZygpOwogICAgICAgIH0KICAgIH0sCiAgICBnZXQgZCgpOiBudW1iZXIgewogICAgICAgIHJldHVybiB0aGlzLmE7CiAgICB9LAogICAgZ2V0IGUoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gdGhpcy5iOwogICAgfSwKICAgIHNldCBlKHZhbHVlKSB7CiAgICAgICAgdGhpcy5iID0gdmFsdWU7CiAgICB9Cn07CgovLyBJbiBtZXRob2RzIG9mIGFuIG9iamVjdCBsaXRlcmFsIHdpdGggYSBjb250ZXh0dWFsIHR5cGUsICd0aGlzJyBoYXMgdGhlCi8vIGNvbnRleHR1YWwgdHlwZS4KCnR5cGUgUG9pbnQgPSB7CiAgICB4OiBudW1iZXI7CiAgICB5OiBudW1iZXI7CiAgICB6PzogbnVtYmVyOwogICAgbW92ZUJ5KGR4OiBudW1iZXIsIGR5OiBudW1iZXIsIGR6PzogbnVtYmVyKTogdm9pZDsKfQoKbGV0IHAxOiBQb2ludCA9IHsKICAgIHg6IDEwLAogICAgeTogMjAsCiAgICBtb3ZlQnkoZHgsIGR5LCBkeikgewogICAgICAgIHRoaXMueCArPSBkeDsKICAgICAgICB0aGlzLnkgKz0gZHk7CiAgICAgICAgaWYgKHRoaXMueiAmJiBkeikgewogICAgICAgICAgICB0aGlzLnogKz0gZHo7CiAgICAgICAgfQogICAgfQp9OwoKbGV0IHAyOiBQb2ludCB8IG51bGwgPSB7CiAgICB4OiAxMCwKICAgIHk6IDIwLAogICAgbW92ZUJ5KGR4LCBkeSwgZHopIHsKICAgICAgICB0aGlzLnggKz0gZHg7CiAgICAgICAgdGhpcy55ICs9IGR5OwogICAgICAgIGlmICh0aGlzLnogJiYgZHopIHsKICAgICAgICAgICAgdGhpcy56ICs9IGR6OwogICAgICAgIH0KICAgIH0KfTsKCmxldCBwMzogUG9pbnQgfCB1bmRlZmluZWQgPSB7CiAgICB4OiAxMCwKICAgIHk6IDIwLAogICAgbW92ZUJ5KGR4LCBkeSwgZHopIHsKICAgICAgICB0aGlzLnggKz0gZHg7CiAgICAgICAgdGhpcy55ICs9IGR5OwogICAgICAgIGlmICh0aGlzLnogJiYgZHopIHsKICAgICAgICAgICAgdGhpcy56ICs9IGR6OwogICAgICAgIH0KICAgIH0KfTsKCmxldCBwNDogUG9pbnQgfCBudWxsIHwgdW5kZWZpbmVkID0gewogICAgeDogMTAsCiAgICB5OiAyMCwKICAgIG1vdmVCeShkeCwgZHksIGR6KSB7CiAgICAgICAgdGhpcy54ICs9IGR4OwogICAgICAgIHRoaXMueSArPSBkeTsKICAgICAgICBpZiAodGhpcy56ICYmIGR6KSB7CiAgICAgICAgICAgIHRoaXMueiArPSBkejsKICAgICAgICB9CiAgICB9Cn07CgpkZWNsYXJlIGZ1bmN0aW9uIGYxKHA6IFBvaW50KTogdm9pZDsKCmYxKHsKICAgIHg6IDEwLAogICAgeTogMjAsCiAgICBtb3ZlQnkoZHgsIGR5LCBkeikgewogICAgICAgIHRoaXMueCArPSBkeDsKICAgICAgICB0aGlzLnkgKz0gZHk7CiAgICAgICAgaWYgKHRoaXMueiAmJiBkeikgewogICAgICAgICAgICB0aGlzLnogKz0gZHo7CiAgICAgICAgfQogICAgfQp9KTsKCmRlY2xhcmUgZnVuY3Rpb24gZjIocDogUG9pbnQgfCBudWxsIHwgdW5kZWZpbmVkKTogdm9pZDsKCmYyKHsKICAgIHg6IDEwLAogICAgeTogMjAsCiAgICBtb3ZlQnkoZHgsIGR5LCBkeikgewogICAgICAgIHRoaXMueCArPSBkeDsKICAgICAgICB0aGlzLnkgKz0gZHk7CiAgICAgICAgaWYgKHRoaXMueiAmJiBkeikgewogICAgICAgICAgICB0aGlzLnogKz0gZHo7CiAgICAgICAgfQogICAgfQp9KTsKCi8vIEluIG1ldGhvZHMgb2YgYW4gb2JqZWN0IGxpdGVyYWwgd2l0aCBhIGNvbnRleHR1YWwgdHlwZSB0aGF0IGluY2x1ZGVzIHNvbWUKLy8gVGhpc1R5cGU8VD4sICd0aGlzJyBpcyBvZiB0eXBlIFQuCgp0eXBlIE9iamVjdERlc2NyaXB0b3I8RCwgTT4gPSB7CiAgICBkYXRhPzogRDsKICAgIG1ldGhvZHM/OiBNICYgVGhpc1R5cGU8RCAmIE0+OyAgLy8gVHlwZSBvZiAndGhpcycgaW4gbWV0aG9kcyBpcyBEICYgTQp9CgpkZWNsYXJlIGZ1bmN0aW9uIG1ha2VPYmplY3Q8RCwgTT4oZGVzYzogT2JqZWN0RGVzY3JpcHRvcjxELCBNPik6IEQgJiBNOwoKbGV0IHgxOiB7CiAgICB4OiBudW1iZXI7CiAgICB5OiBudW1iZXI7Cn0gJiB7CiAgICBtb3ZlQnkoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IHZvaWQ7Cn0gPSBtYWtlT2JqZWN0KHsKICAgIGRhdGE6IHsgeDogMCwgeTogMCB9LAogICAgbWV0aG9kczogewogICAgICAgIG1vdmVCeShkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7CiAgICAgICAgICAgIHRoaXMueCArPSBkeDsgIC8vIFN0cm9uZ2x5IHR5cGVkIHRoaXMKICAgICAgICAgICAgdGhpcy55ICs9IGR5OyAgLy8gU3Ryb25nbHkgdHlwZWQgdGhpcwogICAgICAgIH0KICAgIH0KfSk7CgovLyBJbiBtZXRob2RzIGNvbnRhaW5lZCBpbiBhbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGEgY29udGV4dHVhbCB0eXBlIHRoYXQgaW5jbHVkZXMKLy8gc29tZSBUaGlzVHlwZTxUPiwgJ3RoaXMnIGlzIG9mIHR5cGUgVC4KCnR5cGUgT2JqZWN0RGVzY3JpcHRvcjI8RCwgTT4gPSBUaGlzVHlwZTxEICYgTT4gJiB7CiAgICBkYXRhPzogRDsKICAgIG1ldGhvZHM/OiBNOwp9CgpkZWNsYXJlIGZ1bmN0aW9uIG1ha2VPYmplY3QyPEQsIE0+KGRlc2M6IE9iamVjdERlc2NyaXB0b3I8RCwgTT4pOiBEICYgTTsKCmxldCB4MjogewogICAgeDogbnVtYmVyOwogICAgeTogbnVtYmVyOwp9ICYgewogICAgbW92ZUJ5KGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiB2b2lkOwp9ID0gbWFrZU9iamVjdDIoewogICAgZGF0YTogeyB4OiAwLCB5OiAwIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgbW92ZUJ5KGR4OiBudW1iZXIsIGR5OiBudW1iZXIpIHsKICAgICAgICAgICAgdGhpcy54ICs9IGR4OyAgLy8gU3Ryb25nbHkgdHlwZWQgdGhpcwogICAgICAgICAgICB0aGlzLnkgKz0gZHk7ICAvLyBTdHJvbmdseSB0eXBlZCB0aGlzCiAgICAgICAgfQogICAgfQp9KTsKCi8vIENoZWNrIHBhdHRlcm4gc2ltaWxhciB0byBPYmplY3QuZGVmaW5lUHJvcGVydHkgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzCgp0eXBlIFByb3BEZXNjPFQ+ID0gewogICAgdmFsdWU/OiBUOwogICAgZ2V0PygpOiBUOwogICAgc2V0Pyh2YWx1ZTogVCk6IHZvaWQ7Cn0KCnR5cGUgUHJvcERlc2NNYXA8VD4gPSB7CiAgICBbSyBpbiBrZXlvZiBUXTogUHJvcERlc2M8VFtLXT47Cn0KCmRlY2xhcmUgZnVuY3Rpb24gZGVmaW5lUHJvcDxULCBLIGV4dGVuZHMgc3RyaW5nLCBVPihvYmo6IFQsIG5hbWU6IEssIGRlc2M6IFByb3BEZXNjPFU+ICYgVGhpc1R5cGU8VD4pOiBUICYgUmVjb3JkPEssIFU+OwoKZGVjbGFyZSBmdW5jdGlvbiBkZWZpbmVQcm9wczxULCBVPihvYmo6IFQsIGRlc2NzOiBQcm9wRGVzY01hcDxVPiAmIFRoaXNUeXBlPFQ+KTogVCAmIFU7CgpsZXQgcDEwOiBQb2ludCAmIFJlY29yZDwiZm9vIiwgbnVtYmVyPiA9IGRlZmluZVByb3AocDEsICJmb28iLCB7IHZhbHVlOiA0MiB9KTsKcDEwLmZvbyA9IHAxMC5mb28gKyAxOwoKbGV0IHAxMTogUG9pbnQgJiBSZWNvcmQ8ImJhciIsIG51bWJlcj4gPSBkZWZpbmVQcm9wKHAxLCAiYmFyIiwgewogICAgZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLng7CiAgICB9LAogICAgc2V0KHZhbHVlOiBudW1iZXIpIHsKICAgICAgICB0aGlzLnggPSB2YWx1ZTsKICAgIH0KfSk7CnAxMS5iYXIgPSBwMTEuYmFyICsgMTsKCmxldCBwMTI6IFBvaW50ICYgewogICAgZm9vOiBudW1iZXI7CiAgICBiYXI6IG51bWJlcjsKfSA9IGRlZmluZVByb3BzKHAxLCB7CiAgICBmb286IHsKICAgICAgICB2YWx1ZTogNDIKICAgIH0sCiAgICBiYXI6IHsKICAgICAgICBnZXQoKTogbnVtYmVyIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMueDsKICAgICAgICB9LAogICAgICAgIHNldCh2YWx1ZTogbnVtYmVyKSB7CiAgICAgICAgICAgIHRoaXMueCA9IHZhbHVlOwogICAgICAgIH0KICAgIH0KfSk7CnAxMi5mb28gPSBwMTIuZm9vICsgMTsKcDEyLmJhciA9IHAxMi5iYXIgKyAxOwoKLy8gUHJvb2Ygb2YgY29uY2VwdCBmb3IgdHlwaW5nIG9mIFZ1ZS5qcwoKdHlwZSBBY2Nlc3NvcnM8VD4gPSB7IFtLIGluIGtleW9mIFRdOiAoKCkgPT4gVFtLXSkgfCBDb21wdXRlZDxUW0tdPiB9OwoKdHlwZSBEaWN0aW9uYXJ5PFQ+ID0geyBbeDogc3RyaW5nXTogVCB9Cgp0eXBlIENvbXB1dGVkPFQ+ID0gewogICAgZ2V0PygpOiBUOwogICAgc2V0Pyh2YWx1ZTogVCk6IHZvaWQ7Cn0KCnR5cGUgVnVlT3B0aW9uczxELCBNLCBQPiA9IFRoaXNUeXBlPEQgJiBNICYgUD4gJiB7CiAgICBkYXRhPzogRCB8ICgoKSA9PiBEKTsKICAgIG1ldGhvZHM/OiBNOwogICAgY29tcHV0ZWQ/OiBBY2Nlc3NvcnM8UD47Cn0KCmRlY2xhcmUgY29uc3QgVnVlOiBuZXcgPEQsIE0sIFA+KG9wdGlvbnM6IFZ1ZU9wdGlvbnM8RCwgTSwgUD4pID0+IEQgJiBNICYgUDsKCmxldCB2dWU6IHsKICAgIHg6IG51bWJlcjsKICAgIHk6IG51bWJlcjsKfSAmIHsKICAgIGYoeDogc3RyaW5nKTogbnVtYmVyOwp9ICYgewogICAgdGVzdDogbnVtYmVyOwogICAgaGVsbG86IHN0cmluZzsKfSA9IG5ldyBWdWUoewogICAgZGF0YTogKCkgPT4gKHsgeDogMSwgeTogMiB9KSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBmKHg6IHN0cmluZykgewogICAgICAgICAgICByZXR1cm4gdGhpcy54OwogICAgICAgIH0KICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIHRlc3QoKTogbnVtYmVyIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMueDsKICAgICAgICB9LAogICAgICAgIGhlbGxvOiB7CiAgICAgICAgICAgIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiaGkiOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXQodmFsdWU6IHN0cmluZykgewogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9KTsKCnZ1ZTsKdnVlLng7CnZ1ZS5mKCJhYmMiKTsKdnVlLnRlc3Q7CnZ1ZS5oZWxsbzsK

