//// [tests/cases/conformance/types/tuple/arityAndOrderCompatibility01.ts] ////

=== arityAndOrderCompatibility01.ts ===
interface StrNum extends Array<string|number> {
    0: string;
>0 : string
>  : ^^^^^^

    1: number;
>1 : number
>  : ^^^^^^

    length: 2;
>length : 2
>       : ^
}

var x: [string, number];
>x : [string, number]
>  : ^^^^^^^^^^^^^^^^

var y: StrNum
>y : StrNum
>  : ^^^^^^

var z: {
>z : { 0: string; 1: number; length: 2; }
>  : ^^^^^      ^^^^^      ^^^^^^^^^^ ^^^

    0: string;
>0 : string
>  : ^^^^^^

    1: number;
>1 : number
>  : ^^^^^^

    length: 2;
>length : 2
>       : ^
}

var [a, b, c] = x;
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^
>c : undefined
>  : ^^^^^^^^^
>x : [string, number]
>  : ^^^^^^^^^^^^^^^^

var [d, e, f] = y;
>d : string
>  : ^^^^^^
>e : number
>  : ^^^^^^
>f : string | number
>  : ^^^^^^^^^^^^^^^
>y : StrNum
>  : ^^^^^^

var [g, h, i] = z;
>g : any
>  : ^^^
>h : any
>  : ^^^
>i : any
>  : ^^^
>z : { 0: string; 1: number; length: 2; }
>  : ^^^^^      ^^^^^      ^^^^^^^^^^ ^^^

var j1: [number, number, number] = x;
>j1 : [number, number, number]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>x : [number, number, number]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^

var j2: [number, number, number] = y;
>j2 : [number, number, number]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>y : [number, number, number]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^

var j3: [number, number, number] = z;
>j3 : [number, number, number]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>z : [number, number, number]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^

var k1: [string, number, number] = x;
>k1 : [string, number, number]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>x : [string, number, number]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^

var k2: [string, number, number] = y;
>k2 : [string, number, number]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>y : [string, number, number]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^

var k3: [string, number, number] = z;
>k3 : [string, number, number]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>z : [string, number, number]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^

var l1: [number] = x;
>l1 : [number]
>   : ^^^^^^^^
>x : [number]
>  : ^^^^^^^^

var l2: [number] = y;
>l2 : [number]
>   : ^^^^^^^^
>y : [number]
>  : ^^^^^^^^

var l3: [number] = z;
>l3 : [number]
>   : ^^^^^^^^
>z : [number]
>  : ^^^^^^^^

var m1: [string] = x;
>m1 : [string]
>   : ^^^^^^^^
>x : [string]
>  : ^^^^^^^^

var m2: [string] = y;
>m2 : [string]
>   : ^^^^^^^^
>y : [string]
>  : ^^^^^^^^

var m3: [string] = z;
>m3 : [string]
>   : ^^^^^^^^
>z : [string]
>  : ^^^^^^^^

var n1: [number, string] = x;
>n1 : [number, string]
>   : ^^^^^^^^^^^^^^^^
>x : [number, string]
>  : ^^^^^^^^^^^^^^^^

var n2: [number, string] = y;
>n2 : [number, string]
>   : ^^^^^^^^^^^^^^^^
>y : [number, string]
>  : ^^^^^^^^^^^^^^^^

var n3: [number, string] = z;
>n3 : [number, string]
>   : ^^^^^^^^^^^^^^^^
>z : [number, string]
>  : ^^^^^^^^^^^^^^^^

var o1: [string, number] = x;
>o1 : [string, number]
>   : ^^^^^^^^^^^^^^^^
>x : [string, number]
>  : ^^^^^^^^^^^^^^^^

var o2: [string, number] = y;
>o2 : [string, number]
>   : ^^^^^^^^^^^^^^^^
>y : [string, number]
>  : ^^^^^^^^^^^^^^^^

var o3: [string, number] = y;
>o3 : [string, number]
>   : ^^^^^^^^^^^^^^^^
>y : [string, number]
>  : ^^^^^^^^^^^^^^^^

