=== tests/cases/compiler/narrowingMutualSubtypes.ts ===
// Check that `any` is a strict supertype of `unknown`

declare const ru1: { [x: string]: unknown };
>ru1 : { [x: string]: unknown; }
>x : string

declare const ra1: { [x: string]: any };
>ra1 : { [x: string]: any; }
>x : string

const a1a = [ru1, ra1];  // { [x: string]: any }[]
>a1a : { [x: string]: any; }[]
>[ru1, ra1] : { [x: string]: any; }[]
>ru1 : { [x: string]: unknown; }
>ra1 : { [x: string]: any; }

const a1b = [ra1, ru1];  // { [x: string]: any }[]
>a1b : { [x: string]: any; }[]
>[ra1, ru1] : { [x: string]: any; }[]
>ra1 : { [x: string]: any; }
>ru1 : { [x: string]: unknown; }

declare const ra2: { [x: string]: any };
>ra2 : { [x: string]: any; }
>x : string

declare const ru2: { [x: string]: unknown };
>ru2 : { [x: string]: unknown; }
>x : string

const a2a = [ru2, ra2];  // { [x: string]: any }[]
>a2a : { [x: string]: any; }[]
>[ru2, ra2] : { [x: string]: any; }[]
>ru2 : { [x: string]: unknown; }
>ra2 : { [x: string]: any; }

const a2b = [ra2, ru2];  // { [x: string]: any }[]
>a2b : { [x: string]: any; }[]
>[ra2, ru2] : { [x: string]: any; }[]
>ra2 : { [x: string]: any; }
>ru2 : { [x: string]: unknown; }

// Check that `{}` is strict supertype of any non-empty object

const c3 = {};
>c3 : {}
>{} : {}

declare const r3: { [x: string]: unknown }
>r3 : { [x: string]: unknown; }
>x : string

const a3a = [c3, r3];  // {}[]
>a3a : {}[]
>[c3, r3] : {}[]
>c3 : {}
>r3 : { [x: string]: unknown; }

const a3b = [r3, c3];  // {}[]
>a3b : {}[]
>[r3, c3] : {}[]
>r3 : { [x: string]: unknown; }
>c3 : {}

declare const r4: { [x: string]: unknown }
>r4 : { [x: string]: unknown; }
>x : string

const c4 = {};
>c4 : {}
>{} : {}

const a4a = [c4, r4];  // {}[]
>a4a : {}[]
>[c4, r4] : {}[]
>c4 : {}
>r4 : { [x: string]: unknown; }

const a4b = [r4, c4];  // {}[]
>a4b : {}[]
>[r4, c4] : {}[]
>r4 : { [x: string]: unknown; }
>c4 : {}

// Check that {} is a strict supertype of Record<string, unknown>

declare function isObject1(value: unknown): value is Record<string, unknown>;
>isObject1 : (value: unknown) => value is Record<string, unknown>
>value : unknown

function gg1(x: {}) {
>gg1 : (x: {}) => void
>x : {}

    if (isObject1(x)) {
>isObject1(x) : boolean
>isObject1 : (value: unknown) => value is Record<string, unknown>
>x : {}

        x;  // Record<string, unknown>
>x : Record<string, unknown>
    }
    else {
        x;  // {}
>x : {}
    }
    x;  // {}
>x : {}
}

declare function isObject2(value: unknown): value is {};
>isObject2 : (value: unknown) => value is {}
>value : unknown

function gg2(x: Record<string, unknown>) {
>gg2 : (x: Record<string, unknown>) => void
>x : Record<string, unknown>

    if (isObject2(x)) {
>isObject2(x) : boolean
>isObject2 : (value: unknown) => value is {}
>x : Record<string, unknown>

        x;  // Record<string, unknown>
>x : Record<string, unknown>
    }
    else {
        x;  // never
>x : never
    }
    x;  // Record<string, unknown>
>x : Record<string, unknown>
}

// Check that {} is a strict supertype of Record<string, any>

declare function isObject3(value: unknown): value is Record<string, any>;
>isObject3 : (value: unknown) => value is Record<string, any>
>value : unknown

function gg3(x: {}) {
>gg3 : (x: {}) => void
>x : {}

    if (isObject3(x)) {
>isObject3(x) : boolean
>isObject3 : (value: unknown) => value is Record<string, any>
>x : {}

        x;  // Record<string, any>
>x : Record<string, any>
    }
    else {
        x;  // {}
>x : {}
    }
    x;  // {}
>x : {}
}

declare function isObject4(value: unknown): value is {};
>isObject4 : (value: unknown) => value is {}
>value : unknown

function gg4(x: Record<string, any>) {
>gg4 : (x: Record<string, any>) => void
>x : Record<string, any>

    if (isObject4(x)) {
>isObject4(x) : boolean
>isObject4 : (value: unknown) => value is {}
>x : Record<string, any>

        x;  // Record<string, any>
>x : Record<string, any>
    }
    else {
        x;  // never
>x : never
    }
    x;  // Record<string, any>
>x : Record<string, any>
}

// Repro from #50916

type Identity<T> = {[K in keyof T]: T[K]};
>Identity : Identity<T>

type Self<T> = T extends unknown ? Identity<T> : never;
>Self : Self<T>

function is<T>(value: T): value is Self<T> {
>is : <T>(value: T) => value is Self<T>
>value : T

    return true;
>true : true
}

type Union =  {a: number} | {b: number} | {c: number};
>Union : { a: number; } | { b: number; } | { c: number; }
>a : number
>b : number
>c : number

function example(x: Union) {
>example : (x: Union) => void
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    if (is(x)) {}
>is(x) : boolean
>is : <T>(value: T) => value is Self<T>
>x : Union

    x;  // Union
>x : Union
}

