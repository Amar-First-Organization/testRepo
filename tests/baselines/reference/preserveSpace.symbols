=== tests/cases/conformance/preserveSpace.ts ===
function f() {
>f : Symbol(f, Decl(preserveSpace.ts, 0, 0))

  return [].filter(x => {
>[].filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(preserveSpace.ts, 1, 19))

        if (!x) return false; // testing comments
>x : Symbol(x, Decl(preserveSpace.ts, 1, 19))

        if (x)
>x : Symbol(x, Decl(preserveSpace.ts, 1, 19))

            return true; // testing comments
        if (x) {
>x : Symbol(x, Decl(preserveSpace.ts, 1, 19))

            return false; // testing comments
        } else {
            console.log("here"); // testing comments
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
        }
        let i: number = 0;
>i : Symbol(i, Decl(preserveSpace.ts, 10, 11))

        while (i > 0) i = i - 1;
>i : Symbol(i, Decl(preserveSpace.ts, 10, 11))
>i : Symbol(i, Decl(preserveSpace.ts, 10, 11))
>i : Symbol(i, Decl(preserveSpace.ts, 10, 11))

        do console.log("here");
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

        while (false);

        try {
            return true;
        } catch (e) {
>e : Symbol(e, Decl(preserveSpace.ts, 17, 17))

            return false;
        }
  });
}
