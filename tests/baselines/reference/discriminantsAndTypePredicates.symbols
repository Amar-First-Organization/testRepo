=== tests/cases/compiler/discriminantsAndTypePredicates.ts ===
// Repro from #10145

interface A { type: 'A' }
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>type : Symbol(A.type, Decl(discriminantsAndTypePredicates.ts, 2, 13))

interface B { type: 'B' }
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>type : Symbol(B.type, Decl(discriminantsAndTypePredicates.ts, 3, 13))

function isA(x: A | B): x is A { return x.type === 'A'; }
>isA : Symbol(isA, Decl(discriminantsAndTypePredicates.ts, 3, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 5, 13))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 5, 13))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>x.type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 5, 13))
>type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))

function isB(x: A | B): x is B { return x.type === 'B'; }
>isB : Symbol(isB, Decl(discriminantsAndTypePredicates.ts, 5, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 6, 13))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 6, 13))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))
>x.type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 6, 13))
>type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))

function foo1(x: A | B): any {
>foo1 : Symbol(foo1, Decl(discriminantsAndTypePredicates.ts, 6, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))

    x;  // A | B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

    if (isA(x)) {
>isA : Symbol(isA, Decl(discriminantsAndTypePredicates.ts, 3, 25))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

        return x;  // A
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
    }
    x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

    if (isB(x)) {
>isB : Symbol(isB, Decl(discriminantsAndTypePredicates.ts, 5, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))

        return x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
    }
    x;  // never
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 8, 14))
}

function foo2(x: A | B): any {
>foo2 : Symbol(foo2, Decl(discriminantsAndTypePredicates.ts, 18, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
>A : Symbol(A, Decl(discriminantsAndTypePredicates.ts, 0, 0))
>B : Symbol(B, Decl(discriminantsAndTypePredicates.ts, 2, 25))

    x;  // A | B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))

    if (x.type === 'A') {
>x.type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
>type : Symbol(type, Decl(discriminantsAndTypePredicates.ts, 2, 13), Decl(discriminantsAndTypePredicates.ts, 3, 13))

        return x;  // A
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
    }
    x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))

    if (x.type === 'B') {
>x.type : Symbol(B.type, Decl(discriminantsAndTypePredicates.ts, 3, 13))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
>type : Symbol(B.type, Decl(discriminantsAndTypePredicates.ts, 3, 13))

        return x;  // B
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
    }
    x;  // never
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 20, 14))
}

// Repro from #30557

interface TypeA {
>TypeA : Symbol(TypeA, Decl(discriminantsAndTypePredicates.ts, 30, 1))

    Name: "TypeA";
>Name : Symbol(TypeA.Name, Decl(discriminantsAndTypePredicates.ts, 34, 17))

    Value1: "Cool stuff!";
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
}

interface TypeB {
>TypeB : Symbol(TypeB, Decl(discriminantsAndTypePredicates.ts, 37, 1))

    Name: "TypeB";
>Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))

    Value2: 0;
>Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
}

type Type = TypeA | TypeB;
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))
>TypeA : Symbol(TypeA, Decl(discriminantsAndTypePredicates.ts, 30, 1))
>TypeB : Symbol(TypeB, Decl(discriminantsAndTypePredicates.ts, 37, 1))

declare function isType(x: unknown): x is Type;
>isType : Symbol(isType, Decl(discriminantsAndTypePredicates.ts, 44, 26))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 46, 24))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 46, 24))
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))

function WorksProperly(data: Type) {
>WorksProperly : Symbol(WorksProperly, Decl(discriminantsAndTypePredicates.ts, 46, 47))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 48, 23))
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))

    if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 48, 23))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

        // TypeA
        const value1 = data.Value1;
>value1 : Symbol(value1, Decl(discriminantsAndTypePredicates.ts, 51, 13))
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 48, 23))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
    }
}

function DoesNotWork(data: unknown) {
>DoesNotWork : Symbol(DoesNotWork, Decl(discriminantsAndTypePredicates.ts, 53, 1))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))

    if (isType(data)) {
>isType : Symbol(isType, Decl(discriminantsAndTypePredicates.ts, 44, 26))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))

        if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

            // TypeA
            const value1 = data.Value1;
>value1 : Symbol(value1, Decl(discriminantsAndTypePredicates.ts, 59, 17))
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 55, 21))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
        }
    }
}

function narrowToNever(data: Type): "Cool stuff!" | 0 {
>narrowToNever : Symbol(narrowToNever, Decl(discriminantsAndTypePredicates.ts, 62, 1))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Type : Symbol(Type, Decl(discriminantsAndTypePredicates.ts, 42, 1))

    if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

        return data.Value1;
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
    }
    if (data.Name === "TypeB") {
>data.Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))

        return data.Value2;
>data.Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
>Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
    }
    return data;
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 64, 23))
}

function narrowToNeverUnknown(data: unknown): "Cool stuff!" | 0 {
>narrowToNeverUnknown : Symbol(narrowToNeverUnknown, Decl(discriminantsAndTypePredicates.ts, 72, 1))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))

    if (isType(data)) {
>isType : Symbol(isType, Decl(discriminantsAndTypePredicates.ts, 44, 26))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))

        if (data.Name === "TypeA") {
>data.Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Name : Symbol(Name, Decl(discriminantsAndTypePredicates.ts, 34, 17), Decl(discriminantsAndTypePredicates.ts, 39, 17))

            return data.Value1;
>data.Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Value1 : Symbol(TypeA.Value1, Decl(discriminantsAndTypePredicates.ts, 35, 18))
        }
        if (data.Name === "TypeB") {
>data.Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Name : Symbol(TypeB.Name, Decl(discriminantsAndTypePredicates.ts, 39, 17))

            return data.Value2;
>data.Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
>Value2 : Symbol(TypeB.Value2, Decl(discriminantsAndTypePredicates.ts, 40, 18))
        }
        return data;
>data : Symbol(data, Decl(discriminantsAndTypePredicates.ts, 74, 30))
    }
    throw "error";
}

type Foo = { kind: "a", a: number } | { kind: "b", b: number };
>Foo : Symbol(Foo, Decl(discriminantsAndTypePredicates.ts, 85, 1))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 12))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 87, 23))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 39))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 87, 50))

type Bar = { kind: "c", c: number } | { kind: "d", d: number };
>Bar : Symbol(Bar, Decl(discriminantsAndTypePredicates.ts, 87, 63))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 12))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 88, 23))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 39))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 88, 50))

declare function isFoo(x: unknown): x is Foo;
>isFoo : Symbol(isFoo, Decl(discriminantsAndTypePredicates.ts, 88, 63))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 90, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 90, 23))
>Foo : Symbol(Foo, Decl(discriminantsAndTypePredicates.ts, 85, 1))

declare function isBar(x: unknown): x is Bar;
>isBar : Symbol(isBar, Decl(discriminantsAndTypePredicates.ts, 90, 45))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 91, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 91, 23))
>Bar : Symbol(Bar, Decl(discriminantsAndTypePredicates.ts, 87, 63))

function blah(x: unknown) {
>blah : Symbol(blah, Decl(discriminantsAndTypePredicates.ts, 91, 45))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))

    if (isFoo(x)) {
>isFoo : Symbol(isFoo, Decl(discriminantsAndTypePredicates.ts, 88, 63))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))

        if (x.kind === "a") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 12), Decl(discriminantsAndTypePredicates.ts, 87, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 12), Decl(discriminantsAndTypePredicates.ts, 87, 39))

            let a = x.a;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 96, 15))
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 87, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 87, 23))
        }
        else if (x.kind === "b") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 87, 39))

            let b = x.b;
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 99, 15))
>x.b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 87, 50))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 87, 50))
        }
    }
    else if (isBar(x)) {
>isBar : Symbol(isBar, Decl(discriminantsAndTypePredicates.ts, 90, 45))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))

        if (x.kind === "c") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 12), Decl(discriminantsAndTypePredicates.ts, 88, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 12), Decl(discriminantsAndTypePredicates.ts, 88, 39))

            let c = x.c;
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 104, 15))
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 88, 23))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 88, 23))
        }
        else if (x.kind === "d") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 39))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 88, 39))

            let d = x.d;
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 107, 15))
>x.d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 88, 50))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 88, 50))
        }
    }
    x  // unknown
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 93, 14))
}

type PrimitiveUnion = number | string
>PrimitiveUnion : Symbol(PrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 111, 1))

type FooComplex = { kind: "a", a: number } | { kind: "b", b: number } | number;
>FooComplex : Symbol(FooComplex, Decl(discriminantsAndTypePredicates.ts, 113, 37))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 46))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))

type BarComplex = { kind: "c", c: number } | { kind: "d", d: number } | string;
>BarComplex : Symbol(BarComplex, Decl(discriminantsAndTypePredicates.ts, 114, 79))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 19))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 46))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))

declare function isPrimitiveUnion(x: unknown): x is PrimitiveUnion;
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 117, 34))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 117, 34))
>PrimitiveUnion : Symbol(PrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 111, 1))

declare function isFooComplex(x: unknown): x is FooComplex;
>isFooComplex : Symbol(isFooComplex, Decl(discriminantsAndTypePredicates.ts, 117, 67))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 118, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 118, 30))
>FooComplex : Symbol(FooComplex, Decl(discriminantsAndTypePredicates.ts, 113, 37))

declare function isBarComplex(x: unknown): x is BarComplex;
>isBarComplex : Symbol(isBarComplex, Decl(discriminantsAndTypePredicates.ts, 118, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 119, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 119, 30))
>BarComplex : Symbol(BarComplex, Decl(discriminantsAndTypePredicates.ts, 114, 79))

declare function isZZYYComplex(x: unknown): x is { kind: "z"; zzz: string } | { kind: "y", yyy: number };
>isZZYYComplex : Symbol(isZZYYComplex, Decl(discriminantsAndTypePredicates.ts, 119, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 120, 31))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 120, 31))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 120, 50))
>zzz : Symbol(zzz, Decl(discriminantsAndTypePredicates.ts, 120, 61))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 120, 79))
>yyy : Symbol(yyy, Decl(discriminantsAndTypePredicates.ts, 120, 90))

function earlyExitsAndStuff(x: unknown) {
>earlyExitsAndStuff : Symbol(earlyExitsAndStuff, Decl(discriminantsAndTypePredicates.ts, 120, 105))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))

    if (!isFooComplex(x) && !isBarComplex(x)) {
>isFooComplex : Symbol(isFooComplex, Decl(discriminantsAndTypePredicates.ts, 117, 67))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>isBarComplex : Symbol(isBarComplex, Decl(discriminantsAndTypePredicates.ts, 118, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))

        if (isZZYYComplex(x)) {
>isZZYYComplex : Symbol(isZZYYComplex, Decl(discriminantsAndTypePredicates.ts, 119, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))

            if (x.kind !== "z") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 120, 50), Decl(discriminantsAndTypePredicates.ts, 120, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 120, 50), Decl(discriminantsAndTypePredicates.ts, 120, 79))

                return x.yyy;
>x.yyy : Symbol(yyy, Decl(discriminantsAndTypePredicates.ts, 120, 90))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>yyy : Symbol(yyy, Decl(discriminantsAndTypePredicates.ts, 120, 90))
            }
            return x.zzz;
>x.zzz : Symbol(zzz, Decl(discriminantsAndTypePredicates.ts, 120, 61))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>zzz : Symbol(zzz, Decl(discriminantsAndTypePredicates.ts, 120, 61))
        }
        return;
    }
    if (!!isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))

        return x;
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
    }
    if (!isZZYYComplex(x)) {
>isZZYYComplex : Symbol(isZZYYComplex, Decl(discriminantsAndTypePredicates.ts, 119, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))

        if (x.kind === "a") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let a = x.a;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 137, 15))
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
        }
        if (x.kind === "b") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let b = x.b;
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 140, 15))
>x.b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))
        }
        if (x.kind === "c") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let c = x.c;
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 143, 15))
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
        }
        if (x.kind === "d") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46), Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let d = x.d;
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 146, 15))
>x.d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 122, 28))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))
        }
    }
}

function bluergh(x: unknown) {
>bluergh : Symbol(bluergh, Decl(discriminantsAndTypePredicates.ts, 149, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

    if (isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

        let a: number | string = x;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 153, 11))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

        return;
    }
    if (isFooComplex(x) && typeof x === "object") {
>isFooComplex : Symbol(isFooComplex, Decl(discriminantsAndTypePredicates.ts, 117, 67))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

        if (x.kind === "a") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 19), Decl(discriminantsAndTypePredicates.ts, 114, 46))

            let a = x.a;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 158, 15))
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 114, 30))
        }
        else if (x.kind === "b") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 114, 46))

            let b = x.b;
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 161, 15))
>x.b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 114, 57))
        }
    }
    if (isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

        let a: number | string = x;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 165, 11))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
    }
    if (isBarComplex(x) && typeof x === "object") {
>isBarComplex : Symbol(isBarComplex, Decl(discriminantsAndTypePredicates.ts, 118, 59))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

        if (x.kind === "c") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 19), Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let c = x.c;
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 169, 15))
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 115, 30))
        }
        else if (x.kind === "d") {
>x.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 46))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 115, 46))

            let d = x.d;
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 172, 15))
>x.d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 115, 57))
        }
    }
    if (isPrimitiveUnion(x)) {
>isPrimitiveUnion : Symbol(isPrimitiveUnion, Decl(discriminantsAndTypePredicates.ts, 115, 79))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))

        let a: number | string = x;
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 176, 11))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
    }
    x  // unknown
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 151, 17))
}

type A1 = { x: number };
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 181, 11))

type B1 = A1 & { kind: "B"; y: number };
>B1 : Symbol(B1, Decl(discriminantsAndTypePredicates.ts, 181, 24))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16))
>y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))

type C1 = A1 & { kind: "C"; z: number };
>C1 : Symbol(C1, Decl(discriminantsAndTypePredicates.ts, 182, 40))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 183, 16))
>z : Symbol(z, Decl(discriminantsAndTypePredicates.ts, 183, 27))

function isBorC(a: A1): a is B1 | C1 {
>isBorC : Symbol(isBorC, Decl(discriminantsAndTypePredicates.ts, 183, 40))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 185, 16))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 185, 16))
>B1 : Symbol(B1, Decl(discriminantsAndTypePredicates.ts, 181, 24))
>C1 : Symbol(C1, Decl(discriminantsAndTypePredicates.ts, 182, 40))

    return (a as any).kind === "B" || (a as any).kind === "C";
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 185, 16))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 185, 16))
}

function isB1(a: A1): a is B1 {
>isB1 : Symbol(isB1, Decl(discriminantsAndTypePredicates.ts, 187, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 189, 14))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 189, 14))
>B1 : Symbol(B1, Decl(discriminantsAndTypePredicates.ts, 181, 24))

    return (a as any).kind === "B";
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 189, 14))
}

function isC1(a: A1): a is C1 {
>isC1 : Symbol(isC1, Decl(discriminantsAndTypePredicates.ts, 191, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 193, 14))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 193, 14))
>C1 : Symbol(C1, Decl(discriminantsAndTypePredicates.ts, 182, 40))

    return (a as any).kind === "C";
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 193, 14))
}

function fn1(a: A1) {
>fn1 : Symbol(fn1, Decl(discriminantsAndTypePredicates.ts, 195, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 197, 13))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))

    if (isBorC(a)) {
>isBorC : Symbol(isBorC, Decl(discriminantsAndTypePredicates.ts, 183, 40))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 197, 13))

        if (a.kind === "B") {
>a.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16), Decl(discriminantsAndTypePredicates.ts, 183, 16))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 197, 13))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16), Decl(discriminantsAndTypePredicates.ts, 183, 16))

            a.y;
>a.y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 197, 13))
>y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))
        }
    }
}

function fn2(a: A1) {
>fn2 : Symbol(fn2, Decl(discriminantsAndTypePredicates.ts, 203, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))
>A1 : Symbol(A1, Decl(discriminantsAndTypePredicates.ts, 179, 1))

    if (!isB1(a)) {
>isB1 : Symbol(isB1, Decl(discriminantsAndTypePredicates.ts, 187, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))

        return;
    }
    if (!isC1(a)) {
>isC1 : Symbol(isC1, Decl(discriminantsAndTypePredicates.ts, 191, 1))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))

        if (a.kind === "B") {
>a.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16))

            a.y;
>a.y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))
>y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))
        }
        return;
    }
    if (a.kind === "B") {
>a.kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16), Decl(discriminantsAndTypePredicates.ts, 183, 16))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))
>kind : Symbol(kind, Decl(discriminantsAndTypePredicates.ts, 182, 16), Decl(discriminantsAndTypePredicates.ts, 183, 16))

        a.y;
>a.y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 205, 13))
>y : Symbol(y, Decl(discriminantsAndTypePredicates.ts, 182, 27))
    }
}

declare function isTypeObj(x: unknown): x is { kind1: string, a?: number, b?: number };
>isTypeObj : Symbol(isTypeObj, Decl(discriminantsAndTypePredicates.ts, 218, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 220, 27))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 220, 27))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 220, 46))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 220, 61))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 220, 73))

declare function isTypeAB(x: unknown): x is { kind1: 'a', a: 1 } | { kind1: 'b', b: 2 };
>isTypeAB : Symbol(isTypeAB, Decl(discriminantsAndTypePredicates.ts, 220, 87))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 221, 26))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 221, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 68))
>b : Symbol(b, Decl(discriminantsAndTypePredicates.ts, 221, 80))

declare function isTypeCD(x: unknown): x is { kind2: 'c', c: 3 } | { kind2: 'd', d: 4 };
>isTypeCD : Symbol(isTypeCD, Decl(discriminantsAndTypePredicates.ts, 221, 88))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 222, 26))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 222, 26))
>kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
>kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 68))
>d : Symbol(d, Decl(discriminantsAndTypePredicates.ts, 222, 80))

function testComposition1(x: unknown) {
>testComposition1 : Symbol(testComposition1, Decl(discriminantsAndTypePredicates.ts, 222, 88))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))

    if (isTypeAB(x)) {
>isTypeAB : Symbol(isTypeAB, Decl(discriminantsAndTypePredicates.ts, 220, 87))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))

        if (isTypeCD(x)) {
>isTypeCD : Symbol(isTypeCD, Decl(discriminantsAndTypePredicates.ts, 221, 88))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))

            if (x.kind1 === 'a') {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

                x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
            }
            if (x.kind2 === 'c') {
>x.kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
>kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))

                x.c;
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
            }
        }
        if (x.kind1 === 'a') {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

            x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
        }
        if (x.kind2 === 'c') {
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))

            x.c;
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 224, 26))
        }
    }
}

function testComposition2(x: unknown) {
>testComposition2 : Symbol(testComposition2, Decl(discriminantsAndTypePredicates.ts, 241, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))

    if (isTypeObj(x)) {
>isTypeObj : Symbol(isTypeObj, Decl(discriminantsAndTypePredicates.ts, 218, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))

        if (isTypeAB(x)) {
>isTypeAB : Symbol(isTypeAB, Decl(discriminantsAndTypePredicates.ts, 220, 87))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))

            if (x.kind1 === "a") {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

                x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
            }
        }
        if (x.kind1 === "a") {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 220, 46), Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 220, 46), Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

            x.a; // Error
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 220, 61), Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 243, 26))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 220, 61), Decl(discriminantsAndTypePredicates.ts, 221, 57))
        }
    }
}

function testComposition3(x: unknown) {
>testComposition3 : Symbol(testComposition3, Decl(discriminantsAndTypePredicates.ts, 254, 1))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

    if (isTypeAB(x)) {
>isTypeAB : Symbol(isTypeAB, Decl(discriminantsAndTypePredicates.ts, 220, 87))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

        if (x.kind1 === 'a') {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

            x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
        }
        return;
    }
    if (x.kind1 === 'a') {
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

        x.a;  // Error
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
    }
    if (isTypeCD(x)) {
>isTypeCD : Symbol(isTypeCD, Decl(discriminantsAndTypePredicates.ts, 221, 88))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

        if (x.kind2 === 'c') {
>x.kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))

            x.c;
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
        }
        return;
    }
    if (x.kind2 === 'c') {
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

        x.c;  // Error
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
    }
    if (isTypeAB(x)) {
>isTypeAB : Symbol(isTypeAB, Decl(discriminantsAndTypePredicates.ts, 220, 87))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

        if (isTypeCD(x)) {
>isTypeCD : Symbol(isTypeCD, Decl(discriminantsAndTypePredicates.ts, 221, 88))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))

            if (x.kind1 === 'a') {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

                x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
            }
            if (x.kind2 === 'c') {
>x.kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))

                x.c;
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 256, 26))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
            }
        }
    }
}

function looper(getter: () => unknown) {
>looper : Symbol(looper, Decl(discriminantsAndTypePredicates.ts, 285, 1))
>getter : Symbol(getter, Decl(discriminantsAndTypePredicates.ts, 287, 16))

    let x = getter();
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>getter : Symbol(getter, Decl(discriminantsAndTypePredicates.ts, 287, 16))

    while (isTypeAB(x)) {
>isTypeAB : Symbol(isTypeAB, Decl(discriminantsAndTypePredicates.ts, 220, 87))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))

        if (isTypeCD(x)) {
>isTypeCD : Symbol(isTypeCD, Decl(discriminantsAndTypePredicates.ts, 221, 88))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))

            if (x.kind1 === 'a') {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

                x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
            }
            if (x.kind2 === 'c') {
>x.kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>kind2 : Symbol(kind2, Decl(discriminantsAndTypePredicates.ts, 222, 45), Decl(discriminantsAndTypePredicates.ts, 222, 68))

                x.c;
>x.c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>c : Symbol(c, Decl(discriminantsAndTypePredicates.ts, 222, 57))
            }
        }
        if (x.kind1 === 'a') {
>x.kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>kind1 : Symbol(kind1, Decl(discriminantsAndTypePredicates.ts, 221, 45), Decl(discriminantsAndTypePredicates.ts, 221, 68))

            x.a;
>x.a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
>a : Symbol(a, Decl(discriminantsAndTypePredicates.ts, 221, 57))
        }
        if (x.kind2 === 'c') {
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))

            x.c; // Error
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
        }
    }
    if (x.kind1 === 'a') {
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))

        x.a;  // error
>x : Symbol(x, Decl(discriminantsAndTypePredicates.ts, 288, 7))
    }
}

