typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8921,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8921,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9181,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9181,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9531,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9531,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9555,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9555,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9642,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9642,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10807,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10807,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10818,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10818,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10828,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10828,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10903,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10903,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10960,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10960,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11014,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11014,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11034,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11034,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11044,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11044,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11078,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11078,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11081,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11081,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11085,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11085,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11103,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11103,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11129,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11129,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11132,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11132,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11144,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11144,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11174,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11174,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11208,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11208,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11219,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11219,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11243,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11243,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11251,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11251,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11255,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11255,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11285,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11285,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11328,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11328,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11515,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11515,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11517,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11517,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11521,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11521,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11523,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11523,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11525,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11525,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11527,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11527,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11538,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11538,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11540,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11540,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11542,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11542,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11544,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11544,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11546,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11546,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11548,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11548,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11550,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11550,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11552,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11552,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11554,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11554,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11556,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11556,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11558,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11558,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11560,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11560,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11562,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11562,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11564,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11564,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11566,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11566,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11584,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11584,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11586,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11586,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11588,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11588,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11590,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11590,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11592,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11592,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11664,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11664,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11666,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11666,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11668,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11668,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11670,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11670,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11746,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11746,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_Watch.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The sample sources can be found
             at: https://github.com/Microsoft/TypeScript-wiki/blob/master/Using-the-Compiler-API.md#writing-an-incremental-program-watcher
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var process: any;
    declare var console: any;
    declare var os: any;
    
    import ts = require("typescript");
    
    const formatHost: ts.FormatDiagnosticsHost = {
        getCanonicalFileName: path => path,
        getCurrentDirectory: ts.sys.getCurrentDirectory,
        getNewLine: () => ts.sys.newLine,
    }
    
    function watchMain() {
        const configPath = ts.findConfigFile(/*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
        if (!configPath) {
            throw new Error("Could not find a valid 'tsconfig.json'.");
        }
    
        // TypeScript can use several different program creation "strategies":
        //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,
        //  * ts.createSemanticDiagnosticsBuilderProgram
        //  * ts.createAbstractBuilder
        // The first two produce "builder programs". These use an incremental strategy to only re-check and emit files whose
        // contents may have changed, or whose dependencies may have changes which may impact change the result of prior type-check and emit.
        // The last uses an ordinary program which does a full type check after every change.
        // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
        // For pure type-checking scenarios, or when another tool/process handles emit, using `createSemanticDiagnosticsBuilderProgram` may be more desirable.
    
        // Note that there is another overload for `createWatchCompilerHost` that takes a set of root files.
        const host = ts.createWatchCompilerHost(configPath, {}, ts.sys,
            ts.createSemanticDiagnosticsBuilderProgram,
            reportDiagnostic,
            reportWatchStatusChanged,
        );
    
        // You can technically override any given hook on the host, though you probably don't need to.
        // Note that we're assuming `origCreateProgram` and `origPostProgramCreate` doesn't use `this` at all.
        const origCreateProgram = host.createProgram;
        host.createProgram = (rootNames: ReadonlyArray<string>, options, host, oldProgram) => {
            console.log("** We're about to create the program! **");
            return origCreateProgram(rootNames, options, host, oldProgram);
        }
        const origPostProgramCreate = host.afterProgramCreate;
    
        host.afterProgramCreate = program => {
            console.log("** We finished making the program! **");
            origPostProgramCreate!(program);
        };
    
        // `createWatchProgram` creates an initial program, watches files, and updates the program over time.
        ts.createWatchProgram(host);
    }
    
    function reportDiagnostic(diagnostic: ts.Diagnostic) {
        console.error("Error", diagnostic.code, ":",
            ts.flattenDiagnosticMessageText(diagnostic.messageText, formatHost.getNewLine())
        );
    }
    
    /**
     * Prints a diagnostic every time the watch status changes.
     * This is mainly for messages like "Starting compilation" or "Compilation completed".
     */
    function reportWatchStatusChanged(diagnostic: ts.Diagnostic) {
        console.info(ts.formatDiagnostic(diagnostic, formatHost));
    }
    
    watchMain();
    