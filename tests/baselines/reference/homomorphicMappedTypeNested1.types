//// [tests/cases/compiler/homomorphicMappedTypeNested1.ts] ////

=== homomorphicMappedTypeNested1.ts ===
// https://github.com/microsoft/TypeScript/issues/58060

type ValueType = string;
>ValueType : string
>          : ^^^^^^

type Box<T extends ValueType> = { v: T };
>Box : Box<T>
>    : ^^^^^^
>v : T
>  : ^

type Test<T extends ValueType[]> = T;
>Test : T
>     : ^

type UnboxArray<T> = {
>UnboxArray : UnboxArray<T>
>           : ^^^^^^^^^^^^^

  [K in keyof T]: T[K] extends Box<infer R> ? R : never;
};

type Identity<T> = { [K in keyof T]: T[K] };
>Identity : Identity<T>
>         : ^^^^^^^^^^^

declare function fn<T extends Array<Box<ValueType>>>(
>fn : <T extends Box<string>[]>(...args: T) => Test<Identity<UnboxArray<T>>>
>   : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^                             

  ...args: T
>args : T
>     : ^

): Test<Identity<UnboxArray<T>>>;

