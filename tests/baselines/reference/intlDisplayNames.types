//// [tests/cases/conformance/es2021/intlDisplayNames.ts] ////

=== intlDisplayNames.ts ===
new Intl.DisplayNames(); // TypeError: invalid_argument
>new Intl.DisplayNames() : Intl.DisplayNames
>                        : ^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

new Intl.DisplayNames('en'); // TypeError: invalid_argument
>new Intl.DisplayNames('en') : Intl.DisplayNames
>                            : ^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en' : "en"
>     : ^^^^

new Intl.DisplayNames('en', {}); // TypeError: invalid_argument
>new Intl.DisplayNames('en', {}) : Intl.DisplayNames
>                                : ^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en' : "en"
>     : ^^^^
>{} : {}
>   : ^^

console.log((new Intl.DisplayNames(undefined, {type: 'language'})).of('en-GB')); // "British English"
>console.log((new Intl.DisplayNames(undefined, {type: 'language'})).of('en-GB')) : void
>                                                                                : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^^^^^^^^^^^^^^^^^^^^^
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>(new Intl.DisplayNames(undefined, {type: 'language'})).of('en-GB') : string
>                                                                   : ^^^^^^
>(new Intl.DisplayNames(undefined, {type: 'language'})).of : (code: string) => string
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^
>(new Intl.DisplayNames(undefined, {type: 'language'})) : Intl.DisplayNames
>                                                       : ^^^^^^^^^^^^^^^^^
>new Intl.DisplayNames(undefined, {type: 'language'}) : Intl.DisplayNames
>                                                     : ^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>{type: 'language'} : { type: "language"; }
>                   : ^^^^^^^^^^^^^^^^^^^^^
>type : "language"
>     : ^^^^^^^^^^
>'language' : "language"
>           : ^^^^^^^^^^
>of : (code: string) => string
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>'en-GB' : "en-GB"
>        : ^^^^^^^

const localesArg = ["es-ES", new Intl.Locale("en-US")];
>localesArg : (string | Intl.Locale)[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^^
>["es-ES", new Intl.Locale("en-US")] : (string | Intl.Locale)[]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^
>"es-ES" : "es-ES"
>        : ^^^^^^^
>new Intl.Locale("en-US") : Intl.Locale
>                         : ^^^^^^^^^^^
>Intl.Locale : Intl.LocaleConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>Locale : Intl.LocaleConstructor
>       : ^^^^^^^^^^^^^^^^^^^^^^
>"en-US" : "en-US"
>        : ^^^^^^^

console.log((new Intl.DisplayNames(localesArg, {type: 'language'})).resolvedOptions().locale); // "es-ES"
>console.log((new Intl.DisplayNames(localesArg, {type: 'language'})).resolvedOptions().locale) : void
>                                                                                              : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^^^^^^^^^^^^^^^^^^^^^
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>(new Intl.DisplayNames(localesArg, {type: 'language'})).resolvedOptions().locale : string
>                                                                                 : ^^^^^^
>(new Intl.DisplayNames(localesArg, {type: 'language'})).resolvedOptions() : Intl.ResolvedDisplayNamesOptions
>                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(new Intl.DisplayNames(localesArg, {type: 'language'})).resolvedOptions : () => Intl.ResolvedDisplayNamesOptions
>                                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(new Intl.DisplayNames(localesArg, {type: 'language'})) : Intl.DisplayNames
>                                                        : ^^^^^^^^^^^^^^^^^
>new Intl.DisplayNames(localesArg, {type: 'language'}) : Intl.DisplayNames
>                                                      : ^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>localesArg : (string | Intl.Locale)[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^^
>{type: 'language'} : { type: "language"; }
>                   : ^^^^^^^^^^^^^^^^^^^^^
>type : "language"
>     : ^^^^^^^^^^
>'language' : "language"
>           : ^^^^^^^^^^
>resolvedOptions : () => Intl.ResolvedDisplayNamesOptions
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>locale : string
>       : ^^^^^^

console.log(Intl.DisplayNames.supportedLocalesOf(localesArg)); // ["es-ES", "en-US"]
>console.log(Intl.DisplayNames.supportedLocalesOf(localesArg)) : void
>                                                              : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^^^^^^^^^^^^^^^^^^^^^
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.DisplayNames.supportedLocalesOf(localesArg) : string[]
>                                                 : ^^^^^^^^
>Intl.DisplayNames.supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.DisplayNamesOptions) => string[]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.DisplayNamesOptions) => string[]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>localesArg : (string | Intl.Locale)[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^^

console.log(Intl.DisplayNames.supportedLocalesOf()); // []
>console.log(Intl.DisplayNames.supportedLocalesOf()) : void
>                                                    : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^^^^^^^^^^^^^^^^^^^^^
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.DisplayNames.supportedLocalesOf() : string[]
>                                       : ^^^^^^^^
>Intl.DisplayNames.supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.DisplayNamesOptions) => string[]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.DisplayNamesOptions) => string[]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

console.log(Intl.DisplayNames.supportedLocalesOf(localesArg, {})); // ["es-ES", "en-US"]
>console.log(Intl.DisplayNames.supportedLocalesOf(localesArg, {})) : void
>                                                                  : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^^^^^^^^^^^^^^^^^^^^^
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.DisplayNames.supportedLocalesOf(localesArg, {}) : string[]
>                                                     : ^^^^^^^^
>Intl.DisplayNames.supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.DisplayNamesOptions) => string[]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl.DisplayNames : Intl.DisplayNamesConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DisplayNames : Intl.DisplayNamesConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>supportedLocalesOf : (locales?: Intl.LocalesArgument, options?: Intl.DisplayNamesOptions) => string[]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>localesArg : (string | Intl.Locale)[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^^
>{} : {}
>   : ^^

