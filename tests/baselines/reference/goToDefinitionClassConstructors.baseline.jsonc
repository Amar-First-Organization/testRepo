// === goToDefinition ===
// === /tests/cases/fourslash/main.ts ===
// <|import { [|Derived|] } from './base'|>
// const derived = new /*GOTO DEF*/Derived(cArg)

  // === Details ===
  [
   {
    "kind": "alias",
    "name": "Derived",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": true
   }
  ]



// === goToDefinition ===
// === /tests/cases/fourslash/defInSameFile.ts ===
// import { Base } from './base'
// <|class [|SameFile|] extends Base {
//     readonly name: string = 'SameFile'
// }|>
// const SameFile = new /*GOTO DEF*/SameFile(cArg)
// const wrapper = new Base(cArg)

  // === Details ===
  [
   {
    "kind": "class",
    "name": "SameFile",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   }
  ]



// === goToDefinition ===
// === /tests/cases/fourslash/hasConstructor.ts ===
// import { Base } from './base'
// <|class [|{| defId: 0 |}HasConstructor|] extends Base {
//     [|{| defId: 1 |}constructor() {}|]
//     readonly name: string = '';
// }|>
// const hasConstructor = new /*GOTO DEF*/HasConstructor(cArg)

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "class",
    "name": "HasConstructor",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   },
   {
    "defId": 1,
    "kind": "constructor",
    "name": "__constructor",
    "containerName": "HasConstructor",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   }
  ]



// === goToDefinition ===
// === /tests/cases/fourslash/defInSameFile.ts ===
// <|import { [|Base|] } from './base'|>
// class SameFile extends Base {
//     readonly name: string = 'SameFile'
// }
// const SameFile = new SameFile(cArg)
// const wrapper = new /*GOTO DEF*/Base(cArg)

  // === Details ===
  [
   {
    "kind": "alias",
    "name": "Base",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": true
   }
  ]