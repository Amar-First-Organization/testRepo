tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts(70,15): error TS2430: Interface 'I2' incorrectly extends interface 'Base2'.
  Types of property 'a' are incompatible.
    Type 'new (x: string) => string' is not assignable to type '{ new (x: "a"): number; new (x: string): number; }'.
      Type 'string' is not assignable to type 'number'.
tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts(76,15): error TS2430: Interface 'I3' incorrectly extends interface 'Base2'.
  Types of property 'a2' are incompatible.
    Type 'new <T>(x: T) => string' is not assignable to type 'new <T>(x: T) => T'.
      Type 'string' is not assignable to type 'T'.
        'string' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint '{}'.


==== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts (2 errors) ====
    // same as subtypingWithCallSignatures but with additional specialized signatures that should not affect the results
    
    module CallSignature {
        interface Base { // T
            // M's
            new (x: 'a'): void;
            new (x: string, y: number): void;
        }
    
        // S's
        interface I extends Base {
            // N's
            new (x: 'a'): number; // ok because base returns void
            new (x: string, y: number): number; // ok because base returns void
            new <T>(x: T): string; // ok because base returns void
        }   
    
        interface Base2 { // T
            // M's
            new (x: 'a'): number;
            new (x: string): number;
        }
    
        // S's
        interface I2 extends Base2 {
            // N's
            new (x: 'a'): string;
            new (x: string): string; // error because base returns non-void;
        }
    
        // S's
        interface I3 extends Base2 {
            // N's
            new <T>(x: T): string; // ok, adds a new call signature
        }
    }
    
    module MemberWithCallSignature {
        interface Base { // T
            // M's
            a: {
                new (x: 'a'): void;
                new (x: string): void;
            }
            a2: {
                new (x: 'a', y: number): void;
                new (x: string, y: number): void;
            }
            a3: new <T>(x: T) => void;
        }
    
        // S's
        interface I extends Base {
            // N's
            a: new (x: string) => number; // ok because base returns void
            a2: new  (x: string, y: number) => boolean; // ok because base returns void
            a3: new <T>(x: T) => string; // ok because base returns void
        }
    
        interface Base2 { // T
            // M's
            a: {
                new (x: 'a'): number;
                new (x: string): number;
            }
            a2: new <T>(x: T) => T;
        }
    
        // S's
        interface I2 extends Base2 {
                  ~~
!!! error TS2430: Interface '{|I2|0|}' incorrectly extends interface '{|Base2|1|}'.
!!! error TS2430:   Types of property 'a' are incompatible.
!!! error TS2430:     Type 'new (x: string) => string' is not assignable to type '{ new (x: "a"): number; new (x: string): number; }'.
!!! error TS2430:       Type 'string' is not assignable to type 'number'.
!!! annotated symbol 0 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:70:15
!!! annotated symbol 1 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:60:15
            // N's
            a: new (x: string) => string; // error because base returns non-void;
        }
    
        // S's
        interface I3 extends Base2 {
                  ~~
!!! error TS2430: Interface '{|I3|0|}' incorrectly extends interface '{|Base2|1|}'.
!!! error TS2430:   Types of property 'a2' are incompatible.
!!! error TS2430:     Type 'new <{|T|2|}>(x: {|T|3|}) => string' is not assignable to type 'new <{|T|4|}>(x: {|T|5|}) => {|T|6|}'.
!!! error TS2430:       Type 'string' is not assignable to type '{|T|7|}'.
!!! error TS2430:         'string' is assignable to the constraint of type '{|T|8|}', but '{|T|9|}' could be instantiated with a different subtype of constraint '{}'.
!!! annotated symbol 0 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:76:15
!!! annotated symbol 1 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:60:15
!!! annotated symbol 2 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:78:18
!!! annotated symbol 3 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:78:18
!!! annotated symbol 4 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:66:18
!!! annotated symbol 5 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:66:18
!!! annotated symbol 6 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:66:18
!!! annotated symbol 7 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:66:18
!!! annotated symbol 8 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:66:18
!!! annotated symbol 9 tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts:66:18
            // N's
            a2: new <T>(x: T) => string; // error because base returns non-void;
        }
    }