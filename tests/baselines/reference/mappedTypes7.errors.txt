tests/cases/conformance/types/mapped/mappedTypes7.ts(31,5): error TS2322: Type '{ err: () => void; }' is not assignable to type 'MethodMapper<"method", null, void>'.
  Object literal may only specify known properties, and 'err' does not exist in type 'MethodMapper<"method", null, void>'.


==== tests/cases/conformance/types/mapped/mappedTypes7.ts (1 errors) ====
    let _: MethodMapper<'foo' | 'bar', {foo: string, bar: number}, number[]> = {
      foo: (arg: { foo: string; bar: number; }): number[] => {
        throw new Error("Function not implemented.");
      },
      bar: (arg: { foo: string; bar: number; }): number[] => {
        throw new Error("Function not implemented.");
      }
    }
    
    let $ = (): MethodMapper<'foo' | 'bar', {foo: string, bar: number}, number[]> => {
      const foo =  (arg: { foo: string; bar: number; }): number[] => {
        throw new Error("Function not implemented.");
      };
      const bar =  (arg: { foo: string; bar: number; }): number[] => {
        throw new Error("Function not implemented.");
      };
      return {
        foo,
        bar
      }
    };
    
    let a = (): MethodMapper<'method'> => {
      const method = (): void => {}
      return {method}
    };
    
    let err = (): MethodMapper<'method'> => {
      const err = (): void => {}
      return {
        err // Error
        ~~~
!!! error TS2322: Type '{ err: () => void; }' is not assignable to type 'MethodMapper<"method", null, void>'.
!!! error TS2322:   Object literal may only specify known properties, and 'err' does not exist in type 'MethodMapper<"method", null, void>'.
      }
    }
    
    // Repro from #49811
    const methods = [
      "GET",
      "POST",
      "PUT",
      "PATCH",
      "DELETE",
      "OPTIONS",
      "HEAD",
    ] as const;
    
    type Method = typeof methods[number];
    
    class Router implements MethodMapper<Method> {
      delete(): void {
      }
    
      get(): void {
      }
    
      head(): void {
      }
    
      options(): void {
      }
    
      patch(): void {
      }
    
      post(): void {
      }
    
      put(): void {
      }
    
    }
    