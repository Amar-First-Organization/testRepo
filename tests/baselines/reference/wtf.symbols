=== tests/cases/compiler/wtf.ts ===
interface Success {
>Success : Symbol(Success, Decl(wtf.ts, 0, 0))

  isSuccess: true;
>isSuccess : Symbol(Success.isSuccess, Decl(wtf.ts, 0, 19))
}

interface Fail {
>Fail : Symbol(Fail, Decl(wtf.ts, 2, 1))

  isSuccess: false;
>isSuccess : Symbol(Fail.isSuccess, Decl(wtf.ts, 4, 16))
}

type Item = Success | Fail;
>Item : Symbol(Item, Decl(wtf.ts, 6, 1))
>Success : Symbol(Success, Decl(wtf.ts, 0, 0))
>Fail : Symbol(Fail, Decl(wtf.ts, 2, 1))

function f1(a: Item[]) {
>f1 : Symbol(f1, Decl(wtf.ts, 8, 27))
>a : Symbol(a, Decl(wtf.ts, 10, 12))
>Item : Symbol(Item, Decl(wtf.ts, 6, 1))

  a.map(item => ({ ...item })).filter(value => {});
>a.map(item => ({ ...item })).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>a.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(wtf.ts, 10, 12))
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(wtf.ts, 11, 8))
>item : Symbol(item, Decl(wtf.ts, 11, 8))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>value : Symbol(value, Decl(wtf.ts, 11, 38))
}

function f2<T>(a: Item[]) {
>f2 : Symbol(f2, Decl(wtf.ts, 12, 1))
>T : Symbol(T, Decl(wtf.ts, 14, 12))
>a : Symbol(a, Decl(wtf.ts, 14, 15))
>Item : Symbol(Item, Decl(wtf.ts, 6, 1))

  a.map(item => ({ ...item })).filter(value => {});
>a.map(item => ({ ...item })).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>a.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(wtf.ts, 14, 15))
>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(wtf.ts, 15, 8))
>item : Symbol(item, Decl(wtf.ts, 15, 8))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>value : Symbol(value, Decl(wtf.ts, 15, 38))
}

