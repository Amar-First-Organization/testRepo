tests/cases/compiler/mappedTypeRecursiveInference.ts(19,14): error TS2589: Type instantiation is excessively deep and possibly infinite.


==== tests/cases/compiler/mappedTypeRecursiveInference.ts (1 errors) ====
    interface A { a: A }
    declare let a: A;
    type Deep<T> = { [K in keyof T]: Deep<T[K]> }
    declare function foo<T>(deep: Deep<T>): T;
    const out = foo(a);
    out.a
    out.a.a
    out.a.a.a.a.a.a.a
    
    
    interface B { [s: string]: B }
    declare let b: B;
    const oub = foo(b);
    oub.b
    oub.b.b
    oub.b.a.n.a.n.a
    
    let xhr: XMLHttpRequest;
    const out2 = foo(xhr);
                 ~~~~~~~~
!!! error TS2589: Type instantiation is excessively deep and possibly infinite.
    out2.responseXML
    out2.responseXML.activeElement.className.length
    