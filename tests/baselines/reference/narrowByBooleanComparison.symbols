//// [tests/cases/compiler/narrowByBooleanComparison.ts] ////

=== narrowByBooleanComparison.ts ===
type A = { type: "A" };
>A : Symbol(A, Decl(narrowByBooleanComparison.ts, 0, 0))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 0, 10))

type B = { type: "B" };
>B : Symbol(B, Decl(narrowByBooleanComparison.ts, 0, 23))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 1, 10))

type C = { type: "C" };
>C : Symbol(C, Decl(narrowByBooleanComparison.ts, 1, 23))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 2, 10))

type MyUnion = A | B | C;
>MyUnion : Symbol(MyUnion, Decl(narrowByBooleanComparison.ts, 2, 23))
>A : Symbol(A, Decl(narrowByBooleanComparison.ts, 0, 0))
>B : Symbol(B, Decl(narrowByBooleanComparison.ts, 0, 23))
>C : Symbol(C, Decl(narrowByBooleanComparison.ts, 1, 23))

const isA = (x: MyUnion): x is A => x.type === "A";
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 5, 13))
>MyUnion : Symbol(MyUnion, Decl(narrowByBooleanComparison.ts, 2, 23))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 5, 13))
>A : Symbol(A, Decl(narrowByBooleanComparison.ts, 0, 0))
>x.type : Symbol(type, Decl(narrowByBooleanComparison.ts, 0, 10), Decl(narrowByBooleanComparison.ts, 1, 10), Decl(narrowByBooleanComparison.ts, 2, 10))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 5, 13))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 0, 10), Decl(narrowByBooleanComparison.ts, 1, 10), Decl(narrowByBooleanComparison.ts, 2, 10))

function test1(x: MyUnion) {
>test1 : Symbol(test1, Decl(narrowByBooleanComparison.ts, 5, 51))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
>MyUnion : Symbol(MyUnion, Decl(narrowByBooleanComparison.ts, 2, 23))

    if (isA(x) !== true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) !== false) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) === false) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) === true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) != true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) == true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (true !== isA(x)) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (true === isA(x)) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }
}

// https://github.com/microsoft/TypeScript/issues/53093
function test2(x: unknown) {
>test2 : Symbol(test2, Decl(narrowByBooleanComparison.ts, 39, 1))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 42, 15))

    if (x instanceof Error === false) {
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 42, 15))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

        return;
    }
    x;
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 42, 15))
}

// https://github.com/microsoft/TypeScript/issues/50712
function test3(foo: unknown) {
>test3 : Symbol(test3, Decl(narrowByBooleanComparison.ts, 47, 1))
>foo : Symbol(foo, Decl(narrowByBooleanComparison.ts, 50, 15))

    if (typeof foo !== 'string' && Array.isArray(foo) === false) {
>foo : Symbol(foo, Decl(narrowByBooleanComparison.ts, 50, 15))
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(narrowByBooleanComparison.ts, 50, 15))

        throw new Error('Not a string or an array');
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
    foo;
>foo : Symbol(foo, Decl(narrowByBooleanComparison.ts, 50, 15))
}

