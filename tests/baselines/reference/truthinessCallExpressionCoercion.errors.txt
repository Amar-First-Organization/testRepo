tests/cases/compiler/truthinessCallExpressionCoercion.ts(3,5): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(7,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(29,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(32,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(35,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(58,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(61,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(78,13): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?


==== tests/cases/compiler/truthinessCallExpressionCoercion.ts (8 errors) ====
    function func() { return Math.random() > 0.5; }
    
    if (func) { // error
        ~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
    }
    
    function onlyErrorsWhenTestingNonNullableFunctionType(required: () => boolean, optional?: () => boolean) {
        if (required) { // error
            ~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    
        if (optional) { // ok
        }
    
        if (!!required) { // ok
        }
    
        if (required()) { // ok
        }
    }
    
    function onlyErrorsWhenReturnsBoolean(
        bool: () => boolean,
        nullableBool: () => boolean | undefined,
        nullableTrue: () => true | undefined,
        nullable: () => undefined | null,
        notABool: () => string,
        unionWithBool: () => boolean | string,
        nullableString: () => string | undefined
    ) {
        if (bool) { // error
            ~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    
        if (nullableBool) { // error
            ~~~~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    
        if (nullableTrue) { // error
            ~~~~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    
        if (nullable) { // ok
        }
    
        if (notABool) { // ok
        }
    
        if (unionWithBool) { // ok
        }
    
        if (nullableString) { // ok
        }
    }
    
    function checksPropertyAndElementAccess() {
        const x = {
            foo: {
                bar() { return true; }
            }
        }
    
        if (x.foo.bar) { // error
            ~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    
        if (x.foo['bar']) { // error
            ~~~~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    }
    
    function maybeBoolean(param: boolean | (() => boolean)) {
        if (param) { // ok
        }
    }
    
    class Foo {
        maybeIsUser?: () => boolean;
    
        isUser() {
            return true;
        }
    
        test() {
            if (this.isUser) { // error
                ~~~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
            }
    
            if (this.maybeIsUser) { // ok
            }
        }
    }
    