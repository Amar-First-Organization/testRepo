//// [tests/cases/conformance/types/tuple/instantiableTupleLabels1.ts] ////

=== instantiableTupleLabels1.ts ===
type T1 = [`wow`: boolean];
>T1 : [wow: boolean]

type T2 = [number, `wow`: boolean];
>T2 : [number, wow: boolean]

type T3 = [number, ...`wow`: boolean[]];
>T3 : [number, ...wow: boolean[]]

type T4 = [number, `wow`: ...boolean[]]; // error
>T4 : [number, wow: boolean]

type Prefix = 'pre';
>Prefix : "pre"

type T5 = [`${Prefix}wow`: boolean];
>T5 : [prewow: boolean]

type T6 = [number, `${Prefix}wow`: boolean];
>T6 : [number, prewow: boolean]

type T7 = [number, ...`${Prefix}wow`: boolean[]];
>T7 : [number, ...prewow: boolean[]]

type T8 = [number, `${never}wontfly`: boolean]; // no label displayed
>T8 : [number, boolean]

type T9 = [number, `${any}wontfly`: boolean]; // no label displayed
>T9 : [number, boolean]

type T11 = [number, `${"a" | "b"}wontfly`: boolean]; // no label displayed
>T11 : [number, boolean]

type T12 = [number, `${unknown}wontfly`: boolean]; // error
>T12 : [number, boolean]

type MakeTuple1<T1 extends string, T2 extends string> = [number, `second-${T1}`: string, ...`rest-${T2}`: boolean[]];
>MakeTuple1 : MakeTuple1<T1, T2>

type MakeTuple2<T1, T2> = [number, `second-${T1}`: string, ...`rest-${T2}`: boolean[]]; // error
>MakeTuple2 : MakeTuple2<T1, T2>

type T13 = MakeTuple1<"awesome", "tail">;
>T13 : [number, second-awesome: string, ...rest-tail: boolean[]]

type T14 = MakeTuple1<any, "tail">;
>T14 : [number, string, ...rest-tail: boolean[]]

type T15 = MakeTuple1<"a" | "b", "tail">;
>T15 : [number, string, ...rest-tail: boolean[]]

