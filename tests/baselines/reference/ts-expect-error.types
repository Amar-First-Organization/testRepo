//// [tests/cases/conformance/directives/ts-expect-error.ts] ////

=== ts-expect-error.ts ===
// @ts-expect-error additional commenting
var invalidCommentedFancySingle: number = 'nope';
>invalidCommentedFancySingle : number
>                            : ^^^^^^
>'nope' : number
>       : ^^^^^^

/*
 @ts-expect-error additional commenting */
var invalidCommentedFancyMulti: number = 'nope';
>invalidCommentedFancyMulti : number
>                           : ^^^^^^
>'nope' : number
>       : ^^^^^^

// @ts-expect-error additional commenting
var validCommentedFancySingle: string = 'nope';
>validCommentedFancySingle : string
>                          : ^^^^^^
>'nope' : string
>       : ^^^^^^

/* @ts-expect-error additional commenting */
var validCommentedFancyMulti: string = 'nope';
>validCommentedFancyMulti : string
>                         : ^^^^^^
>'nope' : string
>       : ^^^^^^

// @ts-expect-error
var invalidCommentedPlainSingle: number = 'nope';
>invalidCommentedPlainSingle : number
>                            : ^^^^^^
>'nope' : number
>       : ^^^^^^

/*
 @ts-expect-error */
var invalidCommentedPlainMulti: number = 'nope';
>invalidCommentedPlainMulti : number
>                           : ^^^^^^
>'nope' : number
>       : ^^^^^^

// @ts-expect-error
var validCommentedPlainSingle: string = 'nope';
>validCommentedPlainSingle : string
>                          : ^^^^^^
>'nope' : string
>       : ^^^^^^

/* @ts-expect-error */
var validCommentedPlainMulti1: string = 'nope';
>validCommentedPlainMulti1 : string
>                          : ^^^^^^
>'nope' : string
>       : ^^^^^^

/*
@ts-expect-error */
var validCommentedPlainMulti2: string = 'nope';
>validCommentedPlainMulti2 : string
>                          : ^^^^^^
>'nope' : string
>       : ^^^^^^

var invalidPlain: number = 'nope';
>invalidPlain : number
>             : ^^^^^^
>'nope' : number
>       : ^^^^^^

var validPlain: string = 'nope';
>validPlain : string
>           : ^^^^^^
>'nope' : string
>       : ^^^^^^

// @ts-expect-error
(({ a: true } as const).a === false); // <-- compiles (as expected via comment)
>(({ a: true } as const).a === false) : boolean
>                                     : ^^^^^^^
>({ a: true } as const).a === false : boolean
>                                   : ^^^^^^^
>({ a: true } as const).a : true
>                         : ^^^^
>({ a: true } as const) : { readonly a: true; }
>                       : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } as const : { readonly a: true; }
>                     : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } : { readonly a: true; }
>            : ^^^^^^^^^^^^^^^^^^^^^
>a : true
>  : ^^^^
>true : true
>     : ^^^^
>a : true
>  : ^^^^
>false : false
>      : ^^^^^

(({ a: true } as const).a === false); // Should error
>(({ a: true } as const).a === false) : boolean
>                                     : ^^^^^^^
>({ a: true } as const).a === false : boolean
>                                   : ^^^^^^^
>({ a: true } as const).a : true
>                         : ^^^^
>({ a: true } as const) : { readonly a: true; }
>                       : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } as const : { readonly a: true; }
>                     : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } : { readonly a: true; }
>            : ^^^^^^^^^^^^^^^^^^^^^
>a : true
>  : ^^^^
>true : true
>     : ^^^^
>a : true
>  : ^^^^
>false : false
>      : ^^^^^

(({ a: true } as const).a === false); // error
>(({ a: true } as const).a === false) : boolean
>                                     : ^^^^^^^
>({ a: true } as const).a === false : boolean
>                                   : ^^^^^^^
>({ a: true } as const).a : true
>                         : ^^^^
>({ a: true } as const) : { readonly a: true; }
>                       : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } as const : { readonly a: true; }
>                     : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } : { readonly a: true; }
>            : ^^^^^^^^^^^^^^^^^^^^^
>a : true
>  : ^^^^
>true : true
>     : ^^^^
>a : true
>  : ^^^^
>false : false
>      : ^^^^^

(({ a: true } as const).a === false); // error
>(({ a: true } as const).a === false) : boolean
>                                     : ^^^^^^^
>({ a: true } as const).a === false : boolean
>                                   : ^^^^^^^
>({ a: true } as const).a : true
>                         : ^^^^
>({ a: true } as const) : { readonly a: true; }
>                       : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } as const : { readonly a: true; }
>                     : ^^^^^^^^^^^^^^^^^^^^^
>{ a: true } : { readonly a: true; }
>            : ^^^^^^^^^^^^^^^^^^^^^
>a : true
>  : ^^^^
>true : true
>     : ^^^^
>a : true
>  : ^^^^
>false : false
>      : ^^^^^

// @ts-expect-error: additional commenting with no whitespace
var invalidCommentedFancySingle: number = 'nope';
>invalidCommentedFancySingle : number
>                            : ^^^^^^
>'nope' : number
>       : ^^^^^^

/*
 @ts-expect-error: additional commenting with no whitespace */
var invalidCommentedFancyMulti: number = 'nope';
>invalidCommentedFancyMulti : number
>                           : ^^^^^^
>'nope' : number
>       : ^^^^^^

