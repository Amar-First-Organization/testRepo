=== tests/cases/conformance/types/regexValidated/regexValidated.stringLiterals.negative.ts ===
let fontColor: /^#([0-9a-f]{3}|[0-9a-f]{6})$/i = '#0000'; // not 3 or 6 characters
>fontColor : /^#([0-9a-f]{3}|[0-9a-f]{6})$/i
>/^#([0-9a-f]{3}|[0-9a-f]{6})$/i : RegExp</^#([0-9a-f]{3}|[0-9a-f]{6})$/i>
>'#0000' : "#0000"

let catdogfish: /^(dog|cat|fish)(,(dog|cat|fish))*$/ = 'cat,fish,dog,fosh,cat'; // misspelled fish
>catdogfish : /^(dog|cat|fish)(,(dog|cat|fish))*$/
>/^(dog|cat|fish)(,(dog|cat|fish))*$/ : RegExp</^(dog|cat|fish)(,(dog|cat|fish))*$/>
>'cat,fish,dog,fosh,cat' : "cat,fish,dog,fosh,cat"

let digits: /^[0-9]+$/ = '02338374729O'; // Capital O isn't 0
>digits : /^[0-9]+$/
>/^[0-9]+$/ : RegExp</^[0-9]+$/>
>'02338374729O' : "02338374729O"

let hexDigits: /^([0-9]|[A-F])+$/ = 'X0F12A'; // X isn't a hex digit
>hexDigits : /^([0-9]|[A-F])+$/
>/^([0-9]|[A-F])+$/ : RegExp</^([0-9]|[A-F])+$/>
>'X0F12A' : "X0F12A"

type Email = /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;
>Email : Email
>/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i : RegExp<Email>

let address: Email = 'type★script@microsoft.com'; // ★ isn't part of the validated range for addresses
>address : Email
>Email : Email
>'type★script@microsoft.com' : "type★script@microsoft.com"

type Gmail = /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@gmail\.com$/i;
>Gmail : Gmail
>/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@gmail\.com$/i : RegExp<Gmail>

let gmailAddress: Gmail = 'example@GMAIL.ORG'; // wrong tld
>gmailAddress : Gmail
>Gmail : Gmail
>'example@GMAIL.ORG' : "example@GMAIL.ORG"



