=== tests/cases/compiler/typeGuardConstructor.ts ===
// Typical case
class Foo {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    prop1: string;
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}

let foo: Foo | number;
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

if (foo.constructor == Foo) {
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (foo["constructor"] == Foo) {
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (foo.constructor === Foo) {
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (foo["constructor"] === Foo) {
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (Foo == foo.constructor) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (Foo == foo["constructor"]) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (Foo === foo.constructor) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}
if (Foo === foo["constructor"]) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // string
>foo.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}

if (foo.constructor != Foo) {
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (foo["constructor"] != Foo) {
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (foo.constructor !== Foo) {
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (foo["constructor"] !== Foo) {
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (Foo != foo.constructor) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (Foo != foo["constructor"]) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (Foo !== foo.constructor) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}
if (Foo !== foo["constructor"]) {
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    foo.prop1; // ERROR
>foo : Symbol(foo, Decl(typeGuardConstructor.ts, 5, 3))
}


// Derived class case
class Bar extends Foo {
>Bar : Symbol(Bar, Decl(typeGuardConstructor.ts, 54, 1))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    prop2: number;
>prop2 : Symbol(Bar.prop2, Decl(typeGuardConstructor.ts, 58, 23))
}

let bar: Bar | boolean;
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>Bar : Symbol(Bar, Decl(typeGuardConstructor.ts, 54, 1))

if (bar.constructor === Bar) {
>bar.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Bar : Symbol(Bar, Decl(typeGuardConstructor.ts, 54, 1))

    bar.prop1; // string
>bar.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))

    bar.prop2; // number
>bar.prop2 : Symbol(Bar.prop2, Decl(typeGuardConstructor.ts, 58, 23))
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>prop2 : Symbol(Bar.prop2, Decl(typeGuardConstructor.ts, 58, 23))
}
if (bar.constructor === Foo) {
>bar.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    bar.prop1; // string
>bar.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))

    bar.prop2; // number
>bar.prop2 : Symbol(Bar.prop2, Decl(typeGuardConstructor.ts, 58, 23))
>bar : Symbol(bar, Decl(typeGuardConstructor.ts, 62, 3))
>prop2 : Symbol(Bar.prop2, Decl(typeGuardConstructor.ts, 58, 23))
}


// Union of primitives, number, arrays, and Foo
var x: number | "hello" | "world" | true | false | number[] | string[] | Foo;
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

if (x.constructor === Number) {
>x.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    x; // number
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
}

if (x.constructor === String) {
>x.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    x; // "hello" | "world"
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
}

if (x.constructor === Boolean) {
>x.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    x; // boolean
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
}

if (x.constructor === Array) {
>x.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    x; // number[] | string[]
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
}

if (x.constructor === Function) {
>x.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    x; // declaredType
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
}

if (x.constructor === Foo) {
>x.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    x; // Foo
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))

    x.prop1; // string
>x.prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
>x : Symbol(x, Decl(typeGuardConstructor.ts, 74, 3))
>prop1 : Symbol(Foo.prop1, Decl(typeGuardConstructor.ts, 1, 11))
}


// Narrowing any
let a: any;
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))

if (a.constructor === Foo) {
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))
>Foo : Symbol(Foo, Decl(typeGuardConstructor.ts, 0, 0))

    a; // Foo
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))
}
if (a.constructor === "hello") {
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))

    a; // any
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))
}
if (a.constructor === Function) {
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    a; // any
>a : Symbol(a, Decl(typeGuardConstructor.ts, 103, 3))
}


// If for some reason someone defines a type with it's own constructor property
type S = {
>S : Symbol(S, Decl(typeGuardConstructor.ts, 113, 1))

    constructor: () => void;
>constructor : Symbol(constructor, Decl(typeGuardConstructor.ts, 117, 10))

};

let s: S | string;
>s : Symbol(s, Decl(typeGuardConstructor.ts, 121, 3))
>S : Symbol(S, Decl(typeGuardConstructor.ts, 113, 1))

if (s.constructor === String) {
>s.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --), Decl(typeGuardConstructor.ts, 117, 10))
>s : Symbol(s, Decl(typeGuardConstructor.ts, 121, 3))
>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --), Decl(typeGuardConstructor.ts, 117, 10))
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    s; // string
>s : Symbol(s, Decl(typeGuardConstructor.ts, 121, 3))
}

