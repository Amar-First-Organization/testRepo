//// [tests/cases/compiler/narrowUnknownByTypePredicate.ts] ////

=== narrowUnknownByTypePredicate.ts ===
declare function isNotNullish(value: unknown): value is {};
>isNotNullish : Symbol(isNotNullish, Decl(narrowUnknownByTypePredicate.ts, 0, 0))
>value : Symbol(value, Decl(narrowUnknownByTypePredicate.ts, 0, 30))
>value : Symbol(value, Decl(narrowUnknownByTypePredicate.ts, 0, 30))

declare function isNullish(value: unknown): value is null | undefined;
>isNullish : Symbol(isNullish, Decl(narrowUnknownByTypePredicate.ts, 0, 59))
>value : Symbol(value, Decl(narrowUnknownByTypePredicate.ts, 1, 27))
>value : Symbol(value, Decl(narrowUnknownByTypePredicate.ts, 1, 27))

declare const value1: unknown;
>value1 : Symbol(value1, Decl(narrowUnknownByTypePredicate.ts, 3, 13))

if (isNotNullish(value1)) {
>isNotNullish : Symbol(isNotNullish, Decl(narrowUnknownByTypePredicate.ts, 0, 0))
>value1 : Symbol(value1, Decl(narrowUnknownByTypePredicate.ts, 3, 13))

  value1;
>value1 : Symbol(value1, Decl(narrowUnknownByTypePredicate.ts, 3, 13))
}

declare const value2: unknown;
>value2 : Symbol(value2, Decl(narrowUnknownByTypePredicate.ts, 8, 13))

if (!isNotNullish(value2)) {
>isNotNullish : Symbol(isNotNullish, Decl(narrowUnknownByTypePredicate.ts, 0, 0))
>value2 : Symbol(value2, Decl(narrowUnknownByTypePredicate.ts, 8, 13))

  value2;
>value2 : Symbol(value2, Decl(narrowUnknownByTypePredicate.ts, 8, 13))
}

declare const value3: unknown;
>value3 : Symbol(value3, Decl(narrowUnknownByTypePredicate.ts, 13, 13))

if (isNullish(value3)) {
>isNullish : Symbol(isNullish, Decl(narrowUnknownByTypePredicate.ts, 0, 59))
>value3 : Symbol(value3, Decl(narrowUnknownByTypePredicate.ts, 13, 13))

  value3;
>value3 : Symbol(value3, Decl(narrowUnknownByTypePredicate.ts, 13, 13))
}

declare const value4: unknown;
>value4 : Symbol(value4, Decl(narrowUnknownByTypePredicate.ts, 18, 13))

if (!isNullish(value4)) {
>isNullish : Symbol(isNullish, Decl(narrowUnknownByTypePredicate.ts, 0, 59))
>value4 : Symbol(value4, Decl(narrowUnknownByTypePredicate.ts, 18, 13))

  value4;
>value4 : Symbol(value4, Decl(narrowUnknownByTypePredicate.ts, 18, 13))
}

declare class A { foo: string; }
>A : Symbol(A, Decl(narrowUnknownByTypePredicate.ts, 21, 1))
>foo : Symbol(A.foo, Decl(narrowUnknownByTypePredicate.ts, 23, 17))

declare function isA(value: unknown): value is A;
>isA : Symbol(isA, Decl(narrowUnknownByTypePredicate.ts, 23, 32))
>value : Symbol(value, Decl(narrowUnknownByTypePredicate.ts, 24, 21))
>value : Symbol(value, Decl(narrowUnknownByTypePredicate.ts, 24, 21))
>A : Symbol(A, Decl(narrowUnknownByTypePredicate.ts, 21, 1))

declare const value5: unknown;
>value5 : Symbol(value5, Decl(narrowUnknownByTypePredicate.ts, 26, 13))

if (isA(value5)) {
>isA : Symbol(isA, Decl(narrowUnknownByTypePredicate.ts, 23, 32))
>value5 : Symbol(value5, Decl(narrowUnknownByTypePredicate.ts, 26, 13))

  value5;
>value5 : Symbol(value5, Decl(narrowUnknownByTypePredicate.ts, 26, 13))
}

declare const value6: unknown;
>value6 : Symbol(value6, Decl(narrowUnknownByTypePredicate.ts, 31, 13))

if (!isA(value6)) {
>isA : Symbol(isA, Decl(narrowUnknownByTypePredicate.ts, 23, 32))
>value6 : Symbol(value6, Decl(narrowUnknownByTypePredicate.ts, 31, 13))

  value6;
>value6 : Symbol(value6, Decl(narrowUnknownByTypePredicate.ts, 31, 13))
}

function fn1<T>(x: T): void {
>fn1 : Symbol(fn1, Decl(narrowUnknownByTypePredicate.ts, 34, 1))
>T : Symbol(T, Decl(narrowUnknownByTypePredicate.ts, 36, 13))
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 36, 16))
>T : Symbol(T, Decl(narrowUnknownByTypePredicate.ts, 36, 13))

  if (x != undefined) {
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 36, 16))
>undefined : Symbol(undefined)

    const y: {} = x; // ok
>y : Symbol(y, Decl(narrowUnknownByTypePredicate.ts, 38, 9))
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 36, 16))

  } else {
    const y: null | undefined = x; // ok
>y : Symbol(y, Decl(narrowUnknownByTypePredicate.ts, 40, 9))
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 36, 16))
  }
}

function fn2<T extends unknown>(x: T): void {
>fn2 : Symbol(fn2, Decl(narrowUnknownByTypePredicate.ts, 42, 1))
>T : Symbol(T, Decl(narrowUnknownByTypePredicate.ts, 44, 13))
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 44, 32))
>T : Symbol(T, Decl(narrowUnknownByTypePredicate.ts, 44, 13))

  if (x != undefined) {
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 44, 32))
>undefined : Symbol(undefined)

    const y: {} = x; // ok
>y : Symbol(y, Decl(narrowUnknownByTypePredicate.ts, 46, 9))
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 44, 32))

  } else {
    const y: null | undefined = x; // ok
>y : Symbol(y, Decl(narrowUnknownByTypePredicate.ts, 48, 9))
>x : Symbol(x, Decl(narrowUnknownByTypePredicate.ts, 44, 32))
  }
}

