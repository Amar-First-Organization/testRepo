typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8912,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8912,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9172,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9172,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9522,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9522,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9546,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9546,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9633,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9633,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10798,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10798,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10809,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10809,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10819,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10819,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10894,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10894,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10951,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10951,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11005,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11005,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11025,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11025,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11035,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11035,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11069,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11069,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11072,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11072,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11076,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11076,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11094,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11094,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11120,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11120,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11123,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11123,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11135,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11135,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11165,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11165,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11199,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11199,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11210,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11210,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11234,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11234,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11242,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11242,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11246,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11246,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11276,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11276,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11319,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11319,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11506,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11506,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11508,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11508,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11512,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11512,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11514,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11514,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11516,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11516,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11518,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11518,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11520,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11520,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11531,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11531,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11533,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11533,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11535,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11535,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11537,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11537,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11539,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11539,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11541,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11541,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11553,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11553,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11555,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11555,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11557,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11557,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11573,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11573,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11575,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11575,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11577,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11577,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11579,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11579,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11581,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11581,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11583,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11583,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11655,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11655,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11657,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11657,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11659,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11659,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11661,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11661,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11737,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11737,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_watcher.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The sample sources can be found
             at: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#incremental-build-support-using-the-language-services
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var process: any;
    declare var console: any;
    declare var fs: {
        existsSync(path: string): boolean;
        readdirSync(path: string): string[];
        readFileSync(filename: string, encoding?: string): string;
        writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; } | string): void;
        watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: { mtime: Date }, prev: { mtime: Date }) => void): void;
    };
    declare var path: any;
    
    import * as ts from "typescript";
    
    function watch(rootFileNames: string[], options: ts.CompilerOptions) {
        const files: ts.MapLike<{ version: number }> = {};
    
        // initialize the list of files
        rootFileNames.forEach(fileName => {
            files[fileName] = { version: 0 };
        });
    
        // Create the language service host to allow the LS to communicate with the host
        const servicesHost: ts.LanguageServiceHost = {
            getScriptFileNames: () => rootFileNames,
            getScriptVersion: (fileName) => files[fileName] && files[fileName].version.toString(),
            getScriptSnapshot: (fileName) => {
                if (!fs.existsSync(fileName)) {
                    return undefined;
                }
    
                return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());
            },
            getCurrentDirectory: () => process.cwd(),
            getCompilationSettings: () => options,
            getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options),
        };
    
        // Create the language service files
        const services = ts.createLanguageService(servicesHost, ts.createDocumentRegistry())
    
        // Now let's watch the files
        rootFileNames.forEach(fileName => {
            // First time around, emit all files
            emitFile(fileName);
    
            // Add a watch on the file to handle next change
            fs.watchFile(fileName,
                { persistent: true, interval: 250 },
                (curr, prev) => {
                    // Check timestamp
                    if (+curr.mtime <= +prev.mtime) {
                        return;
                    }
    
                    // Update the version to signal a change in the file
                    files[fileName].version++;
    
                    // write the changes to disk
                    emitFile(fileName);
                });
        });
    
        function emitFile(fileName: string) {
            let output = services.getEmitOutput(fileName);
    
            if (!output.emitSkipped) {
                console.log(`Emitting ${fileName}`);
            }
            else {
                console.log(`Emitting ${fileName} failed`);
                logErrors(fileName);
            }
    
            output.outputFiles.forEach(o => {
                fs.writeFileSync(o.name, o.text, "utf8");
            });
        }
    
        function logErrors(fileName: string) {
            let allDiagnostics = services.getCompilerOptionsDiagnostics()
                .concat(services.getSyntacticDiagnostics(fileName))
                .concat(services.getSemanticDiagnostics(fileName));
    
            allDiagnostics.forEach(diagnostic => {
                let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, "\n");
                if (diagnostic.file) {
                    let { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);
                    console.log(`  Error ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
                }
                else {
                    console.log(`  Error: ${message}`);
                }
            });
        }
    }
    
    // Initialize files constituting the program as all .ts files in the current directory
    const currentDirectoryFiles = fs.readdirSync(process.cwd()).
        filter(fileName=> fileName.length >= 3 && fileName.substr(fileName.length - 3, 3) === ".ts");
    
    // Start the watcher
    watch(currentDirectoryFiles, { module: ts.ModuleKind.CommonJS });
    