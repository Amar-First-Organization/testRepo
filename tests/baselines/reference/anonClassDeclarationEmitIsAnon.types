//// [tests/cases/compiler/anonClassDeclarationEmitIsAnon.ts] ////

=== wrapClass.ts ===
export function wrapClass(param: any) {
>wrapClass : (param: any) => typeof Wrapped
>          : ^^^^^^^^   ^^^^^^^^^^^^^^^^^^^
>param : any

    return class Wrapped {
>class Wrapped {        foo() {            return param;        }    } : typeof Wrapped
>                                                                      : ^^^^^^^^^^^^^^
>Wrapped : typeof Wrapped
>        : ^^^^^^^^^^^^^^

        foo() {
>foo : () => any
>    : ^^^^^^^^^

            return param;
>param : any
        }
    }
}

export type Constructor<T = {}> = new (...args: any[]) => T;
>Constructor : Constructor<T>
>            : ^^^^^^^^^^^^^^
>args : any[]
>     : ^^^^^

export function Timestamped<TBase extends Constructor>(Base: TBase) {
>Timestamped : <TBase extends Constructor<{}>>(Base: TBase) => TBase & { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); }
>            : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Base : TBase
>     : ^^^^^

    return class extends Base {
>class extends Base {        timestamp = Date.now();    } : TBase & { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); }
>                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Base : {}
>     : ^^

        timestamp = Date.now();
>timestamp : number
>          : ^^^^^^
>Date.now() : number
>           : ^^^^^^
>Date.now : () => number
>         : ^^^^^^^^^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^
>now : () => number
>    : ^^^^^^^^^^^^

    };
}

=== index.ts ===
import { wrapClass, Timestamped } from "./wrapClass";
>wrapClass : (param: any) => typeof Wrapped
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Timestamped : <TBase extends import("wrapClass").Constructor<{}>>(Base: TBase) => TBase & { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); }
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

export default wrapClass(0);
>wrapClass(0) : typeof Wrapped
>             : ^^^^^^^^^^^^^^
>wrapClass : (param: any) => typeof Wrapped
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

// Simple class
export class User {
>User : User
>     : ^^^^

    name = '';
>name : string
>     : ^^^^^^
>'' : ""
>   : ^^
}

// User that is Timestamped
export class TimestampedUser extends Timestamped(User) {
>TimestampedUser : TimestampedUser
>                : ^^^^^^^^^^^^^^^
>Timestamped(User) : User & Timestamped<typeof User>.(Anonymous class)
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Timestamped : <TBase extends import("wrapClass").Constructor<{}>>(Base: TBase) => TBase & { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); }
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>User : typeof User
>     : ^^^^^^^^^^^

    constructor() {
        super();
>super() : void
>        : ^^^^
>super : typeof User & { new (...args: any[]): Timestamped<typeof User>.(Anonymous class); prototype: Timestamped<any>.(Anonymous class); }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
}
