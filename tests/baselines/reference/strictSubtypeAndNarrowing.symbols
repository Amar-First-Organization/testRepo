=== tests/cases/compiler/strictSubtypeAndNarrowing.ts ===
// Check that `any` is a strict supertype of `unknown`

declare const x11: { x: unknown };
>x11 : Symbol(x11, Decl(strictSubtypeAndNarrowing.ts, 2, 13))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 2, 20))

declare const x12: { x: any };
>x12 : Symbol(x12, Decl(strictSubtypeAndNarrowing.ts, 3, 13))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 3, 20))

const a11 = [x11, x12];
>a11 : Symbol(a11, Decl(strictSubtypeAndNarrowing.ts, 5, 5))
>x11 : Symbol(x11, Decl(strictSubtypeAndNarrowing.ts, 2, 13))
>x12 : Symbol(x12, Decl(strictSubtypeAndNarrowing.ts, 3, 13))

const a12 = [x12, x11];
>a12 : Symbol(a12, Decl(strictSubtypeAndNarrowing.ts, 6, 5))
>x12 : Symbol(x12, Decl(strictSubtypeAndNarrowing.ts, 3, 13))
>x11 : Symbol(x11, Decl(strictSubtypeAndNarrowing.ts, 2, 13))

declare const x21: { x: any };
>x21 : Symbol(x21, Decl(strictSubtypeAndNarrowing.ts, 8, 13))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 8, 20))

declare const x22: { x: unknown };
>x22 : Symbol(x22, Decl(strictSubtypeAndNarrowing.ts, 9, 13))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 9, 20))

const a21 = [x22, x21];
>a21 : Symbol(a21, Decl(strictSubtypeAndNarrowing.ts, 11, 5))
>x22 : Symbol(x22, Decl(strictSubtypeAndNarrowing.ts, 9, 13))
>x21 : Symbol(x21, Decl(strictSubtypeAndNarrowing.ts, 8, 13))

const a22 = [x21, x22];
>a22 : Symbol(a22, Decl(strictSubtypeAndNarrowing.ts, 12, 5))
>x21 : Symbol(x21, Decl(strictSubtypeAndNarrowing.ts, 8, 13))
>x22 : Symbol(x22, Decl(strictSubtypeAndNarrowing.ts, 9, 13))

// Strict subtype doesn't infer index signatures in non-fresh object types

const x31 = { a: 1 };
>x31 : Symbol(x31, Decl(strictSubtypeAndNarrowing.ts, 16, 5))
>a : Symbol(a, Decl(strictSubtypeAndNarrowing.ts, 16, 13))

declare const x32: { [x: string]: unknown, a: number }
>x32 : Symbol(x32, Decl(strictSubtypeAndNarrowing.ts, 17, 13))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 17, 22))
>a : Symbol(a, Decl(strictSubtypeAndNarrowing.ts, 17, 42))

const a31 = [x31, x32];
>a31 : Symbol(a31, Decl(strictSubtypeAndNarrowing.ts, 19, 5))
>x31 : Symbol(x31, Decl(strictSubtypeAndNarrowing.ts, 16, 5))
>x32 : Symbol(x32, Decl(strictSubtypeAndNarrowing.ts, 17, 13))

const a32 = [x32, x31];
>a32 : Symbol(a32, Decl(strictSubtypeAndNarrowing.ts, 20, 5))
>x32 : Symbol(x32, Decl(strictSubtypeAndNarrowing.ts, 17, 13))
>x31 : Symbol(x31, Decl(strictSubtypeAndNarrowing.ts, 16, 5))

declare const x41: { [x: string]: unknown, a: number }
>x41 : Symbol(x41, Decl(strictSubtypeAndNarrowing.ts, 22, 13))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 22, 22))
>a : Symbol(a, Decl(strictSubtypeAndNarrowing.ts, 22, 42))

const x42 = { a: 1 };
>x42 : Symbol(x42, Decl(strictSubtypeAndNarrowing.ts, 23, 5))
>a : Symbol(a, Decl(strictSubtypeAndNarrowing.ts, 23, 13))

const a41 = [x42, x41];
>a41 : Symbol(a41, Decl(strictSubtypeAndNarrowing.ts, 25, 5))
>x42 : Symbol(x42, Decl(strictSubtypeAndNarrowing.ts, 23, 5))
>x41 : Symbol(x41, Decl(strictSubtypeAndNarrowing.ts, 22, 13))

const a42 = [x41, x42];
>a42 : Symbol(a42, Decl(strictSubtypeAndNarrowing.ts, 26, 5))
>x41 : Symbol(x41, Decl(strictSubtypeAndNarrowing.ts, 22, 13))
>x42 : Symbol(x42, Decl(strictSubtypeAndNarrowing.ts, 23, 5))

// (...args: any[]) => any is supertype of all other function types

declare function isFunction(x: unknown): x is (...args: any[]) => any;
>isFunction : Symbol(isFunction, Decl(strictSubtypeAndNarrowing.ts, 26, 23))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 30, 28))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 30, 28))
>args : Symbol(args, Decl(strictSubtypeAndNarrowing.ts, 30, 47))

function qqq(f: (() => void) | undefined) {
>qqq : Symbol(qqq, Decl(strictSubtypeAndNarrowing.ts, 30, 70))
>f : Symbol(f, Decl(strictSubtypeAndNarrowing.ts, 32, 13))

    if (isFunction(f)) {
>isFunction : Symbol(isFunction, Decl(strictSubtypeAndNarrowing.ts, 26, 23))
>f : Symbol(f, Decl(strictSubtypeAndNarrowing.ts, 32, 13))

        f;  // () => void
>f : Symbol(f, Decl(strictSubtypeAndNarrowing.ts, 32, 13))
    }
    else {
        f;  // undefined
>f : Symbol(f, Decl(strictSubtypeAndNarrowing.ts, 32, 13))
    }
    f;  // (() => void) | undefined
>f : Symbol(f, Decl(strictSubtypeAndNarrowing.ts, 32, 13))
}

// Type of x = y is y with freshness preserved

function fx10(obj1: { x?: number }, obj2: { x?: number, y?: number }) {
>fx10 : Symbol(fx10, Decl(strictSubtypeAndNarrowing.ts, 40, 1))
>obj1 : Symbol(obj1, Decl(strictSubtypeAndNarrowing.ts, 44, 14))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 44, 21))
>obj2 : Symbol(obj2, Decl(strictSubtypeAndNarrowing.ts, 44, 35))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 44, 43))
>y : Symbol(y, Decl(strictSubtypeAndNarrowing.ts, 44, 55))

    obj1 = obj2 = { x: 1, y: 2 };
>obj1 : Symbol(obj1, Decl(strictSubtypeAndNarrowing.ts, 44, 14))
>obj2 : Symbol(obj2, Decl(strictSubtypeAndNarrowing.ts, 44, 35))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 45, 19))
>y : Symbol(y, Decl(strictSubtypeAndNarrowing.ts, 45, 25))

    obj2 = obj1 = { x: 1, y: 2 };
>obj2 : Symbol(obj2, Decl(strictSubtypeAndNarrowing.ts, 44, 35))
>obj1 : Symbol(obj1, Decl(strictSubtypeAndNarrowing.ts, 44, 14))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 46, 19))
>y : Symbol(y, Decl(strictSubtypeAndNarrowing.ts, 46, 25))
}

function fx11(): { x?: number } {
>fx11 : Symbol(fx11, Decl(strictSubtypeAndNarrowing.ts, 47, 1))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 49, 18))

    let obj: { x?: number, y?: number };
>obj : Symbol(obj, Decl(strictSubtypeAndNarrowing.ts, 50, 7))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 50, 14))
>y : Symbol(y, Decl(strictSubtypeAndNarrowing.ts, 50, 26))

    return obj = { x: 1, y: 2 };
>obj : Symbol(obj, Decl(strictSubtypeAndNarrowing.ts, 50, 7))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 51, 18))
>y : Symbol(y, Decl(strictSubtypeAndNarrowing.ts, 51, 24))
}

// Narrowing preserves original type in false branch for non-identical mutual subtypes

declare function isObject1(value: unknown): value is Record<string, unknown>;
>isObject1 : Symbol(isObject1, Decl(strictSubtypeAndNarrowing.ts, 52, 1))
>value : Symbol(value, Decl(strictSubtypeAndNarrowing.ts, 56, 27))
>value : Symbol(value, Decl(strictSubtypeAndNarrowing.ts, 56, 27))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

function gg(x: {}) {
>gg : Symbol(gg, Decl(strictSubtypeAndNarrowing.ts, 56, 77))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 58, 12))

    if (isObject1(x)) {
>isObject1 : Symbol(isObject1, Decl(strictSubtypeAndNarrowing.ts, 52, 1))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 58, 12))

        x;  // Record<string, unknown>
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 58, 12))
    }
    else {
        x;  // {}
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 58, 12))
    }
    x;  // {}
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 58, 12))
}

declare function isObject2(value: unknown): value is {};
>isObject2 : Symbol(isObject2, Decl(strictSubtypeAndNarrowing.ts, 66, 1))
>value : Symbol(value, Decl(strictSubtypeAndNarrowing.ts, 68, 27))
>value : Symbol(value, Decl(strictSubtypeAndNarrowing.ts, 68, 27))

function gg2(x: Record<string, unknown>) {
>gg2 : Symbol(gg2, Decl(strictSubtypeAndNarrowing.ts, 68, 56))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 70, 13))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

    if (isObject2(x)) {
>isObject2 : Symbol(isObject2, Decl(strictSubtypeAndNarrowing.ts, 66, 1))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 70, 13))

        x;  // {}
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 70, 13))
    }
    else {
        x;  // Record<string, unknown>
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 70, 13))
    }
    x;  // Record<string, unknown>
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 70, 13))
}

// Repro from #50916

type Identity<T> = {[K in keyof T]: T[K]};
>Identity : Symbol(Identity, Decl(strictSubtypeAndNarrowing.ts, 78, 1))
>T : Symbol(T, Decl(strictSubtypeAndNarrowing.ts, 82, 14))
>K : Symbol(K, Decl(strictSubtypeAndNarrowing.ts, 82, 21))
>T : Symbol(T, Decl(strictSubtypeAndNarrowing.ts, 82, 14))
>T : Symbol(T, Decl(strictSubtypeAndNarrowing.ts, 82, 14))
>K : Symbol(K, Decl(strictSubtypeAndNarrowing.ts, 82, 21))

function is<T>(value: T): value is Identity<T> {
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>T : Symbol(T, Decl(strictSubtypeAndNarrowing.ts, 84, 12))
>value : Symbol(value, Decl(strictSubtypeAndNarrowing.ts, 84, 15))
>T : Symbol(T, Decl(strictSubtypeAndNarrowing.ts, 84, 12))
>value : Symbol(value, Decl(strictSubtypeAndNarrowing.ts, 84, 15))
>Identity : Symbol(Identity, Decl(strictSubtypeAndNarrowing.ts, 78, 1))
>T : Symbol(T, Decl(strictSubtypeAndNarrowing.ts, 84, 12))

    return true;
}

type Union =  {a: number} | {b: number} | {c: number};
>Union : Symbol(Union, Decl(strictSubtypeAndNarrowing.ts, 86, 1))
>a : Symbol(a, Decl(strictSubtypeAndNarrowing.ts, 88, 15))
>b : Symbol(b, Decl(strictSubtypeAndNarrowing.ts, 88, 29))
>c : Symbol(c, Decl(strictSubtypeAndNarrowing.ts, 88, 43))

function example(x: Union) {
>example : Symbol(example, Decl(strictSubtypeAndNarrowing.ts, 88, 54))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))
>Union : Symbol(Union, Decl(strictSubtypeAndNarrowing.ts, 86, 1))

    if (is(x)) { x }
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    if (is(x)) {}
>is : Symbol(is, Decl(strictSubtypeAndNarrowing.ts, 82, 42))
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))

    x;  // Union
>x : Symbol(x, Decl(strictSubtypeAndNarrowing.ts, 90, 17))
}

