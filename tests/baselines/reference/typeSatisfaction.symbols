=== tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction.ts ===
interface I1 {
>I1 : Symbol(I1, Decl(typeSatisfaction.ts, 0, 0))

    a: number;
>a : Symbol(I1.a, Decl(typeSatisfaction.ts, 0, 14))
}

type T1 = {
>T1 : Symbol(T1, Decl(typeSatisfaction.ts, 2, 1))

    a: "a" | "b";
>a : Symbol(a, Decl(typeSatisfaction.ts, 4, 11))
}

type T2 = (x: string) => void;
>T2 : Symbol(T2, Decl(typeSatisfaction.ts, 6, 1))
>x : Symbol(x, Decl(typeSatisfaction.ts, 8, 11))

const a1 = { a: 1 } satisfies I1; // Ok
>a1 : Symbol(a1, Decl(typeSatisfaction.ts, 10, 5))
>a : Symbol(a, Decl(typeSatisfaction.ts, 10, 12))
>I1 : Symbol(I1, Decl(typeSatisfaction.ts, 0, 0))

const a2 = { a: 1, b: 1 } satisfies I1; // Error
>a2 : Symbol(a2, Decl(typeSatisfaction.ts, 11, 5))
>a : Symbol(a, Decl(typeSatisfaction.ts, 11, 12))
>b : Symbol(b, Decl(typeSatisfaction.ts, 11, 18))
>I1 : Symbol(I1, Decl(typeSatisfaction.ts, 0, 0))

const a3 = { } satisfies I1; // Error
>a3 : Symbol(a3, Decl(typeSatisfaction.ts, 12, 5))
>I1 : Symbol(I1, Decl(typeSatisfaction.ts, 0, 0))

const a4: T1 = { a: "a" } satisfies T1; // Ok
>a4 : Symbol(a4, Decl(typeSatisfaction.ts, 14, 5))
>T1 : Symbol(T1, Decl(typeSatisfaction.ts, 2, 1))
>a : Symbol(a, Decl(typeSatisfaction.ts, 14, 16))
>T1 : Symbol(T1, Decl(typeSatisfaction.ts, 2, 1))

const a5 = (m => m.substring(0)) satisfies T2; // Ok
>a5 : Symbol(a5, Decl(typeSatisfaction.ts, 15, 5))
>m : Symbol(m, Decl(typeSatisfaction.ts, 15, 12))
>m.substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
>m : Symbol(m, Decl(typeSatisfaction.ts, 15, 12))
>substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --))
>T2 : Symbol(T2, Decl(typeSatisfaction.ts, 6, 1))

