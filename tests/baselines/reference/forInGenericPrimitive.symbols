=== tests/cases/compiler/forInGenericPrimitive.ts ===
function f<
>f : Symbol(f, Decl(forInGenericPrimitive.ts, 0, 0))

A,
>A : Symbol(A, Decl(forInGenericPrimitive.ts, 0, 11))

B extends { a: number } | string,
>B : Symbol(B, Decl(forInGenericPrimitive.ts, 1, 2))
>a : Symbol(a, Decl(forInGenericPrimitive.ts, 2, 11))

C extends string | void,
>C : Symbol(C, Decl(forInGenericPrimitive.ts, 2, 33))

D extends number | { s: string } | null | string,
>D : Symbol(D, Decl(forInGenericPrimitive.ts, 3, 24))
>s : Symbol(s, Decl(forInGenericPrimitive.ts, 4, 20))

E extends { x: number },
>E : Symbol(E, Decl(forInGenericPrimitive.ts, 4, 49))
>x : Symbol(x, Decl(forInGenericPrimitive.ts, 5, 11))

>(
    a: A,
>a : Symbol(a, Decl(forInGenericPrimitive.ts, 6, 2))
>A : Symbol(A, Decl(forInGenericPrimitive.ts, 0, 11))

    b: B,
>b : Symbol(b, Decl(forInGenericPrimitive.ts, 7, 9))
>B : Symbol(B, Decl(forInGenericPrimitive.ts, 1, 2))

    c: C,
>c : Symbol(c, Decl(forInGenericPrimitive.ts, 8, 9))
>C : Symbol(C, Decl(forInGenericPrimitive.ts, 2, 33))

    d: D,
>d : Symbol(d, Decl(forInGenericPrimitive.ts, 9, 9))
>D : Symbol(D, Decl(forInGenericPrimitive.ts, 3, 24))

    e: E,
>e : Symbol(e, Decl(forInGenericPrimitive.ts, 10, 9))
>E : Symbol(E, Decl(forInGenericPrimitive.ts, 4, 49))

) {
    for (const _ in a) { }
>_ : Symbol(_, Decl(forInGenericPrimitive.ts, 13, 14))
>a : Symbol(a, Decl(forInGenericPrimitive.ts, 6, 2))

    for (const _ in b) { }
>_ : Symbol(_, Decl(forInGenericPrimitive.ts, 14, 14))
>b : Symbol(b, Decl(forInGenericPrimitive.ts, 7, 9))

    for (const _ in c) { }
>_ : Symbol(_, Decl(forInGenericPrimitive.ts, 15, 14))
>c : Symbol(c, Decl(forInGenericPrimitive.ts, 8, 9))

    for (const _ in d) { }
>_ : Symbol(_, Decl(forInGenericPrimitive.ts, 16, 14))
>d : Symbol(d, Decl(forInGenericPrimitive.ts, 9, 9))

    for (const _ in e) { }
>_ : Symbol(_, Decl(forInGenericPrimitive.ts, 17, 14))
>e : Symbol(e, Decl(forInGenericPrimitive.ts, 10, 9))
}
