=== tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts ===
function tag (str: any, ...args: any[]): string {
>tag : (str: any, ...args: any[]) => string
>str : any
>args : any[]

  return str
>str : any
}

const a = tag`123`
>a : string
>tag`123` : string
>tag : (str: any, ...args: any[]) => string
>`123` : "123"

const b = tag`123 ${100}`
>b : string
>tag`123 ${100}` : string
>tag : (str: any, ...args: any[]) => string
>`123 ${100}` : string
>100 : 100

const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
>x : string
>tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld` : string
>tag : (str: any, ...args: any[]) => string
>`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld` : string
>100 : 100
>200 : 200
>300 : 300

const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
>y : string
>`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld` : string
>100 : 100
>200 : 200
>300 : 300

const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
>z : string
>tag`\u{hello} \xtraordinary wonderful \uworld` : string
>tag : (str: any, ...args: any[]) => string
>`\u{hello} \xtraordinary wonderful \uworld` : "\\u{hello} \\xtraordinary wonderful \\uworld"

const a1 = tag`${ 100 }\0` // \0
>a1 : string
>tag`${ 100 }\0` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\0` : string
>100 : 100

const a2 = tag`${ 100 }\00` // \\00
>a2 : string
>tag`${ 100 }\00` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\00` : string
>100 : 100

const a3 = tag`${ 100 }\u` // \\u
>a3 : string
>tag`${ 100 }\u` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u` : string
>100 : 100

const a4 = tag`${ 100 }\u0` // \\u0
>a4 : string
>tag`${ 100 }\u0` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u0` : string
>100 : 100

const a5 = tag`${ 100 }\u00` // \\u00
>a5 : string
>tag`${ 100 }\u00` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u00` : string
>100 : 100

const a6 = tag`${ 100 }\u000` // \\u000
>a6 : string
>tag`${ 100 }\u000` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u000` : string
>100 : 100

const a7 = tag`${ 100 }\u0000` // \u0000
>a7 : string
>tag`${ 100 }\u0000` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u0000` : string
>100 : 100

const a8 = tag`${ 100 }\u{` // \\u{
>a8 : string
>tag`${ 100 }\u{` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u{` : string
>100 : 100

const a9 = tag`${ 100 }\u{10FFFF}` // \\u{10FFFF
>a9 : string
>tag`${ 100 }\u{10FFFF}` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u{10FFFF}` : string
>100 : 100

const a10 = tag`${ 100 }\u{1f622` // \\u{1f622
>a10 : string
>tag`${ 100 }\u{1f622` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u{1f622` : string
>100 : 100

const a11 = tag`${ 100 }\u{1f622}` // \u{1f622}
>a11 : string
>tag`${ 100 }\u{1f622}` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\u{1f622}` : string
>100 : 100

const a12 = tag`${ 100 }\x` // \\x
>a12 : string
>tag`${ 100 }\x` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\x` : string
>100 : 100

const a13 = tag`${ 100 }\x0` // \\x0
>a13 : string
>tag`${ 100 }\x0` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\x0` : string
>100 : 100

const a14 = tag`${ 100 }\x00` // \x00
>a14 : string
>tag`${ 100 }\x00` : string
>tag : (str: any, ...args: any[]) => string
>`${ 100 }\x00` : string
>100 : 100

