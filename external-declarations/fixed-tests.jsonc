{
    "error-categories": {
        "with-isolated-declaration-errors": [
            9007, // Declaration_emit_for_this_file_requires_type_resolution_An_explicit_type_annotation_may_unblock_declaration_emit
            9008, // Declaration_emit_for_this_file_requires_adding_a_type_reference_directive_Add_a_type_reference_directive_to_0_to_unblock_declaration_emit
            9009, // Assigning_properties_to_functions_without_declaring_them_is_not_supported_with_isolatedDeclarations_Add_an_explicit_declaration_for_the_properties_assigned_to_this_function
            9010, // Reference directives are not supported in isolated declaration mode.
        ], 
        "with-unreliable-errors": [
            2784, // 'get' and 'set' accessors cannot declare 'this' parameters.
            1162, // An object member cannot be declared optional.
        ]
    },
    "test-categories": {
        "enum-issues": [
            "ambientConstLiterals",
            "constEnumErrors",
            "constEnums",
            "enumBasics2",
            "enumBasics3",
            "forwardRefInEnum",
            "isolatedModulesGlobalNamespacesAndEnums",
            "mergedDeclarations2",
            "mergedEnumDeclarationCodeGen",
            "enumConstantMembers",
            "enumErrors",
            "enumExportMergingES6",
            "verbatimModuleSyntaxConstEnumUsage",
            "templateLiteralTypes4",
        ],
        "code-fixer-issues" : [
            // Only one fix is applied per line, fix need to be applied to both another issue (params, default exports) and return type
            "ambiguousGenericAssertion1",
            "arrowFunctionWithObjectLiteralBody1",
            "arrowFunctionWithObjectLiteralBody2",
            "arrowFunctionWithObjectLiteralBody3",
            "arrowFunctionWithObjectLiteralBody4",
            "commentsAfterFunctionExpression1",
            "fatarrowfunctions",
            "genericTypeAssertions3",
            "taggedTemplateStringsWithCurriedFunction",
            "unusedParametersWithUnderscore",
            "arrowFunctionWithParameterNameAsync_es2017",
            "arrowFunctionWithParameterNameAsync_es5",
            "arrowFunctionWithParameterNameAsync_es6",
            "importCallExpressionInExportEqualsAMD",
            "importCallExpressionInExportEqualsCJS",
            "importCallExpressionInExportEqualsUMD",
            "declarationEmitMixinPrivateProtected",
            "disallowLineTerminatorBeforeArrow",
            "emitArrowFunctionAsIs",
            "emitArrowFunctionAsIsES6",
            "emitArrowFunctionsAsIs",
            "emitArrowFunctionsAsIsES6",
            "declarationEmitObjectAssignedDefaultExport",
            "templateStringInArrowFunction",
            "templateStringInArrowFunctionES6",
            "exportAssignDottedName",
            "exportAssignNonIdentifier",
            // return type missing
            "arrayFakeFlatNoCrashInferenceDeclarations",
            "mixingApparentTypeOverrides",
            "noCrashOnMixin",
            "overrideBaseIntersectionMethod",
            "unusedFunctionsinNamespaces6",
            "mixinAbstractClasses",
            "mixinAbstractClassesReturnTypeInference",
            "mixinAccessModifiers",
            "override1",
            "override19",
            "declarationFiles",
            // Crash on export = in language service. Test not fixed
            "commonJsImportClassExpression",
            "constEnumNamespaceReferenceCausesNoImport2",
            "declarationEmitInferredDefaultExportType2",
            "exportAssignmentWithoutIdentifier1",
            "exportEqualsProperty",
            "exportEqualsProperty2",
            "namedEvaluation",
            "thisInInvalidContextsExternalModule",
            "reexportClassDefinition",
            "esDecorators-classExpression-namedEvaluation.9",
            // Members return types are not fixed
            "declarationEmitClassMemberWithComputedPropertyName",
            "declarationEmitLocalClassDeclarationMixin",
            "thisInPropertyBoundDeclarations",
            "thisIndexOnExistingReadonlyFieldIsNotNever",
            // Constant is not fixed
            "declarationEmitCommonJsModuleReferencedType",
            // Mixin not fixed. Not sure we can fix them 
            "mixinPrivateAndProtected",
            "doubleMixinConditionalTypeBaseClassWorks",
            "emitClassExpressionInDeclarationFile2",
            // any, non initialized variable is not fixed
            "moduleAugmentationDisallowedExtensions",
            "moduleAugmentationNoNewNames",
            // ? 
            "parserEqualsGreaterThanAfterFunction1",
            "declarationEmitPrivatePromiseLikeInterface",
            // Parser errors 
            "parserSkippedTokens16",
            // Symbol const not annotated
            "declarationEmitPrivateNameCausesError",
            // Crashes
            "parseInvalidNonNullableTypes"
        ],
        "not-fixed-with-unreliable-errors": [
            "classMemberWithMissingIdentifier",
            "classMemberWithMissingIdentifier2",
            "commonMissingSemicolons",
            "reservedWords3",
            "negateOperator",
            "negateOperatorInvalidOperations",
            "destructuringObjectBindingPatternAndAssignment3",
            "objectBindingPatternKeywordIdentifiers01",
            "objectBindingPatternKeywordIdentifiers02",
            "objectBindingPatternKeywordIdentifiers03",
            "objectBindingPatternKeywordIdentifiers04",
            "arrowFunctionExpressions",
            "declarationEmitDestructuringParameterProperties",
            "destructuringParameterProperties4",
        ],
        "with-unreliable-errors": [
            "thisTypeErrors", // Assertion to this in static context produces this in DTE and any in TSC
            "parseInvalidNonNullableTypes", // Prefix ! operator
            "parseInvalidNullableTypes",  // Prefix ? operator
            "ArrowFunction1", // Missing type annotation syntax error
            "parserX_ArrowFunction1", // Missing type annotation syntax error
            "typeParameterDirectlyConstrainedToItself", // Circular type constraints makes emit unreliable
            "typeParameterIndirectlyConstrainedToItself", // Circular type constraints makes emit unreliable
            "callSignaturesWithAccessibilityModifiersOnParameters", // Accessibility modifiers on function parameters
            // Duplicate properties and variables
            "duplicateObjectLiteralProperty",
            "duplicateVariablesWithAny",
            "duplicateVarsAcrossFileBoundaries",
            "gettersAndSettersErrors",
            "jsFileCompilationDuplicateVariableErrorReported",
            "varBlock",
            "duplicatePropertiesInTypeAssertions01",
            "duplicatePropertiesInTypeAssertions02",
            "parserCastVersusArrowFunction1",
            "invalidMultipleVariableDeclarations",
            "validMultipleVariableDeclarations", 
            "augmentedTypesVar",
            "objectLiteralErrors",
            "duplicateObjectLiteralProperty_computedName2", 
            "castingTuple", // contains both duplicate variables and print differences.
            // Identifier expected.
            "FunctionPropertyAssignments2_es6",
            "FunctionPropertyAssignments3_es6",
            "FunctionPropertyAssignments6_es6",
            // Generic type '{0}' requires {1} type argument(s)
            "genericTypeReferenceWithoutTypeArgument",
            "genericTypeReferenceWithoutTypeArgument2",
            // A computed property name in a method overload must refer to an expression whose type is a literal type or a 'unique symbol' type.
            "overloadsWithComputedNames",
            // A_computed_property_name_must_be_of_type_string_number_symbol_or_any,
            "bigintIndex",
            "symbolProperty59",
            "computedPropertyNames14_ES5",
            "computedPropertyNames14_ES6",
            "computedPropertyNames15_ES5",
            "computedPropertyNames15_ES6",
            "computedPropertyNames17_ES5",
            "computedPropertyNames17_ES6",
            "parserES5ComputedPropertyName5",
            "parserIndexSignature5",
            "parserES5SymbolProperty1",
            "parserES5SymbolProperty2",
            "parserComputedPropertyName20",
            "parserComputedPropertyName21",
            "typeUsedAsTypeLiteralIndex",
            "parser.asyncGenerators.classMethods.es2018",
            // Invalid escape sequences 
            "invalidTaggedTemplateEscapeSequences",
            "objectTypeWithStringNamedPropertyOfIllegalCharacters",
            "noUsedBeforeDefinedErrorInTypeContext", // Variable used before definition in type context
            "accessorBodyInTypeContext", //An implementation cannot be declared in ambient contexts.
            "commonJsExportTypeDeclarationError", // Duplicate name, TS resolves to the type alias symbol, DTE resolves to import. Neither is wrong, code is wrong.
            "parseAssertEntriesError", // Syntactic invalid import assertions.
            "decoratorMetadataWithImportDeclarationNameCollision7", // Import does not have the accessed member. TS removes the import as unused. A DTE will keep it as it is syntactically used.
            "classExtendingNonConstructor", // Not reported as isolated declaration error, but the extends clause is invalid.
            "nodeModulesImportTypeModeDeclarationEmitErrors1", // Invalid import asserts
            "wellKnownSymbolExpando", // Expando function with well known symbols error in TS, but generate the expando function namepsace, DTE does not. 
        ],
        "with-isolated-declaration-errors/9008": [
            "declarationEmitHasTypesRefOnNamespaceUse",
            "declarationFilesWithTypeReferences2",
            "typeReferenceDirectives11",
            "typeReferenceDirectives12",
            "typeReferenceDirectives2",
            "typeReferenceDirectives8",
            "typeReferenceDirectives9",
            "importingExportingTypes",
            // Will not actually error because of https://github.com/microsoft/TypeScript/issues/55636
            // In isolated declarations we walk the type in the return as if it was hand written in the variable
            // This triggers the difference in behavior described in the issue.
            "jsxNamespaceGlobalReexport", 
            
        ],
        "with-isolated-declaration-errors": [
            "typeFromPropertyAssignment38", // Nested expando functions. Can in principle be detected, but are not yet implemented
            "contextualReturnTypeOfIIFE2", // Nested expando functions. Can in principle be detected, but are not yet implemented
            // Computed property errors a DTE can't detect 
            "complicatedPrivacy",
            "computedPropertyNames12_ES5",
            "computedPropertyNames12_ES6",
            "computedPropertyNames13_ES5",
            "computedPropertyNames13_ES6",
            "declarationEmitMappedTypeTemplateTypeofSymbol",
            "declarationEmitReadonlyComputedProperty",
            "ES5For-ofTypeCheck10",
            "ES5SymbolProperty2",
            "ES5SymbolProperty3",
            "ES5SymbolProperty4",
            "ES5SymbolProperty5",
            "ES5SymbolProperty6",
            "ES5SymbolProperty7",
            "indexWithoutParamType2",
            "MemberFunctionDeclaration3_es6",
            "parserComputedPropertyName10",
            "parserComputedPropertyName11",
            "parserComputedPropertyName12",
            "parserComputedPropertyName13",
            "parserComputedPropertyName14",
            "parserComputedPropertyName15",
            "parserComputedPropertyName18",
            "parserComputedPropertyName19",
            "parserComputedPropertyName22",
            "parserComputedPropertyName23",
            "parserComputedPropertyName25",
            "parserComputedPropertyName27",
            "parserComputedPropertyName28",
            "parserComputedPropertyName29",
            "parserComputedPropertyName31",
            "parserComputedPropertyName32",
            "parserComputedPropertyName33",
            "parserComputedPropertyName36",
            "parserComputedPropertyName38",
            "parserComputedPropertyName39",
            "parserComputedPropertyName7",
            "parserComputedPropertyName8",
            "parserComputedPropertyName9",
            "parserES5ComputedPropertyName1",
            "parserES5ComputedPropertyName10",
            "parserES5ComputedPropertyName11",
            "parserES5ComputedPropertyName7",
            "parserES5ComputedPropertyName8",
            "parserES5ComputedPropertyName9",
            "parserES5SymbolProperty3",
            "parserES5SymbolProperty4",
            "parserES5SymbolProperty5",
            "parserES5SymbolProperty6",
            "parserES5SymbolProperty7",
            "parserES5SymbolProperty8",
            "parserES5SymbolProperty9",
            "propertyAssignment",
            "superSymbolIndexedAccess1",
            "superSymbolIndexedAccess3",
            "superSymbolIndexedAccess4",
            "superSymbolIndexedAccess5",
            "superSymbolIndexedAccess6",
            "declarationEmitForModuleImportingModuleAugmentationRetainsImport" // Import augments and must be kept
        ],
        "ts-bugs": [
             // Type parameter renamed
             // Reported as https://github.com/microsoft/TypeScript/issues/55653
            "objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts",
            "objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames",
            "objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterCounts",
            // Default type parameters is written in declarations
            "conditionalTypesSimplifyWhenTrivial", 
            // https://github.com/microsoft/TypeScript/issues/55571 
            "reExportAliasMakesInstantiated"
        ],
        // Needs TS Fix
        // Reported as https://github.com/microsoft/TypeScript/issues/55654
        // Fix available
        "ts-bug/binding-patterns": [
            "declarationsAndAssignments",
            "excessPropertyCheckWithSpread",
            "destructuringParameterDeclaration1ES5",
            "destructuringParameterDeclaration1ES5iterable",
            "destructuringParameterDeclaration1ES6",
            "sourceMapValidationDestructuringParameterNestedObjectBindingPattern",
            "sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues",
            "sourceMapValidationDestructuringParameterObjectBindingPattern",
            "sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues",
            "declarationEmitKeywordDestructuring",
            "paramterDestrcuturingDeclaration",
            "renamingDestructuredPropertyInFunctionType",
            "restParameterWithBindingPattern3",
            "destructuringInFunctionType",
        ],
        // Just Printing differences
        "print-differences": [
            "arrayFind",
            "contextualTyping",
            "contextualTyping38",
            "contextualTyping39",
            "correlatedUnions",
            "declarationEmitNoNonRequiredParens",
            "declarationEmitShadowingInferNotRenamed",
            "declarationEmitTupleRestSignatureLeadingVariadic",
            "es5SetterparameterDestructuringNotElided",
            "hugeDeclarationOutputGetsTruncatedWithError",
            "inKeywordAndIntersection",
            "mapConstructor",
            "mappedTypeInferenceAliasSubstitution",
            "mappedTypeWithAsClauseAndLateBoundProperty2",
            "parseArrowFunctionWithFunctionReturnType",
            "parseTypes",
            "asOperator1",
            "generatedContextualTyping",
            "objectLiteralGettersAndSetters",
            "optionalChainingInference",
            "noUncheckedIndexedAccess",
            "conditionalTypes1",
            "stringLiteralsWithTypeAssertions01",
            "castingTuple",
            "emptyTuplesTypeAssertion01",
            "emptyTuplesTypeAssertion02",
            "namedTupleMembers",
            "optionalMethods",
            "optionalParameterProperty",
            "optionalParameterRetainsNull",
            "escapedIdentifiers",
            "parseBigInt",
            "commentsFunction",
            "declarationEmitDistributiveConditionalWithInfer",
            "declarationEmitInlinedDistributiveConditional",
            "declarationEmitParameterProperty",
            "declarationsForFileShadowingGlobalNoError",
            "mappedTypeGenericInstantiationPreservesHomomorphism",
            "mappedTypeGenericInstantiationPreservesInlineForm",
            "unusedTypeParametersCheckedByNoUnusedParameters",
            "unusedTypeParametersNotCheckedByNoUnusedLocals",
            "mixinClassesAnonymous",
            "nodeModulesTripleSlashReferenceModeDeclarationEmit6",
            "keyofAndIndexedAccess",
            "subtypingWithCallSignatures2",
            "conditionalTypesSimplifyWhenTrivial", // Default type parameter is inlined
            "emitArrowFunctionES6",
            "stringLiteralTypesInImplementationSignatures",
            "stringLiteralTypesInImplementationSignatures2",
            "computedPropertyNames7_ES6",
            "computedPropertyNames7_ES5",
            "objectLiteralEnumPropertyNames",
            "objectLiteralComputedNameNoDeclarationError",
            "identityAndDivergentNormalizedTypes",
            "genericFunctionsAndConditionalInference",
            "dynamicNames",
            "declarationEmitWithDefaultAsComputedName2",
            "declarationEmitWithDefaultAsComputedName",
            "declarationEmitComputedNameConstEnumAlias",
            "capturedParametersInInitializers1",
            "declarationEmitPropertyNumericStringKey",
            "templateLiteralsSourceMap", // template literal is evaluated in constant value.
            "nodeModulesImportTypeModeDeclarationEmit1", // resolution-mode in assert from type assertion is preserved
            "declarationEmitPrefersPathKindBasedOnBundling2", // Import path has .. in it. A similar type written by hand would not.
            "computedPropertiesNarrowed",
        ],
    }
}

