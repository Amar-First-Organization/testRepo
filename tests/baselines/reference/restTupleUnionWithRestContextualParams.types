=== tests/cases/compiler/restTupleUnionWithRestContextualParams.ts ===
const f1: (...args: [number, string, ...boolean[]] | [string, number, ...boolean[]]) => void = (a, b, c) => {};
>f1 : (...args: [number, string, ...boolean[]] | [string, number, ...boolean[]]) => void
>args : [number, string, ...boolean[]] | [string, number, ...boolean[]]
>(a, b, c) => {} : (a: string | number, b: string | number, c: boolean) => void
>a : string | number
>b : string | number
>c : boolean

const f2: (x: string, ...args: [string] | [number, boolean]) => void = (a, b, c) => {};
>f2 : (x: string, ...args: [string] | [number, boolean]) => void
>x : string
>args : [string] | [number, boolean]
>(a, b, c) => {} : (a: string, b: string | number, c: boolean | undefined) => void
>a : string
>b : string | number
>c : boolean | undefined

const f3: (...args: [type: "one"] | [type: "two", x: string]) => void = (type, x) => {}
>f3 : (...args: [type: "one"] | [type: "two", x: string]) => void
>args : [type: "one"] | [type: "two", x: string]
>(type, x) => {} : (type: "one" | "two", x: string | undefined) => void
>type : "one" | "two"
>x : string | undefined

const f4: (...args: [type: "one", x?: number] | [type: "two", x: string]) => void = (type, x) => {}
>f4 : (...args: [type: "one", x?: number] | [type: "two", x: string]) => void
>args : [type: "one", x?: number | undefined] | [type: "two", x: string]
>(type, x) => {} : (type: "one" | "two", x: string | number | undefined) => void
>type : "one" | "two"
>x : string | number | undefined

