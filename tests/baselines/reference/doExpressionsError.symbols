=== tests/cases/compiler/doExpressionsError.ts ===
// No iteration / declaration at the end

;[
    do { var a = 1 },
>a : Symbol(a, Decl(doExpressionsError.ts, 3, 12))

    do { function x() { } },
>x : Symbol(x, Decl(doExpressionsError.ts, 4, 8))

    do { const a = 1 },
>a : Symbol(a, Decl(doExpressionsError.ts, 5, 14))

    do { let a = 1 },
>a : Symbol(a, Decl(doExpressionsError.ts, 6, 12))

    do { class T {} },
>T : Symbol(T, Decl(doExpressionsError.ts, 7, 8))

    do { enum T {} },
>T : Symbol(T, Decl(doExpressionsError.ts, 8, 8))

]

;[
    do { for (const x of []) {} },
>x : Symbol(x, Decl(doExpressionsError.ts, 12, 19))

    do { for (const x in {}) {} },
>x : Symbol(x, Decl(doExpressionsError.ts, 13, 19))

    do { for (let i = 0; i < [].length; i++) {} },
>i : Symbol(i, Decl(doExpressionsError.ts, 14, 17))
>i : Symbol(i, Decl(doExpressionsError.ts, 14, 17))
>[].length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(doExpressionsError.ts, 14, 17))

    do { while(true) {} },
    do { do {} while(true) }
]
;

// But in non-end position

;[
    do { var a = 1; a },
>a : Symbol(a, Decl(doExpressionsError.ts, 23, 12))
>a : Symbol(a, Decl(doExpressionsError.ts, 23, 12))

    do { function x() { }; x },
>x : Symbol(x, Decl(doExpressionsError.ts, 24, 8))
>x : Symbol(x, Decl(doExpressionsError.ts, 24, 8))

    do { const a = 1; a },
>a : Symbol(a, Decl(doExpressionsError.ts, 25, 14))
>a : Symbol(a, Decl(doExpressionsError.ts, 25, 14))

    do { let a = 1; a },
>a : Symbol(a, Decl(doExpressionsError.ts, 26, 12))
>a : Symbol(a, Decl(doExpressionsError.ts, 26, 12))

    do { class T {}; T },
>T : Symbol(T, Decl(doExpressionsError.ts, 27, 8))
>T : Symbol(T, Decl(doExpressionsError.ts, 27, 8))

    do { enum T {}; T },
>T : Symbol(T, Decl(doExpressionsError.ts, 28, 8))
>T : Symbol(T, Decl(doExpressionsError.ts, 28, 8))

]

;[
    do { for (const x of []) {}; 1 },
>x : Symbol(x, Decl(doExpressionsError.ts, 32, 19))

    do { for (const x in {}) {}; 1 },
>x : Symbol(x, Decl(doExpressionsError.ts, 33, 19))

    do { for (let i = 0; i < [].length; i++) {}; 1 },
>i : Symbol(i, Decl(doExpressionsError.ts, 34, 17))
>i : Symbol(i, Decl(doExpressionsError.ts, 34, 17))
>[].length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(doExpressionsError.ts, 34, 17))

    do { while(true) {}; 1 },
    do { do {} while(true); 1 }
]

// No if-without-else in the last position

;[
    do {
        if (true) true;
    }
]

