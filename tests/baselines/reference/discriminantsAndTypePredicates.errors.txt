tests/cases/compiler/discriminantsAndTypePredicates.ts(238,15): error TS2551: Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'. Did you mean 'kind1'?
  Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; }'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(239,15): error TS2339: Property 'c' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'.
  Property 'c' does not exist on type '{ kind1: "a"; a: 1; }'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(252,15): error TS2339: Property 'a' does not exist on type '{ kind1: string; a?: number; b?: number; } | { kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'.
  Property 'a' does not exist on type '{ kind1: "b"; b: 2; }'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(264,11): error TS2339: Property 'kind1' does not exist on type 'unknown'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(265,11): error TS2339: Property 'a' does not exist on type 'unknown'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(273,11): error TS2339: Property 'kind2' does not exist on type 'unknown'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(274,11): error TS2339: Property 'c' does not exist on type 'unknown'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(302,15): error TS2551: Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'. Did you mean 'kind1'?
  Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; }'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(303,15): error TS2339: Property 'c' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'.
  Property 'c' does not exist on type '{ kind1: "a"; a: 1; }'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(306,11): error TS2339: Property 'kind1' does not exist on type 'unknown'.
tests/cases/compiler/discriminantsAndTypePredicates.ts(307,11): error TS2339: Property 'a' does not exist on type 'unknown'.


==== tests/cases/compiler/discriminantsAndTypePredicates.ts (11 errors) ====
    // Repro from #10145
    
    interface A { type: 'A' }
    interface B { type: 'B' }
    
    function isA(x: A | B): x is A { return x.type === 'A'; }
    function isB(x: A | B): x is B { return x.type === 'B'; }
    
    function foo1(x: A | B): any {
        x;  // A | B
        if (isA(x)) {
            return x;  // A
        }
        x;  // B
        if (isB(x)) {
            return x;  // B
        }
        x;  // never
    }
    
    function foo2(x: A | B): any {
        x;  // A | B
        if (x.type === 'A') {
            return x;  // A
        }
        x;  // B
        if (x.type === 'B') {
            return x;  // B
        }
        x;  // never
    }
    
    // Repro from #30557
    
    interface TypeA {
        Name: "TypeA";
        Value1: "Cool stuff!";
    }
    
    interface TypeB {
        Name: "TypeB";
        Value2: 0;
    }
    
    type Type = TypeA | TypeB;
    
    declare function isType(x: unknown): x is Type;
    
    function WorksProperly(data: Type) {
        if (data.Name === "TypeA") {
            // TypeA
            const value1 = data.Value1;
        }
    }
    
    function DoesNotWork(data: unknown) {
        if (isType(data)) {
            if (data.Name === "TypeA") {
                // TypeA
                const value1 = data.Value1;
            }
        }
    }
    
    function narrowToNever(data: Type): "Cool stuff!" | 0 {
        if (data.Name === "TypeA") {
            return data.Value1;
        }
        if (data.Name === "TypeB") {
            return data.Value2;
        }
        return data;
    }
    
    function narrowToNeverUnknown(data: unknown): "Cool stuff!" | 0 {
        if (isType(data)) {
            if (data.Name === "TypeA") {
                return data.Value1;
            }
            if (data.Name === "TypeB") {
                return data.Value2;
            }
            return data;
        }
        throw "error";
    }
    
    type Foo = { kind: "a", a: number } | { kind: "b", b: number };
    type Bar = { kind: "c", c: number } | { kind: "d", d: number };
    
    declare function isFoo(x: unknown): x is Foo;
    declare function isBar(x: unknown): x is Bar;
    
    function blah(x: unknown) {
        if (isFoo(x)) {
            if (x.kind === "a") {
                let a = x.a;
            }
            else if (x.kind === "b") {
                let b = x.b;
            }
        }
        else if (isBar(x)) {
            if (x.kind === "c") {
                let c = x.c;
            }
            else if (x.kind === "d") {
                let d = x.d;
            }
        }
        x  // unknown
    }
    
    type PrimitiveUnion = number | string
    type FooComplex = { kind: "a", a: number } | { kind: "b", b: number } | number;
    type BarComplex = { kind: "c", c: number } | { kind: "d", d: number } | string;
    
    declare function isPrimitiveUnion(x: unknown): x is PrimitiveUnion;
    declare function isFooComplex(x: unknown): x is FooComplex;
    declare function isBarComplex(x: unknown): x is BarComplex;
    declare function isZZYYComplex(x: unknown): x is { kind: "z"; zzz: string } | { kind: "y", yyy: number };
    
    function earlyExitsAndStuff(x: unknown) {
        if (!isFooComplex(x) && !isBarComplex(x)) {
            if (isZZYYComplex(x)) {
                if (x.kind !== "z") {
                    return x.yyy;
                }
                return x.zzz;
            }
            return;
        }
        if (!!isPrimitiveUnion(x)) {
            return x;
        }
        if (!isZZYYComplex(x)) {
            if (x.kind === "a") {
                let a = x.a;
            }
            if (x.kind === "b") {
                let b = x.b;
            }
            if (x.kind === "c") {
                let c = x.c;
            }
            if (x.kind === "d") {
                let d = x.d;
            }
        }
    }
    
    function bluergh(x: unknown) {
        if (isPrimitiveUnion(x)) {
            let a: number | string = x;
            return;
        }
        if (isFooComplex(x) && typeof x === "object") {
            if (x.kind === "a") {
                let a = x.a;
            }
            else if (x.kind === "b") {
                let b = x.b;
            }
        }
        if (isPrimitiveUnion(x)) {
            let a: number | string = x;
        }
        if (isBarComplex(x) && typeof x === "object") {
            if (x.kind === "c") {
                let c = x.c;
            }
            else if (x.kind === "d") {
                let d = x.d;
            }
        }
        if (isPrimitiveUnion(x)) {
            let a: number | string = x;
        }
        x  // unknown
    }
    
    type A1 = { x: number };
    type B1 = A1 & { kind: "B"; y: number };
    type C1 = A1 & { kind: "C"; z: number };
    
    function isBorC(a: A1): a is B1 | C1 {
        return (a as any).kind === "B" || (a as any).kind === "C";
    }
    
    function isB1(a: A1): a is B1 {
        return (a as any).kind === "B";
    }
    
    function isC1(a: A1): a is C1 {
        return (a as any).kind === "C";
    }
    
    function fn1(a: A1) {
        if (isBorC(a)) {
            if (a.kind === "B") {
                a.y;
            }
        }
    }
    
    function fn2(a: A1) {
        if (!isB1(a)) {
            return;
        }
        if (!isC1(a)) {
            if (a.kind === "B") {
                a.y;
            }
            return;
        }
        if (a.kind === "B") {
            a.y;
        }
    }
    
    declare function isTypeObj(x: unknown): x is { kind1: string, a?: number, b?: number };
    declare function isTypeAB(x: unknown): x is { kind1: 'a', a: 1 } | { kind1: 'b', b: 2 };
    declare function isTypeCD(x: unknown): x is { kind2: 'c', c: 3 } | { kind2: 'd', d: 4 };
    
    function testComposition1(x: unknown) {
        if (isTypeAB(x)) {
            if (isTypeCD(x)) {
                if (x.kind1 === 'a') {
                    x.a;
                }
                if (x.kind2 === 'c') {
                    x.c;
                }
            }
            if (x.kind1 === 'a') {
                x.a;
            }
            if (x.kind2 === 'c') {
                  ~~~~~
!!! error TS2551: Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'. Did you mean 'kind1'?
!!! error TS2551:   Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; }'.
                x.c;
                  ~
!!! error TS2339: Property 'c' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'.
!!! error TS2339:   Property 'c' does not exist on type '{ kind1: "a"; a: 1; }'.
            }
        }
    }
    
    function testComposition2(x: unknown) {
        if (isTypeObj(x)) {
            if (isTypeAB(x)) {
                if (x.kind1 === "a") {
                    x.a;
                }
            }
            if (x.kind1 === "a") {
                x.a; // Error
                  ~
!!! error TS2339: Property 'a' does not exist on type '{ kind1: string; a?: number; b?: number; } | { kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'.
!!! error TS2339:   Property 'a' does not exist on type '{ kind1: "b"; b: 2; }'.
            }
        }
    }
    
    function testComposition3(x: unknown) {
        if (isTypeAB(x)) {
            if (x.kind1 === 'a') {
                x.a;
            }
            return;
        }
        if (x.kind1 === 'a') {
              ~~~~~
!!! error TS2339: Property 'kind1' does not exist on type 'unknown'.
            x.a;  // Error
              ~
!!! error TS2339: Property 'a' does not exist on type 'unknown'.
        }
        if (isTypeCD(x)) {
            if (x.kind2 === 'c') {
                x.c;
            }
            return;
        }
        if (x.kind2 === 'c') {
              ~~~~~
!!! error TS2339: Property 'kind2' does not exist on type 'unknown'.
            x.c;  // Error
              ~
!!! error TS2339: Property 'c' does not exist on type 'unknown'.
        }
        if (isTypeAB(x)) {
            if (isTypeCD(x)) {
                if (x.kind1 === 'a') {
                    x.a;
                }
                if (x.kind2 === 'c') {
                    x.c;
                }
            }
        }
    }
    
    function looper(getter: () => unknown) {
        let x = getter();
        while (isTypeAB(x)) {
            if (isTypeCD(x)) {
                if (x.kind1 === 'a') {
                    x.a;
                }
                if (x.kind2 === 'c') {
                    x.c;
                }
            }
            if (x.kind1 === 'a') {
                x.a;
            }
            if (x.kind2 === 'c') {
                  ~~~~~
!!! error TS2551: Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'. Did you mean 'kind1'?
!!! error TS2551:   Property 'kind2' does not exist on type '{ kind1: "a"; a: 1; }'.
                x.c; // Error
                  ~
!!! error TS2339: Property 'c' does not exist on type '{ kind1: "a"; a: 1; } | { kind1: "b"; b: 2; }'.
!!! error TS2339:   Property 'c' does not exist on type '{ kind1: "a"; a: 1; }'.
            }
        }
        if (x.kind1 === 'a') {
              ~~~~~
!!! error TS2339: Property 'kind1' does not exist on type 'unknown'.
            x.a;  // error
              ~
!!! error TS2339: Property 'a' does not exist on type 'unknown'.
        }
    }
    