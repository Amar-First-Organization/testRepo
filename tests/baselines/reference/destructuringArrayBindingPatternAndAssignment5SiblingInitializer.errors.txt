destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(3,12): error TS7022: 'a1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(4,12): error TS7022: 'a2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(9,12): error TS7022: 'a1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(10,12): error TS7022: 'a2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(15,12): error TS7022: 'a1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(16,12): error TS7022: 'a2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts(23,13): error TS7022: 'a' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.


==== destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts (7 errors) ====
    // To be inferred as `number`
    function f1() {
        const [a1, b1 = a1] = [1];
               ~~
!!! error TS7022: 'a1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
        const [a2, b2 = 1 + a2] = [1];
               ~~
!!! error TS7022: 'a2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
    }
    
    // To be inferred as `string`
    function f2() {
        const [a1, b1 = a1] = ['hi'];
               ~~
!!! error TS7022: 'a1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
        const [a2, b2 = a2 + '!'] = ['hi'];
               ~~
!!! error TS7022: 'a2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
    }
    
    // To be inferred as `string | number`
    function f3() {
        const [a1, b1 = a1] = ['hi', 1];
               ~~
!!! error TS7022: 'a1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
        const [a2, b2 = a2 + '!'] = ['hi', 1];
               ~~
!!! error TS7022: 'a2' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
    }
    
    // Based on comment:
    //   - https://github.com/microsoft/TypeScript/issues/49989#issuecomment-1852694486
    declare const yadda: [number, number] | undefined
    function f4() {
        const [ a, b = a ] = yadda ?? [];
                ~
!!! error TS7022: 'a' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
    }
    