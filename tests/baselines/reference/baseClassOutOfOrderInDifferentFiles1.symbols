=== tests/cases/compiler/file1.ts ===
// Different files - no --out
class B extends A { // no error
>B : Symbol(B, Decl(file1.ts, 0, 0))
>A : Symbol(A, Decl(file2.ts, 0, 0))
}

function foo() {
>foo : Symbol(foo, Decl(file1.ts, 2, 1))

    class C extends A { // no error
>C : Symbol(C, Decl(file1.ts, 4, 16))
>A : Symbol(A, Decl(file2.ts, 0, 0))
    }
}

class D extends M.C { // no error
>D : Symbol(D, Decl(file1.ts, 7, 1))
>M.C : Symbol(M.C, Decl(file2.ts, 3, 10))
>M : Symbol(M, Decl(file2.ts, 1, 1))
>C : Symbol(M.C, Decl(file2.ts, 3, 10))
}

function foo2() {
>foo2 : Symbol(foo2, Decl(file1.ts, 10, 1))

    class C extends M.C { // no error
>C : Symbol(C, Decl(file1.ts, 12, 17))
>M.C : Symbol(M.C, Decl(file2.ts, 3, 10))
>M : Symbol(M, Decl(file2.ts, 1, 1))
>C : Symbol(M.C, Decl(file2.ts, 3, 10))
    }
}

=== tests/cases/compiler/file2.ts ===
class A {
>A : Symbol(A, Decl(file2.ts, 0, 0))
}

module M {
>M : Symbol(M, Decl(file2.ts, 1, 1))

    export class C {
>C : Symbol(C, Decl(file2.ts, 3, 10))
    }
}
