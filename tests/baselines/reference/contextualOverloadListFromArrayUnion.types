=== tests/cases/compiler/one.ts ===
declare const y: never[] | string[];
>y : never[] | string[]

export const yThen = y.map(item => item.length);
>yThen : number[]
>y.map(item => item.length) : number[]
>y.map : (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[])
>y : never[] | string[]
>map : (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[])
>item => item.length : (item: string) => number
>item : string
>item.length : number
>item : string
>length : number

=== tests/cases/compiler/two.ts ===
declare const y: number[][] | string[];
>y : string[] | number[][]

export const yThen = y.map(item => item.length);
>yThen : number[]
>y.map(item => item.length) : number[]
>y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[])
>y : string[] | number[][]
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[])
>item => item.length : (item: string | number[]) => number
>item : string | number[]
>item.length : number
>item : string | number[]
>length : number

