=== tests/cases/compiler/narrowingTypeofUndefined.ts ===
declare const a: { error: { a: string }, result: undefined } | { error: undefined, result: { b: number } }
>a : { error: {    a: string;}; result: undefined; } | { error: undefined; result: {    b: number;}; }
>error : { a: string; }
>a : string
>result : undefined
>error : undefined
>result : { b: number; }
>b : number

if (typeof a.error === 'undefined') {
>typeof a.error === 'undefined' : boolean
>typeof a.error : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>a.error : { a: string; }
>a : { error: { a: string; }; result: undefined; } | { error: undefined; result: { b: number; }; }
>error : { a: string; }
>'undefined' : "undefined"

    a.result.b; // ok
>a.result.b : number
>a.result : { b: number; }
>a : { error: { a: string; }; result: undefined; } | { error: undefined; result: { b: number; }; }
>result : { b: number; }
>b : number
}

