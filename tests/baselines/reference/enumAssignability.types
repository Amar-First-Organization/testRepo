//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/enumAssignability.ts] ////

=== enumAssignability.ts ===
// enums assignable to number, any, Object, errors unless otherwise noted

enum E { A }
>E : E
>  : ^
>A : E.A
>  : ^^^

enum F { B }
>F : F
>  : ^
>B : F.B
>  : ^^^

var e = E.A;
>e : E
>  : ^
>E.A : E
>    : ^
>E : typeof E
>  : ^^^^^^^^
>A : E
>  : ^

var f = F.B;
>f : F
>  : ^
>F.B : F
>    : ^
>F : typeof F
>  : ^^^^^^^^
>B : F
>  : ^

e = f; 
>e = f : F
>      : ^
>e : E
>  : ^
>f : F
>  : ^

f = e; 
>f = e : E
>      : ^
>f : F
>  : ^
>e : E
>  : ^

e = 1; // ok
>e = 1 : 1
>      : ^
>e : E
>  : ^
>1 : 1
>  : ^

f = 1; // ok
>f = 1 : 1
>      : ^
>f : F
>  : ^
>1 : 1
>  : ^

var x: number = e; // ok
>x : number
>  : ^^^^^^
>e : number
>  : ^^^^^^

x = f; // ok
>x = f : F
>      : ^
>x : number
>  : ^^^^^^
>f : F
>  : ^

module Others {
>Others : typeof Others
>       : ^^^^^^^^^^^^^

    var a: any = e; // ok
>a : any
>  : ^^^
>e : any
>  : ^^^

    class C {
>C : C
>  : ^

        foo: string;
>foo : string
>    : ^^^^^^
    }
    var ac: C;
>ac : C
>   : ^

    interface I {
        foo: string;
>foo : string
>    : ^^^^^^
    }
    var ai: I;
>ai : I
>   : ^

    var b: number = e; // ok
>b : number
>  : ^^^^^^
>e : number
>  : ^^^^^^

    var c: string = e;
>c : string
>  : ^^^^^^
>e : string
>  : ^^^^^^

    var d: boolean = e;
>d : boolean
>  : ^^^^^^^
>e : boolean
>  : ^^^^^^^

    var ee: Date = e;
>ee : Date
>   : ^^^^
>e : Date
>  : ^^^^

    var f: any = e; // ok
>f : any
>  : ^^^
>e : any
>  : ^^^

    var g: void = e;
>g : void
>  : ^^^^
>e : void
>  : ^^^^

    var h: Object = e;
>h : Object
>  : ^^^^^^
>e : Object
>  : ^^^^^^

    var i: {} = e;
>i : {}
>  : ^^
>e : {}
>  : ^^

    var j: () => {} = e;
>j : () => {}
>  : ^^^^^^  
>e : () => {}
>  : ^^^^^^  

    var k: Function = e;
>k : Function
>  : ^^^^^^^^
>e : Function
>  : ^^^^^^^^

    var l: (x: number) => string = e;
>l : (x: number) => string
>  : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>e : (x: number) => string
>  : ^ ^^      ^^^^^      

    ac = e;
>ac = e : E
>       : ^
>ac : C
>   : ^
>e : E
>  : ^

    ai = e;
>ai = e : E
>       : ^
>ai : I
>   : ^
>e : E
>  : ^

    var m: number[] = e;
>m : number[]
>  : ^^^^^^^^
>e : number[]
>  : ^^^^^^^^

    var n: { foo: string } = e;
>n : { foo: string; }
>  : ^^^^^^^      ^^^
>foo : string
>    : ^^^^^^
>e : { foo: string; }
>  : ^^^^^^^      ^^^

    var o: <T>(x: T) => T = e;
>o : <T>(x: T) => T
>  : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>e : <T>(x: T) => T
>  : ^ ^^ ^^ ^^^^^ 

    var p: Number = e;
>p : Number
>  : ^^^^^^
>e : Number
>  : ^^^^^^

    var q: String = e;
>q : String
>  : ^^^^^^
>e : String
>  : ^^^^^^

    function foo<T, U extends T, V extends Date, A extends Number, B extends E>(x: T, y: U, z: V) {
>foo : <T, U extends T, V extends Date, A extends Number, B extends E>(x: T, y: U, z: V) => void
>    : ^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^    ^^ ^^^^^^^^^      ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>x : T
>  : ^
>y : U
>  : ^
>z : V
>  : ^

        x = e;
>x = e : E
>      : ^
>x : T
>  : ^
>e : E
>  : ^

        y = e;
>y = e : E
>      : ^
>y : U
>  : ^
>e : E
>  : ^

        z = e;
>z = e : E
>      : ^
>z : V
>  : ^
>e : E
>  : ^

        var a: A = e;
>a : A
>  : ^
>e : A
>  : ^

        var b: B = e;
>b : B
>  : ^
>e : B
>  : ^
    }
}
