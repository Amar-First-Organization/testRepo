//// [tests/cases/compiler/iterableTReturnTNext.ts] ////

=== iterableTReturnTNext.ts ===
declare const map: Map<string, number>;
>map : Symbol(map, Decl(iterableTReturnTNext.ts, 0, 13))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

declare const set: Set<number>;
>set : Symbol(set, Decl(iterableTReturnTNext.ts, 1, 13))
>Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.collection.d.ts, --, --))

// based on:
// - https://github.com/apollographql/apollo-client/blob/8740f198805a99e01136617c4055d611b92cc231/src/react/hooks/__tests__/useMutation.test.tsx#L2328
// - https://github.com/continuedev/continue/blob/046bca088a833f8b3620412ff64e4b6f41fbb959/extensions/vscode/src/autocomplete/lsp.ts#L60
const r1: number = map.values().next().value; // error as result is potentially `{ done: true, value: void }`
>r1 : Symbol(r1, Decl(iterableTReturnTNext.ts, 6, 5))
>map.values().next().value : Symbol(value, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>map.values().next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
>map.values : Symbol(Map.values, Decl(lib.es2015.iterable.d.ts, --, --))
>map : Symbol(map, Decl(iterableTReturnTNext.ts, 0, 13))
>values : Symbol(Map.values, Decl(lib.es2015.iterable.d.ts, --, --))
>next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
>value : Symbol(value, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

// based on: https://github.com/gcanti/fp-ts/blob/89a772e95e414acee679f42f56527606f7b61f30/src/Map.ts#L246
interface Next<A> {
>Next : Symbol(Next, Decl(iterableTReturnTNext.ts, 6, 45))
>A : Symbol(A, Decl(iterableTReturnTNext.ts, 9, 15))

    readonly done?: boolean
>done : Symbol(Next.done, Decl(iterableTReturnTNext.ts, 9, 19))

    readonly value: A
>value : Symbol(Next.value, Decl(iterableTReturnTNext.ts, 10, 27))
>A : Symbol(A, Decl(iterableTReturnTNext.ts, 9, 15))
}
const r2: Next<number> = map.values().next(); // error as result is potentially `{ done: true, value: void }`
>r2 : Symbol(r2, Decl(iterableTReturnTNext.ts, 13, 5))
>Next : Symbol(Next, Decl(iterableTReturnTNext.ts, 6, 45))
>map.values().next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
>map.values : Symbol(Map.values, Decl(lib.es2015.iterable.d.ts, --, --))
>map : Symbol(map, Decl(iterableTReturnTNext.ts, 0, 13))
>values : Symbol(Map.values, Decl(lib.es2015.iterable.d.ts, --, --))
>next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))

// based on: https://github.com/graphql/graphql-js/blob/e15c3ec4dc21d9fd1df34fe9798cadf3bf02c6ea/src/execution/__tests__/mapAsyncIterable-test.ts#L175
async function* source() { yield 1; yield 2; yield 3; }
>source : Symbol(source, Decl(iterableTReturnTNext.ts, 13, 45))

const doubles = source();
>doubles : Symbol(doubles, Decl(iterableTReturnTNext.ts, 17, 5))
>source : Symbol(source, Decl(iterableTReturnTNext.ts, 13, 45))

doubles.return();
>doubles.return : Symbol(AsyncGenerator.return, Decl(lib.es2018.asyncgenerator.d.ts, --, --))
>doubles : Symbol(doubles, Decl(iterableTReturnTNext.ts, 17, 5))
>return : Symbol(AsyncGenerator.return, Decl(lib.es2018.asyncgenerator.d.ts, --, --))

// based on: https://github.com/backstage/backstage/blob/85d9346ef11c1c20e4405102b4f5d93afb1292c1/packages/core-app-api/src/routing/RouteTracker.tsx#L62
const r3: number | undefined = set.values().next().value;
>r3 : Symbol(r3, Decl(iterableTReturnTNext.ts, 21, 5))
>set.values().next().value : Symbol(value, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>set.values().next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
>set.values : Symbol(Set.values, Decl(lib.es2015.iterable.d.ts, --, --))
>set : Symbol(set, Decl(iterableTReturnTNext.ts, 1, 13))
>values : Symbol(Set.values, Decl(lib.es2015.iterable.d.ts, --, --))
>next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
>value : Symbol(value, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

