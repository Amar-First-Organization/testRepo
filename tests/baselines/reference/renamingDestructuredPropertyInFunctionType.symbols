=== tests/cases/compiler/renamingDestructuredPropertyInFunctionType.ts ===
// GH#37454, GH#41044

const sym = Symbol();
>sym : Symbol(sym, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 5))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type O = { a?: string; b: number; c: number; };
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 22))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 33))

type F1 = (arg: number) => any; // OK
>F1 : Symbol(F1, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 47))
>arg : Symbol(arg, Decl(renamingDestructuredPropertyInFunctionType.ts, 5, 11))

type F2 = ({ a: string }: O) => any; // Error
>F2 : Symbol(F2, Decl(renamingDestructuredPropertyInFunctionType.ts, 5, 31))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 6, 12))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type F3 = ({ a: string, b, c }: O) => any; // Error
>F3 : Symbol(F3, Decl(renamingDestructuredPropertyInFunctionType.ts, 6, 36))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 7, 12))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 7, 23))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 7, 26))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type F4 = ({ a: string }: O) => any; // Error
>F4 : Symbol(F4, Decl(renamingDestructuredPropertyInFunctionType.ts, 7, 42))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 8, 12))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type F5 = ({ a: string, b, c }: O) => any; // Error
>F5 : Symbol(F5, Decl(renamingDestructuredPropertyInFunctionType.ts, 8, 36))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 9, 12))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 9, 23))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 9, 26))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type F6 = ({ a: string }) => typeof string; // OK
>F6 : Symbol(F6, Decl(renamingDestructuredPropertyInFunctionType.ts, 9, 42))
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 10, 12))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 10, 12))

type F7 = ({ a: string, b: number }) => typeof number; // Error
>F7 : Symbol(F7, Decl(renamingDestructuredPropertyInFunctionType.ts, 10, 43))
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 11, 12))
>b : Symbol(b)
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 11, 23))
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 11, 23))

type F8 = ({ a, b: number }) => typeof number; // OK
>F8 : Symbol(F8, Decl(renamingDestructuredPropertyInFunctionType.ts, 11, 54))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 12, 12))
>b : Symbol(b)
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 12, 15))
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 12, 15))

type F9 = ([a, b, c]) => void; // Error
>F9 : Symbol(F9, Decl(renamingDestructuredPropertyInFunctionType.ts, 12, 46))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 13, 12))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 13, 14))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 13, 17))

type F10 = ({ "a": string }) => void; // Error
>F10 : Symbol(F10, Decl(renamingDestructuredPropertyInFunctionType.ts, 13, 30))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 14, 13))

type F11 = ({ 2: string }) => void; // Error
>F11 : Symbol(F11, Decl(renamingDestructuredPropertyInFunctionType.ts, 14, 37))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 15, 13))

type F12 = ({ ["a"]: string }: O) => void; // Error
>F12 : Symbol(F12, Decl(renamingDestructuredPropertyInFunctionType.ts, 15, 35))
>"a" : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 16, 13))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 16, 13))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type F13 = ({ [2]: string }) => void; // Error
>F13 : Symbol(F13, Decl(renamingDestructuredPropertyInFunctionType.ts, 16, 42))
>2 : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 17, 13))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 17, 13))

// type F14 = ({ [sym]: string }) => void; // Error

type G1 = new (arg: number) => any; // OK
>G1 : Symbol(G1, Decl(renamingDestructuredPropertyInFunctionType.ts, 17, 37))
>arg : Symbol(arg, Decl(renamingDestructuredPropertyInFunctionType.ts, 20, 15))

type G2 = new ({ a: string }: O) => any; // Error
>G2 : Symbol(G2, Decl(renamingDestructuredPropertyInFunctionType.ts, 20, 35))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 21, 16))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type G3 = new ({ a: string, b, c }: O) => any; // Error
>G3 : Symbol(G3, Decl(renamingDestructuredPropertyInFunctionType.ts, 21, 40))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 22, 16))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 22, 27))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 22, 30))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type G4 = new ({ a: string }: O) => any; // Error
>G4 : Symbol(G4, Decl(renamingDestructuredPropertyInFunctionType.ts, 22, 46))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 23, 16))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type G5 = new ({ a: string, b, c }: O) => any; // Error
>G5 : Symbol(G5, Decl(renamingDestructuredPropertyInFunctionType.ts, 23, 40))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 24, 16))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 24, 27))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 24, 30))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type G6 = new ({ a: string }) => typeof string; // OK
>G6 : Symbol(G6, Decl(renamingDestructuredPropertyInFunctionType.ts, 24, 46))
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 25, 16))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 25, 16))

type G7 = new ({ a: string, b: number }) => typeof number; // Error
>G7 : Symbol(G7, Decl(renamingDestructuredPropertyInFunctionType.ts, 25, 47))
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 26, 16))
>b : Symbol(b)
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 26, 27))
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 26, 27))

type G8 = new ({ a, b: number }) => typeof number; // OK
>G8 : Symbol(G8, Decl(renamingDestructuredPropertyInFunctionType.ts, 26, 58))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 27, 16))
>b : Symbol(b)
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 27, 19))
>number : Symbol(number, Decl(renamingDestructuredPropertyInFunctionType.ts, 27, 19))

type G9 = new ([a, b, c]) => void; // Error
>G9 : Symbol(G9, Decl(renamingDestructuredPropertyInFunctionType.ts, 27, 50))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 28, 16))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 28, 18))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 28, 21))

type G10 = new ({ "a": string }) => void; // Error
>G10 : Symbol(G10, Decl(renamingDestructuredPropertyInFunctionType.ts, 28, 34))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 29, 17))

type G11 = new ({ 2: string }) => void; // Error
>G11 : Symbol(G11, Decl(renamingDestructuredPropertyInFunctionType.ts, 29, 41))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 30, 17))

type G12 = new ({ ["a"]: string }: O) => void; // Error
>G12 : Symbol(G12, Decl(renamingDestructuredPropertyInFunctionType.ts, 30, 39))
>"a" : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 31, 17))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 31, 17))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

type G13 = new ({ [2]: string }) => void; // Error
>G13 : Symbol(G13, Decl(renamingDestructuredPropertyInFunctionType.ts, 31, 46))
>2 : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 32, 17))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 32, 17))

// type G14 = new ({ [sym]: string }) => void; // Error

interface I {
>I : Symbol(I, Decl(renamingDestructuredPropertyInFunctionType.ts, 32, 41))

  method1(arg: number): any; // OK
>method1 : Symbol(I.method1, Decl(renamingDestructuredPropertyInFunctionType.ts, 35, 13))
>arg : Symbol(arg, Decl(renamingDestructuredPropertyInFunctionType.ts, 36, 10))

  method2({ a: string }): any; // Error
>method2 : Symbol(I.method2, Decl(renamingDestructuredPropertyInFunctionType.ts, 36, 28))
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 37, 11))

  (arg: number): any; // OK
>arg : Symbol(arg, Decl(renamingDestructuredPropertyInFunctionType.ts, 39, 3))

  ({ a: string }): any; // Error
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 40, 4))

  new (arg: number): any; // OK
>arg : Symbol(arg, Decl(renamingDestructuredPropertyInFunctionType.ts, 42, 7))

  new ({ a: string }): any; // Error
>a : Symbol(a)
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 43, 8))
}

// Below are OK but renaming should be removed from declaration emit
function f1({ a: string }: O) { }
>f1 : Symbol(f1, Decl(renamingDestructuredPropertyInFunctionType.ts, 44, 1))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 47, 13))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

const f2 = function({ a: string }: O) { };
>f2 : Symbol(f2, Decl(renamingDestructuredPropertyInFunctionType.ts, 48, 5))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 48, 21))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

const f3 = ({ a: string, b, c }: O) => { };
>f3 : Symbol(f3, Decl(renamingDestructuredPropertyInFunctionType.ts, 49, 5))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 49, 13))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 49, 24))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 49, 27))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

const f4 = function({ a: string }: O): typeof string { return string; };
>f4 : Symbol(f4, Decl(renamingDestructuredPropertyInFunctionType.ts, 50, 5))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 50, 21))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 50, 21))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 50, 21))

const f5 = ({ a: string, b, c }: O): typeof string => '';
>f5 : Symbol(f5, Decl(renamingDestructuredPropertyInFunctionType.ts, 51, 5))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 51, 13))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 51, 24))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 51, 27))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 51, 13))

const obj1 = {
>obj1 : Symbol(obj1, Decl(renamingDestructuredPropertyInFunctionType.ts, 52, 5))

  method({ a: string }: O) { }
>method : Symbol(method, Decl(renamingDestructuredPropertyInFunctionType.ts, 52, 14))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 53, 10))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

};
const obj2 = {
>obj2 : Symbol(obj2, Decl(renamingDestructuredPropertyInFunctionType.ts, 55, 5))

  method({ a: string }: O): typeof string { return string; }
>method : Symbol(method, Decl(renamingDestructuredPropertyInFunctionType.ts, 55, 14))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 56, 10))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 56, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 56, 10))

};
function f6({ a: string = "" }: O) { }
>f6 : Symbol(f6, Decl(renamingDestructuredPropertyInFunctionType.ts, 57, 2))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 58, 13))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

const f7 = ({ a: string = "", b, c }: O) => { };
>f7 : Symbol(f7, Decl(renamingDestructuredPropertyInFunctionType.ts, 59, 5))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 59, 13))
>b : Symbol(b, Decl(renamingDestructuredPropertyInFunctionType.ts, 59, 29))
>c : Symbol(c, Decl(renamingDestructuredPropertyInFunctionType.ts, 59, 32))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

const f8 = ({ "a": string }: O) => { };
>f8 : Symbol(f8, Decl(renamingDestructuredPropertyInFunctionType.ts, 60, 5))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 60, 13))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

function f9 ({ 2: string }) { };
>f9 : Symbol(f9, Decl(renamingDestructuredPropertyInFunctionType.ts, 60, 39))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 61, 14))

function f10 ({ ["a"]: string }: O) { };
>f10 : Symbol(f10, Decl(renamingDestructuredPropertyInFunctionType.ts, 61, 32))
>"a" : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 62, 15))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 62, 15))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))

const f11 =  ({ [2]: string }) => { };
>f11 : Symbol(f11, Decl(renamingDestructuredPropertyInFunctionType.ts, 63, 5))
>2 : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 63, 15))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 63, 15))

// const f12 =  ({ [sym]: string }) => { };

// In below case `string` should be kept because it is used
function f13({ a: string = "" }: O): typeof string { return "a"; }
>f13 : Symbol(f13, Decl(renamingDestructuredPropertyInFunctionType.ts, 63, 38))
>a : Symbol(a, Decl(renamingDestructuredPropertyInFunctionType.ts, 4, 10))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 67, 14))
>O : Symbol(O, Decl(renamingDestructuredPropertyInFunctionType.ts, 2, 21))
>string : Symbol(string, Decl(renamingDestructuredPropertyInFunctionType.ts, 67, 14))

