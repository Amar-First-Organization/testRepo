var text = {"text":"/// <reference path=\"types.ts\"/>\r\n/// <reference path=\"core.ts\"/>\r\n/// <reference path=\"scanner.ts\"/>\r\n/// <reference path=\"parser.ts\"/>\r\n/// <reference path=\"binder.ts\"/>\r\n/// <reference path=\"emitter.ts\"/>\r\n\r\nmodule ts {\r\n\r\n    var nextSymbolId = 1;\r\n    var nextNodeId = 1;\r\n    var nextMergeId = 1;\r\n\r\n    export function getDeclarationOfKind(symbol: Symbol, kind: SyntaxKind): Declaration {\r\n        var declarations = symbol.declarations;\r\n        for (var i = 0; i < declarations.length; i++) {\r\n            var declaration = declarations[i];\r\n            if (declaration.kind === kind) {\r\n                return declaration;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    export interface StringSymbolWriter extends SymbolWriter {\r\n        string(): string;\r\n    }\r\n\r\n    // Pool writers to avoid needing to allocate them for every symbol we write.\r\n    var stringWriters: StringSymbolWriter[] = [];\r\n    export function getSingleLineStringWriter(): StringSymbolWriter {\r\n        if (stringWriters.length == 0) {\r\n            var str = \"\";\r\n\r\n            var writeText: (text: string) => void = text => str += text;\r\n            return {\r\n                string: () => str,\r\n                writeKeyword: writeText,\r\n                writeOperator: writeText,\r\n                writePunctuation: writeText,\r\n                writeSpace: writeText,\r\n                writeStringLiteral: writeText,\r\n                writeParameter: writeText,\r\n                writeSymbol: writeText,\r\n\r\n                // Completely ignore indentation for string writers.  And map newlines to\r\n                // a single space.\r\n                writeLine: () => str += \" \",\r\n                increaseIndent: () => { },\r\n                decreaseIndent: () => { },\r\n                clear: () => str = \"\",\r\n                trackSymbol: () => { }\r\n            };\r\n        }\r\n\r\n        return stringWriters.pop();\r\n    }\r\n\r\n    /// fullTypeCheck denotes if this instance of the typechecker will be used to get semantic diagnostics.\r\n    /// If fullTypeCheck === true,  then the typechecker should do every possible check to produce all errors\r\n    /// If fullTypeCheck === false, the typechecker can take shortcuts and skip checks that only produce errors.\r\n    /// NOTE: checks that somehow affect decisions being made during typechecking should be executed in both cases.\r\n    export function createTypeChecker(program: Program, fullTypeCheck: boolean): TypeChecker {\r\n\r\n        var Symbol = objectAllocator.getSymbolConstructor();\r\n        var Type = objectAllocator.getTypeConstructor();\r\n        var Signature = objectAllocator.getSignatureConstructor();\r\n\r\n        var typeCount = 0;\r\n\r\n        var emptyArray: any[] = [];\r\n        var emptySymbols: SymbolTable = {};\r\n\r\n        var compilerOptions = program.getCompilerOptions();\r\n\r\n        var checker: TypeChecker = {\r\n            getProgram: () => program,\r\n            getDiagnostics: getDiagnostics,\r\n            getGlobalDiagnostics: getGlobalDiagnostics,\r\n            getNodeCount: () => sum(program.getSourceFiles(), \"nodeCount\"),\r\n            getIdentifierCount: () => sum(program.getSourceFiles(), \"identifierCount\"),\r\n            getSymbolCount: () => sum(program.getSourceFiles(), \"symbolCount\"),\r\n            getTypeCount: () => typeCount,\r\n            checkProgram: checkProgram,\r\n            emitFiles: invokeEmitter,\r\n            getParentOfSymbol: getParentOfSymbol,\r\n            getTypeOfSymbol: getTypeOfSymbol,\r\n            getDeclaredTypeOfSymbol: getDeclaredTypeOfSymbol,\r\n            getPropertiesOfType: getPropertiesOfType,\r\n            getPropertyOfType: getPropertyOfType,\r\n            getSignaturesOfType: getSignaturesOfType,\r\n            getIndexTypeOfType: getIndexTypeOfType,\r\n            getReturnTypeOfSignature: getReturnTypeOfSignature,\r\n            getSymbolsInScope: getSymbolsInScope,\r\n            getSymbolInfo: getSymbolInfo,\r\n            getTypeOfNode: getTypeOfNode,\r\n            typeToString: typeToString,\r\n            getSymbolDisplayBuilder: getSymbolDisplayBuilder,\r\n            symbolToString: symbolToString,\r\n            getAugmentedPropertiesOfType: getAugmentedPropertiesOfType,\r\n            getRootSymbols: getRootSymbols,\r\n            getContextualType: getContextualType,\r\n            getFullyQualifiedName: getFullyQualifiedName,\r\n            getResolvedSignature: getResolvedSignature,\r\n            getEnumMemberValue: getEnumMemberValue,\r\n            isValidPropertyAccess: isValidPropertyAccess,\r\n            getSignatureFromDeclaration: getSignatureFromDeclaration,\r\n            isImplementationOfOverload: isImplementationOfOverload,\r\n            getAliasedSymbol: resolveImport,\r\n            isUndefinedSymbol: symbol => symbol === undefinedSymbol,\r\n            isArgumentsSymbol: symbol => symbol === argumentsSymbol,\r\n            hasEarlyErrors: hasEarlyErrors\r\n        };\r\n\r\n        var undefinedSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"undefined\");\r\n        var argumentsSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"arguments\");\r\n        var unknownSymbol = createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"unknown\");\r\n        var resolvingSymbol = createSymbol(SymbolFlags.Transient, \"__resolving__\");\r\n\r\n        var anyType = createIntrinsicType(TypeFlags.Any, \"any\");\r\n        var stringType = createIntrinsicType(TypeFlags.String, \"string\");\r\n        var numberType = createIntrinsicType(TypeFlags.Number, \"number\");\r\n        var booleanType = createIntrinsicType(TypeFlags.Boolean, \"boolean\");\r\n        var voidType = createIntrinsicType(TypeFlags.Void, \"void\");\r\n        var undefinedType = createIntrinsicType(TypeFlags.Undefined, \"undefined\");\r\n        var nullType = createIntrinsicType(TypeFlags.Null, \"null\");\r\n        var unknownType = createIntrinsicType(TypeFlags.Any, \"unknown\");\r\n        var resolvingType = createIntrinsicType(TypeFlags.Any, \"__resolving__\");\r\n\r\n        var emptyObjectType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n        var anyFunctionType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n        var noConstraintType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n        var inferenceFailureType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\r\n\r\n        var anySignature = createSignature(undefined, undefined, emptyArray, anyType, 0, false, false);\r\n        var unknownSignature = createSignature(undefined, undefined, emptyArray, unknownType, 0, false, false);\r\n\r\n        var globals: SymbolTable = {};\r\n\r\n        var globalArraySymbol: Symbol;\r\n\r\n        var globalObjectType: ObjectType;\r\n        var globalFunctionType: ObjectType;\r\n        var globalArrayType: ObjectType;\r\n        var globalStringType: ObjectType;\r\n        var globalNumberType: ObjectType;\r\n        var globalBooleanType: ObjectType;\r\n        var globalRegExpType: ObjectType;\r\n\r\n        var tupleTypes: Map<TupleType> = {};\r\n        var unionTypes: Map<UnionType> = {};\r\n        var stringLiteralTypes: Map<StringLiteralType> = {};\r\n        var emitExtends = false;\r\n\r\n        var mergedSymbols: Symbol[] = [];\r\n        var symbolLinks: SymbolLinks[] = [];\r\n        var nodeLinks: NodeLinks[] = [];\r\n        var potentialThisCollisions: Node[] = [];\r\n\r\n        var diagnostics: Diagnostic[] = [];\r\n        var diagnosticsModified: boolean = false;\r\n\r\n        function addDiagnostic(diagnostic: Diagnostic) {\r\n            diagnostics.push(diagnostic);\r\n            diagnosticsModified = true;\r\n        }\r\n\r\n        function error(location: Node, message: DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): void {\r\n            var diagnostic = location\r\n                ? createDiagnosticForNode(location, message, arg0, arg1, arg2)\r\n                : createCompilerDiagnostic(message, arg0, arg1, arg2);\r\n            addDiagnostic(diagnostic);\r\n        }\r\n\r\n        function createSymbol(flags: SymbolFlags, name: string): Symbol {\r\n            return new Symbol(flags, name);\r\n        }\r\n\r\n        function getExcludedSymbolFlags(flags: SymbolFlags): SymbolFlags {\r\n            var result: SymbolFlags = 0;\r\n            if (flags & SymbolFlags.BlockScopedVariable) result |= SymbolFlags.BlockScopedVariableExcludes;\r\n            if (flags & SymbolFlags.FunctionScopedVariable) result |= SymbolFlags.FunctionScopedVariableExcludes;\r\n            if (flags & SymbolFlags.Property) result |= SymbolFlags.PropertyExcludes;\r\n            if (flags & SymbolFlags.EnumMember) result |= SymbolFlags.EnumMemberExcludes;\r\n            if (flags & SymbolFlags.Function) result |= SymbolFlags.FunctionExcludes;\r\n            if (flags & SymbolFlags.Class) result |= SymbolFlags.ClassExcludes;\r\n            if (flags & SymbolFlags.Interface) result |= SymbolFlags.InterfaceExcludes;\r\n            if (flags & SymbolFlags.Enum) result |= SymbolFlags.EnumExcludes;\r\n            if (flags & SymbolFlags.ValueModule) result |= SymbolFlags.ValueModuleExcludes;\r\n            if (flags & SymbolFlags.Method) result |= SymbolFlags.MethodExcludes;\r\n            if (flags & SymbolFlags.GetAccessor) result |= SymbolFlags.GetAccessorExcludes;\r\n            if (flags & SymbolFlags.SetAccessor) result |= SymbolFlags.SetAccessorExcludes;\r\n            if (flags & SymbolFlags.TypeParameter) result |= SymbolFlags.TypeParameterExcludes;\r\n            if (flags & SymbolFlags.TypeAlias) result |= SymbolFlags.TypeAliasExcludes;\r\n            if (flags & SymbolFlags.Import) result |= SymbolFlags.ImportExcludes;\r\n            return result;\r\n        }\r\n\r\n        function recordMergedSymbol(target: Symbol, source: Symbol) {\r\n            if (!source.mergeId) source.mergeId = nextMergeId++;\r\n            mergedSymbols[source.mergeId] = target;\r\n        }\r\n\r\n        function cloneSymbol(symbol: Symbol): Symbol {\r\n            var result = createSymbol(symbol.flags | SymbolFlags.Merged, symbol.name);\r\n            result.declarations = symbol.declarations.slice(0);\r\n            result.parent = symbol.parent;\r\n            if (symbol.valueDeclaration) result.valueDeclaration = symbol.valueDeclaration;\r\n            if (symbol.members) result.members = cloneSymbolTable(symbol.members);\r\n            if (symbol.exports) result.exports = cloneSymbolTable(symbol.exports);\r\n            recordMergedSymbol(result, symbol);\r\n            return result;\r\n        }\r\n\r\n        function extendSymbol(target: Symbol, source: Symbol) {\r\n            if (!(target.flags & getExcludedSymbolFlags(source.flags))) {\r\n                target.flags |= source.flags;\r\n                if (!target.valueDeclaration && source.valueDeclaration) target.valueDeclaration = source.valueDeclaration;\r\n                forEach(source.declarations, node => {\r\n                    target.declarations.push(node);\r\n                });\r\n                if (source.members) {\r\n                    if (!target.members) target.members = {};\r\n                    extendSymbolTable(target.members, source.members);\r\n                }\r\n                if (source.exports) {\r\n                    if (!target.exports) target.exports = {};\r\n                    extendSymbolTable(target.exports, source.exports);\r\n                }\r\n                recordMergedSymbol(target, source);\r\n            }\r\n            else {\r\n                var message = target.flags & SymbolFlags.BlockScopedVariable || source.flags & SymbolFlags.BlockScopedVariable\r\n                     ? Diagnostics.Cannot_redeclare_block_scoped_variable_0 : Diagnostics.Duplicate_identifier_0;\r\n                forEach(source.declarations, node => {\r\n                    error(node.name ? node.name : node, message, symbolToString(source));\r\n                });\r\n                forEach(target.declarations, node => {\r\n                    error(node.name ? node.name : node, message, symbolToString(source));\r\n                });\r\n            }\r\n        }\r\n\r\n        function cloneSymbolTable(symbolTable: SymbolTable): SymbolTable {\r\n            var result: SymbolTable = {};\r\n            for (var id in symbolTable) {\r\n                if (hasProperty(symbolTable, id)) {\r\n                    result[id] = symbolTable[id];\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function extendSymbolTable(target: SymbolTable, source: SymbolTable) {\r\n            for (var id in source) {\r\n                if (hasProperty(source, id)) {\r\n                    if (!hasProperty(target, id)) {\r\n                        target[id] = source[id];\r\n                    }\r\n                    else {\r\n                        var symbol = target[id];\r\n                        if (!(symbol.flags & SymbolFlags.Merged)) {\r\n                            target[id] = symbol = cloneSymbol(symbol);\r\n                        }\r\n                        extendSymbol(symbol, source[id]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getSymbolLinks(symbol: Symbol): SymbolLinks {\r\n            if (symbol.flags & SymbolFlags.Transient) return <TransientSymbol>symbol;\r\n            if (!symbol.id) symbol.id = nextSymbolId++;\r\n            return symbolLinks[symbol.id] || (symbolLinks[symbol.id] = {});\r\n        }\r\n\r\n        function getNodeLinks(node: Node): NodeLinks {\r\n            if (!node.id) node.id = nextNodeId++;\r\n            return nodeLinks[node.id] || (nodeLinks[node.id] = {});\r\n        }\r\n\r\n        function getSourceFile(node: Node): SourceFile {\r\n            return <SourceFile>getAncestor(node, SyntaxKind.SourceFile);\r\n        }\r\n\r\n        function isGlobalSourceFile(node: Node) {\r\n            return node.kind === SyntaxKind.SourceFile && !isExternalModule(<SourceFile>node);\r\n        }\r\n\r\n        function getSymbol(symbols: SymbolTable, name: string, meaning: SymbolFlags): Symbol {\r\n            if (meaning && hasProperty(symbols, name)) {\r\n                var symbol = symbols[name];\r\n                Debug.assert((symbol.flags & SymbolFlags.Instantiated) === 0, \"Should never get an instantiated symbol here.\");\r\n                if (symbol.flags & meaning) {\r\n                    return symbol;\r\n                }\r\n\r\n                if (symbol.flags & SymbolFlags.Import) {\r\n                    var target = resolveImport(symbol);\r\n                    // unknown symbol will mean that there were reported error during import resolution\r\n                    // treat it as positive answer to avoid cascading errors\r\n                    if (target === unknownSymbol || target.flags & meaning) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // return undefined if we can't find a symbol.\r\n        }\r\n\r\n        // Resolve a given name for a given meaning at a given location. An error is reported if the name was not found and\r\n        // the nameNotFoundMessage argument is not undefined. Returns the resolved symbol, or undefined if no symbol with\r\n        // the given name can be found.\r\n        function resolveName(location: Node, name: string, meaning: SymbolFlags, nameNotFoundMessage: DiagnosticMessage, nameArg: string | Identifier): Symbol {\r\n\r\n            var result: Symbol;\r\n            var lastLocation: Node;\r\n            var propertyWithInvalidInitializer: Node;\r\n            var errorLocation = location;\r\n\r\n            loop: while (location) {\r\n                // Locals of a source file are not in scope (because they get merged into the global symbol table)\r\n                if (location.locals && !isGlobalSourceFile(location)) {\r\n                    if (result = getSymbol(location.locals, name, meaning)) {\r\n                        break loop;\r\n                    }\r\n                }\r\n                switch (location.kind) {\r\n                    case SyntaxKind.SourceFile:\r\n                        if (!isExternalModule(<SourceFile>location)) break;\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & SymbolFlags.ModuleMember)) {\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & SymbolFlags.EnumMember)) {\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.Property:\r\n                        // TypeScript 1.0 spec (April 2014): 8.4.1\r\n                        // Initializer expressions for instance member variables are evaluated in the scope \r\n                        // of the class constructor body but are not permitted to reference parameters or \r\n                        // local variables of the constructor. This effectively means that entities from outer scopes \r\n                        // by the same name as a constructor parameter or local variable are inaccessible \r\n                        // in initializer expressions for instance member variables.\r\n                        if (location.parent.kind === SyntaxKind.ClassDeclaration && !(location.flags & NodeFlags.Static)) {\r\n                            var ctor = findConstructorDeclaration(<ClassDeclaration>location.parent);\r\n                            if (ctor && ctor.locals) {\r\n                                if (getSymbol(ctor.locals, name, meaning & SymbolFlags.Value)) {\r\n                                    // Remember the property node, it will be used later to report appropriate error\r\n                                    propertyWithInvalidInitializer = location;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        if (result = getSymbol(getSymbolOfNode(location).members, name, meaning & SymbolFlags.Type)) {\r\n                            if (lastLocation && lastLocation.flags & NodeFlags.Static) {\r\n                                // TypeScript 1.0 spec (April 2014): 3.4.1\r\n                                // The scope of a type parameter extends over the entire declaration with which the type\r\n                                // parameter list is associated, with the exception of static member declarations in classes.\r\n                                error(errorLocation, Diagnostics.Static_members_cannot_reference_class_type_parameters);\r\n                                return undefined;\r\n                            }\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.Method:\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.ArrowFunction:\r\n                        if (name === \"arguments\") {\r\n                            result = argumentsSymbol;\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.FunctionExpression:\r\n                        if (name === \"arguments\") {\r\n                            result = argumentsSymbol;\r\n                            break loop;\r\n                        }\r\n                        var id = (<FunctionExpression>location).name;\r\n                        if (id && name === id.text) {\r\n                            result = location.symbol;\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.CatchBlock:\r\n                        var id = (<CatchBlock>location).variable;\r\n                        if (name === id.text) {\r\n                            result = location.symbol;\r\n                            break loop;\r\n                        }\r\n                        break;\r\n                }\r\n                lastLocation = location;\r\n                location = location.parent;\r\n            }\r\n\r\n            if (!result) {\r\n                result = getSymbol(globals, name, meaning);\r\n            }\r\n\r\n            if (!result) {\r\n                if (nameNotFoundMessage) {\r\n                    error(errorLocation, nameNotFoundMessage, typeof nameArg === \"string\" ? nameArg : identifierToString(nameArg));\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            // Perform extra checks only if error reporting was requested\r\n            if (nameNotFoundMessage) {\r\n                if (propertyWithInvalidInitializer) {\r\n                    // We have a match, but the reference occurred within a property initializer and the identifier also binds\r\n                    // to a local variable in the constructor where the code will be emitted.\r\n                    var propertyName = (<PropertyDeclaration>propertyWithInvalidInitializer).name;\r\n                    error(errorLocation, Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor,\r\n                        identifierToString(propertyName), typeof nameArg === \"string\" ? nameArg : identifierToString(nameArg));\r\n                    return undefined;\r\n                }\r\n                if (result.flags & SymbolFlags.BlockScopedVariable) {\r\n                    // Block-scoped variables cannot be used before their definition\r\n                    var declaration = forEach(result.declarations, d => d.flags & NodeFlags.BlockScoped ? d : undefined);\r\n                    Debug.assert(declaration, \"Block-scoped variable declaration is undefined\");\r\n                    var declarationSourceFile = getSourceFileOfNode(declaration);\r\n                    var referenceSourceFile = getSourceFileOfNode(errorLocation);\r\n                    if (declarationSourceFile === referenceSourceFile) {\r\n                        if (declaration.pos > errorLocation.pos) {\r\n                            error(errorLocation, Diagnostics.Block_scoped_variable_0_used_before_its_declaration, identifierToString(declaration.name));\r\n                        }\r\n                    }\r\n                    else if (compilerOptions.out) {\r\n                        var sourceFiles = program.getSourceFiles();\r\n                        if (sourceFiles.indexOf(referenceSourceFile) < sourceFiles.indexOf(declarationSourceFile)) {\r\n                            error(errorLocation, Diagnostics.Block_scoped_variable_0_used_before_its_declaration, identifierToString(declaration.name));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function resolveImport(symbol: Symbol): Symbol {\r\n            Debug.assert((symbol.flags & SymbolFlags.Import) !== 0, \"Should only get Imports here.\");\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.target) {\r\n                links.target = resolvingSymbol;\r\n                var node = <ImportDeclaration>getDeclarationOfKind(symbol, SyntaxKind.ImportDeclaration);\r\n                var target = node.externalModuleName ?\r\n                    resolveExternalModuleName(node, node.externalModuleName) :\r\n                    getSymbolOfPartOfRightHandSideOfImport(node.entityName, node);\r\n                if (links.target === resolvingSymbol) {\r\n                    links.target = target || unknownSymbol;\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));\r\n                }\r\n            }\r\n            else if (links.target === resolvingSymbol) {\r\n                links.target = unknownSymbol;\r\n            }\r\n            return links.target;\r\n        }\r\n\r\n        // This function is only for imports with entity names\r\n        function getSymbolOfPartOfRightHandSideOfImport(entityName: EntityName, importDeclaration?: ImportDeclaration): Symbol {\r\n            if (!importDeclaration) {\r\n                importDeclaration = getAncestor(entityName, SyntaxKind.ImportDeclaration);\r\n                Debug.assert(importDeclaration);\r\n            }\r\n            // There are three things we might try to look for. In the following examples,\r\n            // the search term is enclosed in |...|:\r\n            //\r\n            //     import a = |b|; // Namespace\r\n            //     import a = |b.c|; // Value, type, namespace\r\n            //     import a = |b.c|.d; // Namespace\r\n            if (entityName.kind === SyntaxKind.Identifier && isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {\r\n                entityName = <QualifiedName>entityName.parent;\r\n            }\r\n            // Check for case 1 and 3 in the above example\r\n            if (entityName.kind === SyntaxKind.Identifier || entityName.parent.kind === SyntaxKind.QualifiedName) {\r\n                return resolveEntityName(importDeclaration, entityName, SymbolFlags.Namespace);\r\n            }\r\n            else {\r\n                // Case 2 in above example\r\n                // entityName.kind could be a QualifiedName or a Missing identifier\r\n                Debug.assert(entityName.parent.kind === SyntaxKind.ImportDeclaration);\r\n                return resolveEntityName(importDeclaration, entityName, SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace);\r\n            }\r\n        }\r\n\r\n        function getFullyQualifiedName(symbol: Symbol): string {\r\n            return symbol.parent ? getFullyQualifiedName(symbol.parent) + \".\" + symbolToString(symbol) : symbolToString(symbol);\r\n        }\r\n\r\n        // Resolves a qualified name and any involved import aliases\r\n        function resolveEntityName(location: Node, name: EntityName, meaning: SymbolFlags): Symbol {\r\n            if (name.kind === SyntaxKind.Identifier) {\r\n                var symbol = resolveName(location, (<Identifier>name).text, meaning, Diagnostics.Cannot_find_name_0, <Identifier>name);\r\n                if (!symbol) {\r\n                    return;\r\n                }\r\n            }\r\n            else if (name.kind === SyntaxKind.QualifiedName) {\r\n                var namespace = resolveEntityName(location, (<QualifiedName>name).left, SymbolFlags.Namespace);\r\n                if (!namespace || namespace === unknownSymbol || (<QualifiedName>name).right.kind === SyntaxKind.Missing) return;\r\n                var symbol = getSymbol(namespace.exports, (<QualifiedName>name).right.text, meaning);\r\n                if (!symbol) {\r\n                    error(location, Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(namespace),\r\n                        identifierToString((<QualifiedName>name).right));\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                // Missing identifier\r\n                return;\r\n            }\r\n            Debug.assert((symbol.flags & SymbolFlags.Instantiated) === 0, \"Should never get an instantiated symbol here.\");\r\n            return symbol.flags & meaning ? symbol : resolveImport(symbol);\r\n        }\r\n\r\n        function isExternalModuleNameRelative(moduleName: string): boolean {\r\n            // TypeScript 1.0 spec (April 2014): 11.2.1\r\n            // An external module name is \"relative\" if the first term is \".\" or \"..\".\r\n            return moduleName.substr(0, 2) === \"./\" || moduleName.substr(0, 3) === \"../\" || moduleName.substr(0, 2) === \".\\\\\" || moduleName.substr(0, 3) === \"..\\\\\";\r\n        }\r\n\r\n        function resolveExternalModuleName(location: Node, moduleLiteral: LiteralExpression): Symbol {\r\n            var searchPath = getDirectoryPath(getSourceFile(location).filename);\r\n            var moduleName = moduleLiteral.text;\r\n            if (!moduleName) return;\r\n            var isRelative = isExternalModuleNameRelative(moduleName);\r\n            if (!isRelative) {\r\n                var symbol = getSymbol(globals, '\"' + moduleName + '\"', SymbolFlags.ValueModule);\r\n                if (symbol) {\r\n                    return getResolvedExportSymbol(symbol);\r\n                }\r\n            }\r\n            while (true) {\r\n                var filename = normalizePath(combinePaths(searchPath, moduleName));\r\n                var sourceFile = program.getSourceFile(filename + \".ts\") || program.getSourceFile(filename + \".d.ts\");\r\n                if (sourceFile || isRelative) break;\r\n                var parentPath = getDirectoryPath(searchPath);\r\n                if (parentPath === searchPath) break;\r\n                searchPath = parentPath;\r\n            }\r\n            if (sourceFile) {\r\n                if (sourceFile.symbol) {\r\n                    return getResolvedExportSymbol(sourceFile.symbol);\r\n                }\r\n                error(moduleLiteral, Diagnostics.File_0_is_not_an_external_module, sourceFile.filename);\r\n                return;\r\n            }\r\n            error(moduleLiteral, Diagnostics.Cannot_find_external_module_0, moduleName);\r\n        }\r\n\r\n        function getResolvedExportSymbol(moduleSymbol: Symbol): Symbol {\r\n            var symbol = getExportAssignmentSymbol(moduleSymbol);\r\n            if (symbol) {\r\n                if (symbol.flags & (SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace)) {\r\n                    return symbol;\r\n                }\r\n                if (symbol.flags & SymbolFlags.Import) {\r\n                    return resolveImport(symbol);\r\n                }\r\n            }\r\n            return moduleSymbol;\r\n        }\r\n\r\n        function getExportAssignmentSymbol(symbol: Symbol): Symbol {\r\n            checkTypeOfExportAssignmentSymbol(symbol);\r\n            var symbolLinks = getSymbolLinks(symbol);\r\n            return symbolLinks.exportAssignSymbol === unknownSymbol ? undefined : symbolLinks.exportAssignSymbol;\r\n        }\r\n\r\n        function checkTypeOfExportAssignmentSymbol(containerSymbol: Symbol): void {\r\n            var symbolLinks = getSymbolLinks(containerSymbol);\r\n            if (!symbolLinks.exportAssignSymbol) {\r\n                var exportInformation = collectExportInformationForSourceFileOrModule(containerSymbol);\r\n                if (exportInformation.exportAssignments.length) {\r\n                    if (exportInformation.exportAssignments.length > 1) {\r\n                        // TypeScript 1.0 spec (April 2014): 11.2.4\r\n                        // It is an error for an external module to contain more than one export assignment.\r\n                        forEach(exportInformation.exportAssignments, node => error(node, Diagnostics.A_module_cannot_have_more_than_one_export_assignment));\r\n                    }\r\n                    var node = exportInformation.exportAssignments[0];\r\n                    if (exportInformation.hasExportedMember) {\r\n                        // TypeScript 1.0 spec (April 2014): 11.2.3\r\n                        // If an external module contains an export assignment it is an error \r\n                        // for the external module to also contain export declarations.\r\n                        // The two types of exports are mutually exclusive.\r\n                        error(node, Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);\r\n                    }\r\n                    if (node.exportName.text) {\r\n                        var meaning = SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace;\r\n                        var exportSymbol = resolveName(node, node.exportName.text, meaning, Diagnostics.Cannot_find_name_0, node.exportName);\r\n                    }\r\n                }\r\n                symbolLinks.exportAssignSymbol = exportSymbol || unknownSymbol;\r\n            }\r\n        }\r\n\r\n        function collectExportInformationForSourceFileOrModule(symbol: Symbol) {\r\n            var seenExportedMember = false;\r\n            var result: ExportAssignment[] = [];\r\n            forEach(symbol.declarations, declaration => {\r\n                var block = <Block>(declaration.kind === SyntaxKind.SourceFile ? declaration : (<ModuleDeclaration>declaration).body);\r\n                forEach(block.statements, node => {\r\n                    if (node.kind === SyntaxKind.ExportAssignment) {\r\n                        result.push(<ExportAssignment>node);\r\n                    }\r\n                    else {\r\n                        seenExportedMember = seenExportedMember || (node.flags & NodeFlags.Export) !== 0;\r\n                    }\r\n                });\r\n            });\r\n            return {\r\n                hasExportedMember: seenExportedMember,\r\n                exportAssignments: result\r\n            };\r\n        }\r\n\r\n        function getMergedSymbol(symbol: Symbol): Symbol {\r\n            var merged: Symbol;\r\n            return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;\r\n        }\r\n\r\n        function getSymbolOfNode(node: Node): Symbol {\r\n            return getMergedSymbol(node.symbol);\r\n        }\r\n\r\n        function getParentOfSymbol(symbol: Symbol): Symbol {\r\n            return getMergedSymbol(symbol.parent);\r\n        }\r\n\r\n        function getExportSymbolOfValueSymbolIfExported(symbol: Symbol): Symbol {\r\n            return symbol && (symbol.flags & SymbolFlags.ExportValue) !== 0\r\n                ? getMergedSymbol(symbol.exportSymbol)\r\n                : symbol;\r\n        }\r\n\r\n        function symbolIsValue(symbol: Symbol): boolean {\r\n            // If it is an instantiated symbol, then it is a value if the symbol it is an\r\n            // instantiation of is a value.\r\n            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                return symbolIsValue(getSymbolLinks(symbol).target);\r\n            }\r\n\r\n            // If the symbol has the value flag, it is trivially a value.\r\n            if (symbol.flags & SymbolFlags.Value) {\r\n                return true;\r\n            }\r\n\r\n            // If it is an import, then it is a value if the symbol it resolves to is a value.\r\n            if (symbol.flags & SymbolFlags.Import) {\r\n                return (resolveImport(symbol).flags & SymbolFlags.Value) !== 0;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function findConstructorDeclaration(node: ClassDeclaration): ConstructorDeclaration {\r\n            var members = node.members;\r\n            for (var i = 0; i < members.length; i++) {\r\n                var member = members[i];\r\n                if (member.kind === SyntaxKind.Constructor && (<ConstructorDeclaration>member).body) {\r\n                    return <ConstructorDeclaration>member;\r\n                }\r\n            }\r\n        }\r\n\r\n        function createType(flags: TypeFlags): Type {\r\n            var result = new Type(checker, flags);\r\n            result.id = typeCount++;\r\n            return result;\r\n        }\r\n\r\n        function createIntrinsicType(kind: TypeFlags, intrinsicName: string): IntrinsicType {\r\n            var type = <IntrinsicType>createType(kind);\r\n            type.intrinsicName = intrinsicName;\r\n            return type;\r\n        }\r\n\r\n        function createObjectType(kind: TypeFlags, symbol?: Symbol): ObjectType {\r\n            var type = <ObjectType>createType(kind);\r\n            type.symbol = symbol;\r\n            return type;\r\n        }\r\n\r\n        // A reserved member name starts with two underscores followed by a non-underscore\r\n        function isReservedMemberName(name: string) {\r\n            return name.charCodeAt(0) === CharacterCodes._ && name.charCodeAt(1) === CharacterCodes._ && name.charCodeAt(2) !== CharacterCodes._;\r\n        }\r\n\r\n        function getNamedMembers(members: SymbolTable): Symbol[] {\r\n            var result: Symbol[];\r\n            for (var id in members) {\r\n                if (hasProperty(members, id)) {\r\n                    if (!isReservedMemberName(id)) {\r\n                        if (!result) result = [];\r\n                        var symbol = members[id];\r\n                        if (symbolIsValue(symbol)) {\r\n                            result.push(symbol);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result || emptyArray;\r\n        }\r\n\r\n        function setObjectTypeMembers(type: ObjectType, members: SymbolTable, callSignatures: Signature[], constructSignatures: Signature[], stringIndexType: Type, numberIndexType: Type): ResolvedType {\r\n            (<ResolvedType>type).members = members;\r\n            (<ResolvedType>type).properties = getNamedMembers(members);\r\n            (<ResolvedType>type).callSignatures = callSignatures;\r\n            (<ResolvedType>type).constructSignatures = constructSignatures;\r\n            if (stringIndexType) (<ResolvedType>type).stringIndexType = stringIndexType;\r\n            if (numberIndexType) (<ResolvedType>type).numberIndexType = numberIndexType;\r\n            return <ResolvedType>type;\r\n        }\r\n\r\n        function createAnonymousType(symbol: Symbol, members: SymbolTable, callSignatures: Signature[], constructSignatures: Signature[], stringIndexType: Type, numberIndexType: Type): ResolvedType {\r\n            return setObjectTypeMembers(createObjectType(TypeFlags.Anonymous, symbol),\r\n                members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function isOptionalProperty(propertySymbol: Symbol): boolean {\r\n            //  class C {\r\n            //      constructor(public x?) { }\r\n            //  }\r\n            //\r\n            // x is an optional parameter, but it is a required property.\r\n            return propertySymbol.valueDeclaration &&\r\n                propertySymbol.valueDeclaration.flags & NodeFlags.QuestionMark &&\r\n                propertySymbol.valueDeclaration.kind !== SyntaxKind.Parameter;\r\n        }\r\n\r\n        function forEachSymbolTableInScope<T>(enclosingDeclaration: Node, callback: (symbolTable: SymbolTable) => T): T {\r\n            var result: T;\r\n            for (var location = enclosingDeclaration; location; location = location.parent) {\r\n                // Locals of a source file are not in scope (because they get merged into the global symbol table)\r\n                if (location.locals && !isGlobalSourceFile(location)) {\r\n                    if (result = callback(location.locals)) {\r\n                        return result;\r\n                    }\r\n                }\r\n                switch (location.kind) {\r\n                    case SyntaxKind.SourceFile:\r\n                        if (!isExternalModule(<SourceFile>location)) {\r\n                            break;\r\n                        }\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        if (result = callback(getSymbolOfNode(location).exports)) {\r\n                            return result;\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        if (result = callback(getSymbolOfNode(location).members)) {\r\n                            return result;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return callback(globals);\r\n        }\r\n\r\n        function getQualifiedLeftMeaning(rightMeaning: SymbolFlags) {\r\n            // If we are looking in value space, the parent meaning is value, other wise it is namespace\r\n            return rightMeaning === SymbolFlags.Value ? SymbolFlags.Value : SymbolFlags.Namespace;\r\n        }\r\n\r\n        function getAccessibleSymbolChain(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags, useOnlyExternalAliasing: boolean): Symbol[] {\r\n            function getAccessibleSymbolChainFromSymbolTable(symbols: SymbolTable): Symbol[] {\r\n                function canQualifySymbol(symbolFromSymbolTable: Symbol, meaning: SymbolFlags) {\r\n                    // If the symbol is equivalent and doesn't need further qualification, this symbol is accessible\r\n                    if (!needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning)) {\r\n                        return true;\r\n                    }\r\n\r\n                    // If symbol needs qualification, make sure that parent is accessible, if it is then this symbol is accessible too\r\n                    var accessibleParent = getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing);\r\n                    return !!accessibleParent;\r\n                }\r\n\r\n                function isAccessible(symbolFromSymbolTable: Symbol, resolvedAliasSymbol?: Symbol) {\r\n                    if (symbol === (resolvedAliasSymbol || symbolFromSymbolTable)) {\r\n                        // if the symbolFromSymbolTable is not external module (it could be if it was determined as ambient external module and would be in globals table)\r\n                        // and if symbolfrom symbolTable or alias resolution matches the symbol, \r\n                        // check the symbol can be qualified, it is only then this symbol is accessible\r\n                        return !forEach(symbolFromSymbolTable.declarations, declaration => hasExternalModuleSymbol(declaration)) &&\r\n                            canQualifySymbol(symbolFromSymbolTable, meaning);\r\n                    }\r\n                }\r\n\r\n                // If symbol is directly available by its name in the symbol table\r\n                if (isAccessible(lookUp(symbols, symbol.name))) {\r\n                    return [symbol];\r\n                }\r\n\r\n                // Check if symbol is any of the alias\r\n                return forEachValue(symbols, symbolFromSymbolTable => {\r\n                    if (symbolFromSymbolTable.flags & SymbolFlags.Import) {\r\n                        if (!useOnlyExternalAliasing || // We can use any type of alias to get the name\r\n                            // Is this external alias, then use it to name\r\n                            ts.forEach(symbolFromSymbolTable.declarations, declaration =>\r\n                                declaration.kind === SyntaxKind.ImportDeclaration && (<ImportDeclaration>declaration).externalModuleName)) {\r\n                            var resolvedImportedSymbol = resolveImport(symbolFromSymbolTable);\r\n                            if (isAccessible(symbolFromSymbolTable, resolveImport(symbolFromSymbolTable))) {\r\n                                return [symbolFromSymbolTable];\r\n                            }\r\n\r\n                            // Look in the exported members, if we can find accessibleSymbolChain, symbol is accessible using this chain\r\n                            // but only if the symbolFromSymbolTable can be qualified\r\n                            var accessibleSymbolsFromExports = resolvedImportedSymbol.exports ? getAccessibleSymbolChainFromSymbolTable(resolvedImportedSymbol.exports) : undefined;\r\n                            if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {\r\n                                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (symbol) {\r\n                return forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);\r\n            }\r\n        }\r\n\r\n        function needsQualification(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags) {\r\n            var qualify = false;\r\n            forEachSymbolTableInScope(enclosingDeclaration, symbolTable => {\r\n                // If symbol of this name is not available in the symbol table we are ok\r\n                if (!hasProperty(symbolTable, symbol.name)) {\r\n                    // Continue to the next symbol table\r\n                    return false;\r\n                }\r\n                // If the symbol with this name is present it should refer to the symbol\r\n                var symbolFromSymbolTable = symbolTable[symbol.name];\r\n                if (symbolFromSymbolTable === symbol) {\r\n                    // No need to qualify\r\n                    return true;\r\n                }\r\n\r\n                // Qualify if the symbol from symbol table has same meaning as expected\r\n                symbolFromSymbolTable = (symbolFromSymbolTable.flags & SymbolFlags.Import) ? resolveImport(symbolFromSymbolTable) : symbolFromSymbolTable;\r\n                if (symbolFromSymbolTable.flags & meaning) {\r\n                    qualify = true;\r\n                    return true;\r\n                }\r\n\r\n                // Continue to the next symbol table\r\n                return false;\r\n            });\r\n\r\n            return qualify;\r\n        }\r\n\r\n        function isSymbolAccessible(symbol: Symbol, enclosingDeclaration: Node, meaning: SymbolFlags): SymbolAccessiblityResult {\r\n            if (symbol && enclosingDeclaration && !(symbol.flags & SymbolFlags.TypeParameter)) {\r\n                var initialSymbol = symbol;\r\n                var meaningToLook = meaning;\r\n                while (symbol) {\r\n                    // Symbol is accessible if it by itself is accessible\r\n                    var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaningToLook, /*useOnlyExternalAliasing*/ false);\r\n                    if (accessibleSymbolChain) {\r\n                        var hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0]);\r\n                        if (!hasAccessibleDeclarations) {\r\n                            return {\r\n                                accessibility: SymbolAccessibility.NotAccessible,\r\n                                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\r\n                                errorModuleName: symbol !== initialSymbol ? symbolToString(symbol, enclosingDeclaration, SymbolFlags.Namespace) : undefined,\r\n                            };\r\n                        }\r\n                        return { accessibility: SymbolAccessibility.Accessible, aliasesToMakeVisible: hasAccessibleDeclarations.aliasesToMakeVisible };\r\n                    }\r\n\r\n                    // If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.\r\n                    // It could be a qualified symbol and hence verify the path\r\n                    // e.g.:\r\n                    // module m {\r\n                    //     export class c {\r\n                    //     }\r\n                    // }\r\n                    // var x: typeof m.c\r\n                    // In the above example when we start with checking if typeof m.c symbol is accessible,\r\n                    // we are going to see if c can be accessed in scope directly. \r\n                    // But it can't, hence the accessible is going to be undefined, but that doesn't mean m.c is inaccessible\r\n                    // It is accessible if the parent m is accessible because then m.c can be accessed through qualification\r\n                    meaningToLook = getQualifiedLeftMeaning(meaning);\r\n                    symbol = getParentOfSymbol(symbol);\r\n                }\r\n\r\n                // This could be a symbol that is not exported in the external module \r\n                // or it could be a symbol from different external module that is not aliased and hence cannot be named\r\n                var symbolExternalModule = forEach(initialSymbol.declarations, declaration => getExternalModuleContainer(declaration));\r\n                if (symbolExternalModule) {\r\n                    var enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);\r\n                    if (symbolExternalModule !== enclosingExternalModule) {\r\n                        // name from different external module that is not visible\r\n                        return {\r\n                            accessibility: SymbolAccessibility.CannotBeNamed,\r\n                            errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\r\n                            errorModuleName: symbolToString(symbolExternalModule)\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // Just a local name that is not accessible\r\n                return {\r\n                    accessibility: SymbolAccessibility.NotAccessible,\r\n                    errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\r\n                };\r\n            }\r\n\r\n            return { accessibility: SymbolAccessibility.Accessible };\r\n\r\n            function getExternalModuleContainer(declaration: Declaration) {\r\n                for (; declaration; declaration = declaration.parent) {\r\n                    if (hasExternalModuleSymbol(declaration)) {\r\n                        return getSymbolOfNode(declaration);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function hasExternalModuleSymbol(declaration: Declaration) {\r\n            return (declaration.kind === SyntaxKind.ModuleDeclaration && declaration.name.kind === SyntaxKind.StringLiteral) ||\r\n                (declaration.kind === SyntaxKind.SourceFile && isExternalModule(<SourceFile>declaration));\r\n        }\r\n\r\n        function hasVisibleDeclarations(symbol: Symbol): { aliasesToMakeVisible?: ImportDeclaration[]; } {\r\n            var aliasesToMakeVisible: ImportDeclaration[];\r\n            if (forEach(symbol.declarations, declaration => !getIsDeclarationVisible(declaration))) {\r\n                return undefined;\r\n            }\r\n            return { aliasesToMakeVisible: aliasesToMakeVisible };\r\n\r\n            function getIsDeclarationVisible(declaration: Declaration) {\r\n                if (!isDeclarationVisible(declaration)) {\r\n                    // Mark the unexported alias as visible if its parent is visible \r\n                    // because these kind of aliases can be used to name types in declaration file\r\n                    if (declaration.kind === SyntaxKind.ImportDeclaration &&\r\n                        !(declaration.flags & NodeFlags.Export) &&\r\n                        isDeclarationVisible(declaration.parent)) {\r\n                        getNodeLinks(declaration).isVisible = true;\r\n                        if (aliasesToMakeVisible) {\r\n                            if (!contains(aliasesToMakeVisible, declaration)) {\r\n                                aliasesToMakeVisible.push(declaration);\r\n                            }\r\n                        }\r\n                        else {\r\n                            aliasesToMakeVisible = [declaration];\r\n                        }\r\n                        return true;\r\n                    }\r\n\r\n                    // Declaration is not visible\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function isImportDeclarationEntityNameReferenceDeclarationVisibile(entityName: EntityName): SymbolAccessiblityResult {\r\n            var firstIdentifier = getFirstIdentifier(entityName);\r\n            var symbolOfNameSpace = resolveName(entityName.parent, (<Identifier>firstIdentifier).text, SymbolFlags.Namespace, Diagnostics.Cannot_find_name_0, firstIdentifier);\r\n            // Verify if the symbol is accessible\r\n            var hasNamespaceDeclarationsVisibile = hasVisibleDeclarations(symbolOfNameSpace);\r\n            return hasNamespaceDeclarationsVisibile ?\r\n                { accessibility: SymbolAccessibility.Accessible, aliasesToMakeVisible: hasNamespaceDeclarationsVisibile.aliasesToMakeVisible } :\r\n                { accessibility: SymbolAccessibility.NotAccessible, errorSymbolName: identifierToString(<Identifier>firstIdentifier) };\r\n        }\r\n\r\n        function releaseStringWriter(writer: StringSymbolWriter) {\r\n            writer.clear()\r\n            stringWriters.push(writer);\r\n        }\r\n\r\n        function writeKeyword(writer: SymbolWriter, kind: SyntaxKind) {\r\n            writer.writeKeyword(tokenToString(kind));\r\n        }\r\n\r\n        function writePunctuation(writer: SymbolWriter, kind: SyntaxKind) {\r\n            writer.writePunctuation(tokenToString(kind));\r\n        }\r\n\r\n        function writeOperator(writer: SymbolWriter, kind: SyntaxKind) {\r\n            writer.writeOperator(tokenToString(kind));\r\n        }\r\n\r\n        function writeSpace(writer: SymbolWriter) {\r\n            writer.writeSpace(\" \");\r\n        }\r\n\r\n        function symbolToString(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags): string {\r\n            var writer = getSingleLineStringWriter();\r\n            getSymbolDisplayBuilder().buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning);\r\n\r\n            var result = writer.string();\r\n            releaseStringWriter(writer);\r\n\r\n            return result;\r\n        }\r\n\r\n        function typeToString(type: Type, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string {\r\n            var writer = getSingleLineStringWriter();\r\n            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\r\n\r\n            var result = writer.string();\r\n            releaseStringWriter(writer);\r\n\r\n            var maxLength = compilerOptions.noErrorTruncation || flags & TypeFormatFlags.NoTruncation ? undefined : 100;\r\n            if (maxLength && result.length >= maxLength) {\r\n                result = result.substr(0, maxLength - \"...\".length) + \"...\";\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getTypeAliasForTypeLiteral(type: Type): Symbol {\r\n            if (type.symbol && type.symbol.flags & SymbolFlags.TypeLiteral) {\r\n                var node = type.symbol.declarations[0].parent;\r\n                while (node.kind === SyntaxKind.ParenType) {\r\n                    node = node.parent;\r\n                }\r\n                if (node.kind === SyntaxKind.TypeAliasDeclaration) {\r\n                    return getSymbolOfNode(node);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // This is for caching the result of getSymbolDisplayBuilder. Do not access directly.\r\n        var _displayBuilder: SymbolDisplayBuilder;\r\n        function getSymbolDisplayBuilder(): SymbolDisplayBuilder {\r\n            /**\r\n             * Writes only the name of the symbol out to the writer. Uses the original source text\r\n             * for the name of the symbol if it is available to match how the user inputted the name.\r\n             */\r\n            function appendSymbolNameOnly(symbol: Symbol, writer: SymbolWriter): void {\r\n                if (symbol.declarations && symbol.declarations.length > 0) {\r\n                    var declaration = symbol.declarations[0];\r\n                    if (declaration.name) {\r\n                        writer.writeSymbol(identifierToString(declaration.name), symbol);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                writer.writeSymbol(symbol.name, symbol);\r\n            }\r\n\r\n            /**\r\n             * Enclosing declaration is optional when we don't want to get qualified name in the enclosing declaration scope\r\n             * Meaning needs to be specified if the enclosing declaration is given\r\n             */\r\n            function buildSymbolDisplay(symbol: Symbol, writer: SymbolWriter, enclosingDeclaration?: Node, meaning?: SymbolFlags, flags?: SymbolFormatFlags): void {\r\n                var parentSymbol: Symbol;\r\n                function appendParentTypeArgumentsAndSymbolName(symbol: Symbol): void {\r\n                    if (parentSymbol) {\r\n                        // Write type arguments of instantiated class/interface here\r\n                        if (flags & SymbolFormatFlags.WriteTypeParametersOrArguments) {\r\n                            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                                buildDisplayForTypeArgumentsAndDelimiters(getTypeParametersOfClassOrInterface(parentSymbol),\r\n                                    (<TransientSymbol>symbol).mapper, writer, enclosingDeclaration);\r\n                            }\r\n                            else {\r\n                                buildTypeParameterDisplayFromSymbol(parentSymbol, writer, enclosingDeclaration);\r\n                            }\r\n                        }\r\n                        writePunctuation(writer, SyntaxKind.DotToken);\r\n                    }\r\n                    parentSymbol = symbol;\r\n                    appendSymbolNameOnly(symbol, writer);\r\n                }\r\n\r\n                // Let the writer know we just wrote out a symbol.  The declaration emitter writer uses \r\n                // this to determine if an import it has previously seen (and not written out) needs \r\n                // to be written to the file once the walk of the tree is complete.\r\n                //\r\n                // NOTE(cyrusn): This approach feels somewhat unfortunate.  A simple pass over the tree\r\n                // up front (for example, during checking) could determine if we need to emit the imports\r\n                // and we could then access that data during declaration emit.\r\n                writer.trackSymbol(symbol, enclosingDeclaration, meaning);\r\n                function walkSymbol(symbol: Symbol, meaning: SymbolFlags): void {\r\n                    if (symbol) {\r\n                        var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, !!(flags & SymbolFormatFlags.UseOnlyExternalAliasing));\r\n\r\n                        if (!accessibleSymbolChain ||\r\n                            needsQualification(accessibleSymbolChain[0], enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {\r\n\r\n                            // Go up and add our parent.\r\n                            walkSymbol(\r\n                                getParentOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol),\r\n                                getQualifiedLeftMeaning(meaning));\r\n                        }\r\n\r\n                        if (accessibleSymbolChain) {\r\n                            for (var i = 0, n = accessibleSymbolChain.length; i < n; i++) {\r\n                                appendParentTypeArgumentsAndSymbolName(accessibleSymbolChain[i]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // If we didn't find accessible symbol chain for this symbol, break if this is external module\r\n                            if (!parentSymbol && ts.forEach(symbol.declarations, declaration => hasExternalModuleSymbol(declaration))) {\r\n                                return;\r\n                            }\r\n\r\n                            // if this is anonymous type break\r\n                            if (symbol.flags & SymbolFlags.TypeLiteral || symbol.flags & SymbolFlags.ObjectLiteral) {\r\n                                return;\r\n                            }\r\n\r\n                            appendParentTypeArgumentsAndSymbolName(symbol);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Get qualified name \r\n                if (enclosingDeclaration &&\r\n                    // TypeParameters do not need qualification\r\n                    !(symbol.flags & SymbolFlags.TypeParameter)) {\r\n\r\n                    walkSymbol(symbol, meaning);\r\n                    return;\r\n                }\r\n\r\n                return appendParentTypeArgumentsAndSymbolName(symbol);\r\n            }\r\n\r\n            function buildTypeDisplay(type: Type, writer: SymbolWriter, enclosingDeclaration?: Node, globalFlags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                var globalFlagsToPass = globalFlags & TypeFormatFlags.WriteOwnNameForAnyLike;\r\n                return writeType(type, globalFlags);\r\n\r\n                function writeType(type: Type, flags: TypeFormatFlags) {\r\n                    // Write undefined/null type as any\r\n                    if (type.flags & TypeFlags.Intrinsic) {\r\n                        // Special handling for unknown / resolving types, they should show up as any and not unknown or __resolving\r\n                        writer.writeKeyword(!(globalFlags & TypeFormatFlags.WriteOwnNameForAnyLike) &&\r\n                            (type.flags & TypeFlags.Any) ? \"any\" : (<IntrinsicType>type).intrinsicName);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Reference) {\r\n                        writeTypeReference(<TypeReference>type, flags);\r\n                    }\r\n                    else if (type.flags & (TypeFlags.Class | TypeFlags.Interface | TypeFlags.Enum | TypeFlags.TypeParameter)) {\r\n                        buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, SymbolFlags.Type);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Tuple) {\r\n                        writeTupleType(<TupleType>type);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Union) {\r\n                        writeUnionType(<UnionType>type, flags);\r\n                    }\r\n                    else if (type.flags & TypeFlags.Anonymous) {\r\n                        writeAnonymousType(<ObjectType>type, flags);\r\n                    }\r\n                    else if (type.flags & TypeFlags.StringLiteral) {\r\n                        writer.writeStringLiteral((<StringLiteralType>type).text);\r\n                    }\r\n                    else {\r\n                        // Should never get here\r\n                        // { ... }\r\n                        writePunctuation(writer, SyntaxKind.OpenBraceToken);\r\n                        writeSpace(writer);\r\n                        writePunctuation(writer, SyntaxKind.DotDotDotToken);\r\n                        writeSpace(writer);\r\n                        writePunctuation(writer, SyntaxKind.CloseBraceToken);\r\n                    }\r\n                }\r\n\r\n                function writeTypeList(types: Type[], union: boolean) {\r\n                    for (var i = 0; i < types.length; i++) {\r\n                        if (i > 0) {\r\n                            if (union) {\r\n                                writeSpace(writer);\r\n                            }\r\n                            writePunctuation(writer, union ? SyntaxKind.BarToken : SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                        }\r\n                        writeType(types[i], union ? TypeFormatFlags.InElementType : TypeFormatFlags.None);\r\n                    }\r\n                }\r\n\r\n                function writeTypeReference(type: TypeReference, flags: TypeFormatFlags) {\r\n                    if (type.target === globalArrayType && !(flags & TypeFormatFlags.WriteArrayAsGenericType)) {\r\n                        writeType(type.typeArguments[0], TypeFormatFlags.InElementType);\r\n                        writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                        writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                    }\r\n                    else {\r\n                        buildSymbolDisplay(type.target.symbol, writer, enclosingDeclaration, SymbolFlags.Type);\r\n                        writePunctuation(writer, SyntaxKind.LessThanToken);\r\n                        writeTypeList(type.typeArguments, /*union*/ false);\r\n                        writePunctuation(writer, SyntaxKind.GreaterThanToken);\r\n                    }\r\n                }\r\n\r\n                function writeTupleType(type: TupleType) {\r\n                    writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                    writeTypeList(type.elementTypes, /*union*/ false);\r\n                    writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                }\r\n\r\n                function writeUnionType(type: UnionType, flags: TypeFormatFlags) {\r\n                    if (flags & TypeFormatFlags.InElementType) {\r\n                        writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                    }\r\n                    writeTypeList(type.types, /*union*/ true);\r\n                    if (flags & TypeFormatFlags.InElementType) {\r\n                        writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n                    }\r\n                }\r\n\r\n                function writeAnonymousType(type: ObjectType, flags: TypeFormatFlags) {\r\n                    // Always use 'typeof T' for type of class, enum, and module objects\r\n                    if (type.symbol && type.symbol.flags & (SymbolFlags.Class | SymbolFlags.Enum | SymbolFlags.ValueModule)) {\r\n                        writeTypeofSymbol(type);\r\n                    }\r\n                    // Use 'typeof T' for types of functions and methods that circularly reference themselves\r\n                    else if (shouldWriteTypeOfFunctionSymbol()) {\r\n                        writeTypeofSymbol(type);\r\n                    }\r\n                    else if (typeStack && contains(typeStack, type)) {\r\n                        // If type is an anonymous type literal in a type alias declaration, use type alias name\r\n                        var typeAlias = getTypeAliasForTypeLiteral(type);\r\n                        if (typeAlias) {\r\n                            buildSymbolDisplay(typeAlias, writer, enclosingDeclaration, SymbolFlags.Type);\r\n                        }\r\n                        else {\r\n                            // Recursive usage, use any\r\n                            writeKeyword(writer, SyntaxKind.AnyKeyword);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (!typeStack) {\r\n                            typeStack = [];\r\n                        }\r\n                        typeStack.push(type);\r\n                        writeLiteralType(type, flags);\r\n                        typeStack.pop();\r\n                    }\r\n\r\n                    function shouldWriteTypeOfFunctionSymbol() {\r\n                        if (type.symbol) {\r\n                            var isStaticMethodSymbol = !!(type.symbol.flags & SymbolFlags.Method &&  // typeof static method\r\n                                ts.forEach(type.symbol.declarations, declaration => declaration.flags & NodeFlags.Static));\r\n                            var isNonLocalFunctionSymbol = !!(type.symbol.flags & SymbolFlags.Function) &&\r\n                                (type.symbol.parent || // is exported function symbol\r\n                                ts.forEach(type.symbol.declarations, declaration =>\r\n                                    declaration.parent.kind === SyntaxKind.SourceFile || declaration.parent.kind === SyntaxKind.ModuleBlock));\r\n\r\n                            if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {\r\n                                // typeof is allowed only for static/non local functions\r\n                                return !!(flags & TypeFormatFlags.UseTypeOfFunction) || // use typeof if format flags specify it\r\n                                    (typeStack && contains(typeStack, type)); // it is type of the symbol uses itself recursively\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function writeTypeofSymbol(type: ObjectType) {\r\n                    writeKeyword(writer, SyntaxKind.TypeOfKeyword);\r\n                    writeSpace(writer);\r\n                    buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, SymbolFlags.Value);\r\n                }\r\n\r\n                function writeLiteralType(type: ObjectType, flags: TypeFormatFlags) {\r\n                    var resolved = resolveObjectOrUnionTypeMembers(type);\r\n                    if (!resolved.properties.length && !resolved.stringIndexType && !resolved.numberIndexType) {\r\n                        if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {\r\n                            writePunctuation(writer, SyntaxKind.OpenBraceToken);\r\n                            writePunctuation(writer, SyntaxKind.CloseBraceToken);\r\n                            return;\r\n                        }\r\n\r\n                        if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                            }\r\n                            buildSignatureDisplay(resolved.callSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | TypeFormatFlags.WriteArrowStyleSignature , typeStack);\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n                            }\r\n                            return;\r\n                        }\r\n                        if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                            }\r\n                            writeKeyword(writer, SyntaxKind.NewKeyword);\r\n                            writeSpace(writer);\r\n                            buildSignatureDisplay(resolved.constructSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | TypeFormatFlags.WriteArrowStyleSignature, typeStack);\r\n                            if (flags & TypeFormatFlags.InElementType) {\r\n                                writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    writePunctuation(writer, SyntaxKind.OpenBraceToken);\r\n                    writer.writeLine();\r\n                    writer.increaseIndent();\r\n                    for (var i = 0; i < resolved.callSignatures.length; i++) {\r\n                        buildSignatureDisplay(resolved.callSignatures[i], writer, enclosingDeclaration, globalFlagsToPass, typeStack);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    for (var i = 0; i < resolved.constructSignatures.length; i++) {\r\n                        writeKeyword(writer, SyntaxKind.NewKeyword);\r\n                        writeSpace(writer);\r\n\r\n                        buildSignatureDisplay(resolved.constructSignatures[i], writer, enclosingDeclaration, globalFlagsToPass, typeStack);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    if (resolved.stringIndexType) {\r\n                        // [x: string]: \r\n                        writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                        writer.writeParameter(\"x\");\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeKeyword(writer, SyntaxKind.StringKeyword);\r\n                        writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeType(resolved.stringIndexType, TypeFormatFlags.None);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    if (resolved.numberIndexType) {\r\n                        // [x: number]: \r\n                        writePunctuation(writer, SyntaxKind.OpenBracketToken);\r\n                        writer.writeParameter(\"x\");\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeKeyword(writer, SyntaxKind.NumberKeyword);\r\n                        writePunctuation(writer, SyntaxKind.CloseBracketToken);\r\n                        writePunctuation(writer, SyntaxKind.ColonToken);\r\n                        writeSpace(writer);\r\n                        writeType(resolved.numberIndexType, TypeFormatFlags.None);\r\n                        writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                        writer.writeLine();\r\n                    }\r\n                    for (var i = 0; i < resolved.properties.length; i++) {\r\n                        var p = resolved.properties[i];\r\n                        var t = getTypeOfSymbol(p);\r\n                        if (p.flags & (SymbolFlags.Function | SymbolFlags.Method) && !getPropertiesOfObjectType(t).length) {\r\n                            var signatures = getSignaturesOfType(t, SignatureKind.Call);\r\n                            for (var j = 0; j < signatures.length; j++) {\r\n                                buildSymbolDisplay(p, writer);\r\n                                if (isOptionalProperty(p)) {\r\n                                    writePunctuation(writer, SyntaxKind.QuestionToken);\r\n                                }\r\n                                buildSignatureDisplay(signatures[j], writer, enclosingDeclaration, globalFlagsToPass, typeStack);\r\n                                writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                                writer.writeLine();\r\n                            }\r\n                        }\r\n                        else {\r\n                            buildSymbolDisplay(p, writer);\r\n                            if (isOptionalProperty(p)) {\r\n                                writePunctuation(writer, SyntaxKind.QuestionToken);\r\n                            }\r\n                            writePunctuation(writer, SyntaxKind.ColonToken);\r\n                            writeSpace(writer);\r\n                            writeType(t, TypeFormatFlags.None);\r\n                            writePunctuation(writer, SyntaxKind.SemicolonToken);\r\n                            writer.writeLine();\r\n                        }\r\n                    }\r\n                    writer.decreaseIndent();\r\n                    writePunctuation(writer, SyntaxKind.CloseBraceToken);\r\n                }\r\n            }\r\n\r\n            function buildTypeParameterDisplayFromSymbol(symbol: Symbol, writer: SymbolWriter, enclosingDeclaraiton?: Node, flags?: TypeFormatFlags) {\r\n                var targetSymbol = getTargetSymbol(symbol);\r\n                if (targetSymbol.flags & SymbolFlags.Class || targetSymbol.flags & SymbolFlags.Interface) {\r\n                    buildDisplayForTypeParametersAndDelimiters(getTypeParametersOfClassOrInterface(symbol), writer, enclosingDeclaraiton, flags);\r\n                }\r\n            }\r\n\r\n            function buildTypeParameterDisplay(tp: TypeParameter, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                appendSymbolNameOnly(tp.symbol, writer);\r\n                var constraint = getConstraintOfTypeParameter(tp);\r\n                if (constraint) {\r\n                    writeSpace(writer);\r\n                    writeKeyword(writer, SyntaxKind.ExtendsKeyword);\r\n                    writeSpace(writer);\r\n                    buildTypeDisplay(constraint, writer, enclosingDeclaration, flags, typeStack);\r\n                }\r\n            }\r\n\r\n            function buildParameterDisplay(p: Symbol, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                if (getDeclarationFlagsFromSymbol(p) & NodeFlags.Rest) {\r\n                    writePunctuation(writer, SyntaxKind.DotDotDotToken);\r\n                }\r\n                appendSymbolNameOnly(p, writer);\r\n                if (p.valueDeclaration.flags & NodeFlags.QuestionMark || (<VariableDeclaration>p.valueDeclaration).initializer) {\r\n                    writePunctuation(writer, SyntaxKind.QuestionToken);\r\n                }\r\n                writePunctuation(writer, SyntaxKind.ColonToken);\r\n                writeSpace(writer);\r\n\r\n                buildTypeDisplay(getTypeOfSymbol(p), writer, enclosingDeclaration, flags, typeStack);\r\n            }\r\n\r\n            function buildDisplayForTypeParametersAndDelimiters(typeParameters: TypeParameter[], writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                if (typeParameters && typeParameters.length) {\r\n                    writePunctuation(writer, SyntaxKind.LessThanToken);\r\n                    for (var i = 0; i < typeParameters.length; i++) {\r\n                        if (i > 0) {\r\n                            writePunctuation(writer, SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                        }\r\n                        buildTypeParameterDisplay(typeParameters[i], writer, enclosingDeclaration, flags, typeStack);\r\n                    }\r\n                    writePunctuation(writer, SyntaxKind.GreaterThanToken);\r\n                }\r\n            }\r\n\r\n            function buildDisplayForTypeArgumentsAndDelimiters(typeParameters: TypeParameter[], mapper: TypeMapper, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                if (typeParameters && typeParameters.length) {\r\n                    writePunctuation(writer, SyntaxKind.LessThanToken);\r\n                    for (var i = 0; i < typeParameters.length; i++) {\r\n                        if (i > 0) {\r\n                            writePunctuation(writer, SyntaxKind.CommaToken);\r\n                            writeSpace(writer);\r\n                        }\r\n                        buildTypeDisplay(mapper(typeParameters[i]), writer, enclosingDeclaration, TypeFormatFlags.None);\r\n                    }\r\n                    writePunctuation(writer, SyntaxKind.GreaterThanToken);\r\n                }\r\n            }\r\n\r\n            function buildDisplayForParametersAndDelimiters(parameters: Symbol[], writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                writePunctuation(writer, SyntaxKind.OpenParenToken);\r\n                for (var i = 0; i < parameters.length; i++) {\r\n                    if (i > 0) {\r\n                        writePunctuation(writer, SyntaxKind.CommaToken);\r\n                        writeSpace(writer);\r\n                    }\r\n                    buildParameterDisplay(parameters[i], writer, enclosingDeclaration, flags, typeStack);\r\n                }\r\n                writePunctuation(writer, SyntaxKind.CloseParenToken);\r\n            }\r\n\r\n            function buildReturnTypeDisplay(signature: Signature, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                if (flags & TypeFormatFlags.WriteArrowStyleSignature) {\r\n                    writeSpace(writer);\r\n                    writePunctuation(writer, SyntaxKind.EqualsGreaterThanToken);\r\n                }\r\n                else {\r\n                    writePunctuation(writer, SyntaxKind.ColonToken);\r\n                }\r\n                writeSpace(writer);\r\n                buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags, typeStack);\r\n            }\r\n            \r\n            function buildSignatureDisplay(signature: Signature, writer: SymbolWriter, enclosingDeclaration?: Node, flags?: TypeFormatFlags, typeStack?: Type[]) {\r\n                if (signature.target && (flags & TypeFormatFlags.WriteTypeArgumentsOfSignature)) {\r\n                    // Instantiated signature, write type arguments instead\r\n                    // This is achieved by passing in the mapper separately\r\n                    buildDisplayForTypeArgumentsAndDelimiters(signature.target.typeParameters, signature.mapper, writer, enclosingDeclaration);\r\n                }\r\n                else {\r\n                    buildDisplayForTypeParametersAndDelimiters(signature.typeParameters, writer, enclosingDeclaration, flags, typeStack);\r\n                }\r\n\r\n                buildDisplayForParametersAndDelimiters(signature.parameters, writer, enclosingDeclaration, flags, typeStack);\r\n                buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, typeStack);\r\n            }\r\n\r\n            return _displayBuilder || (_displayBuilder = {\r\n                symbolToString: symbolToString,\r\n                typeToString: typeToString,\r\n                buildSymbolDisplay: buildSymbolDisplay,\r\n                buildTypeDisplay: buildTypeDisplay,\r\n                buildTypeParameterDisplay: buildTypeParameterDisplay,\r\n                buildParameterDisplay: buildParameterDisplay,\r\n                buildDisplayForParametersAndDelimiters: buildDisplayForParametersAndDelimiters,\r\n                buildDisplayForTypeParametersAndDelimiters: buildDisplayForTypeParametersAndDelimiters,\r\n                buildDisplayForTypeArgumentsAndDelimiters: buildDisplayForTypeArgumentsAndDelimiters,\r\n                buildTypeParameterDisplayFromSymbol: buildTypeParameterDisplayFromSymbol,\r\n                buildSignatureDisplay: buildSignatureDisplay,\r\n                buildReturnTypeDisplay: buildReturnTypeDisplay\r\n            });\r\n        }\r\n\r\n        function isDeclarationVisible(node: Declaration): boolean {\r\n            function getContainingExternalModule(node: Node) {\r\n                for (; node; node = node.parent) {\r\n                    if (node.kind === SyntaxKind.ModuleDeclaration) {\r\n                        if ((<ModuleDeclaration>node).name.kind === SyntaxKind.StringLiteral) {\r\n                            return node;\r\n                        }\r\n                    }\r\n                    else if (node.kind === SyntaxKind.SourceFile) {\r\n                        return isExternalModule(<SourceFile>node) ? node : undefined;\r\n                    }\r\n                }\r\n                Debug.fail(\"getContainingModule cant reach here\");\r\n            }\r\n\r\n            function isUsedInExportAssignment(node: Node) {\r\n                // Get source File and see if it is external module and has export assigned symbol\r\n                var externalModule = getContainingExternalModule(node);\r\n                if (externalModule) {\r\n                    // This is export assigned symbol node\r\n                    var externalModuleSymbol = getSymbolOfNode(externalModule);\r\n                    var exportAssignmentSymbol = getExportAssignmentSymbol(externalModuleSymbol);\r\n                    var resolvedExportSymbol: Symbol;\r\n                    var symbolOfNode = getSymbolOfNode(node);\r\n                    if (isSymbolUsedInExportAssignment(symbolOfNode)) {\r\n                        return true;\r\n                    }\r\n\r\n                    // if symbolOfNode is import declaration, resolve the symbol declaration and check\r\n                    if (symbolOfNode.flags & SymbolFlags.Import) {\r\n                        return isSymbolUsedInExportAssignment(resolveImport(symbolOfNode));\r\n                    }\r\n                }\r\n\r\n                // Check if the symbol is used in export assignment\r\n                function isSymbolUsedInExportAssignment(symbol: Symbol) {\r\n                    if (exportAssignmentSymbol === symbol) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (exportAssignmentSymbol && !!(exportAssignmentSymbol.flags & SymbolFlags.Import)) {\r\n                        // if export assigned symbol is import declaration, resolve the import\r\n                        resolvedExportSymbol = resolvedExportSymbol || resolveImport(exportAssignmentSymbol);\r\n                        if (resolvedExportSymbol === symbol) {\r\n                            return true;\r\n                        }\r\n\r\n                        // Container of resolvedExportSymbol is visible\r\n                        return forEach(resolvedExportSymbol.declarations, declaration => {\r\n                            while (declaration) {\r\n                                if (declaration === node) {\r\n                                    return true;\r\n                                }\r\n                                declaration = declaration.parent;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function determineIfDeclarationIsVisible() {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.VariableDeclaration:\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                    case SyntaxKind.TypeAliasDeclaration:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.EnumDeclaration:\r\n                    case SyntaxKind.ImportDeclaration:\r\n                        // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent\r\n                        var parent = node.kind === SyntaxKind.VariableDeclaration ? node.parent.parent : node.parent;\r\n                        // If the node is not exported or it is not ambient module element (except import declaration)\r\n                        if (!(node.flags & NodeFlags.Export) &&\r\n                            !(node.kind !== SyntaxKind.ImportDeclaration && parent.kind !== SyntaxKind.SourceFile && isInAmbientContext(parent))) {\r\n                            return isGlobalSourceFile(parent) || isUsedInExportAssignment(node);\r\n                        }\r\n                        // Exported members/ambient module elements (exception import declaration) are visible if parent is visible\r\n                        return isDeclarationVisible(parent);\r\n\r\n                    case SyntaxKind.Property:\r\n                    case SyntaxKind.Method:\r\n                        if (node.flags & (NodeFlags.Private | NodeFlags.Protected)) {\r\n                            // Private/protected properties/methods are not visible\r\n                            return false;\r\n                        }\r\n                    // Public properties/methods are visible if its parents are visible, so let it fall into next case statement\r\n\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.ConstructSignature:\r\n                    case SyntaxKind.CallSignature:\r\n                    case SyntaxKind.IndexSignature:\r\n                    case SyntaxKind.Parameter:\r\n                    case SyntaxKind.ModuleBlock:\r\n                        return isDeclarationVisible(node.parent);\r\n\r\n                    // Source file is always visible\r\n                    case SyntaxKind.SourceFile:\r\n                        return true;\r\n\r\n                    default:\r\n                        Debug.fail(\"isDeclarationVisible unknown: SyntaxKind: \" + SyntaxKind[node.kind]);\r\n                }\r\n            }\r\n\r\n            if (node) {\r\n                var links = getNodeLinks(node);\r\n                if (links.isVisible === undefined) {\r\n                    links.isVisible = !!determineIfDeclarationIsVisible();\r\n                }\r\n                return links.isVisible;\r\n            }\r\n        }\r\n\r\n        function getTypeOfPrototypeProperty(prototype: Symbol): Type {\r\n            // TypeScript 1.0 spec (April 2014): 8.4\r\n            // Every class automatically contains a static property member named 'prototype', \r\n            // the type of which is an instantiation of the class type with type Any supplied as a type argument for each type parameter.\r\n            // It is an error to explicitly declare a static property member with the name 'prototype'.\r\n            var classType = <InterfaceType>getDeclaredTypeOfSymbol(prototype.parent);\r\n            return classType.typeParameters ? createTypeReference(<GenericType>classType, map(classType.typeParameters, _ => anyType)) : classType;\r\n        }\r\n\r\n        function getTypeOfVariableDeclaration(declaration: VariableDeclaration): Type {\r\n            // A variable declared in a for..in statement is always of type any\r\n            if (declaration.parent.kind === SyntaxKind.ForInStatement) {\r\n                return anyType;\r\n            }\r\n            // Use type from type annotation if one is present\r\n            if (declaration.type) {\r\n                return getTypeFromTypeNode(declaration.type);\r\n            }\r\n            if (declaration.kind === SyntaxKind.Parameter) {\r\n                var func = <FunctionDeclaration>declaration.parent;\r\n                // For a parameter of a set accessor, use the type of the get accessor if one is present\r\n                if (func.kind === SyntaxKind.SetAccessor) {\r\n                    var getter = <AccessorDeclaration>getDeclarationOfKind(declaration.parent.symbol, SyntaxKind.GetAccessor);\r\n                    if (getter) {\r\n                        return getReturnTypeOfSignature(getSignatureFromDeclaration(getter));\r\n                    }\r\n                }\r\n                // Use contextual parameter type if one is available\r\n                var type = getContextuallyTypedParameterType(declaration);\r\n                if (type) {\r\n                    return type;\r\n                }\r\n            }\r\n            // Use the type of the initializer expression if one is present\r\n            if (declaration.initializer) {\r\n                var type = checkAndMarkExpression(declaration.initializer);\r\n                // Widening of property assignments is handled by checkObjectLiteral, exclude them here\r\n                if (declaration.kind !== SyntaxKind.PropertyAssignment) {\r\n                    var unwidenedType = type;\r\n                    type = getWidenedType(type);\r\n                    if (type !== unwidenedType) {\r\n                        checkImplicitAny(type);\r\n                    }\r\n                }\r\n                return type;\r\n            }\r\n            // Rest parameters default to type any[], other parameters default to type any\r\n            var type = declaration.flags & NodeFlags.Rest ? createArrayType(anyType) : anyType;\r\n            checkImplicitAny(type);\r\n            return type;\r\n\r\n            function checkImplicitAny(type: Type) {\r\n                if (!fullTypeCheck || !compilerOptions.noImplicitAny) {\r\n                    return;\r\n                }\r\n                // We need to have ended up with 'any', 'any[]', 'any[][]', etc.\r\n                if (getInnermostTypeOfNestedArrayTypes(type) !== anyType) {\r\n                    return;\r\n                }\r\n                // Ignore privates within ambient contexts; they exist purely for documentative purposes to avoid name clashing.\r\n                // (e.g. privates within .d.ts files do not expose type information)\r\n                if (isPrivateWithinAmbient(declaration) || (declaration.kind === SyntaxKind.Parameter && isPrivateWithinAmbient(declaration.parent))) {\r\n                    return;\r\n                }\r\n                switch (declaration.kind) {\r\n                    case SyntaxKind.Property:\r\n                        var diagnostic = Diagnostics.Member_0_implicitly_has_an_1_type;\r\n                        break;\r\n                    case SyntaxKind.Parameter:\r\n                        var diagnostic = declaration.flags & NodeFlags.Rest ?\r\n                            Diagnostics.Rest_parameter_0_implicitly_has_an_any_type :\r\n                            Diagnostics.Parameter_0_implicitly_has_an_1_type;\r\n                        break;\r\n                    default:\r\n                        var diagnostic = Diagnostics.Variable_0_implicitly_has_an_1_type;\r\n                }\r\n                error(declaration, diagnostic, identifierToString(declaration.name), typeToString(type));\r\n            }\r\n        }\r\n\r\n        function getTypeOfVariableOrParameterOrProperty(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                // Handle prototype property\r\n                if (symbol.flags & SymbolFlags.Prototype) {\r\n                    return links.type = getTypeOfPrototypeProperty(symbol);\r\n                }\r\n                // Handle catch clause variables\r\n                var declaration = symbol.valueDeclaration;\r\n                if (declaration.kind === SyntaxKind.CatchBlock) {\r\n                    return links.type = anyType;\r\n                }\r\n                // Handle variable, parameter or property\r\n                links.type = resolvingType;\r\n                var type = getTypeOfVariableDeclaration(<VariableDeclaration>declaration);\r\n                if (links.type === resolvingType) {\r\n                    links.type = type;\r\n                }\r\n            }\r\n            else if (links.type === resolvingType) {\r\n                links.type = anyType;\r\n                if (compilerOptions.noImplicitAny) {\r\n                    var diagnostic = (<VariableDeclaration>symbol.valueDeclaration).type ?\r\n                        Diagnostics._0_implicitly_has_type_any_because_it_is_referenced_directly_or_indirectly_in_its_own_type_annotation :\r\n                        Diagnostics._0_implicitly_has_type_any_because_it_is_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer;\r\n                    error(symbol.valueDeclaration, diagnostic, symbolToString(symbol));\r\n                }\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getSetAccessorTypeAnnotationNode(accessor: AccessorDeclaration): TypeNode {\r\n            return accessor && accessor.parameters.length > 0 && accessor.parameters[0].type;\r\n        }\r\n\r\n        function getAnnotatedAccessorType(accessor: AccessorDeclaration): Type {\r\n            if (accessor) {\r\n                if (accessor.kind === SyntaxKind.GetAccessor) {\r\n                    return accessor.type && getTypeFromTypeNode(accessor.type);\r\n                }\r\n                else {\r\n                    var setterTypeAnnotation = getSetAccessorTypeAnnotationNode(accessor);\r\n                    return setterTypeAnnotation && getTypeFromTypeNode(setterTypeAnnotation);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getTypeOfAccessors(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            checkAndStoreTypeOfAccessors(symbol, links);\r\n            return links.type;\r\n        }\r\n\r\n        function checkAndStoreTypeOfAccessors(symbol: Symbol, links?: SymbolLinks) {\r\n            links = links || getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = resolvingType;\r\n                var getter = <AccessorDeclaration>getDeclarationOfKind(symbol, SyntaxKind.GetAccessor);\r\n                var setter = <AccessorDeclaration>getDeclarationOfKind(symbol, SyntaxKind.SetAccessor);\r\n\r\n                var type: Type;\r\n\r\n                // First try to see if the user specified a return type on the get-accessor.\r\n                var getterReturnType = getAnnotatedAccessorType(getter);\r\n                if (getterReturnType) {\r\n                    type = getterReturnType;\r\n                }\r\n                else {\r\n                    // If the user didn't specify a return type, try to use the set-accessor's parameter type.\r\n                    var setterParameterType = getAnnotatedAccessorType(setter);\r\n                    if (setterParameterType) {\r\n                        type = setterParameterType;\r\n                    }\r\n                    else {\r\n                        // If there are no specified types, try to infer it from the body of the get accessor if it exists.\r\n                        if (getter) {\r\n                            type = getReturnTypeFromBody(getter);\r\n                        }\r\n                        // Otherwise, fall back to 'any'.\r\n                        else {\r\n                            if (compilerOptions.noImplicitAny) {\r\n                                error(setter, Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation, symbolToString(symbol));\r\n                            }\r\n\r\n                            type = anyType;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (links.type === resolvingType) {\r\n                    links.type = type;\r\n                }\r\n            }\r\n            else if (links.type === resolvingType) {\r\n                links.type = anyType;\r\n                if (compilerOptions.noImplicitAny) {\r\n                    var getter = <AccessorDeclaration>getDeclarationOfKind(symbol, SyntaxKind.GetAccessor);\r\n                    error(getter, Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));\r\n                }\r\n            }\r\n        }\r\n\r\n        function getTypeOfFuncClassEnumModule(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = createObjectType(TypeFlags.Anonymous, symbol);\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfEnumMember(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = getDeclaredTypeOfEnum(getParentOfSymbol(symbol));\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfImport(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = getTypeOfSymbol(resolveImport(symbol));\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfInstantiatedSymbol(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.type) {\r\n                links.type = instantiateType(getTypeOfSymbol(links.target), links.mapper);\r\n            }\r\n            return links.type;\r\n        }\r\n\r\n        function getTypeOfSymbol(symbol: Symbol): Type {\r\n            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                return getTypeOfInstantiatedSymbol(symbol);\r\n            }\r\n            if (symbol.flags & (SymbolFlags.Variable | SymbolFlags.Property)) {\r\n                return getTypeOfVariableOrParameterOrProperty(symbol);\r\n            }\r\n            if (symbol.flags & (SymbolFlags.Function | SymbolFlags.Method | SymbolFlags.Class | SymbolFlags.Enum | SymbolFlags.ValueModule)) {\r\n                return getTypeOfFuncClassEnumModule(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.EnumMember) {\r\n                return getTypeOfEnumMember(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Accessor) {\r\n                return getTypeOfAccessors(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Import) {\r\n                return getTypeOfImport(symbol);\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        function getTargetType(type: ObjectType): Type {\r\n            return type.flags & TypeFlags.Reference ? (<TypeReference>type).target : type;\r\n        }\r\n\r\n        function hasBaseType(type: InterfaceType, checkBase: InterfaceType) {\r\n            return check(type);\r\n            function check(type: InterfaceType): boolean {\r\n                var target = <InterfaceType>getTargetType(type);\r\n                return target === checkBase || forEach(target.baseTypes, check);\r\n            }\r\n        }\r\n\r\n        // Return combined list of type parameters from all declarations of a class or interface. Elsewhere we check they're all\r\n        // the same, but even if they're not we still need the complete list to ensure instantiations supply type arguments\r\n        // for all type parameters.\r\n        function getTypeParametersOfClassOrInterface(symbol: Symbol): TypeParameter[] {\r\n            var result: TypeParameter[];\r\n            forEach(symbol.declarations, node => {\r\n                if (node.kind === SyntaxKind.InterfaceDeclaration || node.kind === SyntaxKind.ClassDeclaration) {\r\n                    var declaration = <InterfaceDeclaration>node;\r\n                    if (declaration.typeParameters && declaration.typeParameters.length) {\r\n                        forEach(declaration.typeParameters, node => {\r\n                            var tp = getDeclaredTypeOfTypeParameter(getSymbolOfNode(node));\r\n                            if (!result) {\r\n                                result = [tp];\r\n                            }\r\n                            else if (!contains(result, tp)) {\r\n                                result.push(tp);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function getDeclaredTypeOfClass(symbol: Symbol): InterfaceType {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                var type = links.declaredType = <InterfaceType>createObjectType(TypeFlags.Class, symbol);\r\n                var typeParameters = getTypeParametersOfClassOrInterface(symbol);\r\n                if (typeParameters) {\r\n                    type.flags |= TypeFlags.Reference;\r\n                    type.typeParameters = typeParameters;\r\n                    (<GenericType>type).instantiations = {};\r\n                    (<GenericType>type).instantiations[getTypeListId(type.typeParameters)] = <GenericType>type;\r\n                    (<GenericType>type).target = <GenericType>type;\r\n                    (<GenericType>type).typeArguments = type.typeParameters;\r\n                }\r\n                type.baseTypes = [];\r\n                var declaration = <ClassDeclaration>getDeclarationOfKind(symbol, SyntaxKind.ClassDeclaration);\r\n                if (declaration.baseType) {\r\n                    var baseType = getTypeFromTypeReferenceNode(declaration.baseType);\r\n                    if (baseType !== unknownType) {\r\n                        if (getTargetType(baseType).flags & TypeFlags.Class) {\r\n                            if (type !== baseType && !hasBaseType(<InterfaceType>baseType, type)) {\r\n                                type.baseTypes.push(baseType);\r\n                            }\r\n                            else {\r\n                                error(declaration, Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, TypeFormatFlags.WriteArrayAsGenericType));\r\n                            }\r\n                        }\r\n                        else {\r\n                            error(declaration.baseType, Diagnostics.A_class_may_only_extend_another_class);\r\n                        }\r\n                    }\r\n                }\r\n                type.declaredProperties = getNamedMembers(symbol.members);\r\n                type.declaredCallSignatures = emptyArray;\r\n                type.declaredConstructSignatures = emptyArray;\r\n                type.declaredStringIndexType = getIndexTypeOfSymbol(symbol, IndexKind.String);\r\n                type.declaredNumberIndexType = getIndexTypeOfSymbol(symbol, IndexKind.Number);\r\n            }\r\n            return <InterfaceType>links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfInterface(symbol: Symbol): InterfaceType {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                var type = links.declaredType = <InterfaceType>createObjectType(TypeFlags.Interface, symbol);\r\n                var typeParameters = getTypeParametersOfClassOrInterface(symbol);\r\n                if (typeParameters) {\r\n                    type.flags |= TypeFlags.Reference;\r\n                    type.typeParameters = typeParameters;\r\n                    (<GenericType>type).instantiations = {};\r\n                    (<GenericType>type).instantiations[getTypeListId(type.typeParameters)] = <GenericType>type;\r\n                    (<GenericType>type).target = <GenericType>type;\r\n                    (<GenericType>type).typeArguments = type.typeParameters;\r\n                }\r\n                type.baseTypes = [];\r\n                forEach(symbol.declarations, declaration => {\r\n                    if (declaration.kind === SyntaxKind.InterfaceDeclaration && (<InterfaceDeclaration>declaration).baseTypes) {\r\n                        forEach((<InterfaceDeclaration>declaration).baseTypes, node => {\r\n                            var baseType = getTypeFromTypeReferenceNode(node);\r\n                            if (baseType !== unknownType) {\r\n                                if (getTargetType(baseType).flags & (TypeFlags.Class | TypeFlags.Interface)) {\r\n                                    if (type !== baseType && !hasBaseType(<InterfaceType>baseType, type)) {\r\n                                        type.baseTypes.push(baseType);\r\n                                    }\r\n                                    else {\r\n                                        error(declaration, Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, TypeFormatFlags.WriteArrayAsGenericType));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    error(node, Diagnostics.An_interface_may_only_extend_a_class_or_another_interface);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                type.declaredProperties = getNamedMembers(symbol.members);\r\n                type.declaredCallSignatures = getSignaturesOfSymbol(symbol.members[\"__call\"]);\r\n                type.declaredConstructSignatures = getSignaturesOfSymbol(symbol.members[\"__new\"]);\r\n                type.declaredStringIndexType = getIndexTypeOfSymbol(symbol, IndexKind.String);\r\n                type.declaredNumberIndexType = getIndexTypeOfSymbol(symbol, IndexKind.Number);\r\n            }\r\n            return <InterfaceType>links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfTypeAlias(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                links.declaredType = resolvingType;\r\n                var declaration = <TypeAliasDeclaration>getDeclarationOfKind(symbol, SyntaxKind.TypeAliasDeclaration);\r\n                var type = getTypeFromTypeNode(declaration.type);\r\n                if (links.declaredType === resolvingType) {\r\n                    links.declaredType = type;\r\n                }\r\n            }\r\n            else if (links.declaredType === resolvingType) {\r\n                links.declaredType = unknownType;\r\n                var declaration = <TypeAliasDeclaration>getDeclarationOfKind(symbol, SyntaxKind.TypeAliasDeclaration);\r\n                error(declaration.name, Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));\r\n            }\r\n            return links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfEnum(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                var type = createType(TypeFlags.Enum);\r\n                type.symbol = symbol;\r\n                links.declaredType = type;\r\n            }\r\n            return links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfTypeParameter(symbol: Symbol): TypeParameter {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                var type = <TypeParameter>createType(TypeFlags.TypeParameter);\r\n                type.symbol = symbol;\r\n                if (!(<TypeParameterDeclaration>getDeclarationOfKind(symbol, SyntaxKind.TypeParameter)).constraint) {\r\n                    type.constraint = noConstraintType;\r\n                }\r\n                links.declaredType = type;\r\n            }\r\n            return <TypeParameter>links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfImport(symbol: Symbol): Type {\r\n            var links = getSymbolLinks(symbol);\r\n            if (!links.declaredType) {\r\n                links.declaredType = getDeclaredTypeOfSymbol(resolveImport(symbol));\r\n            }\r\n            return links.declaredType;\r\n        }\r\n\r\n        function getDeclaredTypeOfSymbol(symbol: Symbol): Type {\r\n            Debug.assert((symbol.flags & SymbolFlags.Instantiated) === 0);\r\n            if (symbol.flags & SymbolFlags.Class) {\r\n                return getDeclaredTypeOfClass(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Interface) {\r\n                return getDeclaredTypeOfInterface(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.TypeAlias) {\r\n                return getDeclaredTypeOfTypeAlias(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Enum) {\r\n                return getDeclaredTypeOfEnum(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.TypeParameter) {\r\n                return getDeclaredTypeOfTypeParameter(symbol);\r\n            }\r\n            if (symbol.flags & SymbolFlags.Import) {\r\n                return getDeclaredTypeOfImport(symbol);\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        function createSymbolTable(symbols: Symbol[]): SymbolTable {\r\n            var result: SymbolTable = {};\r\n            for (var i = 0; i < symbols.length; i++) {\r\n                var symbol = symbols[i];\r\n                result[symbol.name] = symbol;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function createInstantiatedSymbolTable(symbols: Symbol[], mapper: TypeMapper): SymbolTable {\r\n            var result: SymbolTable = {};\r\n            for (var i = 0; i < symbols.length; i++) {\r\n                var symbol = symbols[i];\r\n                result[symbol.name] = instantiateSymbol(symbol, mapper);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function addInheritedMembers(symbols: SymbolTable, baseSymbols: Symbol[]) {\r\n            for (var i = 0; i < baseSymbols.length; i++) {\r\n                var s = baseSymbols[i];\r\n                if (!hasProperty(symbols, s.name)) {\r\n                    symbols[s.name] = s;\r\n                }\r\n            }\r\n        }\r\n\r\n        function addInheritedSignatures(signatures: Signature[], baseSignatures: Signature[]) {\r\n            if (baseSignatures) {\r\n                for (var i = 0; i < baseSignatures.length; i++) {\r\n                    signatures.push(baseSignatures[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function resolveClassOrInterfaceMembers(type: InterfaceType): void {\r\n            var members = type.symbol.members;\r\n            var callSignatures = type.declaredCallSignatures;\r\n            var constructSignatures = type.declaredConstructSignatures;\r\n            var stringIndexType = type.declaredStringIndexType;\r\n            var numberIndexType = type.declaredNumberIndexType;\r\n            if (type.baseTypes.length) {\r\n                members = createSymbolTable(type.declaredProperties);\r\n                forEach(type.baseTypes, baseType => {\r\n                    addInheritedMembers(members, getPropertiesOfObjectType(baseType));\r\n                    callSignatures = concatenate(callSignatures, getSignaturesOfType(baseType, SignatureKind.Call));\r\n                    constructSignatures = concatenate(constructSignatures, getSignaturesOfType(baseType, SignatureKind.Construct));\r\n                    stringIndexType = stringIndexType || getIndexTypeOfType(baseType, IndexKind.String);\r\n                    numberIndexType = numberIndexType || getIndexTypeOfType(baseType, IndexKind.Number);\r\n                });\r\n            }\r\n            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function resolveTypeReferenceMembers(type: TypeReference): void {\r\n            var target = type.target;\r\n            var mapper = createTypeMapper(target.typeParameters, type.typeArguments);\r\n            var members = createInstantiatedSymbolTable(target.declaredProperties, mapper);\r\n            var callSignatures = instantiateList(target.declaredCallSignatures, mapper, instantiateSignature);\r\n            var constructSignatures = instantiateList(target.declaredConstructSignatures, mapper, instantiateSignature);\r\n            var stringIndexType = target.declaredStringIndexType ? instantiateType(target.declaredStringIndexType, mapper) : undefined;\r\n            var numberIndexType = target.declaredNumberIndexType ? instantiateType(target.declaredNumberIndexType, mapper) : undefined;\r\n            forEach(target.baseTypes, baseType => {\r\n                var instantiatedBaseType = instantiateType(baseType, mapper);\r\n                addInheritedMembers(members, getPropertiesOfObjectType(instantiatedBaseType));\r\n                callSignatures = concatenate(callSignatures, getSignaturesOfType(instantiatedBaseType, SignatureKind.Call));\r\n                constructSignatures = concatenate(constructSignatures, getSignaturesOfType(instantiatedBaseType, SignatureKind.Construct));\r\n                stringIndexType = stringIndexType || getIndexTypeOfType(instantiatedBaseType, IndexKind.String);\r\n                numberIndexType = numberIndexType || getIndexTypeOfType(instantiatedBaseType, IndexKind.Number);\r\n            });\r\n            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function createSignature(declaration: SignatureDeclaration, typeParameters: TypeParameter[], parameters: Symbol[],\r\n            resolvedReturnType: Type, minArgumentCount: number, hasRestParameter: boolean, hasStringLiterals: boolean): Signature {\r\n            var sig = new Signature(checker);\r\n            sig.declaration = declaration;\r\n            sig.typeParameters = typeParameters;\r\n            sig.parameters = parameters;\r\n            sig.resolvedReturnType = resolvedReturnType;\r\n            sig.minArgumentCount = minArgumentCount;\r\n            sig.hasRestParameter = hasRestParameter;\r\n            sig.hasStringLiterals = hasStringLiterals;\r\n            return sig;\r\n        }\r\n\r\n        function cloneSignature(sig: Signature): Signature {\r\n            return createSignature(sig.declaration, sig.typeParameters, sig.parameters, sig.resolvedReturnType,\r\n                sig.minArgumentCount, sig.hasRestParameter, sig.hasStringLiterals);\r\n        }\r\n\r\n        function getDefaultConstructSignatures(classType: InterfaceType): Signature[] {\r\n            if (classType.baseTypes.length) {\r\n                var baseType = classType.baseTypes[0];\r\n                var baseSignatures = getSignaturesOfType(getTypeOfSymbol(baseType.symbol), SignatureKind.Construct);\r\n                return map(baseSignatures, baseSignature => {\r\n                    var signature = baseType.flags & TypeFlags.Reference ?\r\n                        getSignatureInstantiation(baseSignature, (<TypeReference>baseType).typeArguments) : cloneSignature(baseSignature);\r\n                    signature.typeParameters = classType.typeParameters;\r\n                    signature.resolvedReturnType = classType;\r\n                    return signature;\r\n                });\r\n            }\r\n            return [createSignature(undefined, classType.typeParameters, emptyArray, classType, 0, false, false)];\r\n        }\r\n\r\n        function createTupleTypeMemberSymbols(memberTypes: Type[]): SymbolTable {\r\n            var members: SymbolTable = {};\r\n            for (var i = 0; i < memberTypes.length; i++) {\r\n                var symbol = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient, \"\" + i);\r\n                symbol.type = memberTypes[i];\r\n                members[i] = symbol;\r\n            }\r\n            return members;\r\n        }\r\n\r\n        function resolveTupleTypeMembers(type: TupleType) {\r\n            var arrayType = resolveObjectOrUnionTypeMembers(createArrayType(getUnionType(type.elementTypes)));\r\n            var members = createTupleTypeMemberSymbols(type.elementTypes);\r\n            addInheritedMembers(members, arrayType.properties);\r\n            setObjectTypeMembers(type, members, arrayType.callSignatures, arrayType.constructSignatures, arrayType.stringIndexType, arrayType.numberIndexType);\r\n        }\r\n\r\n        function signatureListsIdentical(s: Signature[], t: Signature[]): boolean {\r\n            if (s.length !== t.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < s.length; i++) {\r\n                if (!compareSignatures(s[i], t[i], /*compareReturnTypes*/ false, isTypeIdenticalTo)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // If the lists of call or construct signatures in the given types are all identical except for return types,\r\n        // and if none of the signatures are generic, return a list of signatures that has substitutes a union of the\r\n        // return types of the corresponding signatures in each resulting signature.\r\n        function getUnionSignatures(types: Type[], kind: SignatureKind): Signature[] {\r\n            var signatureLists = map(types, t => getSignaturesOfType(t, kind));\r\n            var signatures = signatureLists[0];\r\n            for (var i = 0; i < signatures.length; i++) {\r\n                if (signatures[i].typeParameters) {\r\n                    return emptyArray;\r\n                }\r\n            }\r\n            for (var i = 1; i < signatureLists.length; i++) {\r\n                if (!signatureListsIdentical(signatures, signatureLists[i])) {\r\n                    return emptyArray;\r\n                }\r\n            }\r\n            var result = map(signatures, cloneSignature);\r\n            for (var i = 0; i < result.length; i++) {\r\n                var s = result[i];\r\n                // Clear resolved return type we possibly got from cloneSignature\r\n                s.resolvedReturnType = undefined;\r\n                s.unionSignatures = map(signatureLists, signatures => signatures[i]);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getUnionIndexType(types: Type[], kind: IndexKind): Type {\r\n            var indexTypes: Type[] = [];\r\n            for (var i = 0; i < types.length; i++) {\r\n                var indexType = getIndexTypeOfType(types[i], kind);\r\n                if (!indexType) {\r\n                    return undefined;\r\n                }\r\n                indexTypes.push(indexType);\r\n            }\r\n            return getUnionType(indexTypes);\r\n        }\r\n\r\n        function resolveUnionTypeMembers(type: UnionType) {\r\n            // The members and properties collections are empty for union types. To get all properties of a union\r\n            // type use getPropertiesOfType (only the language service uses this).\r\n            var callSignatures = getUnionSignatures(type.types, SignatureKind.Call);\r\n            var constructSignatures = getUnionSignatures(type.types, SignatureKind.Construct);\r\n            var stringIndexType = getUnionIndexType(type.types, IndexKind.String);\r\n            var numberIndexType = getUnionIndexType(type.types, IndexKind.Number);\r\n            setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function resolveAnonymousTypeMembers(type: ObjectType) {\r\n            var symbol = type.symbol;\r\n            if (symbol.flags & SymbolFlags.TypeLiteral) {\r\n                var members = symbol.members;\r\n                var callSignatures = getSignaturesOfSymbol(members[\"__call\"]);\r\n                var constructSignatures = getSignaturesOfSymbol(members[\"__new\"]);\r\n                var stringIndexType = getIndexTypeOfSymbol(symbol, IndexKind.String);\r\n                var numberIndexType = getIndexTypeOfSymbol(symbol, IndexKind.Number);\r\n            }\r\n            else {\r\n                // Combinations of function, class, enum and module\r\n                var members = emptySymbols;\r\n                var callSignatures: Signature[] = emptyArray;\r\n                var constructSignatures: Signature[] = emptyArray;\r\n                if (symbol.flags & SymbolFlags.HasExports) {\r\n                    members = symbol.exports;\r\n                }\r\n                if (symbol.flags & (SymbolFlags.Function | SymbolFlags.Method)) {\r\n                    callSignatures = getSignaturesOfSymbol(symbol);\r\n                }\r\n                if (symbol.flags & SymbolFlags.Class) {\r\n                    var classType = getDeclaredTypeOfClass(symbol);\r\n                    constructSignatures = getSignaturesOfSymbol(symbol.members[\"__constructor\"]);\r\n                    if (!constructSignatures.length) {\r\n                        constructSignatures = getDefaultConstructSignatures(classType);\r\n                    }\r\n                    if (classType.baseTypes.length) {\r\n                        members = createSymbolTable(getNamedMembers(members));\r\n                        addInheritedMembers(members, getPropertiesOfObjectType(getTypeOfSymbol(classType.baseTypes[0].symbol)));\r\n                    }\r\n                }\r\n                var stringIndexType: Type = undefined;\r\n                var numberIndexType: Type = (symbol.flags & SymbolFlags.Enum) ? stringType : undefined;\r\n            }\r\n            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\r\n        }\r\n\r\n        function resolveObjectOrUnionTypeMembers(type: ObjectType): ResolvedType {\r\n            if (!(<ResolvedType>type).members) {\r\n                if (type.flags & (TypeFlags.Class | TypeFlags.Interface)) {\r\n                    resolveClassOrInterfaceMembers(<InterfaceType>type);\r\n                }\r\n                else if (type.flags & TypeFlags.Anonymous) {\r\n                    resolveAnonymousTypeMembers(<ObjectType>type);\r\n                }\r\n                else if (type.flags & TypeFlags.Tuple) {\r\n                    resolveTupleTypeMembers(<TupleType>type);\r\n                }\r\n                else if (type.flags & TypeFlags.Union) {\r\n                    resolveUnionTypeMembers(<UnionType>type);\r\n                }\r\n                else {\r\n                    resolveTypeReferenceMembers(<TypeReference>type);\r\n                }\r\n            }\r\n            return <ResolvedType>type;\r\n        }\r\n\r\n        // Return properties of an object type or an empty array for other types\r\n        function getPropertiesOfObjectType(type: Type): Symbol[] {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                return resolveObjectOrUnionTypeMembers(<ObjectType>type).properties;\r\n            }\r\n            return emptyArray;\r\n        }\r\n\r\n        // If the given type is an object type and that type has a property by the given name, return\r\n        // the symbol for that property. Otherwise return undefined.\r\n        function getPropertyOfObjectType(type: Type, name: string): Symbol {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                var resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                if (hasProperty(resolved.members, name)) {\r\n                    var symbol = resolved.members[name];\r\n                    if (symbolIsValue(symbol)) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getPropertiesOfUnionType(type: UnionType): Symbol[] {\r\n            var result: Symbol[] = [];\r\n            forEach(getPropertiesOfType(type.types[0]), prop => {\r\n                var unionProp = getPropertyOfUnionType(type, prop.name);\r\n                if (unionProp) {\r\n                    result.push(unionProp);\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function getPropertiesOfType(type: Type): Symbol[] {\r\n            if (type.flags & TypeFlags.Union) {\r\n                return getPropertiesOfUnionType(<UnionType>type);\r\n            }\r\n            return getPropertiesOfObjectType(getApparentType(type));\r\n        }\r\n\r\n        // For a type parameter, return the base constraint of the type parameter. For the string, number, and\r\n        // boolean primitive types, return the corresponding object types.Otherwise return the type itself.\r\n        // Note that the apparent type of a union type is the union type itself.\r\n        function getApparentType(type: Type): Type {\r\n            if (type.flags & TypeFlags.TypeParameter) {\r\n                do {\r\n                    type = getConstraintOfTypeParameter(<TypeParameter>type);\r\n                } while (type && type.flags & TypeFlags.TypeParameter);\r\n                if (!type) {\r\n                    type = emptyObjectType;\r\n                }\r\n            }\r\n            if (type.flags & TypeFlags.StringLike) {\r\n                type = globalStringType;\r\n            }\r\n            else if (type.flags & TypeFlags.NumberLike) {\r\n                type = globalNumberType;\r\n            }\r\n            else if (type.flags & TypeFlags.Boolean) {\r\n                type = globalBooleanType;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function createUnionProperty(unionType: UnionType, name: string): Symbol {\r\n            var types = unionType.types;\r\n            var props: Symbol[];\r\n            for (var i = 0; i < types.length; i++) {\r\n                var type = getApparentType(types[i]);\r\n                if (type !== unknownType) {\r\n                    var prop = getPropertyOfType(type, name);\r\n                    if (!prop) {\r\n                        return undefined;\r\n                    }\r\n                    if (!props) {\r\n                        props = [prop];\r\n                    }\r\n                    else {\r\n                        props.push(prop);\r\n                    }\r\n                }\r\n            }\r\n            var propTypes: Type[] = [];\r\n            var declarations: Declaration[] = [];\r\n            for (var i = 0; i < props.length; i++) {\r\n                var prop = props[i];\r\n                if (prop.declarations) {\r\n                    declarations.push.apply(declarations, prop.declarations);\r\n                }\r\n                propTypes.push(getTypeOfSymbol(prop));\r\n            }\r\n            var result = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient | SymbolFlags.UnionProperty, name);\r\n            result.unionType = unionType;\r\n            result.declarations = declarations;\r\n            result.type = getUnionType(propTypes);\r\n            return result;\r\n        }\r\n\r\n        function getPropertyOfUnionType(type: UnionType, name: string): Symbol {\r\n            var properties = type.resolvedProperties || (type.resolvedProperties = {});\r\n            if (hasProperty(properties, name)) {\r\n                return properties[name];\r\n            }\r\n            var property = createUnionProperty(type, name);\r\n            if (property) {\r\n                properties[name] = property;\r\n            }\r\n            return property;\r\n        }\r\n\r\n        // Return the symbol for the property with the given name in the given type. Creates synthetic union properties when\r\n        // necessary, maps primtive types and type parameters are to their apparent types, and augments with properties from\r\n        // Object and Function as appropriate.\r\n        function getPropertyOfType(type: Type, name: string): Symbol {\r\n            if (type.flags & TypeFlags.Union) {\r\n                return getPropertyOfUnionType(<UnionType>type, name);\r\n            }\r\n            if (!(type.flags & TypeFlags.ObjectType)) {\r\n                type = getApparentType(type);\r\n                if (!(type.flags & TypeFlags.ObjectType)) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            var resolved = resolveObjectOrUnionTypeMembers(type);\r\n            if (hasProperty(resolved.members, name)) {\r\n                var symbol = resolved.members[name];\r\n                if (symbolIsValue(symbol)) {\r\n                    return symbol;\r\n                }\r\n            }\r\n            if (resolved === anyFunctionType || resolved.callSignatures.length || resolved.constructSignatures.length) {\r\n                var symbol = getPropertyOfObjectType(globalFunctionType, name);\r\n                if (symbol) return symbol;\r\n            }\r\n            return getPropertyOfObjectType(globalObjectType, name);\r\n        }\r\n\r\n        function getSignaturesOfObjectOrUnionType(type: Type, kind: SignatureKind): Signature[] {\r\n            if (type.flags & (TypeFlags.ObjectType | TypeFlags.Union)) {\r\n                var resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                return kind === SignatureKind.Call ? resolved.callSignatures : resolved.constructSignatures;\r\n            }\r\n            return emptyArray;\r\n        }\r\n\r\n        // Return the signatures of the given kind in the given type. Creates synthetic union signatures when necessary and\r\n        // maps primtive types and type parameters are to their apparent types.\r\n        function getSignaturesOfType(type: Type, kind: SignatureKind): Signature[] {\r\n            return getSignaturesOfObjectOrUnionType(getApparentType(type), kind);\r\n        }\r\n\r\n        function getIndexTypeOfObjectOrUnionType(type: Type, kind: IndexKind): Type {\r\n            if (type.flags & (TypeFlags.ObjectType | TypeFlags.Union)) {\r\n                var resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                return kind === IndexKind.String ? resolved.stringIndexType : resolved.numberIndexType;\r\n            }\r\n        }\r\n\r\n        // Return the index type of the given kind in the given type. Creates synthetic union index types when necessary and\r\n        // maps primtive types and type parameters are to their apparent types.\r\n        function getIndexTypeOfType(type: Type, kind: IndexKind): Type {\r\n            return getIndexTypeOfObjectOrUnionType(getApparentType(type), kind);\r\n        }\r\n\r\n        // Return list of type parameters with duplicates removed (duplicate identifier errors are generated in the actual\r\n        // type checking functions).\r\n        function getTypeParametersFromDeclaration(typeParameterDeclarations: TypeParameterDeclaration[]): TypeParameter[] {\r\n            var result: TypeParameter[] = [];\r\n            forEach(typeParameterDeclarations, node => {\r\n                var tp = getDeclaredTypeOfTypeParameter(node.symbol);\r\n                if (!contains(result, tp)) {\r\n                    result.push(tp);\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        function getSignatureFromDeclaration(declaration: SignatureDeclaration): Signature {\r\n            var links = getNodeLinks(declaration);\r\n            if (!links.resolvedSignature) {\r\n                var classType = declaration.kind === SyntaxKind.Constructor ? getDeclaredTypeOfClass((<ClassDeclaration>declaration.parent).symbol) : undefined;\r\n                var typeParameters = classType ? classType.typeParameters :\r\n                    declaration.typeParameters ? getTypeParametersFromDeclaration(declaration.typeParameters) : undefined;\r\n                var parameters: Symbol[] = [];\r\n                var hasStringLiterals = false;\r\n                var minArgumentCount = -1;\r\n                for (var i = 0, n = declaration.parameters.length; i < n; i++) {\r\n                    var param = declaration.parameters[i];\r\n                    parameters.push(param.symbol);\r\n                    if (param.type && param.type.kind === SyntaxKind.StringLiteral) {\r\n                        hasStringLiterals = true;\r\n                    }\r\n                    if (minArgumentCount < 0) {\r\n                        if (param.initializer || param.flags & (NodeFlags.QuestionMark | NodeFlags.Rest)) {\r\n                            minArgumentCount = i;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (minArgumentCount < 0) {\r\n                    minArgumentCount = declaration.parameters.length;\r\n                }\r\n\r\n                var returnType: Type;\r\n                if (classType) {\r\n                    returnType = classType;\r\n                }\r\n                else if (declaration.type) {\r\n                    returnType = getTypeFromTypeNode(declaration.type);\r\n                }\r\n                else {\r\n                    // TypeScript 1.0 spec (April 2014):\r\n                    // If only one accessor includes a type annotation, the other behaves as if it had the same type annotation.\r\n                    if (declaration.kind === SyntaxKind.GetAccessor) {\r\n                        var setter = <AccessorDeclaration>getDeclarationOfKind(declaration.symbol, SyntaxKind.SetAccessor);\r\n                        returnType = getAnnotatedAccessorType(setter);\r\n                    }\r\n\r\n                    if (!returnType && !(<FunctionDeclaration>declaration).body) {\r\n                        returnType = anyType;\r\n                    }\r\n                }\r\n\r\n                links.resolvedSignature = createSignature(declaration, typeParameters, parameters, returnType,\r\n                    minArgumentCount, hasRestParameters(declaration), hasStringLiterals);\r\n            }\r\n            return links.resolvedSignature;\r\n        }\r\n\r\n        function getSignaturesOfSymbol(symbol: Symbol): Signature[] {\r\n            if (!symbol) return emptyArray;\r\n            var result: Signature[] = [];\r\n            for (var i = 0, len = symbol.declarations.length; i < len; i++) {\r\n                var node = symbol.declarations[i];\r\n                switch (node.kind) {\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.Method:\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.CallSignature:\r\n                    case SyntaxKind.ConstructSignature:\r\n                    case SyntaxKind.IndexSignature:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.ArrowFunction:\r\n                        // Don't include signature if node is the implementation of an overloaded function. A node is considered\r\n                        // an implementation node if it has a body and the previous node is of the same kind and immediately\r\n                        // precedes the implementation node (i.e. has the same parent and ends where the implementation starts).\r\n                        if (i > 0 && (<FunctionDeclaration>node).body) {\r\n                            var previous = symbol.declarations[i - 1];\r\n                            if (node.parent === previous.parent && node.kind === previous.kind && node.pos === previous.end) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        result.push(getSignatureFromDeclaration(<SignatureDeclaration>node));\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getReturnTypeOfSignature(signature: Signature): Type {\r\n            if (!signature.resolvedReturnType) {\r\n                signature.resolvedReturnType = resolvingType;\r\n                if (signature.target) {\r\n                    var type = instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper);\r\n                }\r\n                else if (signature.unionSignatures) {\r\n                    var type = getUnionType(map(signature.unionSignatures, getReturnTypeOfSignature));\r\n                }\r\n                else {\r\n                    var type = getReturnTypeFromBody(<FunctionDeclaration>signature.declaration);\r\n                }\r\n                if (signature.resolvedReturnType === resolvingType) {\r\n                    signature.resolvedReturnType = type;\r\n                }\r\n            }\r\n            else if (signature.resolvedReturnType === resolvingType) {\r\n                signature.resolvedReturnType = anyType;\r\n                if (compilerOptions.noImplicitAny) {\r\n                    var declaration = <Declaration>signature.declaration;\r\n                    if (declaration.name) {\r\n                        error(declaration.name, Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, identifierToString(declaration.name));\r\n                    }\r\n                    else {\r\n                        error(declaration, Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);\r\n                    }\r\n                }\r\n            }\r\n            return signature.resolvedReturnType;\r\n        }\r\n\r\n        function getRestTypeOfSignature(signature: Signature): Type {\r\n            if (signature.hasRestParameter) {\r\n                var type = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);\r\n                if (type.flags & TypeFlags.Reference && (<TypeReference>type).target === globalArrayType) {\r\n                    return (<TypeReference>type).typeArguments[0];\r\n                }\r\n            }\r\n            return anyType;\r\n        }\r\n\r\n        function getSignatureInstantiation(signature: Signature, typeArguments: Type[]): Signature {\r\n            return instantiateSignature(signature, createTypeMapper(signature.typeParameters, typeArguments), true);\r\n        }\r\n\r\n        function getErasedSignature(signature: Signature): Signature {\r\n            if (!signature.typeParameters) return signature;\r\n            if (!signature.erasedSignatureCache) {\r\n                if (signature.target) {\r\n                    signature.erasedSignatureCache = instantiateSignature(getErasedSignature(signature.target), signature.mapper);\r\n                }\r\n                else {\r\n                    signature.erasedSignatureCache = instantiateSignature(signature, createTypeEraser(signature.typeParameters), true);\r\n                }\r\n            }\r\n            return signature.erasedSignatureCache;\r\n        }\r\n\r\n        function getOrCreateTypeFromSignature(signature: Signature): ObjectType {\r\n            // There are two ways to declare a construct signature, one is by declaring a class constructor\r\n            // using the constructor keyword, and the other is declaring a bare construct signature in an\r\n            // object type literal or interface (using the new keyword). Each way of declaring a constructor\r\n            // will result in a different declaration kind.\r\n            if (!signature.isolatedSignatureType) {\r\n                var isConstructor = signature.declaration.kind === SyntaxKind.Constructor || signature.declaration.kind === SyntaxKind.ConstructSignature;\r\n                var type = <ResolvedType>createObjectType(TypeFlags.Anonymous | TypeFlags.FromSignature);\r\n                type.members = emptySymbols;\r\n                type.properties = emptyArray;\r\n                type.callSignatures = !isConstructor ? [signature] : emptyArray;\r\n                type.constructSignatures = isConstructor ? [signature] : emptyArray;\r\n                signature.isolatedSignatureType = type;\r\n            }\r\n\r\n            return signature.isolatedSignatureType;\r\n        }\r\n\r\n        function getIndexSymbol(symbol: Symbol): Symbol {\r\n            return symbol.members[\"__index\"];\r\n        }\r\n\r\n        function getIndexDeclarationOfSymbol(symbol: Symbol, kind: IndexKind): SignatureDeclaration {\r\n            var syntaxKind = kind === IndexKind.Number ? SyntaxKind.NumberKeyword : SyntaxKind.StringKeyword;\r\n            var indexSymbol = getIndexSymbol(symbol);\r\n            if (indexSymbol) {\r\n                var len = indexSymbol.declarations.length;\r\n                for (var i = 0; i < len; i++) {\r\n                    var node = <SignatureDeclaration>indexSymbol.declarations[i];\r\n                    if (node.parameters.length === 1) {\r\n                        var parameter = node.parameters[0];\r\n                        if (parameter && parameter.type && parameter.type.kind === syntaxKind) {\r\n                            return node;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function getIndexTypeOfSymbol(symbol: Symbol, kind: IndexKind): Type {\r\n            var declaration = getIndexDeclarationOfSymbol(symbol, kind);\r\n            return declaration\r\n                ? declaration.type ? getTypeFromTypeNode(declaration.type) : anyType\r\n                : undefined;\r\n        }\r\n\r\n        function getConstraintOfTypeParameter(type: TypeParameter): Type {\r\n            if (!type.constraint) {\r\n                if (type.target) {\r\n                    var targetConstraint = getConstraintOfTypeParameter(type.target);\r\n                    type.constraint = targetConstraint ? instantiateType(targetConstraint, type.mapper) : noConstraintType;\r\n                }\r\n                else {\r\n                    type.constraint = getTypeFromTypeNode((<TypeParameterDeclaration>getDeclarationOfKind(type.symbol, SyntaxKind.TypeParameter)).constraint);\r\n                }\r\n            }\r\n            return type.constraint === noConstraintType ? undefined : type.constraint;\r\n        }\r\n\r\n        function getTypeListId(types: Type[]) {\r\n            switch (types.length) {\r\n                case 1:\r\n                    return \"\" + types[0].id;\r\n                case 2:\r\n                    return types[0].id + \",\" + types[1].id;\r\n                default:\r\n                    var result = \"\";\r\n                    for (var i = 0; i < types.length; i++) {\r\n                        if (i > 0) result += \",\";\r\n                        result += types[i].id;\r\n                    }\r\n                    return result;\r\n            }\r\n        }\r\n\r\n        function createTypeReference(target: GenericType, typeArguments: Type[]): TypeReference {\r\n            var id = getTypeListId(typeArguments);\r\n            var type = target.instantiations[id];\r\n            if (!type) {\r\n                type = target.instantiations[id] = <TypeReference>createObjectType(TypeFlags.Reference, target.symbol);\r\n                type.target = target;\r\n                type.typeArguments = typeArguments;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function isTypeParameterReferenceIllegalInConstraint(typeReferenceNode: TypeReferenceNode, typeParameterSymbol: Symbol): boolean {\r\n            var links = getNodeLinks(typeReferenceNode);\r\n            if (links.isIllegalTypeReferenceInConstraint !== undefined) {\r\n                return links.isIllegalTypeReferenceInConstraint;\r\n            }\r\n\r\n            // bubble up to the declaration\r\n            var currentNode: Node = typeReferenceNode;\r\n            // forEach === exists\r\n            while (!forEach(typeParameterSymbol.declarations, d => d.parent === currentNode.parent)) {\r\n                currentNode = currentNode.parent;\r\n            }\r\n            // if last step was made from the type parameter this means that path has started somewhere in constraint which is illegal\r\n            links.isIllegalTypeReferenceInConstraint = currentNode.kind === SyntaxKind.TypeParameter;\r\n            return links.isIllegalTypeReferenceInConstraint;\r\n        }\r\n\r\n        function checkTypeParameterHasIllegalReferencesInConstraint(typeParameter: TypeParameterDeclaration): void {\r\n            var typeParameterSymbol: Symbol;\r\n            function check(n: Node): void {\r\n                if (n.kind === SyntaxKind.TypeReference && (<TypeReferenceNode>n).typeName.kind === SyntaxKind.Identifier) {\r\n                    var links = getNodeLinks(n);\r\n                    if (links.isIllegalTypeReferenceInConstraint === undefined) {\r\n                        var symbol = resolveName(typeParameter, (<Identifier>(<TypeReferenceNode>n).typeName).text, SymbolFlags.Type, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined);\r\n                        if (symbol && (symbol.flags & SymbolFlags.TypeParameter)) {\r\n                            // TypeScript 1.0 spec (April 2014): 3.4.1\r\n                            // Type parameters declared in a particular type parameter list \r\n                            // may not be referenced in constraints in that type parameter list\r\n                            \r\n                            // symbol.declaration.parent === typeParameter.parent\r\n                            // -> typeParameter and symbol.declaration originate from the same type parameter list \r\n                            // -> illegal for all declarations in symbol\r\n                            // forEach === exists\r\n                            links.isIllegalTypeReferenceInConstraint = forEach(symbol.declarations, d => d.parent == typeParameter.parent);\r\n                        }\r\n                    }\r\n                    if (links.isIllegalTypeReferenceInConstraint) {\r\n                        error(typeParameter, Diagnostics.Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list);\r\n                    }\r\n                }\r\n                forEachChild(n, check);\r\n            }\r\n\r\n            if (typeParameter.constraint) {\r\n                typeParameterSymbol = getSymbolOfNode(typeParameter);\r\n                check(typeParameter.constraint);\r\n            }\r\n        }\r\n\r\n        function getTypeFromTypeReferenceNode(node: TypeReferenceNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                var symbol = resolveEntityName(node, node.typeName, SymbolFlags.Type);\r\n                if (symbol) {\r\n                    var type: Type;\r\n                    if ((symbol.flags & SymbolFlags.TypeParameter) && isTypeParameterReferenceIllegalInConstraint(node, symbol)) {\r\n                        // TypeScript 1.0 spec (April 2014): 3.4.1\r\n                        // Type parameters declared in a particular type parameter list \r\n                        // may not be referenced in constraints in that type parameter list\r\n                        // Implementation: such type references are resolved to 'unknown' type that usually denotes error\r\n                        type = unknownType;\r\n                    }\r\n                    else {\r\n                        type = getDeclaredTypeOfSymbol(symbol);\r\n                        if (type.flags & (TypeFlags.Class | TypeFlags.Interface) && type.flags & TypeFlags.Reference) {\r\n                            var typeParameters = (<InterfaceType>type).typeParameters;\r\n                            if (node.typeArguments && node.typeArguments.length === typeParameters.length) {\r\n                                type = createTypeReference(<GenericType>type, map(node.typeArguments, getTypeFromTypeNode));\r\n                            }\r\n                            else {\r\n                                error(node, Diagnostics.Generic_type_0_requires_1_type_argument_s, typeToString(type, /*enclosingDeclaration*/ undefined, TypeFormatFlags.WriteArrayAsGenericType), typeParameters.length);\r\n                                type = undefined;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (node.typeArguments) {\r\n                                error(node, Diagnostics.Type_0_is_not_generic, typeToString(type));\r\n                                type = undefined;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                links.resolvedType = type || unknownType;\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeFromTypeQueryNode(node: TypeQueryNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                // TypeScript 1.0 spec (April 2014): 3.6.3\r\n                // The expression is processed as an identifier expression (section 4.3)\r\n                // or property access expression(section 4.10),\r\n                // the widened type(section 3.9) of which becomes the result. \r\n                links.resolvedType = getWidenedType(checkExpression(node.exprName));\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeOfGlobalSymbol(symbol: Symbol, arity: number): ObjectType {\r\n\r\n            function getTypeDeclaration(symbol: Symbol): Declaration {\r\n                var declarations = symbol.declarations;\r\n                for (var i = 0; i < declarations.length; i++) {\r\n                    var declaration = declarations[i];\r\n                    switch (declaration.kind) {\r\n                        case SyntaxKind.ClassDeclaration:\r\n                        case SyntaxKind.InterfaceDeclaration:\r\n                        case SyntaxKind.EnumDeclaration:\r\n                            return declaration;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!symbol) {\r\n                return emptyObjectType;\r\n            }\r\n            var type = getDeclaredTypeOfSymbol(symbol);\r\n            if (!(type.flags & TypeFlags.ObjectType)) {\r\n                error(getTypeDeclaration(symbol), Diagnostics.Global_type_0_must_be_a_class_or_interface_type, symbol.name);\r\n                return emptyObjectType;\r\n            }\r\n            if (((<InterfaceType>type).typeParameters ? (<InterfaceType>type).typeParameters.length : 0) !== arity) {\r\n                error(getTypeDeclaration(symbol), Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbol.name, arity);\r\n                return emptyObjectType;\r\n            }\r\n            return <ObjectType>type;\r\n        }\r\n\r\n        function getGlobalSymbol(name: string): Symbol {\r\n            return resolveName(undefined, name, SymbolFlags.Type, Diagnostics.Cannot_find_global_type_0, name);\r\n        }\r\n\r\n        function getGlobalType(name: string): ObjectType {\r\n            return getTypeOfGlobalSymbol(getGlobalSymbol(name), 0);\r\n        }\r\n\r\n        function createArrayType(elementType: Type): Type {\r\n            // globalArrayType will be undefined if we get here during creation of the Array type. This for example happens if\r\n            // user code augments the Array type with call or construct signatures that have an array type as the return type.\r\n            // We instead use globalArraySymbol to obtain the (not yet fully constructed) Array type.\r\n            var arrayType = globalArrayType || getDeclaredTypeOfSymbol(globalArraySymbol);\r\n            return arrayType !== emptyObjectType ? createTypeReference(<GenericType>arrayType, [elementType]) : emptyObjectType;\r\n        }\r\n\r\n        function getTypeFromArrayTypeNode(node: ArrayTypeNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = createArrayType(getTypeFromTypeNode(node.elementType));\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function createTupleType(elementTypes: Type[]) {\r\n            var id = getTypeListId(elementTypes);\r\n            var type = tupleTypes[id];\r\n            if (!type) {\r\n                type = tupleTypes[id] = <TupleType>createObjectType(TypeFlags.Tuple);\r\n                type.elementTypes = elementTypes;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function getTypeFromTupleTypeNode(node: TupleTypeNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = createTupleType(map(node.elementTypes, getTypeFromTypeNode));\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function addTypeToSortedSet(sortedSet: Type[], type: Type) {\r\n            if (type.flags & TypeFlags.Union) {\r\n                addTypesToSortedSet(sortedSet, (<UnionType>type).types);\r\n            }\r\n            else {\r\n                var i = 0;\r\n                var id = type.id;\r\n                while (i < sortedSet.length && sortedSet[i].id < id) {\r\n                    i++;\r\n                }\r\n                if (i === sortedSet.length || sortedSet[i].id !== id) {\r\n                    sortedSet.splice(i, 0, type);\r\n                }\r\n            }\r\n        }\r\n\r\n        function addTypesToSortedSet(sortedTypes: Type[], types: Type[]) {\r\n            for (var i = 0, len = types.length; i < len; i++) {\r\n                addTypeToSortedSet(sortedTypes, types[i]);\r\n            }\r\n        }\r\n\r\n        function isSubtypeOfAny(candidate: Type, types: Type[]): boolean {\r\n            for (var i = 0, len = types.length; i < len; i++) {\r\n                if (candidate !== types[i] && isTypeSubtypeOf(candidate, types[i])) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function removeSubtypes(types: Type[]) {\r\n            var i = types.length;\r\n            while (i > 0) {\r\n                i--;\r\n                if (isSubtypeOfAny(types[i], types)) {\r\n                    types.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        function containsAnyType(types: Type[]) {\r\n            for (var i = 0; i < types.length; i++) {\r\n                if (types[i].flags & TypeFlags.Any) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function removeAllButLast(types: Type[], typeToRemove: Type) {\r\n            var i = types.length;\r\n            while (i > 0 && types.length > 1) {\r\n                i--;\r\n                if (types[i] === typeToRemove) {\r\n                    types.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getUnionType(types: Type[], noSubtypeReduction?: boolean): Type {\r\n            if (types.length === 0) {\r\n                return emptyObjectType;\r\n            }\r\n            var sortedTypes: Type[] = [];\r\n            addTypesToSortedSet(sortedTypes, types);\r\n            if (noSubtypeReduction) {\r\n                if (containsAnyType(sortedTypes)) {\r\n                    return anyType;\r\n                }\r\n                removeAllButLast(sortedTypes, undefinedType);\r\n                removeAllButLast(sortedTypes, nullType);\r\n            }\r\n            else {\r\n                removeSubtypes(sortedTypes);\r\n            }\r\n            if (sortedTypes.length === 1) {\r\n                return sortedTypes[0];\r\n            }\r\n            var id = getTypeListId(sortedTypes);\r\n            var type = unionTypes[id];\r\n            if (!type) {\r\n                type = unionTypes[id] = <UnionType>createObjectType(TypeFlags.Union);\r\n                type.types = sortedTypes;\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function getTypeFromUnionTypeNode(node: UnionTypeNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = getUnionType(map(node.types, getTypeFromTypeNode), /*noSubtypeReduction*/ true);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeFromTypeLiteralNode(node: TypeLiteralNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                // Deferred resolution of members is handled by resolveObjectTypeMembers\r\n                links.resolvedType = createObjectType(TypeFlags.Anonymous, node.symbol);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getStringLiteralType(node: StringLiteralTypeNode): StringLiteralType {\r\n            if (hasProperty(stringLiteralTypes, node.text)) return stringLiteralTypes[node.text];\r\n            var type = stringLiteralTypes[node.text] = <StringLiteralType>createType(TypeFlags.StringLiteral);\r\n            type.text = getTextOfNode(node);\r\n            return type;\r\n        }\r\n\r\n        function getTypeFromStringLiteral(node: StringLiteralTypeNode): Type {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedType) {\r\n                links.resolvedType = getStringLiteralType(node);\r\n            }\r\n            return links.resolvedType;\r\n        }\r\n\r\n        function getTypeFromTypeNode(node: TypeNode): Type {\r\n            switch (node.kind) {\r\n                case SyntaxKind.AnyKeyword:\r\n                    return anyType;\r\n                case SyntaxKind.StringKeyword:\r\n                    return stringType;\r\n                case SyntaxKind.NumberKeyword:\r\n                    return numberType;\r\n                case SyntaxKind.BooleanKeyword:\r\n                    return booleanType;\r\n                case SyntaxKind.VoidKeyword:\r\n                    return voidType;\r\n                case SyntaxKind.StringLiteral:\r\n                    return getTypeFromStringLiteral(<StringLiteralTypeNode>node);\r\n                case SyntaxKind.TypeReference:\r\n                    return getTypeFromTypeReferenceNode(<TypeReferenceNode>node);\r\n                case SyntaxKind.TypeQuery:\r\n                    return getTypeFromTypeQueryNode(<TypeQueryNode>node);\r\n                case SyntaxKind.ArrayType:\r\n                    return getTypeFromArrayTypeNode(<ArrayTypeNode>node);\r\n                case SyntaxKind.TupleType:\r\n                    return getTypeFromTupleTypeNode(<TupleTypeNode>node);\r\n                case SyntaxKind.UnionType:\r\n                    return getTypeFromUnionTypeNode(<UnionTypeNode>node);\r\n                case SyntaxKind.ParenType:\r\n                    return getTypeFromTypeNode((<ParenTypeNode>node).type);\r\n                case SyntaxKind.TypeLiteral:\r\n                    return getTypeFromTypeLiteralNode(<TypeLiteralNode>node);\r\n                // This function assumes that an identifier or qualified name is a type expression\r\n                // Callers should first ensure this by calling isTypeNode\r\n                case SyntaxKind.Identifier:\r\n                case SyntaxKind.QualifiedName:\r\n                    var symbol = getSymbolInfo(node);\r\n                    return symbol && getDeclaredTypeOfSymbol(symbol);\r\n                default:\r\n                    return unknownType;\r\n            }\r\n        }\r\n\r\n        function instantiateList<T>(items: T[], mapper: TypeMapper, instantiator: (item: T, mapper: TypeMapper) => T): T[] {\r\n            if (items && items.length) {\r\n                var result: T[] = [];\r\n                for (var i = 0; i < items.length; i++) {\r\n                    result.push(instantiator(items[i], mapper));\r\n                }\r\n                return result;\r\n            }\r\n            return items;\r\n        }\r\n\r\n        function createUnaryTypeMapper(source: Type, target: Type): TypeMapper {\r\n            return t => t === source ? target : t;\r\n        }\r\n\r\n        function createBinaryTypeMapper(source1: Type, target1: Type, source2: Type, target2: Type): TypeMapper {\r\n            return t => t === source1 ? target1 : t === source2 ? target2 : t;\r\n        }\r\n\r\n        function createTypeMapper(sources: Type[], targets: Type[]): TypeMapper {\r\n            switch (sources.length) {\r\n                case 1: return createUnaryTypeMapper(sources[0], targets[0]);\r\n                case 2: return createBinaryTypeMapper(sources[0], targets[0], sources[1], targets[1]);\r\n            }\r\n            return t => {\r\n                for (var i = 0; i < sources.length; i++) {\r\n                    if (t === sources[i]) return targets[i];\r\n                }\r\n                return t;\r\n            };\r\n        }\r\n\r\n        function createUnaryTypeEraser(source: Type): TypeMapper {\r\n            return t => t === source ? anyType : t;\r\n        }\r\n\r\n        function createBinaryTypeEraser(source1: Type, source2: Type): TypeMapper {\r\n            return t => t === source1 || t === source2 ? anyType : t;\r\n        }\r\n\r\n        function createTypeEraser(sources: Type[]): TypeMapper {\r\n            switch (sources.length) {\r\n                case 1: return createUnaryTypeEraser(sources[0]);\r\n                case 2: return createBinaryTypeEraser(sources[0], sources[1]);\r\n            }\r\n            return t => {\r\n                for (var i = 0; i < sources.length; i++) {\r\n                    if (t === sources[i]) return anyType;\r\n                }\r\n                return t;\r\n            };\r\n        }\r\n\r\n        function createInferenceMapper(context: InferenceContext): TypeMapper {\r\n            return t => {\r\n                for (var i = 0; i < context.typeParameters.length; i++) {\r\n                    if (t === context.typeParameters[i]) {\r\n                        return getInferredType(context, i);\r\n                    }\r\n                }\r\n                return t;\r\n            }\r\n        }\r\n\r\n        function identityMapper(type: Type): Type {\r\n            return type;\r\n        }\r\n\r\n        function combineTypeMappers(mapper1: TypeMapper, mapper2: TypeMapper): TypeMapper {\r\n            return t => mapper2(mapper1(t));\r\n        }\r\n\r\n        function instantiateTypeParameter(typeParameter: TypeParameter, mapper: TypeMapper): TypeParameter {\r\n            var result = <TypeParameter>createType(TypeFlags.TypeParameter);\r\n            result.symbol = typeParameter.symbol;\r\n            if (typeParameter.constraint) {\r\n                result.constraint = instantiateType(typeParameter.constraint, mapper);\r\n            }\r\n            else {\r\n                result.target = typeParameter;\r\n                result.mapper = mapper;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function instantiateSignature(signature: Signature, mapper: TypeMapper, eraseTypeParameters?: boolean): Signature {\r\n            if (signature.typeParameters && !eraseTypeParameters) {\r\n                var freshTypeParameters = instantiateList(signature.typeParameters, mapper, instantiateTypeParameter);\r\n                mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);\r\n            }\r\n            var result = createSignature(signature.declaration, freshTypeParameters,\r\n                instantiateList(signature.parameters, mapper, instantiateSymbol),\r\n                signature.resolvedReturnType ? instantiateType(signature.resolvedReturnType, mapper) : undefined,\r\n                signature.minArgumentCount, signature.hasRestParameter, signature.hasStringLiterals);\r\n            result.target = signature;\r\n            result.mapper = mapper;\r\n            return result;\r\n        }\r\n\r\n        function instantiateSymbol(symbol: Symbol, mapper: TypeMapper): Symbol {\r\n            if (symbol.flags & SymbolFlags.Instantiated) {\r\n                var links = getSymbolLinks(symbol);\r\n                // If symbol being instantiated is itself a instantiation, fetch the original target and combine the\r\n                // type mappers. This ensures that original type identities are properly preserved and that aliases\r\n                // always reference a non-aliases.\r\n                symbol = links.target;\r\n                mapper = combineTypeMappers(links.mapper, mapper);\r\n            }\r\n\r\n            // Keep the flags from the symbol we're instantiating.  Mark that is instantiated, and \r\n            // also transient so that we can just store data on it directly.\r\n            var result = <TransientSymbol>createSymbol(SymbolFlags.Instantiated | SymbolFlags.Transient | symbol.flags, symbol.name);\r\n            result.declarations = symbol.declarations;\r\n            result.parent = symbol.parent;\r\n            result.target = symbol;\r\n            result.mapper = mapper;\r\n            if (symbol.valueDeclaration) {\r\n                result.valueDeclaration = symbol.valueDeclaration;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function instantiateAnonymousType(type: ObjectType, mapper: TypeMapper): ObjectType {\r\n            var result = <ResolvedType>createObjectType(TypeFlags.Anonymous, type.symbol);\r\n            result.properties = instantiateList(getPropertiesOfObjectType(type), mapper, instantiateSymbol);\r\n            result.members = createSymbolTable(result.properties);\r\n            result.callSignatures = instantiateList(getSignaturesOfType(type, SignatureKind.Call), mapper, instantiateSignature);\r\n            result.constructSignatures = instantiateList(getSignaturesOfType(type, SignatureKind.Construct), mapper, instantiateSignature);\r\n            var stringIndexType = getIndexTypeOfType(type, IndexKind.String);\r\n            var numberIndexType = getIndexTypeOfType(type, IndexKind.Number);\r\n            if (stringIndexType) result.stringIndexType = instantiateType(stringIndexType, mapper);\r\n            if (numberIndexType) result.numberIndexType = instantiateType(numberIndexType, mapper);\r\n            return result;\r\n        }\r\n\r\n        function instantiateType(type: Type, mapper: TypeMapper): Type {\r\n            if (mapper !== identityMapper) {\r\n                if (type.flags & TypeFlags.TypeParameter) {\r\n                    return mapper(type);\r\n                }\r\n                if (type.flags & TypeFlags.Anonymous) {\r\n                    return type.symbol && type.symbol.flags & (SymbolFlags.Function | SymbolFlags.Method | SymbolFlags.TypeLiteral | SymbolFlags.ObjectLiteral) ?\r\n                        instantiateAnonymousType(<ObjectType>type, mapper) : type;\r\n                }\r\n                if (type.flags & TypeFlags.Reference) {\r\n                    return createTypeReference((<TypeReference>type).target, instantiateList((<TypeReference>type).typeArguments, mapper, instantiateType));\r\n                }\r\n                if (type.flags & TypeFlags.Tuple) {\r\n                    return createTupleType(instantiateList((<TupleType>type).elementTypes, mapper, instantiateType));\r\n                }\r\n                if (type.flags & TypeFlags.Union) {\r\n                    return getUnionType(instantiateList((<UnionType>type).types, mapper, instantiateType), /*noSubtypeReduction*/ true);\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Returns true if the given expression contains (at any level of nesting) a function or arrow expression\r\n        // that is subject to contextual typing.\r\n        function isContextSensitiveExpression(node: Expression): boolean {\r\n            switch (node.kind) {\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    return !(<FunctionExpression>node).typeParameters && !forEach((<FunctionExpression>node).parameters, p => p.type);\r\n                case SyntaxKind.ObjectLiteral:\r\n                    return forEach((<ObjectLiteral>node).properties, p =>\r\n                        p.kind === SyntaxKind.PropertyAssignment && isContextSensitiveExpression((<PropertyDeclaration>p).initializer));\r\n                case SyntaxKind.ArrayLiteral:\r\n                    return forEach((<ArrayLiteral>node).elements, e => isContextSensitiveExpression(e));\r\n                case SyntaxKind.ConditionalExpression:\r\n                    return isContextSensitiveExpression((<ConditionalExpression>node).whenTrue) ||\r\n                        isContextSensitiveExpression((<ConditionalExpression>node).whenFalse);\r\n                case SyntaxKind.BinaryExpression:\r\n                    return (<BinaryExpression>node).operator === SyntaxKind.BarBarToken &&\r\n                        (isContextSensitiveExpression((<BinaryExpression>node).left) || isContextSensitiveExpression((<BinaryExpression>node).right));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getTypeWithoutConstructors(type: Type): Type {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                var resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                if (resolved.constructSignatures.length) {\r\n                    var result = <ResolvedType>createObjectType(TypeFlags.Anonymous, type.symbol);\r\n                    result.members = resolved.members;\r\n                    result.properties = resolved.properties;\r\n                    result.callSignatures = resolved.callSignatures;\r\n                    result.constructSignatures = emptyArray;\r\n                    type = result;\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // TYPE CHECKING\r\n\r\n        var subtypeRelation: Map<boolean> = {};\r\n        var assignableRelation: Map<boolean> = {};\r\n        var identityRelation: Map<boolean> = {};\r\n\r\n        function isTypeIdenticalTo(source: Type, target: Type): boolean {\r\n            return checkTypeRelatedTo(source, target, identityRelation, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function isTypeSubtypeOf(source: Type, target: Type): boolean {\r\n            return checkTypeSubtypeOf(source, target, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function checkTypeSubtypeOf(\r\n            source: Type,\r\n            target: Type,\r\n            errorNode: Node,\r\n            headMessage?: DiagnosticMessage,\r\n            containingMessageChain?: DiagnosticMessageChain): boolean {\r\n\r\n            return checkTypeRelatedTo(source, target, subtypeRelation, errorNode, headMessage, containingMessageChain);\r\n        }\r\n\r\n        function isTypeAssignableTo(source: Type, target: Type): boolean {\r\n            return checkTypeAssignableTo(source, target, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function checkTypeAssignableTo(source: Type, target: Type, errorNode: Node, headMessage?: DiagnosticMessage): boolean {\r\n            return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage);\r\n        }\r\n\r\n        function isTypeRelatedTo(source: Type, target: Type, relation: Map<boolean>): boolean {\r\n            return checkTypeRelatedTo(source, target, relation, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function isSignatureAssignableTo(source: Signature, target: Signature): boolean {\r\n            var sourceType = getOrCreateTypeFromSignature(source);\r\n            var targetType = getOrCreateTypeFromSignature(target);\r\n            return checkTypeRelatedTo(sourceType, targetType, assignableRelation, /*errorNode*/ undefined);\r\n        }\r\n\r\n        function isPropertyIdenticalTo(sourceProp: Symbol, targetProp: Symbol): boolean {\r\n            return isPropertyIdenticalToRecursive(sourceProp, targetProp, /*reportErrors*/ false, (s, t, _reportErrors) => isTypeIdenticalTo(s, t));\r\n        }\r\n\r\n        function checkInheritedPropertiesAreIdentical(type: InterfaceType, typeNode: Node): boolean {\r\n            if (!type.baseTypes.length || type.baseTypes.length === 1) {\r\n                return true;\r\n            }\r\n\r\n            var seen: Map<{ prop: Symbol; containingType: Type }> = {};\r\n            forEach(type.declaredProperties, p => { seen[p.name] = { prop: p, containingType: type }; });\r\n            var ok = true;\r\n\r\n            for (var i = 0, len = type.baseTypes.length; i < len; ++i) {\r\n                var base = type.baseTypes[i];\r\n                var properties = getPropertiesOfObjectType(base);\r\n                for (var j = 0, proplen = properties.length; j < proplen; ++j) {\r\n                    var prop = properties[j];\r\n                    if (!hasProperty(seen, prop.name)) {\r\n                        seen[prop.name] = { prop: prop, containingType: base };\r\n                    }\r\n                    else {\r\n                        var existing = seen[prop.name];\r\n                        var isInheritedProperty = existing.containingType !== type;\r\n                        if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {\r\n                            ok = false;\r\n\r\n                            var typeName1 = typeToString(existing.containingType);\r\n                            var typeName2 = typeToString(base);\r\n\r\n                            var errorInfo = chainDiagnosticMessages(undefined, Diagnostics.Named_properties_0_of_types_1_and_2_are_not_identical, prop.name, typeName1, typeName2);\r\n                            errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);\r\n                            addDiagnostic(createDiagnosticForNodeFromMessageChain(typeNode, errorInfo, program.getCompilerHost().getNewLine()));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ok;\r\n        }\r\n\r\n        function isPropertyIdenticalToRecursive(sourceProp: Symbol, targetProp: Symbol, reportErrors: boolean, relate: (source: Type, target: Type, reportErrors: boolean) => boolean): boolean {\r\n            // Two members are considered identical when\r\n            // - they are public properties with identical names, optionality, and types,\r\n            // - they are private or protected properties originating in the same declaration and having identical types\r\n            if (sourceProp === targetProp) {\r\n                return true;\r\n            }\r\n            var sourcePropAccessibility = getDeclarationFlagsFromSymbol(sourceProp) & (NodeFlags.Private | NodeFlags.Protected);\r\n            var targetPropAccessibility = getDeclarationFlagsFromSymbol(targetProp) & (NodeFlags.Private | NodeFlags.Protected);\r\n            if (sourcePropAccessibility !== targetPropAccessibility) {\r\n                return false;\r\n            }\r\n            if (sourcePropAccessibility) {\r\n                return getTargetSymbol(sourceProp) === getTargetSymbol(targetProp) && relate(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors);\r\n            }\r\n            else {\r\n                return isOptionalProperty(sourceProp) === isOptionalProperty(targetProp) && relate(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors);\r\n            }\r\n        }\r\n\r\n        function checkTypeRelatedTo(\r\n            source: Type,\r\n            target: Type,\r\n            relation: Map<boolean>,\r\n            errorNode: Node,\r\n            headMessage?: DiagnosticMessage,\r\n            containingMessageChain?: DiagnosticMessageChain): boolean {\r\n\r\n            var errorInfo: DiagnosticMessageChain;\r\n            var sourceStack: ObjectType[];\r\n            var targetStack: ObjectType[];\r\n            var expandingFlags: number;\r\n            var depth = 0;\r\n            var overflow = false;\r\n\r\n            Debug.assert(relation !== identityRelation || !errorNode, \"no error reporting in identity checking\");\r\n\r\n            var result = isRelatedToWithCustomErrors(source, target, errorNode !== undefined, headMessage);\r\n            if (overflow) {\r\n                error(errorNode, Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));\r\n            }\r\n            else if (errorInfo) {\r\n                if (containingMessageChain) {\r\n                    errorInfo = concatenateDiagnosticMessageChains(containingMessageChain, errorInfo);\r\n                }\r\n                addDiagnostic(createDiagnosticForNodeFromMessageChain(errorNode, errorInfo, program.getCompilerHost().getNewLine()));\r\n            }\r\n            return result;\r\n\r\n            function reportError(message: DiagnosticMessage, arg0?: string, arg1?: string, arg2?: string): void {\r\n                errorInfo = chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);\r\n            }\r\n\r\n            function isRelatedTo(source: Type, target: Type, reportErrors?: boolean): boolean {\r\n                return isRelatedToWithCustomErrors(source, target, reportErrors, /*headMessage*/ undefined);\r\n            }\r\n\r\n            function isRelatedToWithCustomErrors(source: Type, target: Type, reportErrors: boolean, headMessage: DiagnosticMessage): boolean {\r\n                if (relation === identityRelation) {\r\n                    // both types are the same - covers 'they are the same primitive type or both are Any' or the same type parameter cases\r\n                    if (source === target) return true;\r\n                }\r\n                else {\r\n                    if (source === target) return true;\r\n                    if (target.flags & TypeFlags.Any) return true;\r\n                    if (source === undefinedType) return true;\r\n                    if (source === nullType && target !== undefinedType) return true;\r\n                    if (source.flags & TypeFlags.Enum && target === numberType) return true;\r\n                    if (source.flags & TypeFlags.StringLiteral && target === stringType) return true;\r\n                    if (relation === assignableRelation) {\r\n                        if (source.flags & TypeFlags.Any) return true;\r\n                        if (source === numberType && target.flags & TypeFlags.Enum) return true;\r\n                    }\r\n                }\r\n                if (source.flags & TypeFlags.Union) {\r\n                    if (unionTypeRelatedToType(<UnionType>source, target, reportErrors)) {\r\n                        return true;\r\n                    }\r\n                }\r\n                else if (target.flags & TypeFlags.Union) {\r\n                    if (typeRelatedToUnionType(source, <UnionType>target, reportErrors)) {\r\n                        return true;\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.TypeParameter && target.flags & TypeFlags.TypeParameter) {\r\n                    if (typeParameterRelatedTo(<TypeParameter>source, <TypeParameter>target, reportErrors)) {\r\n                        return true;\r\n                    }\r\n                }\r\n                else {\r\n                    var saveErrorInfo = errorInfo;\r\n                    if (source.flags & TypeFlags.Reference && target.flags & TypeFlags.Reference && (<TypeReference>source).target === (<TypeReference>target).target) {\r\n                        // We have type references to same target type, see if relationship holds for all type arguments\r\n                        if (typesRelatedTo((<TypeReference>source).typeArguments, (<TypeReference>target).typeArguments, reportErrors)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    // Even if relationship doesn't hold for type arguments, it may hold in a structural comparison\r\n                    // Report structural errors only if we haven't reported any errors yet\r\n                    var reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo;\r\n                    // identity relation does not use apparent type\r\n                    var sourceOrApparentType = relation === identityRelation ? source : getApparentType(source);\r\n                    if (sourceOrApparentType.flags & TypeFlags.ObjectType && target.flags & TypeFlags.ObjectType &&\r\n                        objectTypeRelatedTo(sourceOrApparentType, <ObjectType>target, reportStructuralErrors)) {\r\n                        errorInfo = saveErrorInfo;\r\n                        return true;\r\n                    }\r\n                }\r\n                if (reportErrors) {\r\n                    headMessage = headMessage || Diagnostics.Type_0_is_not_assignable_to_type_1;\r\n                    Debug.assert(headMessage);\r\n                    reportError(headMessage, typeToString(source), typeToString(target));\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function typeRelatedToUnionType(source: Type, target: UnionType, reportErrors: boolean): boolean {\r\n                var targetTypes = target.types;\r\n                for (var i = 0, len = targetTypes.length; i < len; i++) {\r\n                    if (isRelatedTo(source, targetTypes[i], reportErrors && i === len - 1)) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function unionTypeRelatedToType(source: UnionType, target: Type, reportErrors: boolean): boolean {\r\n                var sourceTypes = source.types;\r\n                for (var i = 0, len = sourceTypes.length; i < len; i++) {\r\n                    if (!isRelatedTo(sourceTypes[i], target, reportErrors)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function typesRelatedTo(sources: Type[], targets: Type[], reportErrors: boolean): boolean {\r\n                for (var i = 0, len = sources.length; i < len; i++) {\r\n                    if (!isRelatedTo(sources[i], targets[i], reportErrors)) return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function typeParameterRelatedTo(source: TypeParameter, target: TypeParameter, reportErrors: boolean): boolean {\r\n                if (relation === identityRelation) {\r\n                    if (source.symbol.name !== target.symbol.name) {\r\n                        return false;\r\n                    }\r\n\r\n                    // covers case when both type parameters does not have constraint (both equal to noConstraintType)\r\n                    if (source.constraint === target.constraint) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (source.constraint === noConstraintType || target.constraint === noConstraintType) {\r\n                        return false;\r\n                    }\r\n\r\n                    return isRelatedTo(source.constraint, target.constraint, reportErrors);\r\n                }\r\n                else {\r\n                    while (true) {\r\n                        var constraint = getConstraintOfTypeParameter(source);\r\n                        if (constraint === target) return true;\r\n                        if (!(constraint && constraint.flags & TypeFlags.TypeParameter)) break;\r\n                        source = <TypeParameter>constraint;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // Determine if two object types are related by structure. First, check if the result is already available in the global cache.\r\n            // Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.\r\n            // Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are\r\n            // equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion\r\n            // and issue an error. Otherwise, actually compare the structure of the two types.\r\n            function objectTypeRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): boolean {\r\n                if (overflow) return false;\r\n                var result: boolean;\r\n                var id = source.id + \",\" + target.id;\r\n                if ((result = relation[id]) !== undefined) return result;\r\n                if (depth > 0) {\r\n                    for (var i = 0; i < depth; i++) {\r\n                        if (source === sourceStack[i] && target === targetStack[i]) return true;\r\n                    }\r\n                    if (depth === 100) {\r\n                        overflow = true;\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    sourceStack = [];\r\n                    targetStack = [];\r\n                    expandingFlags = 0;\r\n                }\r\n                sourceStack[depth] = source;\r\n                targetStack[depth] = target;\r\n                depth++;\r\n                var saveExpandingFlags = expandingFlags;\r\n                if (!(expandingFlags & 1) && isDeeplyNestedGeneric(source, sourceStack)) expandingFlags |= 1;\r\n                if (!(expandingFlags & 2) && isDeeplyNestedGeneric(target, targetStack)) expandingFlags |= 2;\r\n                result = expandingFlags === 3 ||\r\n                    propertiesRelatedTo(source, target, reportErrors) &&\r\n                    signaturesRelatedTo(source, target, SignatureKind.Call, reportErrors) &&\r\n                    signaturesRelatedTo(source, target, SignatureKind.Construct, reportErrors) &&\r\n                    stringIndexTypesRelatedTo(source, target, reportErrors) &&\r\n                    numberIndexTypesRelatedTo(source, target, reportErrors);\r\n                expandingFlags = saveExpandingFlags;\r\n                depth--;\r\n                if (depth === 0) {\r\n                    relation[id] = result;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            // Return true if the given type is part of a deeply nested chain of generic instantiations. We consider this to be the case\r\n            // when structural type comparisons have been started for 10 or more instantiations of the same generic type. It is possible,\r\n            // though highly unlikely, for this test to be true in a situation where a chain of instantiations is not infinitely expanding.\r\n            // Effectively, we will generate a false positive when two types are structurally equal to at least 10 levels, but unequal at\r\n            // some level beyond that.\r\n            function isDeeplyNestedGeneric(type: ObjectType, stack: ObjectType[]): boolean {\r\n                if (type.flags & TypeFlags.Reference && depth >= 10) {\r\n                    var target = (<TypeReference>type).target;\r\n                    var count = 0;\r\n                    for (var i = 0; i < depth; i++) {\r\n                        var t = stack[i];\r\n                        if (t.flags & TypeFlags.Reference && (<TypeReference>t).target === target) {\r\n                            count++;\r\n                            if (count >= 10) return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function propertiesRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): boolean {\r\n                if (relation === identityRelation) {\r\n                    return propertiesIdenticalTo(source, target, reportErrors);\r\n                }\r\n                var properties = getPropertiesOfObjectType(target);\r\n                for (var i = 0; i < properties.length; i++) {\r\n                    var targetProp = properties[i];\r\n                    var sourceProp = getPropertyOfType(source, targetProp.name);\r\n                    if (sourceProp !== targetProp) {\r\n                        if (!sourceProp) {\r\n                            if (relation === subtypeRelation || !isOptionalProperty(targetProp)) {\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Property_0_is_missing_in_type_1, symbolToString(targetProp), typeToString(source));\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else if (!(targetProp.flags & SymbolFlags.Prototype)) {\r\n                            var sourceFlags = getDeclarationFlagsFromSymbol(sourceProp);\r\n                            var targetFlags = getDeclarationFlagsFromSymbol(targetProp);\r\n                            if (sourceFlags & NodeFlags.Private || targetFlags & NodeFlags.Private) {\r\n                                if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {\r\n                                    if (reportErrors) {\r\n                                        if (sourceFlags & NodeFlags.Private && targetFlags & NodeFlags.Private) {\r\n                                            reportError(Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));\r\n                                        }\r\n                                        else {\r\n                                            reportError(Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp),\r\n                                                typeToString(sourceFlags & NodeFlags.Private ? source : target),\r\n                                                typeToString(sourceFlags & NodeFlags.Private ? target : source));\r\n                                        }\r\n                                    }\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            else if (targetFlags & NodeFlags.Protected) {\r\n                                var sourceDeclaredInClass = sourceProp.parent && sourceProp.parent.flags & SymbolFlags.Class;\r\n                                var sourceClass = sourceDeclaredInClass ? <InterfaceType>getDeclaredTypeOfSymbol(sourceProp.parent) : undefined;\r\n                                var targetClass = <InterfaceType>getDeclaredTypeOfSymbol(targetProp.parent);\r\n                                if (!sourceClass || !hasBaseType(sourceClass, targetClass)) {\r\n                                    if (reportErrors) {\r\n                                        reportError(Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2,\r\n                                            symbolToString(targetProp), typeToString(sourceClass || source), typeToString(targetClass));\r\n                                    }\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            else if (sourceFlags & NodeFlags.Protected) {\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2,\r\n                                        symbolToString(targetProp), typeToString(source), typeToString(target));\r\n                                }\r\n                                return false;\r\n                            }\r\n                            if (!isRelatedTo(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors)) {\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));\r\n                                }\r\n                                return false;\r\n                            }\r\n                            if (isOptionalProperty(sourceProp) && !isOptionalProperty(targetProp)) {\r\n                                // TypeScript 1.0 spec (April 2014): 3.8.3\r\n                                // S is a subtype of a type T, and T is a supertype of S if ...\r\n                                // S' and T are object types and, for each member M in T..\r\n                                // M is a property and S' contains a property N where\r\n                                // if M is a required property, N is also a required property \r\n                                // (M - property in T)\r\n                                // (N - property in S)\r\n                                if (reportErrors) {\r\n                                    reportError(Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2,\r\n                                        symbolToString(targetProp), typeToString(source), typeToString(target));\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function propertiesIdenticalTo(source: ObjectType, target: ObjectType, reportErrors: boolean): boolean {\r\n                var sourceProperties = getPropertiesOfObjectType(source);\r\n                var targetProperties = getPropertiesOfObjectType(target);\r\n                if (sourceProperties.length !== targetProperties.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0, len = sourceProperties.length; i < len; ++i) {\r\n                    var sourceProp = sourceProperties[i];\r\n                    var targetProp = getPropertyOfObjectType(target, sourceProp.name);\r\n                    if (!targetProp || !isPropertyIdenticalToRecursive(sourceProp, targetProp, reportErrors, isRelatedTo)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function signaturesRelatedTo(source: ObjectType, target: ObjectType, kind: SignatureKind, reportErrors: boolean): boolean {\r\n                if (relation === identityRelation) {\r\n                    return signaturesIdenticalTo(source, target, kind, reportErrors);\r\n                }\r\n                if (target === anyFunctionType || source === anyFunctionType) return true;\r\n                var sourceSignatures = getSignaturesOfType(source, kind);\r\n                var targetSignatures = getSignaturesOfType(target, kind);\r\n                var saveErrorInfo = errorInfo;\r\n                outer: for (var i = 0; i < targetSignatures.length; i++) {\r\n                    var t = targetSignatures[i];\r\n                    if (!t.hasStringLiterals || target.flags & TypeFlags.FromSignature) {\r\n                        var localErrors = reportErrors;\r\n                        for (var j = 0; j < sourceSignatures.length; j++) {\r\n                            var s = sourceSignatures[j];\r\n                            if (!s.hasStringLiterals || source.flags & TypeFlags.FromSignature) {\r\n                                if (signatureRelatedTo(s, t, localErrors)) {\r\n                                    errorInfo = saveErrorInfo;\r\n                                    continue outer;\r\n                                }\r\n                                // Only report errors from the first failure\r\n                                localErrors = false;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function signatureRelatedTo(source: Signature, target: Signature, reportErrors: boolean): boolean {\r\n                if (source === target) {\r\n                    return true;\r\n                }\r\n                if (!target.hasRestParameter && source.minArgumentCount > target.parameters.length) {\r\n                    return false;\r\n                }\r\n                var sourceMax = source.parameters.length;\r\n                var targetMax = target.parameters.length;\r\n                var checkCount: number;\r\n                if (source.hasRestParameter && target.hasRestParameter) {\r\n                    checkCount = sourceMax > targetMax ? sourceMax : targetMax;\r\n                    sourceMax--;\r\n                    targetMax--;\r\n                }\r\n                else if (source.hasRestParameter) {\r\n                    sourceMax--;\r\n                    checkCount = targetMax;\r\n                }\r\n                else if (target.hasRestParameter) {\r\n                    targetMax--;\r\n                    checkCount = sourceMax;\r\n                }\r\n                else {\r\n                    checkCount = sourceMax < targetMax ? sourceMax : targetMax;\r\n                }\r\n                // Spec 1.0 Section 3.8.3 & 3.8.4:\r\n                // M and N (the signatures) are instantiated using type Any as the type argument for all type parameters declared by M and N\r\n                source = getErasedSignature(source);\r\n                target = getErasedSignature(target);\r\n                for (var i = 0; i < checkCount; i++) {\r\n                    var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);\r\n                    var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);\r\n                    var saveErrorInfo = errorInfo;\r\n                    if (!isRelatedTo(s, t, reportErrors)) {\r\n                        if (!isRelatedTo(t, s, false)) {\r\n                            if (reportErrors) {\r\n                                reportError(Diagnostics.Types_of_parameters_0_and_1_are_incompatible,\r\n                                    source.parameters[i < sourceMax ? i : sourceMax].name,\r\n                                    target.parameters[i < targetMax ? i : targetMax].name);\r\n                            }\r\n                            return false;\r\n                        }\r\n                        errorInfo = saveErrorInfo;\r\n                    }\r\n                }\r\n                var t = getReturnTypeOfSignature(target);\r\n                if (t === voidType) return true;\r\n                var s = getReturnTypeOfSignature(source);\r\n                return isRelatedTo(s, t, reportErrors);\r\n            }\r\n\r\n            function signaturesIdenticalTo(source: ObjectType, target: ObjectType, kind: SignatureKind, reportErrors: boolean): boolean {\r\n                var sourceSignatures = getSignaturesOfType(source, kind);\r\n                var targetSignatures = getSignaturesOfType(target, kind);\r\n                if (sourceSignatures.length !== targetSignatures.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0, len = sourceSignatures.length; i < len; ++i) {\r\n                    if (!compareSignatures(sourceSignatures[i], targetSignatures[i], /*compareReturnTypes*/ true, isRelatedTo)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function stringIndexTypesRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): boolean {\r\n                if (relation === identityRelation) {\r\n                    return indexTypesIdenticalTo(IndexKind.String, source, target, reportErrors);\r\n                }\r\n                var targetType = getIndexTypeOfType(target, IndexKind.String);\r\n                if (targetType) {\r\n                    var sourceType = getIndexTypeOfType(source, IndexKind.String);\r\n                    if (!sourceType) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));\r\n                        }\r\n                        return false;\r\n                    }\r\n                    if (!isRelatedTo(sourceType, targetType, reportErrors)) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signatures_are_incompatible);\r\n                        }\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            } \r\n\r\n            function numberIndexTypesRelatedTo(source: ObjectType, target: ObjectType, reportErrors: boolean): boolean {\r\n                if (relation === identityRelation) {\r\n                    return indexTypesIdenticalTo(IndexKind.Number, source, target, reportErrors);\r\n                }\r\n                var targetType = getIndexTypeOfType(target, IndexKind.Number);\r\n                if (targetType) {\r\n                    var sourceStringType = getIndexTypeOfType(source, IndexKind.String);\r\n                    var sourceNumberType = getIndexTypeOfType(source, IndexKind.Number);\r\n                    if (!(sourceStringType || sourceNumberType)) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));\r\n                        }\r\n                        return false;\r\n                    }\r\n                    if (sourceStringType && sourceNumberType) {\r\n                        // If we know for sure we're testing both string and numeric index types then only report errors from the second one\r\n                        var compatible = isRelatedTo(sourceStringType, targetType, false) || isRelatedTo(sourceNumberType, targetType, reportErrors);\r\n                    }\r\n                    else {\r\n                        var compatible = isRelatedTo(sourceStringType || sourceNumberType, targetType, reportErrors);\r\n                    }\r\n                    if (!compatible) {\r\n                        if (reportErrors) {\r\n                            reportError(Diagnostics.Index_signatures_are_incompatible);\r\n                        }\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function indexTypesIdenticalTo(indexKind: IndexKind, source: ObjectType, target: ObjectType, reportErrors: boolean): boolean {\r\n                var targetType = getIndexTypeOfType(target, indexKind);\r\n                var sourceType = getIndexTypeOfType(source, indexKind);\r\n                return (!sourceType && !targetType) || (sourceType && targetType && isRelatedTo(sourceType, targetType, reportErrors));\r\n            }\r\n        }\r\n\r\n        function compareSignatures(source: Signature, target: Signature, compareReturnTypes: boolean, compareTypes: (s: Type, t: Type) => boolean): boolean {\r\n            if (source === target) {\r\n                return true;\r\n            }\r\n            if (source.parameters.length !== target.parameters.length ||\r\n                source.minArgumentCount !== target.minArgumentCount ||\r\n                source.hasRestParameter !== target.hasRestParameter) {\r\n                return false;\r\n            }\r\n            if (source.typeParameters && target.typeParameters) {\r\n                if (source.typeParameters.length !== target.typeParameters.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0, len = source.typeParameters.length; i < len; ++i) {\r\n                    if (!compareTypes(source.typeParameters[i], target.typeParameters[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            else if (source.typeParameters || source.typeParameters) {\r\n                return false;\r\n            }\r\n            // Spec 1.0 Section 3.8.3 & 3.8.4:\r\n            // M and N (the signatures) are instantiated using type Any as the type argument for all type parameters declared by M and N\r\n            source = getErasedSignature(source);\r\n            target = getErasedSignature(target);\r\n            for (var i = 0, len = source.parameters.length; i < len; i++) {\r\n                var s = source.hasRestParameter && i === len - 1 ? getRestTypeOfSignature(source) : getTypeOfSymbol(source.parameters[i]);\r\n                var t = target.hasRestParameter && i === len - 1 ? getRestTypeOfSignature(target) : getTypeOfSymbol(target.parameters[i]);\r\n                if (!compareTypes(s, t)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return !compareReturnTypes || compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));\r\n        }\r\n\r\n        function isSupertypeOfEach(candidate: Type, types: Type[]): boolean {\r\n            for (var i = 0, len = types.length; i < len; i++) {\r\n                if (candidate !== types[i] && !isTypeSubtypeOf(types[i], candidate)) return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function getCommonSupertype(types: Type[]): Type {\r\n            return forEach(types, t => isSupertypeOfEach(t, types) ? t : undefined);\r\n        }\r\n\r\n        function reportNoCommonSupertypeError(types: Type[], errorLocation: Node, errorMessageChainHead: DiagnosticMessageChain): void {\r\n            var bestSupertype: Type;\r\n            var bestSupertypeDownfallType: Type; // The type that caused bestSupertype not to be the common supertype\r\n            var bestSupertypeScore = 0;\r\n\r\n            for (var i = 0; i < types.length; i++) {\r\n                var score = 0;\r\n                var downfallType: Type = undefined;\r\n                for (var j = 0; j < types.length; j++) {\r\n                    if (isTypeSubtypeOf(types[j], types[i])) {\r\n                        score++;\r\n                    }\r\n                    else if (!downfallType) {\r\n                        downfallType = types[j];\r\n                    }\r\n                }\r\n\r\n                if (score > bestSupertypeScore) {\r\n                    bestSupertype = types[i];\r\n                    bestSupertypeDownfallType = downfallType;\r\n                    bestSupertypeScore = score;\r\n                }\r\n\r\n                // types.length - 1 is the maximum score, given that getCommonSupertype returned false\r\n                if (bestSupertypeScore === types.length - 1) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // In the following errors, the {1} slot is before the {0} slot because checkTypeSubtypeOf supplies the\r\n            // subtype as the first argument to the error\r\n            checkTypeSubtypeOf(bestSupertypeDownfallType, bestSupertype, errorLocation,\r\n                Diagnostics.Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0,\r\n                errorMessageChainHead);\r\n        }\r\n\r\n        function isTypeOfObjectLiteral(type: Type): boolean {\r\n            return (type.flags & TypeFlags.Anonymous) && type.symbol && (type.symbol.flags & SymbolFlags.ObjectLiteral) ? true : false;\r\n        }\r\n\r\n        function isArrayType(type: Type): boolean {\r\n            return type.flags & TypeFlags.Reference && (<TypeReference>type).target === globalArrayType;\r\n        }\r\n\r\n        function getInnermostTypeOfNestedArrayTypes(type: Type): Type {\r\n            while (isArrayType(type)) {\r\n                type = (<GenericType>type).typeArguments[0];\r\n            }\r\n            return type;\r\n        }\r\n\r\n        /* If we are widening on a literal, then we may need to the 'node' parameter for reporting purposes */\r\n        function getWidenedType(type: Type, suppressNoImplicitAnyErrors?: boolean): Type {\r\n            if (type.flags & (TypeFlags.Undefined | TypeFlags.Null)) {\r\n                return anyType;\r\n            }\r\n            if (type.flags & TypeFlags.Union) {\r\n                return getWidenedTypeOfUnion(type);\r\n            }\r\n            if (isTypeOfObjectLiteral(type)) {\r\n                return getWidenedTypeOfObjectLiteral(type);\r\n            }\r\n            if (isArrayType(type)) {\r\n                return getWidenedTypeOfArrayLiteral(type);\r\n            }\r\n            return type;\r\n\r\n            function getWidenedTypeOfUnion(type: Type): Type {\r\n                return getUnionType(map((<UnionType>type).types, t => getWidenedType(t, suppressNoImplicitAnyErrors)));\r\n            }\r\n\r\n            function getWidenedTypeOfObjectLiteral(type: Type): Type {\r\n                var properties = getPropertiesOfObjectType(type);\r\n                if (properties.length) {\r\n                    var widenedTypes: Type[] = [];\r\n                    var propTypeWasWidened: boolean = false;\r\n                    forEach(properties, p => {\r\n                        var propType = getTypeOfSymbol(p);\r\n                        var widenedType = getWidenedType(propType);\r\n                        if (propType !== widenedType) {\r\n                            propTypeWasWidened = true;\r\n                            if (!suppressNoImplicitAnyErrors && compilerOptions.noImplicitAny && getInnermostTypeOfNestedArrayTypes(widenedType) === anyType) {\r\n                                error(p.valueDeclaration, Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, p.name, typeToString(widenedType));\r\n                            }\r\n                        }\r\n                        widenedTypes.push(widenedType);\r\n                    });\r\n                    if (propTypeWasWidened) {\r\n                        var members: SymbolTable = {};\r\n                        var index = 0;\r\n                        forEach(properties, p => {\r\n                            var symbol = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient | p.flags, p.name);\r\n                            symbol.declarations = p.declarations;\r\n                            symbol.parent = p.parent;\r\n                            symbol.type = widenedTypes[index++];\r\n                            symbol.target = p;\r\n                            if (p.valueDeclaration) symbol.valueDeclaration = p.valueDeclaration;\r\n                            members[symbol.name] = symbol;\r\n                        });\r\n                        var stringIndexType = getIndexTypeOfType(type, IndexKind.String);\r\n                        var numberIndexType = getIndexTypeOfType(type, IndexKind.Number);\r\n                        if (stringIndexType) stringIndexType = getWidenedType(stringIndexType);\r\n                        if (numberIndexType) numberIndexType = getWidenedType(numberIndexType);\r\n                        type = createAnonymousType(type.symbol, members, emptyArray, emptyArray, stringIndexType, numberIndexType);\r\n                    }\r\n                }\r\n                return type;\r\n            }\r\n\r\n            function getWidenedTypeOfArrayLiteral(type: Type): Type {\r\n                var elementType = (<TypeReference>type).typeArguments[0];\r\n                var widenedType = getWidenedType(elementType, suppressNoImplicitAnyErrors);\r\n                type = elementType !== widenedType ? createArrayType(widenedType) : type;\r\n                return type;\r\n            }\r\n        }\r\n\r\n        function forEachMatchingParameterType(source: Signature, target: Signature, callback: (s: Type, t: Type) => void) {\r\n            var sourceMax = source.parameters.length;\r\n            var targetMax = target.parameters.length;\r\n            var count: number;\r\n            if (source.hasRestParameter && target.hasRestParameter) {\r\n                count = sourceMax > targetMax ? sourceMax : targetMax;\r\n                sourceMax--;\r\n                targetMax--;\r\n            }\r\n            else if (source.hasRestParameter) {\r\n                sourceMax--;\r\n                count = targetMax;\r\n            }\r\n            else if (target.hasRestParameter) {\r\n                targetMax--;\r\n                count = sourceMax;\r\n            }\r\n            else {\r\n                count = sourceMax < targetMax ? sourceMax : targetMax;\r\n            }\r\n            for (var i = 0; i < count; i++) {\r\n                var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);\r\n                var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);\r\n                callback(s, t);\r\n            }\r\n        }\r\n\r\n        function createInferenceContext(typeParameters: TypeParameter[], inferUnionTypes: boolean): InferenceContext {\r\n            var inferences: Type[][] = [];\r\n            for (var i = 0; i < typeParameters.length; i++) inferences.push([]);\r\n            return {\r\n                typeParameters: typeParameters,\r\n                inferUnionTypes: inferUnionTypes,\r\n                inferenceCount: 0,\r\n                inferences: inferences,\r\n                inferredTypes: new Array(typeParameters.length),\r\n            };\r\n        }\r\n\r\n        function inferTypes(context: InferenceContext, source: Type, target: Type) {\r\n            var sourceStack: Type[];\r\n            var targetStack: Type[];\r\n            var depth = 0;\r\n            inferFromTypes(source, target);\r\n\r\n            function isInProcess(source: Type, target: Type) {\r\n                for (var i = 0; i < depth; i++) {\r\n                    if (source === sourceStack[i] && target === targetStack[i]) return true;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function isWithinDepthLimit(type: Type, stack: Type[]) {\r\n                if (depth >= 5) {\r\n                    var target = (<TypeReference>type).target;\r\n                    var count = 0;\r\n                    for (var i = 0; i < depth; i++) {\r\n                        var t = stack[i];\r\n                        if (t.flags & TypeFlags.Reference && (<TypeReference>t).target === target) count++;\r\n                    }\r\n                    return count < 5;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            function inferFromTypes(source: Type, target: Type) {\r\n                if (target.flags & TypeFlags.TypeParameter) {\r\n                    // If target is a type parameter, make an inference\r\n                    var typeParameters = context.typeParameters;\r\n                    for (var i = 0; i < typeParameters.length; i++) {\r\n                        if (target === typeParameters[i]) {\r\n                            context.inferenceCount++;\r\n                            var inferences = context.inferences[i];\r\n                            if (!contains(inferences, source)) inferences.push(source);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.Reference && target.flags & TypeFlags.Reference && (<TypeReference>source).target === (<TypeReference>target).target) {\r\n                    // If source and target are references to the same generic type, infer from type arguments\r\n                    var sourceTypes = (<TypeReference>source).typeArguments;\r\n                    var targetTypes = (<TypeReference>target).typeArguments;\r\n                    for (var i = 0; i < sourceTypes.length; i++) {\r\n                        inferFromTypes(sourceTypes[i], targetTypes[i]);\r\n                    }\r\n                }\r\n                else if (target.flags & TypeFlags.Union) {\r\n                    var targetTypes = (<UnionType>target).types;\r\n                    var startCount = context.inferenceCount;\r\n                    var typeParameterCount = 0;\r\n                    var typeParameter: TypeParameter;\r\n                    // First infer to each type in union that isn't a type parameter\r\n                    for (var i = 0; i < targetTypes.length; i++) {\r\n                        var t = targetTypes[i];\r\n                        if (t.flags & TypeFlags.TypeParameter && contains(context.typeParameters, t)) {\r\n                            typeParameter = <TypeParameter>t;\r\n                            typeParameterCount++;\r\n                        }\r\n                        else {\r\n                            inferFromTypes(source, t);\r\n                        }\r\n                    }\r\n                    // If no inferences were produced above and union contains a single naked type parameter, infer to that type parameter\r\n                    if (context.inferenceCount === startCount && typeParameterCount === 1) {\r\n                        inferFromTypes(source, typeParameter);\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.Union) {\r\n                    // Source is a union type, infer from each consituent type\r\n                    var sourceTypes = (<UnionType>source).types;\r\n                    for (var i = 0; i < sourceTypes.length; i++) {\r\n                        inferFromTypes(sourceTypes[i], target);\r\n                    }\r\n                }\r\n                else if (source.flags & TypeFlags.ObjectType && (target.flags & (TypeFlags.Reference | TypeFlags.Tuple) ||\r\n                    (target.flags & TypeFlags.Anonymous) && target.symbol && target.symbol.flags & (SymbolFlags.Method | SymbolFlags.TypeLiteral))) {\r\n                    // If source is an object type, and target is a type reference, a tuple type, the type of a method, or a type literal, infer from members\r\n                    if (!isInProcess(source, target) && isWithinDepthLimit(source, sourceStack) && isWithinDepthLimit(target, targetStack)) {\r\n                        if (depth === 0) {\r\n                            sourceStack = [];\r\n                            targetStack = [];\r\n                        }\r\n                        sourceStack[depth] = source;\r\n                        targetStack[depth] = target;\r\n                        depth++;\r\n                        inferFromProperties(source, target);\r\n                        inferFromSignatures(source, target, SignatureKind.Call);\r\n                        inferFromSignatures(source, target, SignatureKind.Construct);\r\n                        inferFromIndexTypes(source, target, IndexKind.String, IndexKind.String);\r\n                        inferFromIndexTypes(source, target, IndexKind.Number, IndexKind.Number);\r\n                        inferFromIndexTypes(source, target, IndexKind.String, IndexKind.Number);\r\n                        depth--;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function inferFromProperties(source: Type, target: Type) {\r\n                var properties = getPropertiesOfObjectType(target);\r\n                for (var i = 0; i < properties.length; i++) {\r\n                    var targetProp = properties[i];\r\n                    var sourceProp = getPropertyOfObjectType(source, targetProp.name);\r\n                    if (sourceProp) {\r\n                        inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));\r\n                    }\r\n                }\r\n            }\r\n\r\n            function inferFromSignatures(source: Type, target: Type, kind: SignatureKind) {\r\n                var sourceSignatures = getSignaturesOfType(source, kind);\r\n                var targetSignatures = getSignaturesOfType(target, kind);\r\n                var sourceLen = sourceSignatures.length;\r\n                var targetLen = targetSignatures.length;\r\n                var len = sourceLen < targetLen ? sourceLen : targetLen;\r\n                for (var i = 0; i < len; i++) {\r\n                    inferFromSignature(getErasedSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));\r\n                }\r\n            }\r\n\r\n            function inferFromSignature(source: Signature, target: Signature) {\r\n                forEachMatchingParameterType(source, target, inferFromTypes);\r\n                inferFromTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));\r\n            }\r\n\r\n            function inferFromIndexTypes(source: Type, target: Type, sourceKind: IndexKind, targetKind: IndexKind) {\r\n                var targetIndexType = getIndexTypeOfType(target, targetKind);\r\n                if (targetIndexType) {\r\n                    var sourceIndexType = getIndexTypeOfType(source, sourceKind);\r\n                    if (sourceIndexType) {\r\n                        inferFromTypes(sourceIndexType, targetIndexType);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getInferredType(context: InferenceContext, index: number): Type {\r\n            var inferredType = context.inferredTypes[index];\r\n            if (!inferredType) {\r\n                var inferences = context.inferences[index];\r\n                if (inferences.length) {\r\n                    // Infer widened union or supertype, or the undefined type for no common supertype\r\n                    var unionOrSuperType = context.inferUnionTypes ? getUnionType(inferences) : getCommonSupertype(inferences);\r\n                    inferredType = unionOrSuperType ? getWidenedType(unionOrSuperType) : inferenceFailureType;\r\n                }\r\n                else {\r\n                    // Infer the empty object type when no inferences were made\r\n                    inferredType = emptyObjectType;\r\n                }\r\n\r\n                if (inferredType !== inferenceFailureType) {\r\n                    var constraint = getConstraintOfTypeParameter(context.typeParameters[index]);\r\n                    inferredType = constraint && !isTypeAssignableTo(inferredType, constraint) ? constraint : inferredType;\r\n                }\r\n                context.inferredTypes[index] = inferredType;\r\n            }\r\n            return inferredType;\r\n        }\r\n\r\n        function getInferredTypes(context: InferenceContext): Type[] {\r\n            for (var i = 0; i < context.inferredTypes.length; i++) {\r\n                getInferredType(context, i);\r\n            }\r\n\r\n            return context.inferredTypes;\r\n        }\r\n\r\n        function hasAncestor(node: Node, kind: SyntaxKind): boolean {\r\n            return getAncestor(node, kind) !== undefined;\r\n        }\r\n\r\n        // EXPRESSION TYPE CHECKING\r\n\r\n        function getResolvedSymbol(node: Identifier): Symbol {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedSymbol) {\r\n                links.resolvedSymbol = resolveName(node, node.text, SymbolFlags.Value | SymbolFlags.ExportValue, Diagnostics.Cannot_find_name_0, node) || unknownSymbol;\r\n            }\r\n            return links.resolvedSymbol;\r\n        }\r\n\r\n        function isInTypeQuery(node: Node): boolean {\r\n            // TypeScript 1.0 spec (April 2014): 3.6.3\r\n            // A type query consists of the keyword typeof followed by an expression.\r\n            // The expression is restricted to a single identifier or a sequence of identifiers separated by periods\r\n            while (node) {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.TypeQuery:\r\n                        return true;\r\n                    case SyntaxKind.Identifier:\r\n                    case SyntaxKind.QualifiedName:\r\n                        node = node.parent;\r\n                        continue;\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n            Debug.fail(\"should not get here\");\r\n        }\r\n\r\n        // Remove one or more primitive types from a union type\r\n        function subtractPrimitiveTypes(type: Type, subtractMask: TypeFlags): Type {\r\n            if (type.flags & TypeFlags.Union) {\r\n                var types = (<UnionType>type).types;\r\n                if (forEach(types, t => t.flags & subtractMask)) {\r\n                    return getUnionType(filter(types, t => !(t.flags & subtractMask)));\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        // Check if a given variable is assigned within a given syntax node\r\n        function isVariableAssignedWithin(symbol: Symbol, node: Node): boolean {\r\n            var links = getNodeLinks(node);\r\n            if (links.assignmentChecks) {\r\n                var cachedResult = links.assignmentChecks[symbol.id];\r\n                if (cachedResult !== undefined) {\r\n                    return cachedResult;\r\n                }\r\n            }\r\n            else {\r\n                links.assignmentChecks = {};\r\n            }\r\n            return links.assignmentChecks[symbol.id] = isAssignedIn(node);\r\n\r\n            function isAssignedInBinaryExpression(node: BinaryExpression) {\r\n                if (node.operator >= SyntaxKind.FirstAssignment && node.operator <= SyntaxKind.LastAssignment) {\r\n                    var n = node.left;\r\n                    while (n.kind === SyntaxKind.ParenExpression) {\r\n                        n = (<ParenExpression>n).expression;\r\n                    }\r\n                    if (n.kind === SyntaxKind.Identifier && getResolvedSymbol(<Identifier>n) === symbol) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return forEachChild(node, isAssignedIn);\r\n            }\r\n\r\n            function isAssignedInVariableDeclaration(node: VariableDeclaration) {\r\n                if (getSymbolOfNode(node) === symbol && node.initializer) {\r\n                    return true;\r\n                }\r\n                return forEachChild(node, isAssignedIn);\r\n            }\r\n\r\n            function isAssignedIn(node: Node): boolean {\r\n                switch (node.kind) {\r\n                    case SyntaxKind.BinaryExpression:\r\n                        return isAssignedInBinaryExpression(<BinaryExpression>node);\r\n                    case SyntaxKind.VariableDeclaration:\r\n                        return isAssignedInVariableDeclaration(<VariableDeclaration>node);\r\n                    case SyntaxKind.ArrayLiteral:\r\n                    case SyntaxKind.ObjectLiteral:\r\n                    case SyntaxKind.PropertyAccess:\r\n                    case SyntaxKind.IndexedAccess:\r\n                    case SyntaxKind.CallExpression:\r\n                    case SyntaxKind.NewExpression:\r\n                    case SyntaxKind.TypeAssertion:\r\n                    case SyntaxKind.ParenExpression:\r\n                    case SyntaxKind.PrefixOperator:\r\n                    case SyntaxKind.PostfixOperator:\r\n                    case SyntaxKind.ConditionalExpression:\r\n                    case SyntaxKind.Block:\r\n                    case SyntaxKind.VariableStatement:\r\n                    case SyntaxKind.ExpressionStatement:\r\n                    case SyntaxKind.IfStatement:\r\n                    case SyntaxKind.DoStatement:\r\n                    case SyntaxKind.WhileStatement:\r\n                    case SyntaxKind.ForStatement:\r\n                    case SyntaxKind.ForInStatement:\r\n                    case SyntaxKind.ReturnStatement:\r\n                    case SyntaxKind.WithStatement:\r\n                    case SyntaxKind.SwitchStatement:\r\n                    case SyntaxKind.CaseClause:\r\n                    case SyntaxKind.DefaultClause:\r\n                    case SyntaxKind.LabeledStatement:\r\n                    case SyntaxKind.ThrowStatement:\r\n                    case SyntaxKind.TryStatement:\r\n                    case SyntaxKind.TryBlock:\r\n                    case SyntaxKind.CatchBlock:\r\n                    case SyntaxKind.FinallyBlock:\r\n                        return forEachChild(node, isAssignedIn);\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Get the narrowed type of a given symbol at a given location\r\n        function getNarrowedTypeOfSymbol(symbol: Symbol, node: Node) {\r\n            var type = getTypeOfSymbol(symbol);\r\n            // Only narrow when symbol is variable of a structured type\r\n            if (symbol.flags & SymbolFlags.Variable && type.flags & TypeFlags.Structured) {\r\n                while (true) {\r\n                    var child = node;\r\n                    node = node.parent;\r\n                    // Stop at containing function or module block\r\n                    if (!node || node.kind === SyntaxKind.FunctionBlock || node.kind === SyntaxKind.ModuleBlock) {\r\n                        break;\r\n                    }\r\n                    var narrowedType = type;\r\n                    switch (node.kind) {\r\n                        case SyntaxKind.IfStatement:\r\n                            // In a branch of an if statement, narrow based on controlling expression\r\n                            if (child !== (<IfStatement>node).expression) {\r\n                                narrowedType = narrowType(type, (<IfStatement>node).expression, /*assumeTrue*/ child === (<IfStatement>node).thenStatement);\r\n                            }\r\n                            break;\r\n                        case SyntaxKind.ConditionalExpression:\r\n                            // In a branch of a conditional expression, narrow based on controlling condition\r\n                            if (child !== (<ConditionalExpression>node).condition) {\r\n                                narrowedType = narrowType(type, (<ConditionalExpression>node).condition, /*assumeTrue*/ child === (<ConditionalExpression>node).whenTrue);\r\n                            }\r\n                            break;\r\n                        case SyntaxKind.BinaryExpression:\r\n                            // In the right operand of an && or ||, narrow based on left operand\r\n                            if (child === (<BinaryExpression>node).right) {\r\n                                if ((<BinaryExpression>node).operator === SyntaxKind.AmpersandAmpersandToken) {\r\n                                    narrowedType = narrowType(type, (<BinaryExpression>node).left, /*assumeTrue*/ true);\r\n                                }\r\n                                else if ((<BinaryExpression>node).operator === SyntaxKind.BarBarToken) {\r\n                                    narrowedType = narrowType(type, (<BinaryExpression>node).left, /*assumeTrue*/ false);\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                    // Only use narrowed type if construct contains no assignments to variable\r\n                    if (narrowedType !== type) {\r\n                        if (isVariableAssignedWithin(symbol, node)) {\r\n                            break;\r\n                        }\r\n                        type = narrowedType;\r\n                    }\r\n                }\r\n            }\r\n            return type;\r\n\r\n            function narrowTypeByEquality(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                var left = <UnaryExpression>expr.left;\r\n                var right = <LiteralExpression>expr.right;\r\n                // Check that we have 'typeof <symbol>' on the left and string literal on the right\r\n                if (left.kind !== SyntaxKind.PrefixOperator || left.operator !== SyntaxKind.TypeOfKeyword ||\r\n                    left.operand.kind !== SyntaxKind.Identifier || right.kind !== SyntaxKind.StringLiteral ||\r\n                    getResolvedSymbol(<Identifier>left.operand) !== symbol) {\r\n                    return type;\r\n                }\r\n                var t = right.text;\r\n                var checkType: Type = t === \"string\" ? stringType : t === \"number\" ? numberType : t === \"boolean\" ? booleanType : emptyObjectType;\r\n                if (expr.operator === SyntaxKind.ExclamationEqualsEqualsToken) {\r\n                    assumeTrue = !assumeTrue;\r\n                }\r\n                if (assumeTrue) {\r\n                    // The assumed result is true. If check was for a primitive type, that type is the narrowed type. Otherwise we can\r\n                    // remove the primitive types from the narrowed type.\r\n                    return checkType === emptyObjectType ? subtractPrimitiveTypes(type, TypeFlags.String | TypeFlags.Number | TypeFlags.Boolean) : checkType;\r\n                }\r\n                else {\r\n                    // The assumed result is false. If check was for a primitive type we can remove that type from the narrowed type.\r\n                    // Otherwise we don't have enough information to do anything.\r\n                    return checkType === emptyObjectType ? type : subtractPrimitiveTypes(type, checkType.flags);\r\n                }\r\n            }\r\n\r\n            function narrowTypeByAnd(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                if (assumeTrue) {\r\n                    // The assumed result is true, therefore we narrow assuming each operand to be true.\r\n                    return narrowType(narrowType(type, expr.left, /*assumeTrue*/ true), expr.right, /*assumeTrue*/ true);\r\n                }\r\n                else {\r\n                    // The assumed result is false. This means either the first operand was false, or the first operand was true\r\n                    // and the second operand was false. We narrow with those assumptions and union the two resulting types.\r\n                    return getUnionType([\r\n                        narrowType(type, expr.left, /*assumeTrue*/ false),\r\n                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ true), expr.right, /*assumeTrue*/ false)\r\n                    ]);\r\n                }\r\n            }\r\n\r\n            function narrowTypeByOr(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                if (assumeTrue) {\r\n                    // The assumed result is true. This means either the first operand was true, or the first operand was false\r\n                    // and the second operand was true. We narrow with those assumptions and union the two resulting types.\r\n                    return getUnionType([\r\n                        narrowType(type, expr.left, /*assumeTrue*/ true),\r\n                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ false), expr.right, /*assumeTrue*/ true)\r\n                    ]);\r\n                }\r\n                else {\r\n                    // The assumed result is false, therefore we narrow assuming each operand to be false.\r\n                    return narrowType(narrowType(type, expr.left, /*assumeTrue*/ false), expr.right, /*assumeTrue*/ false);\r\n                }\r\n            }\r\n\r\n            function narrowTypeByInstanceof(type: Type, expr: BinaryExpression, assumeTrue: boolean): Type {\r\n                // Check that assumed result is true and we have variable symbol on the left\r\n                if (!assumeTrue || expr.left.kind !== SyntaxKind.Identifier || getResolvedSymbol(<Identifier>expr.left) !== symbol) {\r\n                    return type;\r\n                }\r\n                // Check that right operand is a function type with a prototype property\r\n                var rightType = checkExpression(expr.right);\r\n                if (!isTypeSubtypeOf(rightType, globalFunctionType)) {\r\n                    return type;\r\n                }\r\n                var prototypeProperty = getPropertyOfType(rightType, \"prototype\");\r\n                if (!prototypeProperty) {\r\n                    return type;\r\n                }\r\n                var prototypeType = getTypeOfSymbol(prototypeProperty);\r\n                // Narrow to type of prototype property if it is a subtype of current type\r\n                return isTypeSubtypeOf(prototypeType, type) ? prototypeType : type;\r\n            }\r\n\r\n            // Narrow the given type based on the given expression having the assumed boolean value\r\n            function narrowType(type: Type, expr: Expression, assumeTrue: boolean): Type {\r\n                switch (expr.kind) {\r\n                    case SyntaxKind.ParenExpression:\r\n                        return narrowType(type, (<ParenExpression>expr).expression, assumeTrue);\r\n                    case SyntaxKind.BinaryExpression:\r\n                        var operator = (<BinaryExpression>expr).operator;\r\n                        if (operator === SyntaxKind.EqualsEqualsEqualsToken || operator === SyntaxKind.ExclamationEqualsEqualsToken) {\r\n                            return narrowTypeByEquality(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        else if (operator === SyntaxKind.AmpersandAmpersandToken) {\r\n                            return narrowTypeByAnd(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        else if (operator === SyntaxKind.BarBarToken) {\r\n                            return narrowTypeByOr(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        else if (operator === SyntaxKind.InstanceOfKeyword) {\r\n                            return narrowTypeByInstanceof(type, <BinaryExpression>expr, assumeTrue);\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.PrefixOperator:\r\n                        if ((<UnaryExpression>expr).operator === SyntaxKind.ExclamationToken) {\r\n                            return narrowType(type, (<UnaryExpression>expr).operand, !assumeTrue);\r\n                        }\r\n                        break;\r\n                }\r\n                return type;\r\n            }\r\n        }\r\n\r\n        function checkIdentifier(node: Identifier): Type {\r\n            var symbol = getResolvedSymbol(node);\r\n\r\n            if (symbol.flags & SymbolFlags.Import) {\r\n                // Mark the import as referenced so that we emit it in the final .js file.\r\n                // exception: identifiers that appear in type queries\r\n                getSymbolLinks(symbol).referenced = !isInTypeQuery(node);\r\n            }\r\n\r\n            checkCollisionWithCapturedSuperVariable(node, node);\r\n            checkCollisionWithCapturedThisVariable(node, node);\r\n            checkCollisionWithIndexVariableInGeneratedCode(node, node);\r\n\r\n            return getNarrowedTypeOfSymbol(getExportSymbolOfValueSymbolIfExported(symbol), node);\r\n        }\r\n\r\n        function captureLexicalThis(node: Node, container: Node): void {\r\n            var classNode = container.parent && container.parent.kind === SyntaxKind.ClassDeclaration ? container.parent : undefined;\r\n            getNodeLinks(node).flags |= NodeCheckFlags.LexicalThis;\r\n            if (container.kind === SyntaxKind.Property || container.kind === SyntaxKind.Constructor) {\r\n                getNodeLinks(classNode).flags |= NodeCheckFlags.CaptureThis;\r\n            }\r\n            else {\r\n                getNodeLinks(container).flags |= NodeCheckFlags.CaptureThis;\r\n            }\r\n        }\r\n\r\n        function checkThisExpression(node: Node): Type {\r\n            // Stop at the first arrow function so that we can\r\n            // tell whether 'this' needs to be captured.\r\n            var container = getThisContainer(node, /* includeArrowFunctions */ true);\r\n            var needToCaptureLexicalThis = false;\r\n\r\n            // Now skip arrow functions to get the \"real\" owner of 'this'.\r\n            if (container.kind === SyntaxKind.ArrowFunction) {\r\n                container = getThisContainer(container, /* includeArrowFunctions */ false);\r\n                needToCaptureLexicalThis = true;\r\n            }\r\n\r\n            switch (container.kind) {\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    error(node, Diagnostics.this_cannot_be_referenced_in_a_module_body);\r\n                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    break;\r\n                case SyntaxKind.EnumDeclaration:\r\n                    error(node, Diagnostics.this_cannot_be_referenced_in_current_location);\r\n                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    break;\r\n                case SyntaxKind.Constructor:\r\n                    if (isInConstructorArgumentInitializer(node, container)) {\r\n                        error(node, Diagnostics.this_cannot_be_referenced_in_constructor_arguments);\r\n                        // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    }\r\n                    break;\r\n                case SyntaxKind.Property:\r\n                    if (container.flags & NodeFlags.Static) {\r\n                        error(node, Diagnostics.this_cannot_be_referenced_in_a_static_property_initializer);\r\n                        // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if (needToCaptureLexicalThis) {\r\n                captureLexicalThis(node, container);\r\n            }\r\n\r\n            var classNode = container.parent && container.parent.kind === SyntaxKind.ClassDeclaration ? container.parent : undefined;\r\n            if (classNode) {\r\n                var symbol = getSymbolOfNode(classNode);\r\n                return container.flags & NodeFlags.Static ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol);\r\n            }\r\n            return anyType;\r\n        }\r\n\r\n        function getSuperContainer(node: Node): Node {\r\n            while (true) {\r\n                node = node.parent;\r\n                if (!node) return node;\r\n                switch (node.kind) {\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.ArrowFunction:\r\n                    case SyntaxKind.Property:\r\n                    case SyntaxKind.Method:\r\n                    case SyntaxKind.Constructor:\r\n                    case SyntaxKind.GetAccessor:\r\n                    case SyntaxKind.SetAccessor:\r\n                        return node;\r\n                }\r\n            }\r\n        }\r\n\r\n        function isInConstructorArgumentInitializer(node: Node, constructorDecl: Node): boolean {\r\n            for (var n = node; n && n !== constructorDecl; n = n.parent) {\r\n                if (n.kind === SyntaxKind.Parameter) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function checkSuperExpression(node: Node): Type {\r\n            var isCallExpression = node.parent.kind === SyntaxKind.CallExpression && (<CallExpression>node.parent).func === node;\r\n            var enclosingClass = <ClassDeclaration>getAncestor(node, SyntaxKind.ClassDeclaration);\r\n            var baseClass: Type;\r\n            if (enclosingClass && enclosingClass.baseType) {\r\n                var classType = <InterfaceType>getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClass));\r\n                baseClass = classType.baseTypes.length && classType.baseTypes[0];\r\n            }\r\n\r\n            if (!baseClass) {\r\n                error(node, Diagnostics.super_can_only_be_referenced_in_a_derived_class);\r\n                return unknownType;\r\n            }\r\n\r\n            var container = getSuperContainer(node);\r\n\r\n            if (container) {\r\n                var canUseSuperExpression = false;\r\n                if (isCallExpression) {\r\n                    // TS 1.0 SPEC (April 2014): 4.8.1\r\n                    // Super calls are only permitted in constructors of derived classes\r\n                    canUseSuperExpression = container.kind === SyntaxKind.Constructor;\r\n                }\r\n                else {\r\n                    // TS 1.0 SPEC (April 2014)\r\n                    // 'super' property access is allowed\r\n                    // - In a constructor, instance member function, instance member accessor, or instance member variable initializer where this references a derived class instance\r\n                    // - In a static member function or static member accessor\r\n\r\n                    // super property access might appear in arrow functions with arbitrary deep nesting\r\n                    var needToCaptureLexicalThis = false;\r\n                    while (container && container.kind === SyntaxKind.ArrowFunction) {\r\n                        container = getSuperContainer(container);\r\n                        needToCaptureLexicalThis = true;\r\n                    }\r\n\r\n                    // topmost container must be something that is directly nested in the class declaration\r\n                    if (container && container.parent && container.parent.kind === SyntaxKind.ClassDeclaration) {\r\n                        if (container.flags & NodeFlags.Static) {\r\n                            canUseSuperExpression =\r\n                                container.kind === SyntaxKind.Method ||\r\n                                container.kind === SyntaxKind.GetAccessor ||\r\n                                container.kind === SyntaxKind.SetAccessor;\r\n                        }\r\n                        else {\r\n                            canUseSuperExpression =\r\n                                container.kind === SyntaxKind.Method ||\r\n                                container.kind === SyntaxKind.GetAccessor ||\r\n                                container.kind === SyntaxKind.SetAccessor ||\r\n                                container.kind === SyntaxKind.Property ||\r\n                                container.kind === SyntaxKind.Constructor;\r\n                        }\r\n                    }                    \r\n                }\r\n\r\n                if (canUseSuperExpression) {\r\n                    var returnType: Type;\r\n\r\n                    if ((container.flags & NodeFlags.Static) || isCallExpression) {\r\n                        getNodeLinks(node).flags |= NodeCheckFlags.SuperStatic;\r\n                        returnType = getTypeOfSymbol(baseClass.symbol);\r\n                    }\r\n                    else {\r\n                        getNodeLinks(node).flags |= NodeCheckFlags.SuperInstance;\r\n                        returnType = baseClass;\r\n                    }\r\n\r\n                    if (container.kind === SyntaxKind.Constructor && isInConstructorArgumentInitializer(node, container)) {\r\n                        // issue custom error message for super property access in constructor arguments (to be aligned with old compiler)\r\n                        error(node, Diagnostics.super_cannot_be_referenced_in_constructor_arguments);\r\n                        returnType = unknownType;\r\n                    }\r\n\r\n                    if (!isCallExpression && needToCaptureLexicalThis) {\r\n                        // call expressions are allowed only in constructors so they should always capture correct 'this'\r\n                        // super property access expressions can also appear in arrow functions -\r\n                        // in this case they should also use correct lexical this\r\n                        captureLexicalThis(node.parent, container);\r\n                    }\r\n\r\n                    return returnType;\r\n                }\r\n            }\r\n\r\n            if (isCallExpression) {\r\n                error(node, Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);\r\n            }\r\n            else {\r\n                error(node, Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);\r\n            }\r\n\r\n            return unknownType;\r\n        }\r\n\r\n        // Return contextual type of parameter or undefined if no contextual type is available\r\n        function getContextuallyTypedParameterType(parameter: ParameterDeclaration): Type {\r\n            var func = <FunctionDeclaration>parameter.parent;\r\n            if (func.kind === SyntaxKind.FunctionExpression || func.kind === SyntaxKind.ArrowFunction) {\r\n                if (isContextSensitiveExpression(func)) {\r\n                    var contextualSignature = getContextualSignature(func);\r\n                    if (contextualSignature) {\r\n\r\n                        var funcHasRestParameters = hasRestParameters(func);\r\n                        var len = func.parameters.length - (funcHasRestParameters ? 1 : 0);\r\n                        var indexOfParameter = indexOf(func.parameters, parameter);\r\n                        if (indexOfParameter < len) {\r\n                            return getTypeAtPosition(contextualSignature, indexOfParameter);\r\n                        }\r\n\r\n                        // If last parameter is contextually rest parameter get its type\r\n                        if (indexOfParameter === (func.parameters.length - 1) && \r\n                            funcHasRestParameters && contextualSignature.hasRestParameter && func.parameters.length >= contextualSignature.parameters.length) {\r\n                            return getTypeOfSymbol(contextualSignature.parameters[contextualSignature.parameters.length - 1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // In a variable, parameter or property declaration with a type annotation, the contextual type of an initializer\r\n        // expression is the type of the variable, parameter or property. In a parameter declaration of a contextually\r\n        // typed function expression, the contextual type of an initializer expression is the contextual type of the\r\n        // parameter.\r\n        function getContextualTypeForInitializerExpression(node: Expression): Type {\r\n            var declaration = <VariableDeclaration>node.parent;\r\n            if (node === declaration.initializer) {\r\n                if (declaration.type) {\r\n                    return getTypeFromTypeNode(declaration.type);\r\n                }\r\n                if (declaration.kind === SyntaxKind.Parameter) {\r\n                    return getContextuallyTypedParameterType(declaration);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualTypeForReturnExpression(node: Expression): Type {\r\n            var func = getContainingFunction(node);\r\n            if (func) {\r\n                // If the containing function has a return type annotation, is a constructor, or is a get accessor whose\r\n                // corresponding set accessor has a type annotation, return statements in the function are contextually typed\r\n                if (func.type || func.kind === SyntaxKind.Constructor || func.kind === SyntaxKind.GetAccessor && getSetAccessorTypeAnnotationNode(<AccessorDeclaration>getDeclarationOfKind(func.symbol, SyntaxKind.SetAccessor))) {\r\n                    return getReturnTypeOfSignature(getSignatureFromDeclaration(func));\r\n                }\r\n                // Otherwise, if the containing function is contextually typed by a function type with exactly one call signature\r\n                // and that call signature is non-generic, return statements are contextually typed by the return type of the signature\r\n                var signature = getContextualSignature(func);\r\n                if (signature) {\r\n                    return getReturnTypeOfSignature(signature);\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // In a typed function call, an argument expression is contextually typed by the type of the corresponding parameter.\r\n        function getContextualTypeForArgument(node: Expression): Type {\r\n            var callExpression = <CallExpression>node.parent;\r\n            var argIndex = indexOf(callExpression.arguments, node);\r\n            if (argIndex >= 0) {\r\n                var signature = getResolvedSignature(callExpression);\r\n                return getTypeAtPosition(signature, argIndex);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getContextualTypeForBinaryOperand(node: Expression): Type {\r\n            var binaryExpression = <BinaryExpression>node.parent;\r\n            var operator = binaryExpression.operator;\r\n            if (operator >= SyntaxKind.FirstAssignment && operator <= SyntaxKind.LastAssignment) {\r\n                // In an assignment expression, the right operand is contextually typed by the type of the left operand.\r\n                if (node === binaryExpression.right) {\r\n                    return checkExpression(binaryExpression.left);\r\n                }\r\n            }\r\n            else if (operator === SyntaxKind.BarBarToken) {\r\n                // When an || expression has a contextual type, the operands are contextually typed by that type. When an ||\r\n                // expression has no contextual type, the right operand is contextually typed by the type of the left operand.\r\n                var type = getContextualType(binaryExpression);\r\n                if (!type && node === binaryExpression.right) {\r\n                    type = checkExpression(binaryExpression.left);\r\n                }\r\n                return type;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // Apply a mapping function to a contextual type and return the resulting type. If the contextual type\r\n        // is a union type, the mapping function is applied to each constituent type and a union of the resulting\r\n        // types is returned.\r\n        function applyToContextualType(type: Type, mapper: (t: Type) => Type): Type {\r\n            if (!(type.flags & TypeFlags.Union)) {\r\n                return mapper(type);\r\n            }\r\n            var types = (<UnionType>type).types;\r\n            var mappedType: Type;\r\n            var mappedTypes: Type[];\r\n            for (var i = 0; i < types.length; i++) {\r\n                var t = mapper(types[i]);\r\n                if (t) {\r\n                    if (!mappedType) {\r\n                        mappedType = t;\r\n                    }\r\n                    else if (!mappedTypes) {\r\n                        mappedTypes = [mappedType, t];\r\n                    }\r\n                    else {\r\n                        mappedTypes.push(t);\r\n                    }\r\n                }\r\n            }\r\n            return mappedTypes ? getUnionType(mappedTypes) : mappedType;\r\n        }\r\n\r\n        function getTypeOfPropertyOfContextualType(type: Type, name: string) {\r\n            return applyToContextualType(type, t => {\r\n                var prop = getPropertyOfObjectType(t, name);\r\n                return prop ? getTypeOfSymbol(prop) : undefined;\r\n            });\r\n        }\r\n\r\n        function getIndexTypeOfContextualType(type: Type, kind: IndexKind) {\r\n            return applyToContextualType(type, t => getIndexTypeOfObjectOrUnionType(t, kind));\r\n        }\r\n\r\n        // Return true if the given contextual type is a tuple-like type\r\n        function contextualTypeIsTupleType(type: Type): boolean {\r\n            return !!(type.flags & TypeFlags.Union ? forEach((<UnionType>type).types, t => getPropertyOfObjectType(t, \"0\")) : getPropertyOfObjectType(type, \"0\"));\r\n        }\r\n\r\n        // Return true if the given contextual type provides an index signature of the given kind\r\n        function contextualTypeHasIndexSignature(type: Type, kind: IndexKind): boolean {\r\n            return !!(type.flags & TypeFlags.Union ? forEach((<UnionType>type).types, t => getIndexTypeOfObjectOrUnionType(t, kind)) : getIndexTypeOfObjectOrUnionType(type, kind));\r\n        }\r\n\r\n        // In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of\r\n        // the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one\r\n        // exists. Otherwise, it is the type of the string index signature in T, if one exists.\r\n        function getContextualTypeForPropertyExpression(node: Expression): Type {\r\n            var declaration = <PropertyDeclaration>node.parent;\r\n            var objectLiteral = <ObjectLiteral>declaration.parent;\r\n            var type = getContextualType(objectLiteral);\r\n            var name = declaration.name.text;\r\n            if (type && name) {\r\n                return getTypeOfPropertyOfContextualType(type, name) ||\r\n                    isNumericName(name) && getIndexTypeOfContextualType(type, IndexKind.Number) ||\r\n                    getIndexTypeOfContextualType(type, IndexKind.String);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // In an array literal contextually typed by a type T, the contextual type of an element expression at index N is\r\n        // the type of the property with the numeric name N in T, if one exists. Otherwise, it is the type of the numeric\r\n        // index signature in T, if one exists.\r\n        function getContextualTypeForElementExpression(node: Expression): Type {\r\n            var arrayLiteral = <ArrayLiteral>node.parent;\r\n            var type = getContextualType(arrayLiteral);\r\n            if (type) {\r\n                var index = indexOf(arrayLiteral.elements, node);\r\n                return getTypeOfPropertyOfContextualType(type, \"\" + index) || getIndexTypeOfContextualType(type, IndexKind.Number);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.\r\n        function getContextualTypeForConditionalOperand(node: Expression): Type {\r\n            var conditional = <ConditionalExpression>node.parent;\r\n            return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional) : undefined; \r\n        }\r\n\r\n        // Return the contextual type for a given expression node. During overload resolution, a contextual type may temporarily\r\n        // be \"pushed\" onto a node using the contextualType property.\r\n        function getContextualType(node: Expression): Type {\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return undefined;\r\n            }\r\n            if (node.contextualType) {\r\n                return node.contextualType;\r\n            }\r\n            var parent = node.parent;\r\n            switch (parent.kind) {\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.Parameter:\r\n                case SyntaxKind.Property:\r\n                    return getContextualTypeForInitializerExpression(node);\r\n                case SyntaxKind.ArrowFunction:\r\n                case SyntaxKind.ReturnStatement:\r\n                    return getContextualTypeForReturnExpression(node);\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.NewExpression:\r\n                    return getContextualTypeForArgument(node);\r\n                case SyntaxKind.TypeAssertion:\r\n                    return getTypeFromTypeNode((<TypeAssertion>parent).type);\r\n                case SyntaxKind.BinaryExpression:\r\n                    return getContextualTypeForBinaryOperand(node);\r\n                case SyntaxKind.PropertyAssignment:\r\n                    return getContextualTypeForPropertyExpression(node);\r\n                case SyntaxKind.ArrayLiteral:\r\n                    return getContextualTypeForElementExpression(node);\r\n                case SyntaxKind.ConditionalExpression:\r\n                    return getContextualTypeForConditionalOperand(node);\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // If the given type is an object or union type, if that type has a single signature, and if\r\n        // that signature is non-generic, return the signature. Otherwise return undefined.\r\n        function getNonGenericSignature(type: Type): Signature {\r\n            var signatures = getSignaturesOfObjectOrUnionType(type, SignatureKind.Call);\r\n            if (signatures.length === 1) {\r\n                var signature = signatures[0];\r\n                if (!signature.typeParameters) {\r\n                    return signature;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the contextual signature for a given expression node. A contextual type provides a\r\n        // contextual signature if it has a single call signature and if that call signature is non-generic.\r\n        // If the contextual type is a union type and each constituent type that has a contextual signature\r\n        // provides the same contextual signature, then the union type provides that contextual signature.\r\n        function getContextualSignature(node: Expression): Signature {\r\n            var type = getContextualType(node);\r\n            if (!type) {\r\n                return undefined;\r\n            }\r\n            if (!(type.flags & TypeFlags.Union)) {\r\n                return getNonGenericSignature(type);\r\n            }\r\n            var result: Signature;\r\n            var types = (<UnionType>type).types;\r\n            for (var i = 0; i < types.length; i++) {\r\n                var signature = getNonGenericSignature(types[i]);\r\n                if (signature) {\r\n                    if (!result) {\r\n                        result = signature;\r\n                    }\r\n                    else if (!compareSignatures(result, signature, /*compareReturnTypes*/ true, isTypeIdenticalTo)) {\r\n                        return undefined;\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Presence of a contextual type mapper indicates inferential typing, except the identityMapper object is\r\n        // used as a special marker for other purposes.\r\n        function isInferentialContext(mapper: TypeMapper) {\r\n            return mapper && mapper !== identityMapper;\r\n        }\r\n\r\n        function checkArrayLiteral(node: ArrayLiteral, contextualMapper?: TypeMapper): Type {\r\n            var elements = node.elements;\r\n            if (!elements.length) {\r\n                return createArrayType(undefinedType);\r\n            }\r\n            var elementTypes = map(elements, e => checkExpression(e, contextualMapper));\r\n            var contextualType = getContextualType(node);\r\n            if (contextualType && contextualTypeIsTupleType(contextualType)) {\r\n                return createTupleType(elementTypes);\r\n            }\r\n            return createArrayType(getUnionType(elementTypes));\r\n        }\r\n\r\n        function isNumericName(name: string) {\r\n            // The intent of numeric names is that\r\n            //     - they are names with text in a numeric form, and that\r\n            //     - setting properties/indexing with them is always equivalent to doing so with the numeric literal 'numLit',\r\n            //         acquired by applying the abstract 'ToNumber' operation on the name's text.\r\n            //\r\n            // The subtlety is in the latter portion, as we cannot reliably say that anything that looks like a numeric literal is a numeric name.\r\n            // In fact, it is the case that the text of the name must be equal to 'ToString(numLit)' for this to hold.\r\n            //\r\n            // Consider the property name '\"0xF00D\"'. When one indexes with '0xF00D', they are actually indexing with the value of 'ToString(0xF00D)'\r\n            // according to the ECMAScript specification, so it is actually as if the user indexed with the string '\"61453\"'.\r\n            // Thus, the text of all numeric literals equivalent to '61543' such as '0xF00D', '0xf00D', '0170015', etc. are not valid numeric names\r\n            // because their 'ToString' representation is not equal to their original text.\r\n            // This is motivated by ECMA-262 sections 9.3.1, 9.8.1, 11.1.5, and 11.2.1.\r\n            //\r\n            // Here, we test whether 'ToString(ToNumber(name))' is exactly equal to 'name'.\r\n            // The '+' prefix operator is equivalent here to applying the abstract ToNumber operation.\r\n            // Applying the 'toString()' method on a number gives us the abstract ToString operation on a number.\r\n            //\r\n            // Note that this accepts the values 'Infinity', '-Infinity', and 'NaN', and that this is intentional.\r\n            // This is desired behavior, because when indexing with them as numeric entities, you are indexing\r\n            // with the strings '\"Infinity\"', '\"-Infinity\"', and '\"NaN\"' respectively.\r\n            return (+name).toString() === name;\r\n        }\r\n\r\n        function checkObjectLiteral(node: ObjectLiteral, contextualMapper?: TypeMapper): Type {\r\n            var members = node.symbol.members;\r\n            var properties: SymbolTable = {};\r\n            var contextualType = getContextualType(node);\r\n            for (var id in members) {\r\n                if (hasProperty(members, id)) {\r\n                    var member = members[id];\r\n                    if (member.flags & SymbolFlags.Property) {\r\n                        var type = checkExpression((<PropertyDeclaration>member.declarations[0]).initializer, contextualMapper);\r\n                        var prop = <TransientSymbol>createSymbol(SymbolFlags.Property | SymbolFlags.Transient | member.flags, member.name);\r\n                        prop.declarations = member.declarations;\r\n                        prop.parent = member.parent;\r\n                        if (member.valueDeclaration) prop.valueDeclaration = member.valueDeclaration;\r\n                        prop.type = type;\r\n                        prop.target = member;\r\n                        member = prop;\r\n                    }\r\n                    else {\r\n                        // TypeScript 1.0 spec (April 2014)\r\n                        // A get accessor declaration is processed in the same manner as \r\n                        // an ordinary function declaration(section 6.1) with no parameters.\r\n                        // A set accessor declaration is processed in the same manner \r\n                        // as an ordinary function declaration with a single parameter and a Void return type.\r\n                        var getAccessor = <AccessorDeclaration>getDeclarationOfKind(member, SyntaxKind.GetAccessor);\r\n                        if (getAccessor) {\r\n                            checkAccessorDeclaration(getAccessor);\r\n                        }\r\n\r\n                        var setAccessor = <AccessorDeclaration>getDeclarationOfKind(member, SyntaxKind.SetAccessor);\r\n                        if (setAccessor) {\r\n                            checkAccessorDeclaration(setAccessor);\r\n                        }\r\n                    }\r\n                    properties[member.name] = member;\r\n                }\r\n            }\r\n            var stringIndexType = getIndexType(IndexKind.String);\r\n            var numberIndexType = getIndexType(IndexKind.Number);\r\n            return createAnonymousType(node.symbol, properties, emptyArray, emptyArray, stringIndexType, numberIndexType);\r\n\r\n            function getIndexType(kind: IndexKind) {\r\n                if (contextualType && contextualTypeHasIndexSignature(contextualType, kind)) {\r\n                    var propTypes: Type[] = [];\r\n                    for (var id in properties) {\r\n                        if (hasProperty(properties, id)) {\r\n                            if (kind === IndexKind.String || isNumericName(id)) {\r\n                                var type = getTypeOfSymbol(properties[id]);\r\n                                if (!contains(propTypes, type)) {\r\n                                    propTypes.push(type);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return propTypes.length ? getUnionType(propTypes) : undefinedType;\r\n                }\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        // If a symbol is a synthesized symbol with no value declaration, we assume it is a property. Example of this are the synthesized\r\n        // '.prototype' property as well as synthesized tuple index properties.\r\n        function getDeclarationKindFromSymbol(s: Symbol) {\r\n            return s.valueDeclaration ? s.valueDeclaration.kind : SyntaxKind.Property;\r\n        }\r\n\r\n        function getDeclarationFlagsFromSymbol(s: Symbol) {\r\n            return s.valueDeclaration ? s.valueDeclaration.flags : s.flags & SymbolFlags.Prototype ? NodeFlags.Public | NodeFlags.Static : 0;\r\n        }\r\n\r\n        function checkClassPropertyAccess(node: PropertyAccess, type: Type, prop: Symbol) {\r\n            var flags = getDeclarationFlagsFromSymbol(prop);\r\n            // Public properties are always accessible\r\n            if (!(flags & (NodeFlags.Private | NodeFlags.Protected))) {\r\n                return;\r\n            }\r\n            // Property is known to be private or protected at this point\r\n            // Get the declaring and enclosing class instance types\r\n            var enclosingClassDeclaration = getAncestor(node, SyntaxKind.ClassDeclaration);\r\n            var enclosingClass = enclosingClassDeclaration ? <InterfaceType>getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClassDeclaration)) : undefined;\r\n            var declaringClass = <InterfaceType>getDeclaredTypeOfSymbol(prop.parent);\r\n            // Private property is accessible if declaring and enclosing class are the same\r\n            if (flags & NodeFlags.Private) {\r\n                if (declaringClass !== enclosingClass) {\r\n                    error(node, Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(declaringClass));\r\n                }\r\n                return;\r\n            }\r\n            // Property is known to be protected at this point\r\n            // All protected properties of a supertype are accessible in a super access\r\n            if (node.left.kind === SyntaxKind.SuperKeyword) {\r\n                return;\r\n            }\r\n            // A protected property is accessible in the declaring class and classes derived from it\r\n            if (!enclosingClass || !hasBaseType(enclosingClass, declaringClass)) {\r\n                error(node, Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(declaringClass));\r\n                return;\r\n            }\r\n            // No further restrictions for static properties\r\n            if (flags & NodeFlags.Static) {\r\n                return;\r\n            }\r\n            // An instance property must be accessed through an instance of the enclosing class\r\n            if (!(getTargetType(type).flags & (TypeFlags.Class | TypeFlags.Interface) && hasBaseType(<InterfaceType>type, enclosingClass))) {\r\n                error(node, Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1, symbolToString(prop), typeToString(enclosingClass));\r\n            }\r\n        }\r\n\r\n        function checkPropertyAccess(node: PropertyAccess) {\r\n            var type = checkExpression(node.left);\r\n            if (type === unknownType) return type;\r\n            if (type !== anyType) {\r\n                var apparentType = getApparentType(getWidenedType(type));\r\n                if (apparentType === unknownType) {\r\n                    // handle cases when type is Type parameter with invalid constraint\r\n                    return unknownType;\r\n                }\r\n                var prop = getPropertyOfType(apparentType, node.right.text);\r\n                if (!prop) {\r\n                    if (node.right.text) {\r\n                        error(node.right, Diagnostics.Property_0_does_not_exist_on_type_1, identifierToString(node.right), typeToString(type));\r\n                    }\r\n                    return unknownType;\r\n                }\r\n                getNodeLinks(node).resolvedSymbol = prop;\r\n                if (prop.parent && prop.parent.flags & SymbolFlags.Class) {\r\n                    // TS 1.0 spec (April 2014): 4.8.2\r\n                    // - In a constructor, instance member function, instance member accessor, or \r\n                    //   instance member variable initializer where this references a derived class instance, \r\n                    //   a super property access is permitted and must specify a public instance member function of the base class.\r\n                    // - In a static member function or static member accessor \r\n                    //   where this references the constructor function object of a derived class, \r\n                    //   a super property access is permitted and must specify a public static member function of the base class.\r\n                    if (node.left.kind === SyntaxKind.SuperKeyword && getDeclarationKindFromSymbol(prop) !== SyntaxKind.Method) {\r\n                        error(node.right, Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);\r\n                    }\r\n                    else {\r\n                        checkClassPropertyAccess(node, type, prop);\r\n                    }\r\n                }\r\n                return getTypeOfSymbol(prop);\r\n            }\r\n            return anyType;\r\n        }\r\n\r\n        function isValidPropertyAccess(node: PropertyAccess, propertyName: string): boolean {\r\n            var type = checkExpression(node.left);\r\n            if (type !== unknownType && type !== anyType) {\r\n                var prop = getPropertyOfType(getWidenedType(type), propertyName);\r\n                if (prop && prop.parent && prop.parent.flags & SymbolFlags.Class) {\r\n                    if (node.left.kind === SyntaxKind.SuperKeyword && getDeclarationKindFromSymbol(prop) !== SyntaxKind.Method) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        var diagnosticsCount = diagnostics.length;\r\n                        checkClassPropertyAccess(node, type, prop);\r\n                        return diagnostics.length === diagnosticsCount\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkIndexedAccess(node: IndexedAccess): Type {\r\n            // Obtain base constraint such that we can bail out if the constraint is an unknown type\r\n            var objectType = getApparentType(checkExpression(node.object));\r\n            var indexType = checkExpression(node.index);\r\n\r\n            if (objectType === unknownType) return unknownType;\r\n\r\n            // TypeScript 1.0 spec (April 2014): 4.10 Property Access\r\n            // - If IndexExpr is a string literal or a numeric literal and ObjExpr's apparent type has a property with the name \r\n            //    given by that literal(converted to its string representation in the case of a numeric literal), the property access is of the type of that property.\r\n            // - Otherwise, if ObjExpr's apparent type has a numeric index signature and IndexExpr is of type Any, the Number primitive type, or an enum type, \r\n            //    the property access is of the type of that index signature.\r\n            // - Otherwise, if ObjExpr's apparent type has a string index signature and IndexExpr is of type Any, the String or Number primitive type, or an enum type, \r\n            //    the property access is of the type of that index signature.\r\n            // - Otherwise, if IndexExpr is of type Any, the String or Number primitive type, or an enum type, the property access is of type Any.\r\n\r\n            // See if we can index as a property.\r\n            if (node.index.kind === SyntaxKind.StringLiteral || node.index.kind === SyntaxKind.NumericLiteral) {\r\n                var name = (<LiteralExpression>node.index).text;\r\n                var prop = getPropertyOfType(objectType, name);\r\n                if (prop) {\r\n                    return getTypeOfSymbol(prop);\r\n                }\r\n            }\r\n\r\n            // Check for compatible indexer types.\r\n            if (indexType.flags & (TypeFlags.Any | TypeFlags.StringLike | TypeFlags.NumberLike)) { \r\n\r\n                // Try to use a number indexer.\r\n                if (indexType.flags & (TypeFlags.Any | TypeFlags.NumberLike)) {\r\n                    var numberIndexType = getIndexTypeOfType(objectType, IndexKind.Number);\r\n                    if (numberIndexType) {\r\n                        return numberIndexType;\r\n                    }\r\n                }\r\n\r\n                // Try to use string indexing.\r\n                var stringIndexType = getIndexTypeOfType(objectType, IndexKind.String);\r\n                if (stringIndexType) {\r\n                    return stringIndexType;\r\n                }\r\n\r\n                // Fall back to any.\r\n                if (compilerOptions.noImplicitAny && objectType !== anyType) {\r\n                    error(node, Diagnostics.Index_signature_of_object_type_implicitly_has_an_any_type);\r\n                }\r\n\r\n                return anyType;\r\n            }\r\n\r\n            // REVIEW: Users should know the type that was actually used.\r\n            error(node, Diagnostics.An_index_expression_argument_must_be_of_type_string_number_or_any);\r\n\r\n            return unknownType;\r\n        }\r\n\r\n        function resolveUntypedCall(node: CallExpression): Signature {\r\n            forEach(node.arguments, argument => {\r\n                checkExpression(argument);\r\n            });\r\n            return anySignature;\r\n        }\r\n\r\n        function resolveErrorCall(node: CallExpression): Signature {\r\n            resolveUntypedCall(node);\r\n            return unknownSignature;\r\n        }\r\n\r\n        function signatureHasCorrectArity(node: CallExpression, signature: Signature): boolean {\r\n            if (!node.arguments) {\r\n                // This only happens when we have something of the form:\r\n                //     new C\r\n                //\r\n                return signature.minArgumentCount === 0;\r\n            }\r\n\r\n            // For IDE scenarios, since we may have an incomplete call, we make two modifications\r\n            // to arity checking.\r\n            //    1. A trailing comma is tantamount to adding another argument\r\n            //    2. If the call is incomplete (no closing paren) allow fewer arguments than expected\r\n            var args = node.arguments;\r\n            var numberOfArgs = args.hasTrailingComma ? args.length + 1 : args.length;\r\n            var hasTooManyArguments = !signature.hasRestParameter && numberOfArgs > signature.parameters.length;\r\n            var hasRightNumberOfTypeArguments = !node.typeArguments ||\r\n                (signature.typeParameters && node.typeArguments.length === signature.typeParameters.length);\r\n\r\n            if (hasTooManyArguments || !hasRightNumberOfTypeArguments) {\r\n                return false;\r\n            }\r\n\r\n            // If we are missing the close paren, the call is incomplete, and we should skip\r\n            // the lower bound check.\r\n            var callIsIncomplete = args.end === node.end;\r\n            var hasEnoughArguments = numberOfArgs >= signature.minArgumentCount;\r\n            return callIsIncomplete || hasEnoughArguments;\r\n        }\r\n\r\n        // If type has a single call signature and no other members, return that signature. Otherwise, return undefined.\r\n        function getSingleCallSignature(type: Type): Signature {\r\n            if (type.flags & TypeFlags.ObjectType) {\r\n                var resolved = resolveObjectOrUnionTypeMembers(<ObjectType>type);\r\n                if (resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0 &&\r\n                    resolved.properties.length === 0 && !resolved.stringIndexType && !resolved.numberIndexType) {\r\n                    return resolved.callSignatures[0];\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)\r\n        function instantiateSignatureInContextOf(signature: Signature, contextualSignature: Signature, contextualMapper: TypeMapper): Signature {\r\n            var context = createInferenceContext(signature.typeParameters, /*inferUnionTypes*/ true);\r\n            forEachMatchingParameterType(contextualSignature, signature, (source, target) => {\r\n                // Type parameters from outer context referenced by source type are fixed by instantiation of the source type\r\n                inferTypes(context, instantiateType(source, contextualMapper), target);\r\n            });\r\n            return getSignatureInstantiation(signature, getInferredTypes(context));\r\n        }\r\n\r\n        function inferTypeArguments(signature: Signature, args: Expression[], excludeArgument?: boolean[]): InferenceContext {\r\n            var typeParameters = signature.typeParameters;\r\n            var context = createInferenceContext(typeParameters, /*inferUnionTypes*/ false);\r\n            var mapper = createInferenceMapper(context);\r\n            // First infer from arguments that are not context sensitive\r\n            for (var i = 0; i < args.length; i++) {\r\n                if (args[i].kind === SyntaxKind.OmittedExpression) {\r\n                    continue;\r\n                }\r\n                if (!excludeArgument || excludeArgument[i] === undefined) {\r\n                    var parameterType = getTypeAtPosition(signature, i);\r\n                    inferTypes(context, checkExpressionWithContextualType(args[i], parameterType, mapper), parameterType);\r\n                }\r\n            }\r\n            // Next, infer from those context sensitive arguments that are no longer excluded\r\n            if (excludeArgument) {\r\n                for (var i = 0; i < args.length; i++) {\r\n                    if (args[i].kind === SyntaxKind.OmittedExpression) {\r\n                        continue;\r\n                    }\r\n                    if (excludeArgument[i] === false) {\r\n                        var parameterType = getTypeAtPosition(signature, i);\r\n                        inferTypes(context, checkExpressionWithContextualType(args[i], parameterType, mapper), parameterType);\r\n                    }\r\n                }\r\n            }\r\n            var inferredTypes = getInferredTypes(context);\r\n            // Inference has failed if the inferenceFailureType type is in list of inferences\r\n            context.failedTypeParameterIndex = indexOf(inferredTypes, inferenceFailureType);\r\n\r\n            // Wipe out the inferenceFailureType from the array so that error recovery can work properly\r\n            for (var i = 0; i < inferredTypes.length; i++) {\r\n                if (inferredTypes[i] === inferenceFailureType) {\r\n                    inferredTypes[i] = unknownType;\r\n                }\r\n            }\r\n\r\n            return context;\r\n        }\r\n\r\n        function checkTypeArguments(signature: Signature, typeArguments: TypeNode[], typeArgumentResultTypes: Type[], reportErrors: boolean): boolean {\r\n            var typeParameters = signature.typeParameters;\r\n            var typeArgumentsAreAssignable = true;\r\n            for (var i = 0; i < typeParameters.length; i++) {\r\n                var typeArgNode = typeArguments[i];\r\n                var typeArgument = getTypeFromTypeNode(typeArgNode);\r\n                // Do not push on this array! It has a preallocated length\r\n                typeArgumentResultTypes[i] = typeArgument;\r\n                if (typeArgumentsAreAssignable /* so far */) {\r\n                    var constraint = getConstraintOfTypeParameter(typeParameters[i]);\r\n                    if (constraint) {\r\n                        typeArgumentsAreAssignable = checkTypeAssignableTo(typeArgument, constraint, reportErrors ? typeArgNode : undefined,\r\n                                Diagnostics.Type_0_does_not_satisfy_the_constraint_1);\r\n                    }\r\n                }\r\n            }\r\n            return typeArgumentsAreAssignable;\r\n        }\r\n\r\n        function checkApplicableSignature(node: CallExpression, signature: Signature, relation: Map<boolean>, excludeArgument: boolean[], reportErrors: boolean) {\r\n            if (node.arguments) {\r\n                for (var i = 0; i < node.arguments.length; i++) {\r\n                    var arg = node.arguments[i];\r\n                    if (arg.kind === SyntaxKind.OmittedExpression) {\r\n                        continue;\r\n                    }\r\n                    var paramType = getTypeAtPosition(signature, i);\r\n                    // String literals get string literal types unless we're reporting errors\r\n                    var argType = arg.kind === SyntaxKind.StringLiteral && !reportErrors ?\r\n                        getStringLiteralType(<LiteralExpression>arg) :\r\n                        checkExpressionWithContextualType(arg, paramType, excludeArgument && excludeArgument[i] ? identityMapper : undefined);\r\n                    // Use argument expression as error location when reporting errors\r\n                    var isValidArgument = checkTypeRelatedTo(argType, paramType, relation, reportErrors ? arg : undefined,\r\n                        Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1);\r\n                    if (!isValidArgument) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**  */\r\n        function resolveCall(node: CallExpression, signatures: Signature[], candidatesOutArray: Signature[]): Signature {\r\n            forEach(node.typeArguments, checkSourceElement);\r\n            var candidates = candidatesOutArray || [];\r\n            // collectCandidates fills up the candidates array directly\r\n            collectCandidates();\r\n            if (!candidates.length) {\r\n                error(node, Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);\r\n                return resolveErrorCall(node);\r\n            }\r\n            var args = node.arguments || emptyArray;\r\n            var excludeArgument: boolean[];\r\n            for (var i = 0; i < args.length; i++) {\r\n                if (isContextSensitiveExpression(args[i])) {\r\n                    if (!excludeArgument) excludeArgument = new Array(args.length);\r\n                    excludeArgument[i] = true;\r\n                }\r\n            }\r\n\r\n            // The following variables are captured and modified by calls to chooseOverload.\r\n            // If overload resolution or type argument inference fails, we want to report the\r\n            // best error possible. The best error is one which says that an argument was not\r\n            // assignable to a parameter. This implies that everything else about the overload\r\n            // was fine. So if there is any overload that is only incorrect because of an\r\n            // argument, we will report an error on that one.\r\n            //\r\n            //     function foo(s: string) {}\r\n            //     function foo(n: number) {} // Report argument error on this overload\r\n            //     function foo() {}\r\n            //     foo(true);\r\n            //\r\n            // If none of the overloads even made it that far, there are two possibilities.\r\n            // There was a problem with type arguments for some overload, in which case\r\n            // report an error on that. Or none of the overloads even had correct arity,\r\n            // in which case give an arity error.\r\n            //\r\n            //     function foo<T>(x: T, y: T) {} // Report type argument inference error\r\n            //     function foo() {}\r\n            //     foo(0, true);\r\n            //\r\n            var candidateForArgumentError: Signature;\r\n            var candidateForTypeArgumentError: Signature;\r\n            var resultOfFailedInference: InferenceContext;\r\n            var result: Signature;\r\n\r\n            // Section 4.12.1:\r\n            // if the candidate list contains one or more signatures for which the type of each argument\r\n            // expression is a subtype of each corresponding parameter type, the return type of the first\r\n            // of those signatures becomes the return type of the function call.\r\n            // Otherwise, the return type of the first signature in the candidate list becomes the return\r\n            // type of the function call.\r\n            //\r\n            // Whether the call is an error is determined by assignability of the arguments. The subtype pass\r\n            // is just important for choosing the best signature. So in the case where there is only one\r\n            // signature, the subtype pass is useless. So skipping it is an optimization.\r\n            if (candidates.length > 1) {\r\n                result = chooseOverload(candidates, subtypeRelation, excludeArgument);\r\n            }\r\n            if (!result) {\r\n                // Reinitialize these pointers for round two\r\n                candidateForArgumentError = undefined;\r\n                candidateForTypeArgumentError = undefined;\r\n                resultOfFailedInference = undefined;\r\n                result = chooseOverload(candidates, assignableRelation, excludeArgument);\r\n            }\r\n            if (result) {\r\n                return result;\r\n            }\r\n\r\n            // No signatures were applicable. Now report errors based on the last applicable signature with\r\n            // no arguments excluded from assignability checks.\r\n            // If candidate is undefined, it means that no candidates had a suitable arity. In that case,\r\n            // skip the checkApplicableSignature check.\r\n            if (candidateForArgumentError) {\r\n                // excludeArgument is undefined, in this case also equivalent to [undefined, undefined, ...]\r\n                // The importance of excludeArgument is to prevent us from typing function expression parameters\r\n                // in arguments too early. If possible, we'd like to only type them once we know the correct\r\n                // overload. However, this matters for the case where the call is correct. When the call is\r\n                // an error, we don't need to exclude any arguments, although it would cause no harm to do so.\r\n                checkApplicableSignature(node, candidateForArgumentError, assignableRelation, /*excludeArgument*/ undefined, /*reportErrors*/ true);\r\n            }\r\n            else if (candidateForTypeArgumentError) {\r\n                if (node.typeArguments) {\r\n                    checkTypeArguments(candidateForTypeArgumentError, node.typeArguments, [], /*reportErrors*/ true)\r\n                }\r\n                else {\r\n                    Debug.assert(resultOfFailedInference.failedTypeParameterIndex >= 0);\r\n                    var failedTypeParameter = candidateForTypeArgumentError.typeParameters[resultOfFailedInference.failedTypeParameterIndex];\r\n                    var inferenceCandidates = resultOfFailedInference.inferences[resultOfFailedInference.failedTypeParameterIndex];\r\n\r\n                    var diagnosticChainHead = chainDiagnosticMessages(/*details*/ undefined, // details will be provided by call to reportNoCommonSupertypeError\r\n                        Diagnostics.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\r\n                        typeToString(failedTypeParameter));\r\n\r\n                    reportNoCommonSupertypeError(inferenceCandidates, node.func, diagnosticChainHead);\r\n                }\r\n            }\r\n            else {\r\n                error(node, Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);\r\n            }\r\n\r\n            // No signature was applicable. We have already reported the errors for the invalid signature.\r\n            // If this is a type resolution session, e.g. Language Service, try to get better information that anySignature.\r\n            // Pick the first candidate that matches the arity. This way we can get a contextual type for cases like:\r\n            //  declare function f(a: { xa: number; xb: number; });\r\n            //  f({ |\r\n            if (!fullTypeCheck) {\r\n                for (var i = 0, n = candidates.length; i < n; i++) {\r\n                    if (signatureHasCorrectArity(node, candidates[i])) {\r\n                        return candidates[i];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return resolveErrorCall(node);\r\n\r\n            function chooseOverload(candidates: Signature[], relation: Map<boolean>, excludeArgument: boolean[]) {\r\n                for (var i = 0; i < candidates.length; i++) {\r\n                    if (!signatureHasCorrectArity(node, candidates[i])) {\r\n                        continue;\r\n                    }\r\n\r\n                    var originalCandidate = candidates[i];\r\n                    var inferenceResult: InferenceContext;\r\n\r\n                    while (true) {\r\n                        var candidate = originalCandidate;\r\n                        if (candidate.typeParameters) {\r\n                            var typeArgumentTypes: Type[];\r\n                            var typeArgumentsAreValid: boolean;\r\n                            if (node.typeArguments) {\r\n                                typeArgumentTypes = new Array<Type>(candidate.typeParameters.length);\r\n                                typeArgumentsAreValid = checkTypeArguments(candidate, node.typeArguments, typeArgumentTypes, /*reportErrors*/ false)\r\n                            }\r\n                            else {\r\n                                inferenceResult = inferTypeArguments(candidate, args, excludeArgument);\r\n                                typeArgumentsAreValid = inferenceResult.failedTypeParameterIndex < 0;\r\n                                typeArgumentTypes = inferenceResult.inferredTypes;\r\n                            }\r\n                            if (!typeArgumentsAreValid) {\r\n                                break;\r\n                            }\r\n                            candidate = getSignatureInstantiation(candidate, typeArgumentTypes);\r\n                        }\r\n                        if (!checkApplicableSignature(node, candidate, relation, excludeArgument, /*reportErrors*/ false)) {\r\n                            break;\r\n                        }\r\n                        var index = excludeArgument ? indexOf(excludeArgument, true) : -1;\r\n                        if (index < 0) {\r\n                            return candidate;\r\n                        }\r\n                        excludeArgument[index] = false;\r\n                    }\r\n\r\n                    // A post-mortem of this iteration of the loop. The signature was not applicable,\r\n                    // so we want to track it as a candidate for reporting an error. If the candidate\r\n                    // had no type parameters, or had no issues related to type arguments, we can\r\n                    // report an error based on the arguments. If there was an issue with type\r\n                    // arguments, then we can only report an error based on the type arguments.\r\n                    if (originalCandidate.typeParameters) {\r\n                        var instantiatedCandidate = candidate;\r\n                        if (typeArgumentsAreValid) {\r\n                            candidateForArgumentError = instantiatedCandidate;\r\n                        }\r\n                        else {\r\n                            candidateForTypeArgumentError = originalCandidate;\r\n                            if (!node.typeArguments) {\r\n                                resultOfFailedInference = inferenceResult;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Debug.assert(originalCandidate === candidate);\r\n                        candidateForArgumentError = originalCandidate;\r\n                    }\r\n                }\r\n\r\n                return undefined;\r\n            }\r\n\r\n            // The candidate list orders groups in reverse, but within a group signatures are kept in declaration order\r\n            // A nit here is that we reorder only signatures that belong to the same symbol,\r\n            // so order how inherited signatures are processed is still preserved.\r\n            // interface A { (x: string): void }\r\n            // interface B extends A { (x: 'foo'): string }\r\n            // var b: B;\r\n            // b('foo') // <- here overloads should be processed as [(x:'foo'): string, (x: string): void]\r\n            function collectCandidates(): void {\r\n                var result = candidates;\r\n                var lastParent: Node;\r\n                var lastSymbol: Symbol;\r\n                var cutoffPos: number = 0;\r\n                var pos: number;\r\n                Debug.assert(!result.length);\r\n                for (var i = 0; i < signatures.length; i++) {\r\n                    var signature = signatures[i];\r\n                    var symbol = signature.declaration && getSymbolOfNode(signature.declaration);\r\n                    var parent = signature.declaration && signature.declaration.parent;\r\n                    if (!lastSymbol || symbol === lastSymbol) {\r\n                        if (lastParent && parent === lastParent) {\r\n                            pos++;\r\n                        }\r\n                        else {\r\n                            lastParent = parent;\r\n                            pos = cutoffPos;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // current declaration belongs to a different symbol\r\n                        // set cutoffPos so re-orderings in the future won't change result set from 0 to cutoffPos\r\n                        pos = cutoffPos = result.length;\r\n                        lastParent = parent;\r\n                    }\r\n                    lastSymbol = symbol;\r\n\r\n                    for (var j = result.length; j > pos; j--) {\r\n                        result[j] = result[j - 1];\r\n                    }\r\n                    result[pos] = signature;\r\n                }\r\n            }\r\n        }\r\n\r\n        function resolveCallExpression(node: CallExpression, candidatesOutArray: Signature[]): Signature {\r\n            if (node.func.kind === SyntaxKind.SuperKeyword) {\r\n                var superType = checkSuperExpression(node.func);\r\n                if (superType !== unknownType) {\r\n                    return resolveCall(node, getSignaturesOfType(superType, SignatureKind.Construct), candidatesOutArray);\r\n                }\r\n                return resolveUntypedCall(node);\r\n            }\r\n\r\n            var funcType = checkExpression(node.func);\r\n            var apparentType = getApparentType(funcType);\r\n\r\n            if (apparentType === unknownType) {\r\n                // Another error has already been reported\r\n                return resolveErrorCall(node);\r\n            }\r\n            \r\n            // Technically, this signatures list may be incomplete. We are taking the apparent type,\r\n            // but we are not including call signatures that may have been added to the Object or\r\n            // Function interface, since they have none by default. This is a bit of a leap of faith\r\n            // that the user will not add any.\r\n            var callSignatures = getSignaturesOfType(apparentType, SignatureKind.Call);\r\n\r\n            var constructSignatures = getSignaturesOfType(apparentType, SignatureKind.Construct);\r\n            // TS 1.0 spec: 4.12\r\n            // If FuncExpr is of type Any, or of an object type that has no call or construct signatures\r\n            // but is a subtype of the Function interface, the call is an untyped function call. In an\r\n            // untyped function call no TypeArgs are permitted, Args can be any argument list, no contextual\r\n            // types are provided for the argument expressions, and the result is always of type Any.\r\n            // We exclude union types because we may have a union of function types that happen to have\r\n            // no common signatures.\r\n            if (funcType === anyType || (!callSignatures.length && !constructSignatures.length && !(funcType.flags & TypeFlags.Union) && isTypeAssignableTo(funcType, globalFunctionType))) {\r\n                if (node.typeArguments) {\r\n                    error(node, Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);\r\n                }\r\n                return resolveUntypedCall(node);\r\n            }\r\n            // If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.\r\n            // TypeScript employs overload resolution in typed function calls in order to support functions\r\n            // with multiple call signatures.\r\n            if (!callSignatures.length) {\r\n                if (constructSignatures.length) {\r\n                    error(node, Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\r\n                }\r\n                return resolveErrorCall(node);\r\n            }\r\n            return resolveCall(node, callSignatures, candidatesOutArray);\r\n        }\r\n\r\n        function resolveNewExpression(node: NewExpression, candidatesOutArray: Signature[]): Signature {\r\n            var expressionType = checkExpression(node.func);\r\n\r\n            // TS 1.0 spec: 4.11\r\n            // If ConstructExpr is of type Any, Args can be any argument\r\n            // list and the result of the operation is of type Any.\r\n            if (expressionType === anyType) {\r\n                if (node.typeArguments) {\r\n                    error(node, Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);\r\n                }\r\n                return resolveUntypedCall(node);\r\n            }\r\n\r\n            // If ConstructExpr's apparent type(section 3.8.1) is an object type with one or\r\n            // more construct signatures, the expression is processed in the same manner as a\r\n            // function call, but using the construct signatures as the initial set of candidate\r\n            // signatures for overload resolution.The result type of the function call becomes\r\n            // the result type of the operation.\r\n            expressionType = getApparentType(expressionType);\r\n            if (expressionType === unknownType) {\r\n                // Another error has already been reported\r\n                return resolveErrorCall(node);\r\n            }\r\n\r\n            // Technically, this signatures list may be incomplete. We are taking the apparent type,\r\n            // but we are not including construct signatures that may have been added to the Object or\r\n            // Function interface, since they have none by default. This is a bit of a leap of faith\r\n            // that the user will not add any.\r\n            var constructSignatures = getSignaturesOfType(expressionType, SignatureKind.Construct);\r\n            if (constructSignatures.length) {\r\n                return resolveCall(node, constructSignatures, candidatesOutArray);\r\n            }\r\n\r\n            // If ConstructExpr's apparent type is an object type with no construct signatures but\r\n            // one or more call signatures, the expression is processed as a function call. A compile-time\r\n            // error occurs if the result of the function call is not Void. The type of the result of the\r\n            // operation is Any.\r\n            var callSignatures = getSignaturesOfType(expressionType, SignatureKind.Call);\r\n            if (callSignatures.length) {\r\n                var signature = resolveCall(node, callSignatures, candidatesOutArray);\r\n                if (getReturnTypeOfSignature(signature) !== voidType) {\r\n                    error(node, Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);\r\n                }\r\n                return signature;\r\n            }\r\n\r\n            error(node, Diagnostics.Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature);\r\n            return resolveErrorCall(node);\r\n        }\r\n\r\n        // candidatesOutArray is passed by signature help in the language service, and collectCandidates\r\n        // must fill it up with the appropriate candidate signatures\r\n        function getResolvedSignature(node: CallExpression, candidatesOutArray?: Signature[]): Signature {\r\n            var links = getNodeLinks(node);\r\n            // If getResolvedSignature has already been called, we will have cached the resolvedSignature.\r\n            // However, it is possible that either candidatesOutArray was not passed in the first time,\r\n            // or that a different candidatesOutArray was passed in. Therefore, we need to redo the work\r\n            // to correctly fill the candidatesOutArray.\r\n            if (!links.resolvedSignature || candidatesOutArray) {\r\n                links.resolvedSignature = anySignature;\r\n                links.resolvedSignature = node.kind === SyntaxKind.CallExpression\r\n                    ? resolveCallExpression(node, candidatesOutArray)\r\n                    : resolveNewExpression(node, candidatesOutArray);\r\n            }\r\n            return links.resolvedSignature;\r\n        }\r\n\r\n        function checkCallExpression(node: CallExpression): Type {\r\n            var signature = getResolvedSignature(node);\r\n            if (node.func.kind === SyntaxKind.SuperKeyword) {\r\n                return voidType;\r\n            }\r\n            if (node.kind === SyntaxKind.NewExpression) {\r\n                var declaration = signature.declaration;\r\n                if (declaration && (declaration.kind !== SyntaxKind.Constructor && declaration.kind !== SyntaxKind.ConstructSignature)) {\r\n                    // When resolved signature is a call signature (and not a construct signature) the result type is any\r\n                    if (compilerOptions.noImplicitAny) {\r\n                        error(node, Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);\r\n                    }\r\n                    return anyType;\r\n                }\r\n            }\r\n            return getReturnTypeOfSignature(signature);\r\n        }\r\n\r\n        function checkTypeAssertion(node: TypeAssertion): Type {\r\n            var exprType = checkExpression(node.operand);\r\n            var targetType = getTypeFromTypeNode(node.type);\r\n            if (fullTypeCheck && targetType !== unknownType) {\r\n                var widenedType = getWidenedType(exprType, /*supressNoImplicitAnyErrors*/ true);\r\n                if (!(isTypeAssignableTo(targetType, widenedType))) {\r\n                    checkTypeAssignableTo(exprType, targetType, node, Diagnostics.Neither_type_0_nor_type_1_is_assignable_to_the_other);\r\n                }\r\n            }\r\n            return targetType;\r\n        }\r\n\r\n        function getTypeAtPosition(signature: Signature, pos: number): Type {\r\n            return signature.hasRestParameter ?\r\n                pos < signature.parameters.length - 1 ? getTypeOfSymbol(signature.parameters[pos]) : getRestTypeOfSignature(signature) :\r\n                pos < signature.parameters.length ? getTypeOfSymbol(signature.parameters[pos]) : anyType;\r\n        }\r\n\r\n        function assignContextualParameterTypes(signature: Signature, context: Signature, mapper: TypeMapper) {\r\n            var len = signature.parameters.length - (signature.hasRestParameter ? 1 : 0);\r\n            for (var i = 0; i < len; i++) {\r\n                var parameter = signature.parameters[i];\r\n                var links = getSymbolLinks(parameter);\r\n                links.type = instantiateType(getTypeAtPosition(context, i), mapper);\r\n            }\r\n            if (signature.hasRestParameter && context.hasRestParameter && signature.parameters.length >= context.parameters.length) {\r\n                var parameter = signature.parameters[signature.parameters.length - 1];\r\n                var links = getSymbolLinks(parameter);\r\n                links.type = instantiateType(getTypeOfSymbol(context.parameters[context.parameters.length - 1]), mapper);\r\n            }\r\n        }\r\n\r\n        function getReturnTypeFromBody(func: FunctionDeclaration, contextualMapper?: TypeMapper): Type {\r\n            var contextualSignature = getContextualSignature(func);\r\n            if (func.body.kind !== SyntaxKind.FunctionBlock) {\r\n                var unwidenedType = checkAndMarkExpression(func.body, contextualMapper);\r\n                var widenedType = getWidenedType(unwidenedType);\r\n\r\n                if (fullTypeCheck && compilerOptions.noImplicitAny && !contextualSignature && widenedType !== unwidenedType && getInnermostTypeOfNestedArrayTypes(widenedType) === anyType) {\r\n                    error(func, Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeToString(widenedType));\r\n                }\r\n\r\n                return widenedType;\r\n            }\r\n\r\n            // Aggregate the types of expressions within all the return statements.\r\n            var types = checkAndAggregateReturnExpressionTypes(<Block>func.body, contextualMapper);\r\n\r\n            // Try to return the best common type if we have any return expressions.\r\n            if (types.length > 0) {\r\n                // When return statements are contextually typed we allow the return type to be a union type. Otherwise we require the\r\n                // return expressions to have a best common supertype.\r\n                var commonType = contextualSignature ? getUnionType(types) : getCommonSupertype(types);\r\n                if (!commonType) {\r\n                    error(func, Diagnostics.No_best_common_type_exists_among_return_expressions);\r\n                    \r\n                    return unknownType;\r\n                }\r\n\r\n                var widenedType = getWidenedType(commonType);\r\n\r\n                // Check and report for noImplicitAny if the best common type implicitly gets widened to an 'any'/arrays-of-'any' type.\r\n                if (fullTypeCheck && compilerOptions.noImplicitAny && !contextualSignature && widenedType !== commonType && getInnermostTypeOfNestedArrayTypes(widenedType) === anyType) {\r\n                    var typeName = typeToString(widenedType);\r\n\r\n                    if (func.name) {\r\n                        error(func, Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type, identifierToString(func.name), typeName);\r\n                    }\r\n                    else {\r\n                        error(func, Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeName);\r\n                    }\r\n                }\r\n\r\n                return widenedType;\r\n            }\r\n\r\n            return voidType;\r\n        }\r\n\r\n        /// Returns a set of types relating to every return expression relating to a function block.\r\n        function checkAndAggregateReturnExpressionTypes(body: Block, contextualMapper?: TypeMapper): Type[] {\r\n            var aggregatedTypes: Type[] = [];\r\n\r\n            forEachReturnStatement(body, returnStatement => {\r\n                var expr = returnStatement.expression;\r\n                if (expr) {\r\n                    var type = checkAndMarkExpression(expr, contextualMapper);\r\n                    if (!contains(aggregatedTypes, type)) {\r\n                        aggregatedTypes.push(type);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return aggregatedTypes;\r\n        }\r\n\r\n        function bodyContainsAReturnStatement(funcBody: Block) {\r\n            return forEachReturnStatement(funcBody, returnStatement => {\r\n                return true;\r\n            });\r\n        }\r\n\r\n        function bodyContainsSingleThrowStatement(body: Block) {\r\n            return (body.statements.length === 1) && (body.statements[0].kind === SyntaxKind.ThrowStatement);\r\n        }\r\n\r\n        // TypeScript Specification 1.0 (6.3) - July 2014\r\n        // An explicitly typed function whose return type isn't the Void or the Any type\r\n        // must have at least one return statement somewhere in its body.\r\n        // An exception to this rule is if the function implementation consists of a single 'throw' statement.\r\n        function checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(func: FunctionDeclaration, returnType: Type): void {\r\n            if (!fullTypeCheck) {\r\n                return;\r\n            }\r\n\r\n            // Functions that return 'void' or 'any' don't need any return expressions.\r\n            if (returnType === voidType || returnType === anyType) {\r\n                return;\r\n            }\r\n\r\n            // If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.\r\n            if (!func.body || func.body.kind !== SyntaxKind.FunctionBlock) {\r\n                return;\r\n            }\r\n\r\n            var bodyBlock = <Block>func.body;\r\n\r\n            // Ensure the body has at least one return expression.\r\n            if (bodyContainsAReturnStatement(bodyBlock)) {\r\n                return;\r\n            }\r\n\r\n            // If there are no return expressions, then we need to check if\r\n            // the function body consists solely of a throw statement;\r\n            // this is to make an exception for unimplemented functions.\r\n            if (bodyContainsSingleThrowStatement(bodyBlock)) {\r\n                return;\r\n            }\r\n\r\n            // This function does not conform to the specification.\r\n            error(func.type, Diagnostics.A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement);\r\n        }\r\n\r\n        function checkFunctionExpression(node: FunctionExpression, contextualMapper?: TypeMapper): Type {\r\n            // The identityMapper object is used to indicate that function expressions are wildcards\r\n            if (contextualMapper === identityMapper) {\r\n                return anyFunctionType;\r\n            }\r\n            var links = getNodeLinks(node);\r\n            var type = getTypeOfSymbol(node.symbol);\r\n            // Check if function expression is contextually typed and assign parameter types if so\r\n            if (!(links.flags & NodeCheckFlags.ContextChecked)) {\r\n                var contextualSignature = getContextualSignature(node);\r\n                // If a type check is started at a function expression that is an argument of a function call, obtaining the\r\n                // contextual type may recursively get back to here during overload resolution of the call. If so, we will have\r\n                // already assigned contextual types.\r\n                if (!(links.flags & NodeCheckFlags.ContextChecked)) {\r\n                    links.flags |= NodeCheckFlags.ContextChecked;\r\n                    if (contextualSignature) {\r\n                        var signature = getSignaturesOfType(type, SignatureKind.Call)[0];\r\n                        if (isContextSensitiveExpression(node)) {\r\n                            assignContextualParameterTypes(signature, contextualSignature, contextualMapper || identityMapper);\r\n                        }\r\n                        if (!node.type) {\r\n                            signature.resolvedReturnType = resolvingType;\r\n                            var returnType = getReturnTypeFromBody(node, contextualMapper);\r\n                            if (signature.resolvedReturnType === resolvingType) {\r\n                                signature.resolvedReturnType = returnType;\r\n                            }\r\n                        }\r\n                    }\r\n                    checkSignatureDeclaration(node);\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function checkFunctionExpressionBody(node: FunctionExpression) {\r\n            if (node.type) {\r\n                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, getTypeFromTypeNode(node.type));\r\n            }\r\n            if (node.body.kind === SyntaxKind.FunctionBlock) {\r\n                checkSourceElement(node.body);\r\n            }\r\n            else {\r\n                var exprType = checkExpression(node.body);\r\n                if (node.type) {\r\n                    checkTypeAssignableTo(exprType, getTypeFromTypeNode(node.type), node.body, /*headMessage*/ undefined);\r\n                }\r\n                checkFunctionExpressionBodies(node.body);\r\n            }\r\n        }\r\n\r\n        function checkArithmeticOperandType(operand: Node, type: Type, diagnostic: DiagnosticMessage): boolean {\r\n            if (!(type.flags & (TypeFlags.Any | TypeFlags.NumberLike))) {\r\n                error(operand, diagnostic);\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkReferenceExpression(n: Node, invalidReferenceMessage: DiagnosticMessage, constantVarianleMessage: DiagnosticMessage): boolean {\r\n            function findSymbol(n: Node): Symbol {\r\n                var symbol = getNodeLinks(n).resolvedSymbol;\r\n                // Because we got the symbol from the resolvedSymbol property, it might be of kind\r\n                // SymbolFlags.ExportValue. In this case it is necessary to get the actual export\r\n                // symbol, which will have the correct flags set on it.\r\n                return symbol && getExportSymbolOfValueSymbolIfExported(symbol);\r\n            }\r\n\r\n            function isReferenceOrErrorExpression(n: Node): boolean {\r\n                // TypeScript 1.0 spec (April 2014):\r\n                // Expressions are classified as values or references. \r\n                // References are the subset of expressions that are permitted as the target of an assignment.\r\n                // Specifically, references are combinations of identifiers(section 4.3), parentheses(section 4.7), \r\n                // and property accesses(section 4.10).\r\n                // All other expression constructs described in this chapter are classified as values.\r\n                switch (n.kind) {\r\n                    case SyntaxKind.Identifier:\r\n                        var symbol = findSymbol(n);\r\n                        // TypeScript 1.0 spec (April 2014): 4.3\r\n                        // An identifier expression that references a variable or parameter is classified as a reference. \r\n                        // An identifier expression that references any other kind of entity is classified as a value(and therefore cannot be the target of an assignment).\r\n                        return !symbol || symbol === unknownSymbol || symbol === argumentsSymbol || (symbol.flags & SymbolFlags.Variable) !== 0;\r\n                    case SyntaxKind.PropertyAccess:\r\n                        var symbol = findSymbol(n);\r\n                        // TypeScript 1.0 spec (April 2014): 4.10\r\n                        // A property access expression is always classified as a reference.\r\n                        // NOTE (not in spec): assignment to enum members should not be allowed\r\n                        return !symbol || symbol === unknownSymbol || (symbol.flags & ~SymbolFlags.EnumMember) !== 0;\r\n                    case SyntaxKind.IndexedAccess:\r\n                        //  old compiler doesn't check indexed assess\r\n                        return true;\r\n                    case SyntaxKind.ParenExpression:\r\n                        return isReferenceOrErrorExpression((<ParenExpression>n).expression);\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            function isConstVariableReference(n: Node): boolean {\r\n                switch (n.kind) {\r\n                    case SyntaxKind.Identifier:\r\n                    case SyntaxKind.PropertyAccess:\r\n                        var symbol = findSymbol(n);\r\n                        return symbol && (symbol.flags & SymbolFlags.Variable) !== 0 && (getDeclarationFlagsFromSymbol(symbol) & NodeFlags.Const) !== 0;\r\n                    case SyntaxKind.IndexedAccess:\r\n                        var index = (<IndexedAccess>n).index;\r\n                        var symbol = findSymbol((<IndexedAccess>n).object);\r\n                        if (symbol && index.kind === SyntaxKind.StringLiteral) {\r\n                            var name = (<LiteralExpression>index).text;\r\n                            var prop = getPropertyOfType(getTypeOfSymbol(symbol), name);\r\n                            return prop && (prop.flags & SymbolFlags.Variable) !== 0 && (getDeclarationFlagsFromSymbol(prop) & NodeFlags.Const) !== 0;\r\n                        }\r\n                        return false;\r\n                    case SyntaxKind.ParenExpression:\r\n                        return isConstVariableReference((<ParenExpression>n).expression);\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            if (!isReferenceOrErrorExpression(n)) {\r\n                error(n, invalidReferenceMessage);\r\n                return false;\r\n            }\r\n            if (isConstVariableReference(n)) {\r\n                error(n, constantVarianleMessage);\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkPrefixExpression(node: UnaryExpression): Type {\r\n            var operandType = checkExpression(node.operand);\r\n            switch (node.operator) {\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.MinusToken:\r\n                case SyntaxKind.TildeToken:\r\n                    return numberType;\r\n                case SyntaxKind.ExclamationToken:\r\n                case SyntaxKind.DeleteKeyword:\r\n                    return booleanType;\r\n                case SyntaxKind.TypeOfKeyword:\r\n                    return stringType;\r\n                case SyntaxKind.VoidKeyword:\r\n                    return undefinedType;\r\n                case SyntaxKind.PlusPlusToken:\r\n                case SyntaxKind.MinusMinusToken:\r\n                    var ok = checkArithmeticOperandType(node.operand, operandType, Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);\r\n                    if (ok) {\r\n                        // run check only if former checks succeeded to avoid reporting cascading errors\r\n                        checkReferenceExpression(node.operand,\r\n                            Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer,\r\n                            Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);\r\n                    }\r\n                    return numberType;\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        function checkPostfixExpression(node: UnaryExpression): Type {\r\n            var operandType = checkExpression(node.operand);\r\n            var ok = checkArithmeticOperandType(node.operand, operandType, Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);\r\n            if (ok) {\r\n                // run check only if former checks succeeded to avoid reporting cascading errors\r\n                checkReferenceExpression(node.operand,\r\n                    Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer,\r\n                    Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);\r\n            }\r\n            return numberType;\r\n        }\r\n\r\n        // Return true if type is any, an object type, a type parameter, or a union type composed of only those kinds of types\r\n        function isStructuredType(type: Type): boolean {\r\n            if (type.flags & TypeFlags.Union) {\r\n                return !forEach((<UnionType>type).types, t => !isStructuredType(t));\r\n            }\r\n            return (type.flags & TypeFlags.Structured) !== 0;\r\n        }\r\n\r\n        function checkInstanceOfExpression(node: BinaryExpression, leftType: Type, rightType: Type): Type {\r\n            // TypeScript 1.0 spec (April 2014): 4.15.4\r\n            // The instanceof operator requires the left operand to be of type Any, an object type, or a type parameter type,\r\n            // and the right operand to be of type Any or a subtype of the 'Function' interface type. \r\n            // The result is always of the Boolean primitive type.\r\n            // NOTE: do not raise error if leftType is unknown as related error was already reported\r\n            if (leftType !== unknownType && !isStructuredType(leftType)) {\r\n                error(node.left, Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);\r\n            }\r\n            // NOTE: do not raise error if right is unknown as related error was already reported\r\n            if (rightType !== unknownType && rightType !== anyType && !isTypeSubtypeOf(rightType, globalFunctionType)) {\r\n                error(node.right, Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);\r\n            }\r\n            return booleanType;\r\n        }\r\n\r\n        function checkInExpression(node: BinaryExpression, leftType: Type, rightType: Type): Type {\r\n            // TypeScript 1.0 spec (April 2014): 4.15.5\r\n            // The in operator requires the left operand to be of type Any, the String primitive type, or the Number primitive type,\r\n            // and the right operand to be of type Any, an object type, or a type parameter type.\r\n            // The result is always of the Boolean primitive type.\r\n            if (leftType !== anyType && leftType !== stringType && leftType !== numberType) {\r\n                error(node.left, Diagnostics.The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number);\r\n            }\r\n            if (!isStructuredType(rightType)) {\r\n                error(node.right, Diagnostics.The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);\r\n            }\r\n            return booleanType;\r\n        }\r\n\r\n        function checkBinaryExpression(node: BinaryExpression, contextualMapper?: TypeMapper) {\r\n            var operator = node.operator;\r\n            var leftType = checkExpression(node.left, contextualMapper);\r\n            var rightType = checkExpression(node.right, contextualMapper);\r\n            switch (operator) {\r\n                case SyntaxKind.AsteriskToken:\r\n                case SyntaxKind.AsteriskEqualsToken:\r\n                case SyntaxKind.SlashToken:\r\n                case SyntaxKind.SlashEqualsToken:\r\n                case SyntaxKind.PercentToken:\r\n                case SyntaxKind.PercentEqualsToken:\r\n                case SyntaxKind.MinusToken:\r\n                case SyntaxKind.MinusEqualsToken:\r\n                case SyntaxKind.LessThanLessThanToken:\r\n                case SyntaxKind.LessThanLessThanEqualsToken:\r\n                case SyntaxKind.GreaterThanGreaterThanToken:\r\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\r\n                case SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\r\n                case SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\r\n                case SyntaxKind.BarToken:\r\n                case SyntaxKind.BarEqualsToken:\r\n                case SyntaxKind.CaretToken:\r\n                case SyntaxKind.CaretEqualsToken:\r\n                case SyntaxKind.AmpersandToken:\r\n                case SyntaxKind.AmpersandEqualsToken:\r\n                    // TypeScript 1.0 spec (April 2014): 4.15.1\r\n                    // These operators require their operands to be of type Any, the Number primitive type,\r\n                    // or an enum type. Operands of an enum type are treated \r\n                    // as having the primitive type Number. If one operand is the null or undefined value,\r\n                    // it is treated as having the type of the other operand.\r\n                    // The result is always of the Number primitive type.\r\n                    if (leftType.flags & (TypeFlags.Undefined | TypeFlags.Null)) leftType = rightType;\r\n                    if (rightType.flags & (TypeFlags.Undefined | TypeFlags.Null)) rightType = leftType;\r\n\r\n                    var suggestedOperator: SyntaxKind;\r\n                    // if a user tries to apply a bitwise operator to 2 boolean operands \r\n                    // try and return them a helpful suggestion\r\n                    if ((leftType.flags & TypeFlags.Boolean) &&\r\n                        (rightType.flags & TypeFlags.Boolean) && \r\n                        (suggestedOperator = getSuggestedBooleanOperator(node.operator)) !== undefined) {   \r\n                        error(node, Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, tokenToString(node.operator), tokenToString(suggestedOperator));\r\n                    }\r\n                    else {\r\n                        // otherwise just check each operand separately and report errors as normal \r\n                        var leftOk = checkArithmeticOperandType(node.left, leftType, Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);\r\n                        var rightOk = checkArithmeticOperandType(node.right, rightType, Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);\r\n                        if (leftOk && rightOk) {\r\n                            checkAssignmentOperator(numberType);\r\n                        }    \r\n                    }\r\n\r\n                    return numberType;\r\n                case SyntaxKind.PlusToken:\r\n                case SyntaxKind.PlusEqualsToken:\r\n                    // TypeScript 1.0 spec (April 2014): 4.15.2\r\n                    // The binary + operator requires both operands to be of the Number primitive type or an enum type,\r\n                    // or at least one of the operands to be of type Any or the String primitive type.\r\n\r\n                    // If one operand is the null or undefined value, it is treated as having the type of the other operand.\r\n                    if (leftType.flags & (TypeFlags.Undefined | TypeFlags.Null)) leftType = rightType;\r\n                    if (rightType.flags & (TypeFlags.Undefined | TypeFlags.Null)) rightType = leftType;\r\n\r\n                    var resultType: Type;\r\n                    if (leftType.flags & TypeFlags.NumberLike && rightType.flags & TypeFlags.NumberLike) {\r\n                        // Operands of an enum type are treated as having the primitive type Number.\r\n                        // If both operands are of the Number primitive type, the result is of the Number primitive type.\r\n                        resultType = numberType;\r\n                    }\r\n                    else if (leftType.flags & TypeFlags.StringLike || rightType.flags & TypeFlags.StringLike) {\r\n                        // If one or both operands are of the String primitive type, the result is of the String primitive type.\r\n                        resultType = stringType;\r\n                    }\r\n                    else if (leftType.flags & TypeFlags.Any || leftType === unknownType || rightType.flags & TypeFlags.Any || rightType === unknownType) {\r\n                        // Otherwise, the result is of type Any.\r\n                        // NOTE: unknown type here denotes error type. Old compiler treated this case as any type so do we.\r\n                        resultType = anyType;\r\n                    }\r\n\r\n                    if (!resultType) {\r\n                        reportOperatorError();\r\n                        return anyType;\r\n                    }\r\n\r\n                    if (operator === SyntaxKind.PlusEqualsToken) {\r\n                        checkAssignmentOperator(resultType);\r\n                    }\r\n                    return resultType;\r\n                case SyntaxKind.EqualsEqualsToken:\r\n                case SyntaxKind.ExclamationEqualsToken:\r\n                case SyntaxKind.EqualsEqualsEqualsToken:\r\n                case SyntaxKind.ExclamationEqualsEqualsToken:\r\n                case SyntaxKind.LessThanToken:\r\n                case SyntaxKind.GreaterThanToken:\r\n                case SyntaxKind.LessThanEqualsToken:\r\n                case SyntaxKind.GreaterThanEqualsToken:\r\n                    if (!isTypeAssignableTo(leftType, rightType) && !isTypeAssignableTo(rightType, leftType)) {\r\n                        reportOperatorError();\r\n                    }\r\n                    return booleanType;\r\n                case SyntaxKind.InstanceOfKeyword:\r\n                    return checkInstanceOfExpression(node, leftType, rightType);\r\n                case SyntaxKind.InKeyword:\r\n                    return checkInExpression(node, leftType, rightType);\r\n                case SyntaxKind.AmpersandAmpersandToken:\r\n                    return rightType;\r\n                case SyntaxKind.BarBarToken:\r\n                    return getUnionType([leftType, rightType]);\r\n                case SyntaxKind.EqualsToken:\r\n                    checkAssignmentOperator(rightType);\r\n                    return rightType;\r\n                case SyntaxKind.CommaToken:\r\n                    return rightType;\r\n            }\r\n            \r\n            function getSuggestedBooleanOperator(operator: SyntaxKind): SyntaxKind { \r\n                switch (operator) {\r\n                    case SyntaxKind.BarToken:\r\n                    case SyntaxKind.BarEqualsToken:\r\n                        return SyntaxKind.BarBarToken;\r\n                    case SyntaxKind.CaretToken:\r\n                    case SyntaxKind.CaretEqualsToken:\r\n                        return SyntaxKind.ExclamationEqualsEqualsToken;\r\n                    case SyntaxKind.AmpersandToken:\r\n                    case SyntaxKind.AmpersandEqualsToken:\r\n                        return SyntaxKind.AmpersandAmpersandToken;\r\n                    default:\r\n                        return undefined;\r\n                }\r\n            }\r\n\r\n            function checkAssignmentOperator(valueType: Type): void {\r\n                if (fullTypeCheck && operator >= SyntaxKind.FirstAssignment && operator <= SyntaxKind.LastAssignment) {\r\n                    // TypeScript 1.0 spec (April 2014): 4.17\r\n                    // An assignment of the form\r\n                    //    VarExpr = ValueExpr\r\n                    // requires VarExpr to be classified as a reference\r\n                    // A compound assignment furthermore requires VarExpr to be classified as a reference (section 4.1) \r\n                    // and the type of the non - compound operation to be assignable to the type of VarExpr.\r\n                    var ok = checkReferenceExpression(node.left, Diagnostics.Invalid_left_hand_side_of_assignment_expression, Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant);\r\n                    // Use default messages\r\n                    if (ok) {\r\n                        // to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported\r\n                        checkTypeAssignableTo(valueType, leftType, node.left, /*headMessage*/ undefined);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function reportOperatorError() {\r\n                error(node, Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, tokenToString(node.operator), typeToString(leftType), typeToString(rightType));\r\n            }\r\n        }\r\n\r\n        function checkConditionalExpression(node: ConditionalExpression, contextualMapper?: TypeMapper): Type {\r\n            checkExpression(node.condition);\r\n            var type1 = checkExpression(node.whenTrue, contextualMapper);\r\n            var type2 = checkExpression(node.whenFalse, contextualMapper);\r\n            return getUnionType([type1, type2]);\r\n        }\r\n\r\n        function checkExpressionWithContextualType(node: Expression, contextualType: Type, contextualMapper?: TypeMapper): Type {\r\n            var saveContextualType = node.contextualType;\r\n            node.contextualType = contextualType;\r\n            var result = checkExpression(node, contextualMapper);\r\n            node.contextualType = saveContextualType;\r\n            return result;\r\n        }\r\n\r\n        function checkAndMarkExpression(node: Expression, contextualMapper?: TypeMapper): Type {\r\n            var result = checkExpression(node, contextualMapper);\r\n            getNodeLinks(node).flags |= NodeCheckFlags.TypeChecked;\r\n            return result;\r\n        }\r\n\r\n        // Checks an expression and returns its type. The contextualMapper parameter serves two purposes: When\r\n        // contextualMapper is not undefined and not equal to the identityMapper function object it indicates that the\r\n        // expression is being inferentially typed (section 4.12.2 in spec) and provides the type mapper to use in\r\n        // conjunction with the generic contextual type. When contextualMapper is equal to the identityMapper function\r\n        // object, it serves as an indicator that all contained function and arrow expressions should be considered to\r\n        // have the wildcard function type; this form of type check is used during overload resolution to exclude\r\n        // contextually typed function and arrow expressions in the initial phase.\r\n        function checkExpression(node: Expression, contextualMapper?: TypeMapper): Type {\r\n            var type = checkExpressionNode(node, contextualMapper);\r\n            if (contextualMapper && contextualMapper !== identityMapper) {\r\n                var signature = getSingleCallSignature(type);\r\n                if (signature && signature.typeParameters) {\r\n                    var contextualType = getContextualType(node);\r\n                    if (contextualType) {\r\n                        var contextualSignature = getSingleCallSignature(contextualType);\r\n                        if (contextualSignature && !contextualSignature.typeParameters) {\r\n                            type = getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return type;\r\n        }\r\n\r\n        function checkExpressionNode(node: Expression, contextualMapper: TypeMapper): Type {\r\n            switch (node.kind) {\r\n                case SyntaxKind.Identifier:\r\n                    return checkIdentifier(<Identifier>node);\r\n                case SyntaxKind.ThisKeyword:\r\n                    return checkThisExpression(node);\r\n                case SyntaxKind.SuperKeyword:\r\n                    return checkSuperExpression(node);\r\n                case SyntaxKind.NullKeyword:\r\n                    return nullType;\r\n                case SyntaxKind.TrueKeyword:\r\n                case SyntaxKind.FalseKeyword:\r\n                    return booleanType;\r\n                case SyntaxKind.NumericLiteral:\r\n                    return numberType;\r\n                case SyntaxKind.StringLiteral:\r\n                    return stringType;\r\n                case SyntaxKind.RegularExpressionLiteral:\r\n                    return globalRegExpType;\r\n                case SyntaxKind.QualifiedName:\r\n                    return checkPropertyAccess(<QualifiedName>node);\r\n                case SyntaxKind.ArrayLiteral:\r\n                    return checkArrayLiteral(<ArrayLiteral>node, contextualMapper);\r\n                case SyntaxKind.ObjectLiteral:\r\n                    return checkObjectLiteral(<ObjectLiteral>node, contextualMapper);\r\n                case SyntaxKind.PropertyAccess:\r\n                    return checkPropertyAccess(<PropertyAccess>node);\r\n                case SyntaxKind.IndexedAccess:\r\n                    return checkIndexedAccess(<IndexedAccess>node);\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.NewExpression:\r\n                    return checkCallExpression(<CallExpression>node);\r\n                case SyntaxKind.TypeAssertion:\r\n                    return checkTypeAssertion(<TypeAssertion>node);\r\n                case SyntaxKind.ParenExpression:\r\n                    return checkExpression((<ParenExpression>node).expression);\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    return checkFunctionExpression(<FunctionExpression>node, contextualMapper);\r\n                case SyntaxKind.PrefixOperator:\r\n                    return checkPrefixExpression(<UnaryExpression>node);\r\n                case SyntaxKind.PostfixOperator:\r\n                    return checkPostfixExpression(<UnaryExpression>node);\r\n                case SyntaxKind.BinaryExpression:\r\n                    return checkBinaryExpression(<BinaryExpression>node, contextualMapper);\r\n                case SyntaxKind.ConditionalExpression:\r\n                    return checkConditionalExpression(<ConditionalExpression>node, contextualMapper);\r\n                case SyntaxKind.OmittedExpression:\r\n                    return undefinedType;\r\n            }\r\n            return unknownType;\r\n        }\r\n\r\n        // DECLARATION AND STATEMENT TYPE CHECKING\r\n\r\n        function checkTypeParameter(node: TypeParameterDeclaration) {\r\n            checkSourceElement(node.constraint);\r\n            if (fullTypeCheck) {\r\n                checkTypeParameterHasIllegalReferencesInConstraint(node);\r\n                checkTypeNameIsReserved(node.name, Diagnostics.Type_parameter_name_cannot_be_0);\r\n            }\r\n            // TODO: Check multiple declarations are identical\r\n        }\r\n\r\n        function checkParameter(parameterDeclaration: ParameterDeclaration) {\r\n            checkVariableDeclaration(parameterDeclaration);\r\n\r\n            if (fullTypeCheck) {\r\n                checkCollisionWithIndexVariableInGeneratedCode(parameterDeclaration, parameterDeclaration.name);\r\n\r\n                if (parameterDeclaration.flags & (NodeFlags.Public | NodeFlags.Private | NodeFlags.Protected) &&\r\n                    !(parameterDeclaration.parent.kind === SyntaxKind.Constructor && (<ConstructorDeclaration>parameterDeclaration.parent).body)) {\r\n                    error(parameterDeclaration, Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);\r\n                }\r\n                if (parameterDeclaration.flags & NodeFlags.Rest) {\r\n                    if (!isArrayType(getTypeOfSymbol(parameterDeclaration.symbol))) {\r\n                        error(parameterDeclaration, Diagnostics.A_rest_parameter_must_be_of_an_array_type);\r\n                    }\r\n                }\r\n                else {\r\n                    if (parameterDeclaration.initializer && !(<FunctionDeclaration>parameterDeclaration.parent).body) {\r\n                        error(parameterDeclaration, Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function checkReferencesInInitializer(n: Node): void {\r\n                if (n.kind === SyntaxKind.Identifier) {\r\n                    var referencedSymbol = getNodeLinks(n).resolvedSymbol;\r\n                    // check FunctionDeclaration.locals (stores parameters\\function local variable) \r\n                    // if it contains entry with a specified name and if this entry matches the resolved symbol\r\n                    if (referencedSymbol && referencedSymbol !== unknownSymbol && getSymbol(parameterDeclaration.parent.locals, referencedSymbol.name, SymbolFlags.Value) === referencedSymbol) {\r\n                        if (referencedSymbol.valueDeclaration.kind === SyntaxKind.Parameter) {\r\n                            if (referencedSymbol.valueDeclaration === parameterDeclaration) {\r\n                                error(n, Diagnostics.Parameter_0_cannot_be_referenced_in_its_initializer, identifierToString(parameterDeclaration.name));\r\n                                return;\r\n                            }\r\n                            var enclosingOrReferencedParameter =\r\n                                forEach((<FunctionDeclaration>parameterDeclaration.parent).parameters, p => p === parameterDeclaration || p === referencedSymbol.valueDeclaration ? p : undefined);\r\n\r\n                            if (enclosingOrReferencedParameter === referencedSymbol.valueDeclaration) {\r\n                                // legal case - parameter initializer references some parameter strictly on left of current parameter declaration\r\n                                return;\r\n                            }\r\n                            // fall through to error reporting\r\n                        }\r\n\r\n                        error(n, Diagnostics.Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it, identifierToString(parameterDeclaration.name), identifierToString(<Identifier>n));\r\n                    }\r\n                }\r\n                else {\r\n                    forEachChild(n, checkReferencesInInitializer);\r\n                }\r\n            }\r\n\r\n            if (parameterDeclaration.initializer) {\r\n                checkReferencesInInitializer(parameterDeclaration.initializer);\r\n            }\r\n        }\r\n\r\n        function checkSignatureDeclaration(node: SignatureDeclaration) {\r\n            checkTypeParameters(node.typeParameters);\r\n            forEach(node.parameters, checkParameter);\r\n            if (node.type) {\r\n                checkSourceElement(node.type);\r\n            }\r\n            if (fullTypeCheck) {\r\n                checkCollisionWithCapturedSuperVariable(node, node.name);\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n                checkCollisionWithArgumentsInGeneratedCode(node);\r\n                if (compilerOptions.noImplicitAny && !node.type) {\r\n                    switch (node.kind) {\r\n                        case SyntaxKind.ConstructSignature:\r\n                            error(node, Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);\r\n                            break;\r\n                        case SyntaxKind.CallSignature:\r\n                            error(node, Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            checkSpecializedSignatureDeclaration(node);\r\n        }\r\n\r\n        function checkTypeForDuplicateIndexSignatures(node: Node) {\r\n            if (node.kind === SyntaxKind.InterfaceDeclaration) {\r\n                var nodeSymbol = getSymbolOfNode(node);\r\n                // in case of merging interface declaration it is possible that we'll enter this check procedure several times for every declaration\r\n                // to prevent this run check only for the first declaration of a given kind\r\n                if (nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // TypeScript 1.0 spec (April 2014)\r\n            // 3.7.4: An object type can contain at most one string index signature and one numeric index signature.\r\n            // 8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration\r\n            var indexSymbol = getIndexSymbol(getSymbolOfNode(node));\r\n            if (indexSymbol) {\r\n                var seenNumericIndexer = false;\r\n                var seenStringIndexer = false;\r\n                for (var i = 0, len = indexSymbol.declarations.length; i < len; ++i) {\r\n                    var declaration = <SignatureDeclaration>indexSymbol.declarations[i];\r\n                    if (declaration.parameters.length  == 1 && declaration.parameters[0].type) {\r\n                        switch (declaration.parameters[0].type.kind) {\r\n                            case SyntaxKind.StringKeyword:\r\n                                if (!seenStringIndexer) {\r\n                                    seenStringIndexer = true;\r\n                                }\r\n                                else {\r\n                                    error(declaration, Diagnostics.Duplicate_string_index_signature);\r\n                                }\r\n                                break;\r\n                            case SyntaxKind.NumberKeyword:\r\n                                if (!seenNumericIndexer) {\r\n                                    seenNumericIndexer = true;\r\n                                }\r\n                                else {\r\n                                    error(declaration, Diagnostics.Duplicate_number_index_signature);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkPropertyDeclaration(node: PropertyDeclaration) {\r\n            // TODO\r\n            checkVariableDeclaration(node);\r\n        }\r\n\r\n        function checkMethodDeclaration(node: MethodDeclaration) {\r\n            // TODO\r\n            checkFunctionDeclaration(node);\r\n        }\r\n\r\n        function checkConstructorDeclaration(node: ConstructorDeclaration) {\r\n            // TODO\r\n            checkSignatureDeclaration(node);\r\n            checkSourceElement(node.body);\r\n\r\n            var symbol = getSymbolOfNode(node);\r\n            var firstDeclaration = getDeclarationOfKind(symbol, node.kind);\r\n            // Only type check the symbol once\r\n            if (node === firstDeclaration) {\r\n                checkFunctionOrConstructorSymbol(symbol);\r\n            }\r\n\r\n            // exit early in the case of signature - super checks are not relevant to them\r\n            if (!node.body) {\r\n                return;\r\n            }\r\n\r\n            if (!fullTypeCheck) {\r\n                return;\r\n            }\r\n\r\n            function isSuperCallExpression(n: Node): boolean {\r\n                return n.kind === SyntaxKind.CallExpression && (<CallExpression>n).func.kind === SyntaxKind.SuperKeyword;\r\n            }\r\n\r\n            function containsSuperCall(n: Node): boolean {\r\n                if (isSuperCallExpression(n)) {\r\n                    return true;\r\n                }\r\n                switch (n.kind) {\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.ArrowFunction:\r\n                    case SyntaxKind.ObjectLiteral: return false;\r\n                    default: return forEachChild(n, containsSuperCall);\r\n                }\r\n            }\r\n\r\n            function markThisReferencesAsErrors(n: Node): void {\r\n                if (n.kind === SyntaxKind.ThisKeyword) {\r\n                    error(n, Diagnostics.this_cannot_be_referenced_in_current_location);\r\n                }\r\n                else if (n.kind !== SyntaxKind.FunctionExpression && n.kind !== SyntaxKind.FunctionDeclaration) {\r\n                    forEachChild(n, markThisReferencesAsErrors);\r\n                }\r\n            }\r\n\r\n            function isInstancePropertyWithInitializer(n: Node): boolean {\r\n                return n.kind === SyntaxKind.Property &&\r\n                    !(n.flags & NodeFlags.Static) &&\r\n                    !!(<PropertyDeclaration>n).initializer;\r\n            }\r\n\r\n            // TS 1.0 spec (April 2014): 8.3.2\r\n            // Constructors of classes with no extends clause may not contain super calls, whereas \r\n            // constructors of derived classes must contain at least one super call somewhere in their function body.\r\n            if ((<ClassDeclaration>node.parent).baseType) {\r\n                \r\n                if (containsSuperCall(node.body)) {\r\n                    // The first statement in the body of a constructor must be a super call if both of the following are true:\r\n                    // - The containing class is a derived class.\r\n                    // - The constructor declares parameter properties \r\n                    //   or the containing class declares instance member variables with initializers.\r\n                    var superCallShouldBeFirst =\r\n                        forEach((<ClassDeclaration>node.parent).members, isInstancePropertyWithInitializer) ||\r\n                        forEach(node.parameters, p => p.flags & (NodeFlags.Public | NodeFlags.Private | NodeFlags.Protected));\r\n\r\n                    if (superCallShouldBeFirst) {\r\n                        var statements = (<Block>node.body).statements;\r\n                        if (!statements.length || statements[0].kind !== SyntaxKind.ExpressionStatement || !isSuperCallExpression((<ExpressionStatement>statements[0]).expression)) {\r\n                            error(node, Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties);\r\n                        }\r\n                        else {\r\n                            // In such a required super call, it is a compile-time error for argument expressions to reference this.\r\n                            markThisReferencesAsErrors((<ExpressionStatement>statements[0]).expression);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkAccessorDeclaration(node: AccessorDeclaration) {\r\n            if (fullTypeCheck) {\r\n                if (node.kind === SyntaxKind.GetAccessor) {\r\n                    if (!isInAmbientContext(node) && node.body && !(bodyContainsAReturnStatement(<Block>node.body) || bodyContainsSingleThrowStatement(<Block>node.body))) {\r\n                        error(node.name, Diagnostics.A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement);\r\n                    }\r\n                }\r\n\r\n                // TypeScript 1.0 spec (April 2014): 8.4.3\r\n                // Accessors for the same member name must specify the same accessibility.\r\n                var otherKind = node.kind === SyntaxKind.GetAccessor ? SyntaxKind.SetAccessor : SyntaxKind.GetAccessor;\r\n                var otherAccessor = <AccessorDeclaration>getDeclarationOfKind(node.symbol, otherKind);\r\n                if (otherAccessor) {\r\n                    if (((node.flags & NodeFlags.AccessibilityModifier) !== (otherAccessor.flags & NodeFlags.AccessibilityModifier))) {\r\n                        error(node.name, Diagnostics.Getter_and_setter_accessors_do_not_agree_in_visibility);\r\n                    }\r\n\r\n                    var thisType = getAnnotatedAccessorType(node);\r\n                    var otherType = getAnnotatedAccessorType(otherAccessor);\r\n                    // TypeScript 1.0 spec (April 2014): 4.5\r\n                    // If both accessors include type annotations, the specified types must be identical.\r\n                    if (thisType && otherType) {\r\n                        if (!isTypeIdenticalTo(thisType, otherType)) {\r\n                            error(node, Diagnostics.get_and_set_accessor_must_have_the_same_type);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            checkFunctionDeclaration(node);\r\n            checkAndStoreTypeOfAccessors(getSymbolOfNode(node));\r\n        }\r\n\r\n        function checkTypeReference(node: TypeReferenceNode) {\r\n            var type = getTypeFromTypeReferenceNode(node);\r\n            if (type !== unknownType && node.typeArguments) {\r\n                // Do type argument local checks only if referenced type is successfully resolved\r\n                var len = node.typeArguments.length;\r\n                for (var i = 0; i < len; i++) {\r\n                    checkSourceElement(node.typeArguments[i]);\r\n                    var constraint = getConstraintOfTypeParameter((<TypeReference>type).target.typeParameters[i]);\r\n                    if (fullTypeCheck && constraint) {\r\n                        var typeArgument = (<TypeReference>type).typeArguments[i];\r\n                        checkTypeAssignableTo(typeArgument, constraint, node, Diagnostics.Type_0_does_not_satisfy_the_constraint_1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkTypeQuery(node: TypeQueryNode) {\r\n            getTypeFromTypeQueryNode(node);\r\n        }\r\n\r\n        function checkTypeLiteral(node: TypeLiteralNode) {\r\n            forEach(node.members, checkSourceElement);\r\n            if (fullTypeCheck) {\r\n                var type = getTypeFromTypeLiteralNode(node);\r\n                checkIndexConstraints(type);\r\n                checkTypeForDuplicateIndexSignatures(node);\r\n            }\r\n        }\r\n\r\n        function checkArrayType(node: ArrayTypeNode) {\r\n            checkSourceElement(node.elementType);\r\n        }\r\n\r\n        function checkTupleType(node: TupleTypeNode) {\r\n            forEach(node.elementTypes, checkSourceElement);\r\n        }\r\n\r\n        function checkUnionType(node: UnionTypeNode) {\r\n            forEach(node.types, checkSourceElement);\r\n        }\r\n\r\n        function isPrivateWithinAmbient(node: Node): boolean {\r\n            return (node.flags & NodeFlags.Private) && isInAmbientContext(node);\r\n        }\r\n\r\n        function checkSpecializedSignatureDeclaration(signatureDeclarationNode: SignatureDeclaration): void {\r\n            if (!fullTypeCheck) {\r\n                return;\r\n            }\r\n            var signature = getSignatureFromDeclaration(signatureDeclarationNode);\r\n            if (!signature.hasStringLiterals) {\r\n                return;\r\n            }\r\n\r\n            // TypeScript 1.0 spec (April 2014): 3.7.2.2\r\n            // Specialized signatures are not permitted in conjunction with a function body\r\n            if ((<FunctionDeclaration>signatureDeclarationNode).body) {\r\n                error(signatureDeclarationNode, Diagnostics.A_signature_with_an_implementation_cannot_use_a_string_literal_type);\r\n                return;\r\n            }\r\n\r\n            var symbol = getSymbolOfNode(signatureDeclarationNode);\r\n            // TypeScript 1.0 spec (April 2014): 3.7.2.4\r\n            // Every specialized call or construct signature in an object type must be assignable\r\n            // to at least one non-specialized call or construct signature in the same object type\r\n            var signaturesToCheck: Signature[];\r\n            // Unnamed (call\\construct) signatures in interfaces are inherited and not shadowed so examining just node symbol won't give complete answer.\r\n            // Use declaring type to obtain full list of signatures.\r\n            if (!signatureDeclarationNode.name && signatureDeclarationNode.parent && signatureDeclarationNode.parent.kind === SyntaxKind.InterfaceDeclaration) {\r\n                Debug.assert(signatureDeclarationNode.kind === SyntaxKind.CallSignature || signatureDeclarationNode.kind === SyntaxKind.ConstructSignature);\r\n                var signatureKind = signatureDeclarationNode.kind === SyntaxKind.CallSignature ? SignatureKind.Call : SignatureKind.Construct;\r\n                var containingSymbol = getSymbolOfNode(signatureDeclarationNode.parent);\r\n                var containingType = getDeclaredTypeOfSymbol(containingSymbol);\r\n                signaturesToCheck = getSignaturesOfType(containingType, signatureKind);\r\n            }\r\n            else {\r\n                signaturesToCheck = getSignaturesOfSymbol(getSymbolOfNode(signatureDeclarationNode));\r\n            }\r\n\r\n            for (var i = 0; i < signaturesToCheck.length; i++) {\r\n                var otherSignature = signaturesToCheck[i];\r\n                if (!otherSignature.hasStringLiterals && isSignatureAssignableTo(signature, otherSignature)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            error(signatureDeclarationNode, Diagnostics.Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature);\r\n        }\r\n\r\n        function getEffectiveDeclarationFlags(n: Node, flagsToCheck: NodeFlags) {\r\n            var flags = n.flags;\r\n            if (n.parent.kind !== SyntaxKind.InterfaceDeclaration && isInAmbientContext(n)) {\r\n                if (!(flags & NodeFlags.Ambient)) {\r\n                    // It is nested in an ambient context, which means it is automatically exported\r\n                    flags |= NodeFlags.Export;\r\n                }\r\n                flags |= NodeFlags.Ambient;\r\n            }\r\n\r\n            return flags & flagsToCheck;\r\n        }\r\n\r\n        function checkFunctionOrConstructorSymbol(symbol: Symbol): void {\r\n            if (!fullTypeCheck) {\r\n                return;\r\n            }\r\n\r\n            function checkFlagAgreementBetweenOverloads(overloads: Declaration[], implementation: FunctionDeclaration, flagsToCheck: NodeFlags, someOverloadFlags: NodeFlags, allOverloadFlags: NodeFlags): void {\r\n                // Error if some overloads have a flag that is not shared by all overloads. To find the\r\n                // deviations, we XOR someOverloadFlags with allOverloadFlags\r\n                var someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;\r\n                if (someButNotAllOverloadFlags !== 0) {\r\n                    // Consider the canonical set of flags to be the flags of the bodyDeclaration or the first declaration\r\n                    // Error on all deviations from this canonical set of flags\r\n                    // The caveat is that if some overloads are defined in lib.d.ts, we don't want to\r\n                    // report the errors on those. To achieve this, we will say that the implementation is\r\n                    // the canonical signature only if it is in the same container as the first overload\r\n                    var implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;\r\n                    var canonicalFlags = implementationSharesContainerWithFirstOverload\r\n                        ? getEffectiveDeclarationFlags(implementation, flagsToCheck)\r\n                        : getEffectiveDeclarationFlags(overloads[0], flagsToCheck);\r\n                    forEach(overloads, o => {\r\n                        var deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags;\r\n                        if (deviation & NodeFlags.Export) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_exported_or_not_exported);\r\n                        }\r\n                        else if (deviation & NodeFlags.Ambient) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);\r\n                        }\r\n                        else if (deviation & (NodeFlags.Private | NodeFlags.Protected)) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);\r\n                        }\r\n                        else if (deviation & NodeFlags.QuestionMark) {\r\n                            error(o.name, Diagnostics.Overload_signatures_must_all_be_optional_or_required);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            var flagsToCheck: NodeFlags = NodeFlags.Export | NodeFlags.Ambient | NodeFlags.Private | NodeFlags.Protected | NodeFlags.QuestionMark;\r\n            var someNodeFlags: NodeFlags = 0;\r\n            var allNodeFlags = flagsToCheck;\r\n            var hasOverloads = false;\r\n            var bodyDeclaration: FunctionDeclaration;\r\n            var lastSeenNonAmbientDeclaration: FunctionDeclaration;\r\n            var previousDeclaration: FunctionDeclaration;\r\n\r\n            var declarations = symbol.declarations;\r\n            var isConstructor = (symbol.flags & SymbolFlags.Constructor) !== 0;\r\n\r\n            function reportImplementationExpectedError(node: FunctionDeclaration): void {\r\n                if (node.name && node.name.kind === SyntaxKind.Missing) {\r\n                    return;\r\n                }\r\n\r\n                var seen = false;\r\n                var subsequentNode = forEachChild(node.parent, c => {\r\n                    if (seen) {\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        seen = c === node;\r\n                    }\r\n                });\r\n                if (subsequentNode) {\r\n                    if (subsequentNode.kind === node.kind) {\r\n                        var errorNode: Node = (<FunctionDeclaration>subsequentNode).name || subsequentNode;\r\n                        if (node.name && (<FunctionDeclaration>subsequentNode).name && node.name.text === (<FunctionDeclaration>subsequentNode).name.text) {\r\n                            // the only situation when this is possible (same kind\\same name but different symbol) - mixed static and instance class members\r\n                            Debug.assert(node.kind === SyntaxKind.Method);\r\n                            Debug.assert((node.flags & NodeFlags.Static) !== (subsequentNode.flags & NodeFlags.Static));\r\n                            var diagnostic = node.flags & NodeFlags.Static ? Diagnostics.Function_overload_must_be_static : Diagnostics.Function_overload_must_not_be_static;\r\n                            error(errorNode, diagnostic);\r\n                            return;\r\n                        }\r\n                        else if ((<FunctionDeclaration>subsequentNode).body) {\r\n                            error(errorNode, Diagnostics.Function_implementation_name_must_be_0, identifierToString(node.name));\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                var errorNode: Node = node.name || node;\r\n                if (isConstructor) {\r\n                    error(errorNode, Diagnostics.Constructor_implementation_is_missing);\r\n                }\r\n                else {\r\n                    error(errorNode, Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);\r\n                }\r\n            }\r\n\r\n            // when checking exported function declarations across modules check only duplicate implementations\r\n            // names and consistency of modifiers are verified when we check local symbol\r\n            var isExportSymbolInsideModule = symbol.parent && symbol.parent.flags & SymbolFlags.Module;\r\n            var duplicateFunctionDeclaration = false;\r\n            var multipleConstructorImplementation = false;\r\n            for (var i = 0; i < declarations.length; i++) {\r\n                var node = <FunctionDeclaration>declarations[i];\r\n                var inAmbientContext = isInAmbientContext(node);\r\n                var inAmbientContextOrInterface = node.parent.kind === SyntaxKind.InterfaceDeclaration || node.parent.kind === SyntaxKind.TypeLiteral || inAmbientContext;\r\n                if (inAmbientContextOrInterface) {\r\n                    // check if declarations are consecutive only if they are non-ambient\r\n                    // 1. ambient declarations can be interleaved\r\n                    // i.e. this is legal\r\n                    //     declare function foo();\r\n                    //     declare function bar();\r\n                    //     declare function foo();\r\n                    // 2. mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one\r\n                    previousDeclaration = undefined;\r\n                }\r\n\r\n                if (node.kind === SyntaxKind.FunctionDeclaration || node.kind === SyntaxKind.Method || node.kind === SyntaxKind.Constructor) {\r\n                    var currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);\r\n                    someNodeFlags |= currentNodeFlags;\r\n                    allNodeFlags &= currentNodeFlags;\r\n\r\n                    if (node.body && bodyDeclaration) {\r\n                        if (isConstructor) {\r\n                            multipleConstructorImplementation = true;\r\n                        }\r\n                        else {\r\n                            duplicateFunctionDeclaration = true;\r\n                        }\r\n                    }\r\n                    else if (!isExportSymbolInsideModule && previousDeclaration && previousDeclaration.parent === node.parent && previousDeclaration.end !== node.pos) {\r\n                        reportImplementationExpectedError(previousDeclaration);\r\n                    }\r\n\r\n                    if (node.body) {\r\n                        if (!bodyDeclaration) {\r\n                            bodyDeclaration = node;\r\n                        }\r\n                    }\r\n                    else {\r\n                        hasOverloads = true;\r\n                    }\r\n\r\n                    previousDeclaration = node;\r\n\r\n                    if (!inAmbientContextOrInterface) {\r\n                        lastSeenNonAmbientDeclaration = node;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (multipleConstructorImplementation) {\r\n                forEach(declarations, declaration => {\r\n                    error(declaration, Diagnostics.Multiple_constructor_implementations_are_not_allowed);\r\n                });\r\n            }\r\n\r\n            if (duplicateFunctionDeclaration) {\r\n                forEach( declarations, declaration => {\r\n                    error(declaration.name, Diagnostics.Duplicate_function_implementation);\r\n                });\r\n            }\r\n\r\n            if (!isExportSymbolInsideModule && lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body) {\r\n                reportImplementationExpectedError(lastSeenNonAmbientDeclaration);\r\n            }\r\n\r\n            if (hasOverloads) {\r\n                checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);\r\n                if (bodyDeclaration) {\r\n                    var signatures = getSignaturesOfSymbol(symbol);\r\n                    var bodySignature = getSignatureFromDeclaration(bodyDeclaration);\r\n                    // If the implementation signature has string literals, we will have reported an error in\r\n                    // checkSpecializedSignatureDeclaration\r\n                    if (!bodySignature.hasStringLiterals) {\r\n                        // TypeScript 1.0 spec (April 2014): 6.1\r\n                        // If a function declaration includes overloads, the overloads determine the call \r\n                        // signatures of the type given to the function object \r\n                        // and the function implementation signature must be assignable to that type\r\n                        //\r\n                        // TypeScript 1.0 spec (April 2014): 3.8.4\r\n                        // Note that specialized call and construct signatures (section 3.7.2.4) are not significant when determining assignment compatibility\r\n                        // Consider checking against specialized signatures too. Not doing so creates a type hole:\r\n                        //\r\n                        // function g(x: \"hi\", y: boolean);\r\n                        // function g(x: string, y: {});\r\n                        // function g(x: string, y: string) { }\r\n                        //\r\n                        // The implementation is completely unrelated to the specialized signature, yet we do not check this.\r\n                        for (var i = 0, len = signatures.length; i < len; ++i) {\r\n                            if (!signatures[i].hasStringLiterals && !isSignatureAssignableTo(bodySignature, signatures[i])) {\r\n                                error(signatures[i].declaration, Diagnostics.Overload_signature_is_not_compatible_with_function_implementation);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkExportsOnMergedDeclarations(node: Node): void {\r\n            if (!fullTypeCheck) {\r\n                return;\r\n            }\r\n\r\n            var symbol: Symbol;\r\n\r\n            // Exports should be checked only if enclosing module contains both exported and non exported declarations.\r\n            // In case if all declarations are non-exported check is unnecessary.\r\n\r\n            // if localSymbol is defined on node then node itself is exported - check is required\r\n            var symbol = node.localSymbol;\r\n            if (!symbol) {\r\n                // local symbol is undefined => this declaration is non-exported.\r\n                // however symbol might contain other declarations that are exported\r\n                symbol = getSymbolOfNode(node);\r\n                if (!(symbol.flags & SymbolFlags.Export)) {\r\n                    // this is a pure local symbol (all declarations are non-exported) - no need to check anything\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // run the check only for the first declaration in the list\r\n            if (getDeclarationOfKind(symbol, node.kind) !== node) {\r\n                return;\r\n            }\r\n\r\n            // we use SymbolFlags.ExportValue, SymbolFlags.ExportType and SymbolFlags.ExportNamespace \r\n            // to denote disjoint declarationSpaces (without making new enum type).\r\n            var exportedDeclarationSpaces: SymbolFlags = 0;\r\n            var nonExportedDeclarationSpaces: SymbolFlags = 0;\r\n            forEach(symbol.declarations, d => {\r\n                var declarationSpaces = getDeclarationSpaces(d);\r\n                if (getEffectiveDeclarationFlags(d, NodeFlags.Export)) {\r\n                    exportedDeclarationSpaces |= declarationSpaces;\r\n                }\r\n                else {\r\n                    nonExportedDeclarationSpaces |= declarationSpaces;\r\n                }\r\n            });\r\n\r\n            var commonDeclarationSpace = exportedDeclarationSpaces & nonExportedDeclarationSpaces;\r\n\r\n            if (commonDeclarationSpace) {\r\n                // declaration spaces for exported and non-exported declarations intersect\r\n                forEach(symbol.declarations, d => {\r\n                    if (getDeclarationSpaces(d) & commonDeclarationSpace) {\r\n                        error(d.name, Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, identifierToString(d.name));\r\n                    }\r\n                });\r\n            }\r\n\r\n            function getDeclarationSpaces(d: Declaration): SymbolFlags {\r\n                switch (d.kind) {\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        return SymbolFlags.ExportType;\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        return (<ModuleDeclaration>d).name.kind === SyntaxKind.StringLiteral || isInstantiated(d)\r\n                            ? SymbolFlags.ExportNamespace | SymbolFlags.ExportValue\r\n                            : SymbolFlags.ExportNamespace;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        return SymbolFlags.ExportType | SymbolFlags.ExportValue;\r\n                    case SyntaxKind.ImportDeclaration:\r\n                        var result: SymbolFlags = 0;\r\n                        var target = resolveImport(getSymbolOfNode(d));\r\n                        forEach(target.declarations, d => { result |= getDeclarationSpaces(d); } );\r\n                        return result;\r\n                    default:\r\n                        return SymbolFlags.ExportValue;\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkFunctionDeclaration(node: FunctionDeclaration): void {\r\n            checkSignatureDeclaration(node);\r\n\r\n            var symbol = getSymbolOfNode(node);\r\n            // first we want to check the local symbol that contain this declaration\r\n            // - if node.localSymbol !== undefined - this is current declaration is exported and localSymbol points to the local symbol\r\n            // - if node.localSymbol === undefined - this node is non-exported so we can just pick the result of getSymbolOfNode\r\n            var localSymbol = node.localSymbol || symbol;\r\n\r\n            var firstDeclaration = getDeclarationOfKind(localSymbol, node.kind);\r\n            // Only type check the symbol once\r\n            if (node === firstDeclaration) {\r\n                checkFunctionOrConstructorSymbol(localSymbol);\r\n            }\r\n\r\n            if (symbol.parent) {\r\n                // run check once for the first declaration\r\n                if (getDeclarationOfKind(symbol, node.kind) === node) {\r\n                    // run check on export symbol to check that modifiers agree across all exported declarations\r\n                    checkFunctionOrConstructorSymbol(symbol);\r\n                }\r\n            }\r\n\r\n            checkSourceElement(node.body);\r\n            if (node.type && !isAccessor(node.kind)) {\r\n                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, getTypeFromTypeNode(node.type));\r\n            }\r\n\r\n            // If there is no body and no explicit return type, then report an error.\r\n            if (fullTypeCheck && compilerOptions.noImplicitAny && !node.body && !node.type) {\r\n                // Ignore privates within ambient contexts; they exist purely for documentative purposes to avoid name clashing.\r\n                // (e.g. privates within .d.ts files do not expose type information)\r\n                if (!isPrivateWithinAmbient(node)) {\r\n                    var typeName = typeToString(anyType);\r\n\r\n                    if (node.name) {\r\n                        error(node, Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type, identifierToString(node.name), typeName);\r\n                    }\r\n                    else {\r\n                        error(node, Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkBlock(node: Block) {\r\n            forEach(node.statements, checkSourceElement);\r\n        }\r\n\r\n        function checkCollisionWithArgumentsInGeneratedCode(node: SignatureDeclaration) {\r\n            // no rest parameters \\ declaration context \\ overload - no codegen impact\r\n            if (!hasRestParameters(node) || isInAmbientContext(node) || !(<FunctionDeclaration>node).body) {\r\n                return;\r\n            }\r\n\r\n            forEach(node.parameters, p => {\r\n                if (p.name && p.name.text === argumentsSymbol.name) {\r\n                    error(p, Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);\r\n                }\r\n            });\r\n        }\r\n\r\n        function checkCollisionWithIndexVariableInGeneratedCode(node: Node, name: Identifier) {\r\n            if (!(name && name.text === \"_i\")) {\r\n                return;\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.Parameter) {\r\n                // report error if parameter has name '_i' when:\r\n                // - function has implementation (not a signature)\r\n                // - function has rest parameters\r\n                // - context is not ambient (otherwise no codegen impact)\r\n                if ((<FunctionDeclaration>node.parent).body && hasRestParameters(<FunctionDeclaration>node.parent) && !isInAmbientContext(node)) {\r\n                    error(node, Diagnostics.Duplicate_identifier_i_Compiler_uses_i_to_initialize_rest_parameter);                    \r\n                }\r\n                return;\r\n            }\r\n\r\n            var symbol = getNodeLinks(node).resolvedSymbol;\r\n            if (symbol === unknownSymbol) {\r\n                return;\r\n            }\r\n\r\n            // we would like to discover cases like one below:\r\n            //\r\n            // var _i = \"!\";\r\n            // function foo(...a) {\r\n            //    function bar() {\r\n            //        var x = { get baz() { return _i; } }\r\n            //    }\r\n            // }\r\n            // \r\n            // at runtime '_i' referenced in getter will be resolved to the generated index variable '_i' used to initialize rest parameters.\r\n            // legitimate case: when '_i' is defined inside the function declaration with rest parameters.\r\n            // \r\n            // function foo(...a) {\r\n            //    var _i = \"!\";\r\n            //    function bar() {\r\n            //        var x = { get baz() { return _i; } }\r\n            //    }\r\n            // }\r\n\r\n            ////  if resolved symbol for node has more than one declaration - this is definitely an error\r\n            ////  (there is nothing value-like in the language that can be nested in function and consists of multiple declarations)\r\n            //if (symbol.declarations.length > 1) {\r\n            //    error(node, Diagnostics.Expression_resolves_to_variable_declaration_i_that_compiler_uses_to_initialize_rest_parameter);\r\n            //    return;\r\n            //}\r\n\r\n            // short gist of the check:\r\n            // - otherwise\r\n            // - walk to the top of the tree starting from the 'node'\r\n            // - at every step check if 'current' node contains any declaration of original node\r\n            //   yes - return\r\n            //   no - check if current declaration is function with rest parameters\r\n            //        yes - report error since '_i' from this function will shadow '_i' defined in the outer scope\r\n            //        no - go up to the next level\r\n            var current = node;\r\n            while (current) {\r\n                var definedOnCurrentLevel = forEach(symbol.declarations, d => d.parent === current ? d : undefined);\r\n                if (definedOnCurrentLevel) {\r\n                    return;\r\n                }\r\n                switch (current.kind) {\r\n                    // all kinds that might have rest parameters\r\n                    case SyntaxKind.FunctionDeclaration:\r\n                    case SyntaxKind.FunctionExpression:\r\n                    case SyntaxKind.Method:\r\n                    case SyntaxKind.ArrowFunction:\r\n                    case SyntaxKind.Constructor:\r\n                        if (hasRestParameters(<FunctionDeclaration>current)) {\r\n                            error(node, Diagnostics.Expression_resolves_to_variable_declaration_i_that_compiler_uses_to_initialize_rest_parameter);\r\n                            return;\r\n                        }\r\n                        break;\r\n                }\r\n                current = current.parent;\r\n            }\r\n        }\r\n\r\n        function needCollisionCheckForIdentifier(node: Node, identifier: Identifier, name: string): boolean {\r\n            if (!(identifier && identifier.text === name)) {\r\n                return false;\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.Property ||\r\n                node.kind === SyntaxKind.Method ||\r\n                node.kind === SyntaxKind.GetAccessor ||\r\n                node.kind === SyntaxKind.SetAccessor) {\r\n                // it is ok to have member named '_super' or '_this' - member access is always qualified\r\n                return false;\r\n            }\r\n\r\n            if (isInAmbientContext(node)) {\r\n                // ambient context - no codegen impact\r\n                return false;\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.Parameter && !(<FunctionDeclaration>node.parent).body) {\r\n                // just an overload - no codegen impact\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function checkCollisionWithCapturedThisVariable(node: Node, name: Identifier): void {\r\n            if (!needCollisionCheckForIdentifier(node, name, \"_this\")) {\r\n                return;\r\n            }\r\n            potentialThisCollisions.push(node);\r\n        }\r\n\r\n        // this function will run after checking the source file so 'CaptureThis' is correct for all nodes\r\n        function checkIfThisIsCapturedInEnclosingScope(node: Node): void {\r\n            var current = node;\r\n            while (current) {                \r\n                if (getNodeCheckFlags(current) & NodeCheckFlags.CaptureThis) {\r\n                    var isDeclaration = node.kind !== SyntaxKind.Identifier;\r\n                    if (isDeclaration) {\r\n                        error((<Declaration>node).name, Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);\r\n                    }\r\n                    else {\r\n                        error(node, Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);\r\n                    }\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n        }\r\n\r\n        function checkCollisionWithCapturedSuperVariable(node: Node, name: Identifier) {\r\n            if (!needCollisionCheckForIdentifier(node, name, \"_super\")) {\r\n                return;\r\n            }\r\n\r\n            // bubble up and find containing type\r\n            var enclosingClass = <ClassDeclaration>getAncestor(node, SyntaxKind.ClassDeclaration);\r\n            // if containing type was not found or it is ambient - exit (no codegen)\r\n            if (!enclosingClass || isInAmbientContext(enclosingClass)) {\r\n                return;\r\n            }\r\n\r\n            if (enclosingClass.baseType) {\r\n                var isDeclaration = node.kind !== SyntaxKind.Identifier;\r\n                if (isDeclaration) {\r\n                    error(node, Diagnostics.Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference);\r\n                }\r\n                else {\r\n                    error(node, Diagnostics.Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference);\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkCollisionWithRequireExportsInGeneratedCode(node: Node, name: Identifier) {\r\n            if (!needCollisionCheckForIdentifier(node, name, \"require\") && !needCollisionCheckForIdentifier(node, name, \"exports\")) {\r\n                return;\r\n            }\r\n\r\n            // Uninstantiated modules shouldnt do this check\r\n            if (node.kind === SyntaxKind.ModuleDeclaration && !isInstantiated(node)) {\r\n                return;\r\n            }\r\n\r\n            // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent\r\n            var parent = node.kind === SyntaxKind.VariableDeclaration ? node.parent.parent : node.parent;\r\n            if (parent.kind === SyntaxKind.SourceFile && isExternalModule(<SourceFile>parent)) {\r\n                // If the declaration happens to be in external module, report error that require and exports are reserved keywords\r\n                error(name, Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module, name.text, name.text);\r\n            }\r\n        }\r\n\r\n        function checkCollisionWithConstDeclarations(node: VariableDeclaration) {\r\n            // Variable declarations are hoisted to the top of their function scope. They can shadow\r\n            // block scoped declarations, which bind tighter. this will not be flagged as duplicate definition\r\n            // by the binder as the declaration scope is different.\r\n            // A non-initialized declaration is a no-op as the block declaration will resolve before the var\r\n            // declaration. the problem is if the declaration has an initializer. this will act as a write to the\r\n            // block declared value. this is fine for let, but not const.\r\n            //\r\n            // Only consider declarations with initializers, uninitialized var declarations will not \r\n            // step on a const variable.\r\n            // Do not consider let and const declarations, as duplicate block-scoped declarations \r\n            // are handled by the binder.\r\n            // We are only looking for var declarations that step on const declarations from a \r\n            // different scope. e.g.:\r\n            //      var x = 0;\r\n            //      {\r\n            //          const x = 0;\r\n            //          var x = 0;\r\n            //      }\r\n            if (node.initializer && (node.flags & NodeFlags.BlockScoped) === 0) {\r\n                var symbol = getSymbolOfNode(node);\r\n                if (symbol.flags & SymbolFlags.FunctionScopedVariable) {\r\n                    var localDeclarationSymbol = resolveName(node, node.name.text, SymbolFlags.Variable, /*nodeNotFoundErrorMessage*/ undefined, /*nameArg*/ undefined);\r\n                    if (localDeclarationSymbol && localDeclarationSymbol !== symbol && localDeclarationSymbol.flags & SymbolFlags.BlockScopedVariable) {\r\n                        if (getDeclarationFlagsFromSymbol(localDeclarationSymbol) & NodeFlags.Const) {\r\n                            error(node, Diagnostics.Cannot_redeclare_block_scoped_variable_0, symbolToString(localDeclarationSymbol));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkVariableDeclaration(node: VariableDeclaration) {\r\n            checkSourceElement(node.type);\r\n            checkExportsOnMergedDeclarations(node);\r\n\r\n            if (fullTypeCheck) {\r\n                var symbol = getSymbolOfNode(node);\r\n\r\n                var typeOfValueDeclaration = getTypeOfVariableOrParameterOrProperty(symbol);\r\n                var type: Type;\r\n                var useTypeFromValueDeclaration = node === symbol.valueDeclaration;\r\n                if (useTypeFromValueDeclaration) {\r\n                    type = typeOfValueDeclaration;\r\n                }\r\n                else {\r\n                    type = getTypeOfVariableDeclaration(node);\r\n                }\r\n\r\n\r\n                if (node.initializer) {\r\n                    if (!(getNodeLinks(node.initializer).flags & NodeCheckFlags.TypeChecked)) {\r\n                        // Use default messages\r\n                        checkTypeAssignableTo(checkAndMarkExpression(node.initializer), type, node, /*headMessage*/ undefined);\r\n                    }\r\n                    checkCollisionWithConstDeclarations(node);\r\n                }\r\n\r\n                checkCollisionWithCapturedSuperVariable(node, node.name);\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n                if (!useTypeFromValueDeclaration) {\r\n                    // TypeScript 1.0 spec (April 2014): 5.1\r\n                    // Multiple declarations for the same variable name in the same declaration space are permitted,\r\n                    // provided that each declaration associates the same type with the variable.\r\n                    if (typeOfValueDeclaration !== unknownType && type !== unknownType && !isTypeIdenticalTo(typeOfValueDeclaration, type)) {\r\n                        error(node.name, Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2, identifierToString(node.name), typeToString(typeOfValueDeclaration), typeToString(type));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkVariableStatement(node: VariableStatement) {\r\n            forEach(node.declarations, checkVariableDeclaration);\r\n        }\r\n\r\n        function checkExpressionStatement(node: ExpressionStatement) {\r\n            checkExpression(node.expression);\r\n        }\r\n\r\n        function checkIfStatement(node: IfStatement) {\r\n            checkExpression(node.expression);\r\n            checkSourceElement(node.thenStatement);\r\n            checkSourceElement(node.elseStatement);\r\n        }\r\n\r\n        function checkDoStatement(node: DoStatement) {\r\n            checkSourceElement(node.statement);\r\n            checkExpression(node.expression);\r\n        }\r\n\r\n        function checkWhileStatement(node: WhileStatement) {\r\n            checkExpression(node.expression);\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkForStatement(node: ForStatement) {\r\n            if (node.declarations) forEach(node.declarations, checkVariableDeclaration);\r\n            if (node.initializer) checkExpression(node.initializer);\r\n            if (node.condition) checkExpression(node.condition);\r\n            if (node.iterator) checkExpression(node.iterator);\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkForInStatement(node: ForInStatement) {\r\n\r\n            // TypeScript 1.0 spec  (April 2014): 5.4\r\n            // In a 'for-in' statement of the form\r\n            // for (var VarDecl in Expr) Statement\r\n            //   VarDecl must be a variable declaration without a type annotation that declares a variable of type Any,\r\n            //   and Expr must be an expression of type Any, an object type, or a type parameter type.                        \r\n            if (node.declaration) {\r\n                checkVariableDeclaration(node.declaration);\r\n                if (node.declaration.type) {\r\n                    error(node.declaration, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation);\r\n                }\r\n            }\r\n\r\n            // In a 'for-in' statement of the form\r\n            // for (Var in Expr) Statement\r\n            //   Var must be an expression classified as a reference of type Any or the String primitive type,\r\n            //   and Expr must be an expression of type Any, an object type, or a type parameter type.\r\n            if (node.variable) {\r\n                var exprType = checkExpression(node.variable);\r\n                if (exprType !== anyType && exprType !== stringType) {\r\n                    error(node.variable, Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);\r\n                }\r\n                else {\r\n                    // run check only former check succeeded to avoid cascading errors\r\n                    checkReferenceExpression(node.variable, Diagnostics.Invalid_left_hand_side_in_for_in_statement, Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant); \r\n                }\r\n            }\r\n\r\n            var exprType = checkExpression(node.expression);\r\n            // unknownType is returned i.e. if node.expression is identifier whose name cannot be resolved\r\n            // in this case error about missing name is already reported - do not report extra one\r\n            if (!isStructuredType(exprType) && exprType !== unknownType) {\r\n                error(node.expression, Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter);\r\n            }\r\n\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkBreakOrContinueStatement(node: BreakOrContinueStatement) {\r\n            // TODO: Check that target label is valid\r\n        }\r\n\r\n        function checkReturnStatement(node: ReturnStatement) {\r\n            if (node.expression && !(getNodeLinks(node.expression).flags & NodeCheckFlags.TypeChecked)) {\r\n                var func = getContainingFunction(node);\r\n                if (func) {\r\n                    if (func.kind === SyntaxKind.SetAccessor) {\r\n                        if (node.expression) {\r\n                            error(node.expression, Diagnostics.Setters_cannot_return_a_value);\r\n                        }\r\n                    }\r\n                    else {\r\n                        var returnType = getReturnTypeOfSignature(getSignatureFromDeclaration(func));\r\n                        // do assignability check only if we short circuited in determining return type\r\n                        // - function has explicit type annotation\r\n                        // - function is getter with no type annotation and setter parameter type is used\r\n                        // - function is a constructor (will be special cased below)\r\n                        var checkAssignability =\r\n                            func.type ||\r\n                            (func.kind === SyntaxKind.GetAccessor && getSetAccessorTypeAnnotationNode(<AccessorDeclaration>getDeclarationOfKind(func.symbol, SyntaxKind.SetAccessor)));\r\n                        if (checkAssignability) {\r\n                            checkTypeAssignableTo(checkExpression(node.expression), returnType, node.expression, /*headMessage*/ undefined);\r\n                        }\r\n                        else if (func.kind == SyntaxKind.Constructor) {\r\n                            // constructor doesn't have explicit return type annotation and yet its return type is known - declaring type\r\n                            // handle constructors and issue specialized error message for them.\r\n                            if (!isTypeAssignableTo(checkExpression(node.expression), returnType)) {\r\n                                error(node.expression, Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkWithStatement(node: WithStatement) {\r\n            checkExpression(node.expression);\r\n            error(node.expression, Diagnostics.All_symbols_within_a_with_block_will_be_resolved_to_any);\r\n        }\r\n\r\n        function checkSwitchStatement(node: SwitchStatement) {\r\n            var expressionType = checkExpression(node.expression);\r\n            forEach(node.clauses, clause => {\r\n                if (fullTypeCheck && clause.expression) {\r\n                    // TypeScript 1.0 spec (April 2014):5.9\r\n                    // In a 'switch' statement, each 'case' expression must be of a type that is assignable to or from the type of the 'switch' expression.\r\n                    var caseType = checkExpression(clause.expression);\r\n                    if (!isTypeAssignableTo(expressionType, caseType)) {\r\n                        // check 'expressionType isAssignableTo caseType' failed, try the reversed check and report errors if it fails\r\n                        checkTypeAssignableTo(caseType, expressionType, clause.expression, /*headMessage*/ undefined);\r\n                    }\r\n                }\r\n                checkBlock(clause);\r\n            });\r\n        }\r\n\r\n        function checkLabeledStatement(node: LabeledStatement) {\r\n            checkSourceElement(node.statement);\r\n        }\r\n\r\n        function checkThrowStatement(node: ThrowStatement) {\r\n            checkExpression(node.expression);\r\n        }\r\n\r\n        function checkTryStatement(node: TryStatement) {\r\n            checkBlock(node.tryBlock);\r\n            if (node.catchBlock) checkBlock(node.catchBlock);\r\n            if (node.finallyBlock) checkBlock(node.finallyBlock);\r\n        }\r\n\r\n        function checkIndexConstraints(type: Type) { \r\n\r\n            function checkIndexConstraintForProperty(prop: Symbol, propertyType: Type, indexDeclaration: Declaration, indexType: Type, indexKind: IndexKind): void {\r\n                if (!indexType) {\r\n                    return;\r\n                }\r\n\r\n                // index is numeric and property name is not valid numeric literal\r\n                if (indexKind === IndexKind.Number && !isNumericName(prop.name)) {\r\n                    return;\r\n                }\r\n\r\n                // perform property check if property or indexer is declared in 'type'\r\n                // this allows to rule out cases when both property and indexer are inherited from the base class\r\n                var errorNode: Node;\r\n                if (prop.parent === type.symbol) {\r\n                    errorNode = prop.valueDeclaration;\r\n                }\r\n                else if (indexDeclaration) {\r\n                    errorNode = indexDeclaration;\r\n                }\r\n\r\n                else if (type.flags & TypeFlags.Interface) {\r\n                    // for interfaces property and indexer might be inherited from different bases\r\n                    // check if any base class already has both property and indexer.\r\n                    // check should be performed only if 'type' is the first type that brings property\\indexer together\r\n                    var someBaseClassHasBothPropertyAndIndexer = forEach((<InterfaceType>type).baseTypes, base => getPropertyOfObjectType(base, prop.name) && getIndexTypeOfType(base, indexKind));\r\n                    errorNode = someBaseClassHasBothPropertyAndIndexer ? undefined : type.symbol.declarations[0];\r\n                }\r\n\r\n                if (errorNode && !isTypeAssignableTo(propertyType, indexType)) {\r\n                    var errorMessage =\r\n                        indexKind === IndexKind.String\r\n                        ? Diagnostics.Property_0_of_type_1_is_not_assignable_to_string_index_type_2\r\n                        : Diagnostics.Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2;\r\n                    error(errorNode, errorMessage, symbolToString(prop), typeToString(propertyType), typeToString(indexType));\r\n                }\r\n            }\r\n\r\n            var declaredNumberIndexer = getIndexDeclarationOfSymbol(type.symbol, IndexKind.Number);\r\n            var declaredStringIndexer = getIndexDeclarationOfSymbol(type.symbol, IndexKind.String);\r\n\r\n            var stringIndexType = getIndexTypeOfType(type, IndexKind.String);\r\n            var numberIndexType = getIndexTypeOfType(type, IndexKind.Number);\r\n\r\n            if (stringIndexType || numberIndexType) {\r\n                forEach(getPropertiesOfObjectType(type), prop => {\r\n                    var propType = getTypeOfSymbol(prop);\r\n                    checkIndexConstraintForProperty(prop, propType, declaredStringIndexer, stringIndexType, IndexKind.String);\r\n                    checkIndexConstraintForProperty(prop, propType, declaredNumberIndexer, numberIndexType, IndexKind.Number);\r\n                });\r\n            }\r\n\r\n            var errorNode: Node;\r\n            if (stringIndexType && numberIndexType) {\r\n                errorNode = declaredNumberIndexer || declaredStringIndexer;\r\n                // condition 'errorNode === undefined' may appear if types does not declare nor string neither number indexer\r\n                if (!errorNode && (type.flags & TypeFlags.Interface)) {\r\n                    var someBaseTypeHasBothIndexers = forEach((<InterfaceType>type).baseTypes, base => getIndexTypeOfType(base, IndexKind.String) && getIndexTypeOfType(base, IndexKind.Number));\r\n                    errorNode = someBaseTypeHasBothIndexers ? undefined : type.symbol.declarations[0];\r\n                }\r\n            }\r\n\r\n            if (errorNode && !isTypeAssignableTo(numberIndexType, stringIndexType)) {                \r\n                error(errorNode, Diagnostics.Numeric_index_type_0_is_not_assignable_to_string_index_type_1,\r\n                    typeToString(numberIndexType), typeToString(stringIndexType));\r\n            }\r\n        }\r\n\r\n        function checkTypeNameIsReserved(name: Identifier, message: DiagnosticMessage): void {\r\n            // TS 1.0 spec (April 2014): 3.6.1\r\n            // The predefined type keywords are reserved and cannot be used as names of user defined types.\r\n            switch (name.text) {\r\n                case \"any\":\r\n                case \"number\":\r\n                case \"boolean\":\r\n                case \"string\":\r\n                case \"void\":\r\n                    error(name, message, name.text);\r\n            }\r\n        }\r\n\r\n        // Check each type parameter and check that list has no duplicate type parameter declarations\r\n        function checkTypeParameters(typeParameterDeclarations: TypeParameterDeclaration[]) {\r\n            if (typeParameterDeclarations) {\r\n                for (var i = 0; i < typeParameterDeclarations.length; i++) {\r\n                    var node = typeParameterDeclarations[i];\r\n                    checkTypeParameter(node);\r\n\r\n                    if (fullTypeCheck) {\r\n                        for (var j = 0; j < i; j++) {\r\n                            if (typeParameterDeclarations[j].symbol === node.symbol) {\r\n                                error(node.name, Diagnostics.Duplicate_identifier_0, identifierToString(node.name));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkClassDeclaration(node: ClassDeclaration) {\r\n            checkTypeNameIsReserved(node.name, Diagnostics.Class_name_cannot_be_0);\r\n            checkTypeParameters(node.typeParameters);\r\n            checkCollisionWithCapturedThisVariable(node, node.name);\r\n            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            checkExportsOnMergedDeclarations(node);\r\n            var symbol = getSymbolOfNode(node);\r\n            var type = <InterfaceType>getDeclaredTypeOfSymbol(symbol);\r\n            var staticType = <ObjectType>getTypeOfSymbol(symbol);\r\n            if (node.baseType) {\r\n                emitExtends = emitExtends || !isInAmbientContext(node);\r\n                checkTypeReference(node.baseType);\r\n            }\r\n            if (type.baseTypes.length) {\r\n                if (fullTypeCheck) {\r\n                    var baseType = type.baseTypes[0];\r\n                    checkTypeAssignableTo(type, baseType, node.name, Diagnostics.Class_0_incorrectly_extends_base_class_1);\r\n                    var staticBaseType = getTypeOfSymbol(baseType.symbol);\r\n                    checkTypeAssignableTo(staticType, getTypeWithoutConstructors(staticBaseType), node.name,\r\n                        Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);\r\n                    if (baseType.symbol !== resolveEntityName(node, node.baseType.typeName, SymbolFlags.Value)) {\r\n                        error(node.baseType, Diagnostics.Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0, typeToString(baseType));\r\n                    }\r\n\r\n                    checkKindsOfPropertyMemberOverrides(type, baseType);\r\n                }\r\n                \r\n                // Check that base type can be evaluated as expression\r\n                checkExpression(node.baseType.typeName);\r\n            }\r\n            if (node.implementedTypes) {\r\n                forEach(node.implementedTypes, typeRefNode => {\r\n                    checkTypeReference(typeRefNode);\r\n                    if (fullTypeCheck) {\r\n                        var t = getTypeFromTypeReferenceNode(typeRefNode);\r\n                        if (t !== unknownType) {\r\n                            var declaredType = (t.flags & TypeFlags.Reference) ? (<TypeReference>t).target : t;\r\n                            if (declaredType.flags & (TypeFlags.Class | TypeFlags.Interface)) {\r\n                                checkTypeAssignableTo(type, t, node.name, Diagnostics.Class_0_incorrectly_implements_interface_1);\r\n                            }\r\n                            else {\r\n                                error(typeRefNode, Diagnostics.A_class_may_only_implement_another_class_or_interface);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            forEach(node.members, checkSourceElement);\r\n            if (fullTypeCheck) {\r\n                checkIndexConstraints(type);\r\n                checkTypeForDuplicateIndexSignatures(node);\r\n            }\r\n        }\r\n\r\n        function getTargetSymbol(s: Symbol) {\r\n            // if symbol is instantiated its flags are not copied from the 'target'\r\n            // so we'll need to get back original 'target' symbol to work with correct set of flags\r\n            return s.flags & SymbolFlags.Instantiated ? getSymbolLinks(s).target : s;\r\n        }\r\n\r\n        function checkKindsOfPropertyMemberOverrides(type: InterfaceType, baseType: ObjectType): void {\r\n\r\n            // TypeScript 1.0 spec (April 2014): 8.2.3\r\n            // A derived class inherits all members from its base class it doesn't override.\r\n            // Inheritance means that a derived class implicitly contains all non - overridden members of the base class.\r\n            // Both public and private property members are inherited, but only public property members can be overridden.\r\n            // A property member in a derived class is said to override a property member in a base class\r\n            // when the derived class property member has the same name and kind(instance or static) \r\n            // as the base class property member.\r\n            // The type of an overriding property member must be assignable(section 3.8.4)\r\n            // to the type of the overridden property member, or otherwise a compile - time error occurs.\r\n            // Base class instance member functions can be overridden by derived class instance member functions,\r\n            // but not by other kinds of members.\r\n            // Base class instance member variables and accessors can be overridden by \r\n            // derived class instance member variables and accessors, but not by other kinds of members.\r\n\r\n            // NOTE: assignability is checked in checkClassDeclaration\r\n            var baseProperties = getPropertiesOfObjectType(baseType);\r\n            for (var i = 0, len = baseProperties.length; i < len; ++i) {\r\n                var base = getTargetSymbol(baseProperties[i]);\r\n\r\n                if (base.flags & SymbolFlags.Prototype) {\r\n                    continue;\r\n                }\r\n\r\n                var derived = getTargetSymbol(getPropertyOfObjectType(type, base.name));\r\n                if (derived) {\r\n                    var baseDeclarationFlags = getDeclarationFlagsFromSymbol(base);\r\n                    var derivedDeclarationFlags = getDeclarationFlagsFromSymbol(derived);\r\n                    if ((baseDeclarationFlags & NodeFlags.Private)  || (derivedDeclarationFlags & NodeFlags.Private)) {\r\n                        // either base or derived property is private - not override, skip it\r\n                        continue;\r\n                    }\r\n\r\n                    if ((baseDeclarationFlags & NodeFlags.Static) !== (derivedDeclarationFlags & NodeFlags.Static)) {\r\n                        // value of 'static' is not the same for properties - not override, skip it\r\n                        continue;\r\n                    }\r\n\r\n                    if ((base.flags & derived.flags & SymbolFlags.Method) || ((base.flags & SymbolFlags.PropertyOrAccessor) && (derived.flags & SymbolFlags.PropertyOrAccessor))) {\r\n                        // method is overridden with method or property/accessor is overridden with property/accessor - correct case\r\n                        continue;\r\n                    }\r\n\r\n                    var errorMessage: DiagnosticMessage;\r\n                    if (base.flags & SymbolFlags.Method) {\r\n                        if (derived.flags & SymbolFlags.Accessor) {\r\n                            errorMessage = Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;\r\n                        }\r\n                        else {\r\n                            Debug.assert(derived.flags & SymbolFlags.Property);\r\n                            errorMessage = Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property;\r\n                        }\r\n                    }\r\n                    else if (base.flags & SymbolFlags.Property) {\r\n                        Debug.assert(derived.flags & SymbolFlags.Method);\r\n                        errorMessage = Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;\r\n                    }\r\n                    else {\r\n                        Debug.assert(base.flags & SymbolFlags.Accessor);\r\n                        Debug.assert(derived.flags & SymbolFlags.Method);\r\n                        errorMessage = Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;\r\n                    }\r\n\r\n                    error(derived.valueDeclaration.name, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));\r\n                }\r\n            }\r\n        }\r\n\r\n        function isAccessor(kind: SyntaxKind): boolean {\r\n            return kind === SyntaxKind.GetAccessor || kind === SyntaxKind.SetAccessor;\r\n        }\r\n\r\n        function areTypeParametersIdentical(list1: TypeParameterDeclaration[], list2: TypeParameterDeclaration[]) {\r\n            if (!list1 && !list2) {\r\n                return true;\r\n            }\r\n            if (!list1 || !list2 || list1.length !== list2.length) {\r\n                return false;\r\n            }\r\n            // TypeScript 1.0 spec (April 2014):\r\n            // When a generic interface has multiple declarations,  all declarations must have identical type parameter\r\n            // lists, i.e. identical type parameter names with identical constraints in identical order.\r\n            for (var i = 0, len = list1.length; i < len; i++) {\r\n                var tp1 = list1[i];\r\n                var tp2 = list2[i];\r\n                if (tp1.name.text !== tp2.name.text) {\r\n                    return false;\r\n                }\r\n                if (!tp1.constraint && !tp2.constraint) {\r\n                    continue;\r\n                }\r\n                if (!tp1.constraint || !tp2.constraint) {\r\n                    return false;\r\n                }\r\n                if (!isTypeIdenticalTo(getTypeFromTypeNode(tp1.constraint), getTypeFromTypeNode(tp2.constraint))) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function checkInterfaceDeclaration(node: InterfaceDeclaration) {\r\n            checkTypeParameters(node.typeParameters);\r\n            if (fullTypeCheck) {\r\n                checkTypeNameIsReserved(node.name, Diagnostics.Interface_name_cannot_be_0);\r\n\r\n                checkExportsOnMergedDeclarations(node);\r\n                var symbol = getSymbolOfNode(node);\r\n                var firstInterfaceDecl = <InterfaceDeclaration>getDeclarationOfKind(symbol, SyntaxKind.InterfaceDeclaration);\r\n                if (symbol.declarations.length > 1) {\r\n                    if (node !== firstInterfaceDecl && !areTypeParametersIdentical(firstInterfaceDecl.typeParameters, node.typeParameters)) {\r\n                        error(node.name, Diagnostics.All_declarations_of_an_interface_must_have_identical_type_parameters);\r\n                    }\r\n                }\r\n\r\n                // Only check this symbol once\r\n                if (node === firstInterfaceDecl) {\r\n                    var type = <InterfaceType>getDeclaredTypeOfSymbol(symbol);\r\n                    // run subsequent checks only if first set succeeded\r\n                    if (checkInheritedPropertiesAreIdentical(type, node.name)) {\r\n                        forEach(type.baseTypes, baseType => {\r\n                            checkTypeAssignableTo(type, baseType, node.name , Diagnostics.Interface_0_incorrectly_extends_interface_1);\r\n                        });\r\n                        checkIndexConstraints(type);\r\n                    }\r\n                }\r\n            }\r\n            forEach(node.baseTypes, checkTypeReference);\r\n            forEach(node.members, checkSourceElement);\r\n\r\n            if (fullTypeCheck) {\r\n                checkTypeForDuplicateIndexSignatures(node);\r\n            }\r\n        }\r\n\r\n        function checkTypeAliasDeclaration(node: TypeAliasDeclaration) {\r\n            checkSourceElement(node.type);\r\n        }\r\n\r\n        function getConstantValueForExpression(node: Expression): number {\r\n            var isNegative = false;\r\n            if (node.kind === SyntaxKind.PrefixOperator) {\r\n                var unaryExpression = <UnaryExpression>node;\r\n                if (unaryExpression.operator === SyntaxKind.MinusToken || unaryExpression.operator === SyntaxKind.PlusToken) {\r\n                    node = unaryExpression.operand;\r\n                    isNegative = unaryExpression.operator === SyntaxKind.MinusToken;\r\n                }\r\n            }\r\n            if (node.kind === SyntaxKind.NumericLiteral) {\r\n                var literalText = (<LiteralExpression>node).text;\r\n                return isNegative ? -literalText : +literalText;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function computeEnumMemberValues(node: EnumDeclaration) {\r\n            var nodeLinks = getNodeLinks(node);\r\n\r\n            if (!(nodeLinks.flags & NodeCheckFlags.EnumValuesComputed)) {\r\n                var enumSymbol = getSymbolOfNode(node);\r\n                var enumType = getDeclaredTypeOfSymbol(enumSymbol);\r\n                var autoValue = 0;\r\n                var ambient = isInAmbientContext(node);\r\n\r\n                forEach(node.members, member => {\r\n                    if(isNumericName(member.name.text)) {\r\n                        error(member.name, Diagnostics.An_enum_member_cannot_have_a_numeric_name);\r\n                    }\r\n                    var initializer = member.initializer;\r\n                    if (initializer) {\r\n                        autoValue = getConstantValueForExpression(initializer);\r\n                        if (autoValue === undefined && !ambient) {\r\n                            // Only here do we need to check that the initializer is assignable to the enum type.\r\n                            // If it is a constant value (not undefined), it is syntactically constrained to be a number. \r\n                            // Also, we do not need to check this for ambients because there is already\r\n                            // a syntax error if it is not a constant.\r\n                            checkTypeAssignableTo(checkExpression(initializer), enumType, initializer, /*headMessage*/ undefined);\r\n                        }\r\n                    }\r\n                    else if (ambient) {\r\n                        autoValue = undefined;\r\n                    }\r\n\r\n                    if (autoValue !== undefined) {\r\n                        getNodeLinks(member).enumMemberValue = autoValue++;\r\n                    }\r\n                });\r\n\r\n                nodeLinks.flags |= NodeCheckFlags.EnumValuesComputed;\r\n            }\r\n        }\r\n\r\n        function checkEnumDeclaration(node: EnumDeclaration) {\r\n            if (!fullTypeCheck) {\r\n                return;\r\n            }\r\n\r\n            checkTypeNameIsReserved(node.name, Diagnostics.Enum_name_cannot_be_0);\r\n            checkCollisionWithCapturedThisVariable(node, node.name);\r\n            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            checkExportsOnMergedDeclarations(node);\r\n\r\n            computeEnumMemberValues(node);\r\n\r\n            // Spec 2014 - Section 9.3:\r\n            // It isn't possible for one enum declaration to continue the automatic numbering sequence of another,\r\n            // and when an enum type has multiple declarations, only one declaration is permitted to omit a value\r\n            // for the first member.\r\n            //\r\n            // Only perform this check once per symbol\r\n            var enumSymbol = getSymbolOfNode(node);\r\n            var firstDeclaration = getDeclarationOfKind(enumSymbol, node.kind);\r\n            if (node === firstDeclaration) {\r\n                var seenEnumMissingInitialInitializer = false;\r\n                forEach(enumSymbol.declarations, declaration => {\r\n                    // return true if we hit a violation of the rule, false otherwise\r\n                    if (declaration.kind !== SyntaxKind.EnumDeclaration) {\r\n                        return false;\r\n                    }\r\n\r\n                    var enumDeclaration = <EnumDeclaration>declaration;\r\n                    if (!enumDeclaration.members.length) {\r\n                        return false;\r\n                    }\r\n\r\n                    var firstEnumMember = enumDeclaration.members[0];\r\n                    if (!firstEnumMember.initializer) {\r\n                        if (seenEnumMissingInitialInitializer) {\r\n                            error(firstEnumMember.name, Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);\r\n                        }\r\n                        else {\r\n                            seenEnumMissingInitialInitializer = true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function getFirstNonAmbientClassOrFunctionDeclaration(symbol: Symbol): Declaration {\r\n            var declarations = symbol.declarations;\r\n            for (var i = 0; i < declarations.length; i++) {\r\n                var declaration = declarations[i];\r\n                if ((declaration.kind === SyntaxKind.ClassDeclaration || (declaration.kind === SyntaxKind.FunctionDeclaration && (<FunctionDeclaration>declaration).body)) && !isInAmbientContext(declaration)) {\r\n                    return declaration;\r\n                }\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function checkModuleDeclaration(node: ModuleDeclaration) {\r\n            if (fullTypeCheck) {\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n                checkExportsOnMergedDeclarations(node);\r\n                var symbol = getSymbolOfNode(node);\r\n                if (symbol.flags & SymbolFlags.ValueModule && symbol.declarations.length > 1 && !isInAmbientContext(node)) {\r\n                    var classOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);\r\n                    if (classOrFunc) {\r\n                        if (getSourceFileOfNode(node) !== getSourceFileOfNode(classOrFunc)) {\r\n                            error(node.name, Diagnostics.A_module_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);\r\n                        }\r\n                        else if (node.pos < classOrFunc.pos) {\r\n                            error(node.name, Diagnostics.A_module_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);\r\n                        }\r\n                    }\r\n                }\r\n                if (node.name.kind === SyntaxKind.StringLiteral) {\r\n                    if (!isGlobalSourceFile(node.parent)) {\r\n                        error(node.name, Diagnostics.Ambient_external_modules_cannot_be_nested_in_other_modules);\r\n                    }\r\n                    if (isExternalModuleNameRelative(node.name.text)) {\r\n                        error(node.name, Diagnostics.Ambient_external_module_declaration_cannot_specify_relative_module_name);\r\n                    }\r\n                }\r\n            }\r\n            checkSourceElement(node.body);\r\n        }\r\n\r\n        function getFirstIdentifier(node: EntityName): Identifier {\r\n            while (node.kind === SyntaxKind.QualifiedName) {\r\n                node = (<QualifiedName>node).left;\r\n            }\r\n            return <Identifier>node;\r\n        }\r\n\r\n        function checkImportDeclaration(node: ImportDeclaration) {\r\n            checkCollisionWithCapturedThisVariable(node, node.name);\r\n            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            var symbol = getSymbolOfNode(node);\r\n            var target: Symbol;\r\n            \r\n            if (node.entityName) {\r\n                target = resolveImport(symbol);\r\n                // Import declaration for an internal module\r\n                if (target !== unknownSymbol) {\r\n                    if (target.flags & SymbolFlags.Value) {\r\n                        // Target is a value symbol, check that it is not hidden by a local declaration with the same name and\r\n                        // ensure it can be evaluated as an expression\r\n                        var moduleName = getFirstIdentifier(node.entityName);\r\n                        if (resolveEntityName(node, moduleName, SymbolFlags.Value | SymbolFlags.Namespace).flags & SymbolFlags.Namespace) {\r\n                            checkExpression(node.entityName);\r\n                        }\r\n                        else {\r\n                            error(moduleName, Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, identifierToString(moduleName));\r\n                        }\r\n                    }\r\n                    if (target.flags & SymbolFlags.Type) {\r\n                        checkTypeNameIsReserved(node.name, Diagnostics.Import_name_cannot_be_0);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Import declaration for an external module\r\n                if (node.parent.kind === SyntaxKind.SourceFile) {\r\n                    target = resolveImport(symbol);\r\n                }\r\n                else if (node.parent.kind === SyntaxKind.ModuleBlock && (<ModuleDeclaration>node.parent.parent).name.kind === SyntaxKind.StringLiteral) {\r\n                    // TypeScript 1.0 spec (April 2013): 12.1.6\r\n                    // An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference \r\n                    // other external modules only through top - level external module names.\r\n                    // Relative external module names are not permitted.\r\n                    if (isExternalModuleNameRelative(node.externalModuleName.text)) {\r\n                        error(node, Diagnostics.Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name);\r\n                        target = unknownSymbol;\r\n                    }\r\n                    else {\r\n                        target = resolveImport(symbol);\r\n                    }\r\n                }\r\n                else {\r\n                    // Parent is an internal module (syntax error is already reported)\r\n                    target = unknownSymbol;\r\n                }\r\n            }\r\n            if (target !== unknownSymbol) {\r\n                var excludedMeanings =\r\n                    (symbol.flags & SymbolFlags.Value ? SymbolFlags.Value : 0) |\r\n                    (symbol.flags & SymbolFlags.Type ? SymbolFlags.Type : 0) |\r\n                    (symbol.flags & SymbolFlags.Namespace ? SymbolFlags.Namespace : 0);\r\n                if (target.flags & excludedMeanings) {\r\n                    error(node, Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0, symbolToString(symbol));\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkExportAssignment(node: ExportAssignment) {\r\n            var container = node.parent;\r\n            if (container.kind !== SyntaxKind.SourceFile) {\r\n                // In a module, the immediate parent will be a block, so climb up one more parent\r\n                container = container.parent;\r\n            }\r\n            checkTypeOfExportAssignmentSymbol(getSymbolOfNode(container));\r\n        }\r\n\r\n        function checkSourceElement(node: Node): void {\r\n            if (!node) return;\r\n            switch (node.kind) {\r\n                case SyntaxKind.TypeParameter:\r\n                    return checkTypeParameter(<TypeParameterDeclaration>node);\r\n                case SyntaxKind.Parameter:\r\n                    return checkParameter(<ParameterDeclaration>node);\r\n                case SyntaxKind.Property:\r\n                    return checkPropertyDeclaration(<PropertyDeclaration>node);\r\n                case SyntaxKind.CallSignature:\r\n                case SyntaxKind.ConstructSignature:\r\n                case SyntaxKind.IndexSignature:\r\n                    return checkSignatureDeclaration(<SignatureDeclaration>node);\r\n                case SyntaxKind.Method:\r\n                    return checkMethodDeclaration(<MethodDeclaration>node);\r\n                case SyntaxKind.Constructor:\r\n                    return checkConstructorDeclaration(<ConstructorDeclaration>node);\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                    return checkAccessorDeclaration(<AccessorDeclaration>node);\r\n                case SyntaxKind.TypeReference:\r\n                    return checkTypeReference(<TypeReferenceNode>node);\r\n                case SyntaxKind.TypeQuery:\r\n                    return checkTypeQuery(<TypeQueryNode>node);\r\n                case SyntaxKind.TypeLiteral:\r\n                    return checkTypeLiteral(<TypeLiteralNode>node);\r\n                case SyntaxKind.ArrayType:\r\n                    return checkArrayType(<ArrayTypeNode>node);\r\n                case SyntaxKind.TupleType:\r\n                    return checkTupleType(<TupleTypeNode>node);\r\n                case SyntaxKind.UnionType:\r\n                    return checkUnionType(<UnionTypeNode>node);\r\n                case SyntaxKind.ParenType:\r\n                    return checkSourceElement((<ParenTypeNode>node).type);\r\n                case SyntaxKind.FunctionDeclaration:\r\n                    return checkFunctionDeclaration(<FunctionDeclaration>node);\r\n                case SyntaxKind.Block:\r\n                    return checkBlock(<Block>node);\r\n                case SyntaxKind.FunctionBlock:\r\n                case SyntaxKind.ModuleBlock:\r\n                    return checkBody(<Block>node);\r\n                case SyntaxKind.VariableStatement:\r\n                    return checkVariableStatement(<VariableStatement>node);\r\n                case SyntaxKind.ExpressionStatement:\r\n                    return checkExpressionStatement(<ExpressionStatement>node);\r\n                case SyntaxKind.IfStatement:\r\n                    return checkIfStatement(<IfStatement>node);\r\n                case SyntaxKind.DoStatement:\r\n                    return checkDoStatement(<DoStatement>node);\r\n                case SyntaxKind.WhileStatement:\r\n                    return checkWhileStatement(<WhileStatement>node);\r\n                case SyntaxKind.ForStatement:\r\n                    return checkForStatement(<ForStatement>node);\r\n                case SyntaxKind.ForInStatement:\r\n                    return checkForInStatement(<ForInStatement>node);\r\n                case SyntaxKind.ContinueStatement:\r\n                case SyntaxKind.BreakStatement:\r\n                    return checkBreakOrContinueStatement(<BreakOrContinueStatement>node);\r\n                case SyntaxKind.ReturnStatement:\r\n                    return checkReturnStatement(<ReturnStatement>node);\r\n                case SyntaxKind.WithStatement:\r\n                    return checkWithStatement(<WithStatement>node);\r\n                case SyntaxKind.SwitchStatement:\r\n                    return checkSwitchStatement(<SwitchStatement>node);\r\n                case SyntaxKind.LabeledStatement:\r\n                    return checkLabeledStatement(<LabeledStatement>node);\r\n                case SyntaxKind.ThrowStatement:\r\n                    return checkThrowStatement(<ThrowStatement>node);\r\n                case SyntaxKind.TryStatement:\r\n                    return checkTryStatement(<TryStatement>node);\r\n                case SyntaxKind.VariableDeclaration:\r\n                    return Debug.fail(\"Checker encountered variable declaration\");\r\n                case SyntaxKind.ClassDeclaration:\r\n                    return checkClassDeclaration(<ClassDeclaration>node);\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                    return checkInterfaceDeclaration(<InterfaceDeclaration>node);\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                    return checkTypeAliasDeclaration(<TypeAliasDeclaration>node);\r\n                case SyntaxKind.EnumDeclaration:\r\n                    return checkEnumDeclaration(<EnumDeclaration>node);\r\n                case SyntaxKind.ModuleDeclaration:\r\n                    return checkModuleDeclaration(<ModuleDeclaration>node);\r\n                case SyntaxKind.ImportDeclaration:\r\n                    return checkImportDeclaration(<ImportDeclaration>node);\r\n                case SyntaxKind.ExportAssignment:\r\n                    return checkExportAssignment(<ExportAssignment>node);\r\n            }\r\n        }\r\n\r\n        // Function expression bodies are checked after all statements in the enclosing body. This is to ensure\r\n        // constructs like the following are permitted:\r\n        //     var foo = function () {\r\n        //        var s = foo();\r\n        //        return \"hello\";\r\n        //     }\r\n        // Here, performing a full type check of the body of the function expression whilst in the process of\r\n        // determining the type of foo would cause foo to be given type any because of the recursive reference.\r\n        // Delaying the type check of the body ensures foo has been assigned a type.\r\n        function checkFunctionExpressionBodies(node: Node): void {\r\n            switch (node.kind) {\r\n                case SyntaxKind.FunctionExpression:\r\n                case SyntaxKind.ArrowFunction:\r\n                    forEach((<FunctionDeclaration>node).parameters, checkFunctionExpressionBodies);\r\n                    checkFunctionExpressionBody(<FunctionExpression>node);\r\n                    break;\r\n                case SyntaxKind.Method:\r\n                case SyntaxKind.Constructor:\r\n                case SyntaxKind.GetAccessor:\r\n                case SyntaxKind.SetAccessor:\r\n                case SyntaxKind.FunctionDeclaration:\r\n                    forEach((<FunctionDeclaration>node).parameters, checkFunctionExpressionBodies);\r\n                    break;\r\n                case SyntaxKind.WithStatement:\r\n                    checkFunctionExpressionBodies((<WithStatement>node).expression);\r\n                    break;\r\n                case SyntaxKind.Parameter:\r\n                case SyntaxKind.Property:\r\n                case SyntaxKind.ArrayLiteral:\r\n                case SyntaxKind.ObjectLiteral:\r\n                case SyntaxKind.PropertyAssignment:\r\n                case SyntaxKind.PropertyAccess:\r\n                case SyntaxKind.IndexedAccess:\r\n                case SyntaxKind.CallExpression:\r\n                case SyntaxKind.NewExpression:\r\n                case SyntaxKind.TypeAssertion:\r\n                case SyntaxKind.ParenExpression:\r\n                case SyntaxKind.PrefixOperator:\r\n                case SyntaxKind.PostfixOperator:\r\n                case SyntaxKind.BinaryExpression:\r\n                case SyntaxKind.ConditionalExpression:\r\n                case SyntaxKind.Block:\r\n                case SyntaxKind.FunctionBlock:\r\n                case SyntaxKind.ModuleBlock:\r\n                case SyntaxKind.VariableStatement:\r\n                case SyntaxKind.ExpressionStatement:\r\n                case SyntaxKind.IfStatement:\r\n                case SyntaxKind.DoStatement:\r\n                case SyntaxKind.WhileStatement:\r\n                case SyntaxKind.ForStatement:\r\n                case SyntaxKind.ForInStatement:\r\n                case SyntaxKind.ContinueStatement:\r\n                case SyntaxKind.BreakStatement:\r\n                case SyntaxKind.ReturnStatement:\r\n                case SyntaxKind.SwitchStatement:\r\n                case SyntaxKind.CaseClause:\r\n                case SyntaxKind.DefaultClause:\r\n                case SyntaxKind.LabeledStatement:\r\n                case SyntaxKind.ThrowStatement:\r\n                case SyntaxKind.TryStatement:\r\n                case SyntaxKind.TryBlock:\r\n                case SyntaxKind.CatchBlock:\r\n                case SyntaxKind.FinallyBlock:\r\n                case SyntaxKind.VariableDeclaration:\r\n                case SyntaxKind.ClassDeclaration:\r\n                case SyntaxKind.EnumDeclaration:\r\n                case SyntaxKind.EnumMember:\r\n                case SyntaxKind.SourceFile:\r\n                    forEachChild(node, checkFunctionExpressionBodies);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function checkBody(node: Block) {\r\n            checkBlock(node);\r\n            checkFunctionExpressionBodies(node);\r\n        }\r\n\r\n        // Fully type check a source file and collect the relevant diagnostics.\r\n        function checkSourceFile(node: SourceFile) {\r\n            var links = getNodeLinks(node);\r\n            if (!(links.flags & NodeCheckFlags.TypeChecked)) {\r\n                emitExtends = false;\r\n                potentialThisCollisions.length = 0;\r\n                checkBody(node);\r\n                if (isExternalModule(node)) {\r\n                    var symbol = getExportAssignmentSymbol(node.symbol);\r\n                    if (symbol && symbol.flags & SymbolFlags.Import) {\r\n                        // Mark the import as referenced so that we emit it in the final .js file.\r\n                        getSymbolLinks(symbol).referenced = true;\r\n                    }\r\n                }\r\n                if (potentialThisCollisions.length) {\r\n                    forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);\r\n                    potentialThisCollisions.length = 0;\r\n                }\r\n                if (emitExtends) links.flags |= NodeCheckFlags.EmitExtends;\r\n                links.flags |= NodeCheckFlags.TypeChecked;\r\n            }\r\n        }\r\n\r\n        function checkProgram() {\r\n            forEach(program.getSourceFiles(), checkSourceFile);\r\n        }\r\n\r\n        function getSortedDiagnostics(): Diagnostic[]{\r\n            Debug.assert(fullTypeCheck, \"diagnostics are available only in the full typecheck mode\");\r\n\r\n            if (diagnosticsModified) {\r\n                diagnostics.sort(compareDiagnostics);\r\n                diagnostics = deduplicateSortedDiagnostics(diagnostics);\r\n                diagnosticsModified = false;\r\n            }\r\n            return diagnostics;\r\n        }\r\n\r\n        function getDiagnostics(sourceFile?: SourceFile): Diagnostic[]{\r\n\r\n            if (sourceFile) {\r\n                checkSourceFile(sourceFile);\r\n                return filter(getSortedDiagnostics(), d => d.file === sourceFile);\r\n            }\r\n            checkProgram();\r\n            return getSortedDiagnostics();\r\n        }\r\n\r\n        function getGlobalDiagnostics(): Diagnostic[] {\r\n            return filter(getSortedDiagnostics(), d => !d.file);\r\n        }\r\n\r\n        // Language service support\r\n\r\n        function getNodeAtPosition(sourceFile: SourceFile, position: number): Node {\r\n            function findChildAtPosition(parent: Node): Node {\r\n                var child = forEachChild(parent, node => {\r\n                    if (position >= node.pos && position <= node.end && position >= getTokenPosOfNode(node)) {\r\n                        return findChildAtPosition(node);\r\n                    }\r\n                });\r\n                return child || parent;\r\n            }\r\n            if (position < sourceFile.pos) position = sourceFile.pos;\r\n            if (position > sourceFile.end) position = sourceFile.end;\r\n            return findChildAtPosition(sourceFile);\r\n        }\r\n\r\n        function isInsideWithStatementBody(node: Node): boolean {\r\n            if (node) {\r\n                while (node.parent) {\r\n                    if (node.parent.kind === SyntaxKind.WithStatement && (<WithStatement>node.parent).statement === node) {\r\n                        return true;\r\n                    }\r\n                    node = node.parent;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getSymbolsInScope(location: Node, meaning: SymbolFlags): Symbol[]{\r\n            var symbols: SymbolTable = {};\r\n            var memberFlags: NodeFlags = 0;\r\n            function copySymbol(symbol: Symbol, meaning: SymbolFlags) {\r\n                if (symbol.flags & meaning) {\r\n                    var id = symbol.name;\r\n                    if (!isReservedMemberName(id) && !hasProperty(symbols, id)) {\r\n                        symbols[id] = symbol;\r\n                    }\r\n                }\r\n            }\r\n            function copySymbols(source: SymbolTable, meaning: SymbolFlags) {\r\n                if (meaning) {\r\n                    for (var id in source) {\r\n                        if (hasProperty(source, id)) {\r\n                            copySymbol(source[id], meaning);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (isInsideWithStatementBody(location)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return [];\r\n            }\r\n\r\n            while (location) {\r\n                if (location.locals && !isGlobalSourceFile(location)) {\r\n                    copySymbols(location.locals, meaning);\r\n                }\r\n                switch (location.kind) {\r\n                    case SyntaxKind.SourceFile:\r\n                        if (!isExternalModule(<SourceFile>location)) break;\r\n                    case SyntaxKind.ModuleDeclaration:\r\n                        copySymbols(getSymbolOfNode(location).exports, meaning & SymbolFlags.ModuleMember);\r\n                        break;\r\n                    case SyntaxKind.EnumDeclaration:\r\n                        copySymbols(getSymbolOfNode(location).exports, meaning & SymbolFlags.EnumMember);\r\n                        break;\r\n                    case SyntaxKind.ClassDeclaration:\r\n                    case SyntaxKind.InterfaceDeclaration:\r\n                        if (!(memberFlags & NodeFlags.Static)) {\r\n                            copySymbols(getSymbolOfNode(location).members, meaning & SymbolFlags.Type);\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.FunctionExpression:\r\n                        if ((<FunctionExpression>location).name) {\r\n                            copySymbol(location.symbol, meaning);\r\n                        }\r\n                        break;\r\n                    case SyntaxKind.CatchBlock:\r\n                        if ((<CatchBlock>location).variable.text) {\r\n                            copySymbol(location.symbol, meaning);\r\n                        }\r\n                        break;\r\n                }\r\n                memberFlags = location.flags;\r\n                location = location.parent;\r\n            }\r\n            copySymbols(globals, meaning);\r\n            return mapToArray(symbols);\r\n        }\r\n\r\n        function isTypeDeclarationName(name: Node): boolean {\r\n            return name.kind == SyntaxKind.Identifier &&\r\n                isTypeDeclaration(name.parent) &&\r\n                (<Declaration>name.parent).name === name;\r\n        }\r\n\r\n        function isTypeDeclaration(node: Node): boolean {\r\n            switch (node.kind) {\r\n                case SyntaxKind.TypeParameter:\r\n                case SyntaxKind.ClassDeclaration:\r\n                case SyntaxKind.InterfaceDeclaration:\r\n                case SyntaxKind.TypeAliasDeclaration:\r\n                case SyntaxKind.EnumDeclaration:\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        // True if the given identifier is part of a type reference\r\n        function isTypeReferenceIdentifier(entityName: EntityName): boolean {\r\n            var node: Node = entityName;\r\n            while (node.parent && node.parent.kind === SyntaxKind.QualifiedName) node = node.parent;\r\n            return node.parent && node.parent.kind === SyntaxKind.TypeReference;\r\n        }\r\n\r\n        function isTypeNode(node: Node): boolean {\r\n            if (SyntaxKind.FirstTypeNode <= node.kind && node.kind <= SyntaxKind.LastTypeNode) {\r\n                return true;\r\n            }\r\n\r\n            switch (node.kind) {\r\n                case SyntaxKind.AnyKeyword:\r\n                case SyntaxKind.NumberKeyword:\r\n                case SyntaxKind.StringKeyword:\r\n                case SyntaxKind.BooleanKeyword:\r\n                    return true;\r\n                case SyntaxKind.VoidKeyword:\r\n                    return node.parent.kind !== SyntaxKind.PrefixOperator;\r\n                case SyntaxKind.StringLiteral:\r\n                    // Specialized signatures can have string literals as their parameters' type names\r\n                    return node.parent.kind === SyntaxKind.Parameter;\r\n\r\n                // Identifiers and qualified names may be type nodes, depending on their context. Climb\r\n                // above them to find the lowest container\r\n                case SyntaxKind.Identifier:\r\n                    // If the identifier is the RHS of a qualified name, then it's a type iff its parent is.\r\n                    if (node.parent.kind === SyntaxKind.QualifiedName) {\r\n                        node = node.parent;\r\n                    }\r\n                    // fall through\r\n                case SyntaxKind.QualifiedName:\r\n                    // At this point, node is either a qualified name or an identifier\r\n                    Debug.assert(node.kind === SyntaxKind.Identifier || node.kind === SyntaxKind.QualifiedName, \"'node' was expected to be a qualified name or identifier in 'isTypeNode'.\");\r\n\r\n                    var parent = node.parent;\r\n                    if (parent.kind === SyntaxKind.TypeQuery) {\r\n                        return false;\r\n                    }\r\n                    // Do not recursively call isTypeNode on the parent. In the example:\r\n                    //\r\n                    //     var a: A.B.C;\r\n                    //\r\n                    // Calling isTypeNode would consider the qualified name A.B a type node. Only C or\r\n                    // A.B.C is a type node.\r\n                    if (SyntaxKind.FirstTypeNode <= parent.kind && parent.kind <= SyntaxKind.LastTypeNode) {\r\n                        return true;\r\n                    }\r\n                    switch (parent.kind) {\r\n                        case SyntaxKind.TypeParameter:\r\n                            return node === (<TypeParameterDeclaration>parent).constraint;\r\n                        case SyntaxKind.Property:\r\n                        case SyntaxKind.Parameter:\r\n                        case SyntaxKind.VariableDeclaration:\r\n                            return node === (<VariableDeclaration>parent).type;\r\n                        case SyntaxKind.FunctionDeclaration:\r\n                        case SyntaxKind.FunctionExpression:\r\n                        case SyntaxKind.ArrowFunction:\r\n                        case SyntaxKind.Constructor:\r\n                        case SyntaxKind.Method:\r\n                        case SyntaxKind.GetAccessor:\r\n                        case SyntaxKind.SetAccessor:\r\n                            return node === (<FunctionDeclaration>parent).type;\r\n                        case SyntaxKind.CallSignature:\r\n                        case SyntaxKind.ConstructSignature:\r\n                        case SyntaxKind.IndexSignature:\r\n                            return node === (<SignatureDeclaration>parent).type;\r\n                        case SyntaxKind.TypeAssertion:\r\n                            return node === (<TypeAssertion>parent).type;\r\n                        case SyntaxKind.CallExpression:\r\n                        case SyntaxKind.NewExpression:\r\n                            return (<CallExpression>parent).typeArguments && (<CallExpression>parent).typeArguments.indexOf(node) >= 0;\r\n                    }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isInRightSideOfImportOrExportAssignment(node: EntityName) {\r\n            while (node.parent.kind === SyntaxKind.QualifiedName) {\r\n                node = <QualifiedName>node.parent;\r\n            }\r\n\r\n            if (node.parent.kind === SyntaxKind.ImportDeclaration) {\r\n                return (<ImportDeclaration>node.parent).entityName === node;\r\n            }\r\n            if (node.parent.kind === SyntaxKind.ExportAssignment) {\r\n                return (<ExportAssignment>node.parent).exportName === node;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isRightSideOfQualifiedNameOrPropertyAccess(node: Node) {\r\n            return (node.parent.kind === SyntaxKind.QualifiedName || node.parent.kind === SyntaxKind.PropertyAccess) &&\r\n                (<QualifiedName>node.parent).right === node;\r\n        }\r\n\r\n        function getSymbolOfEntityName(entityName: EntityName): Symbol {\r\n            if (isDeclarationOrFunctionExpressionOrCatchVariableName(entityName)) {\r\n                return getSymbolOfNode(entityName.parent);\r\n            }\r\n\r\n            if (entityName.parent.kind === SyntaxKind.ExportAssignment) {\r\n                return resolveEntityName(/*location*/ entityName.parent.parent, entityName,\r\n                    /*all meanings*/ SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace | SymbolFlags.Import);\r\n            }\r\n\r\n            if (isInRightSideOfImportOrExportAssignment(entityName)) {\r\n                // Since we already checked for ExportAssignment, this really could only be an Import\r\n                return getSymbolOfPartOfRightHandSideOfImport(entityName);\r\n            }\r\n\r\n            if (isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {\r\n                entityName = <QualifiedName>entityName.parent;\r\n            }\r\n\r\n            if (isExpression(entityName)) {\r\n                if (entityName.kind === SyntaxKind.Identifier) {\r\n                    // Include Import in the meaning, this ensures that we do not follow aliases to where they point and instead\r\n                    // return the alias symbol.\r\n                    var meaning: SymbolFlags = SymbolFlags.Value | SymbolFlags.Import;\r\n                    return resolveEntityName(entityName, entityName, meaning);\r\n                }\r\n                else if (entityName.kind === SyntaxKind.QualifiedName || entityName.kind === SyntaxKind.PropertyAccess) {\r\n                    var symbol = getNodeLinks(entityName).resolvedSymbol;\r\n                    if (!symbol) {\r\n                        checkPropertyAccess(<QualifiedName>entityName);\r\n                    }\r\n                    return getNodeLinks(entityName).resolvedSymbol;\r\n                }\r\n                else {\r\n                    // Missing identifier\r\n                    return;\r\n                }\r\n            }\r\n            else if (isTypeReferenceIdentifier(entityName)) {\r\n                var meaning = entityName.parent.kind === SyntaxKind.TypeReference ? SymbolFlags.Type : SymbolFlags.Namespace;\r\n                // Include Import in the meaning, this ensures that we do not follow aliases to where they point and instead\r\n                // return the alias symbol.\r\n                meaning |= SymbolFlags.Import;\r\n                return resolveEntityName(entityName, entityName, meaning);\r\n            }\r\n\r\n            // Do we want to return undefined here?\r\n            return undefined;\r\n        }\r\n\r\n        function getSymbolInfo(node: Node) {\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return undefined;\r\n            }\r\n\r\n            if (isDeclarationOrFunctionExpressionOrCatchVariableName(node)) {\r\n                // This is a declaration, call getSymbolOfNode\r\n                return getSymbolOfNode(node.parent);\r\n            }\r\n\r\n            if (node.kind === SyntaxKind.Identifier && isInRightSideOfImportOrExportAssignment(<Identifier>node)) {\r\n                return node.parent.kind === SyntaxKind.ExportAssignment\r\n                    ? getSymbolOfEntityName(<Identifier>node)\r\n                    : getSymbolOfPartOfRightHandSideOfImport(<Identifier>node);\r\n            }\r\n\r\n            switch (node.kind) {\r\n                case SyntaxKind.Identifier:\r\n                case SyntaxKind.PropertyAccess:\r\n                case SyntaxKind.QualifiedName:\r\n                    return getSymbolOfEntityName(<Identifier>node);\r\n\r\n                case SyntaxKind.ThisKeyword:\r\n                case SyntaxKind.SuperKeyword:\r\n                    var type = checkExpression(node);\r\n                    return type.symbol;\r\n\r\n                case SyntaxKind.ConstructorKeyword:\r\n                    // constructor keyword for an overload, should take us to the definition if it exist\r\n                    var constructorDeclaration = node.parent;\r\n                    if (constructorDeclaration && constructorDeclaration.kind === SyntaxKind.Constructor) {\r\n                        return (<ClassDeclaration>constructorDeclaration.parent).symbol;\r\n                    }\r\n                    return undefined;\r\n\r\n                case SyntaxKind.StringLiteral:\r\n                    // External module name in an import declaration\r\n                    if (node.parent.kind === SyntaxKind.ImportDeclaration && (<ImportDeclaration>node.parent).externalModuleName === node) {\r\n                        var importSymbol = getSymbolOfNode(node.parent);\r\n                        var moduleType = getTypeOfSymbol(importSymbol);\r\n                        return moduleType ? moduleType.symbol : undefined;\r\n                    }\r\n\r\n                // Intentional fall-through\r\n                case SyntaxKind.NumericLiteral:\r\n                    // index access\r\n                    if (node.parent.kind == SyntaxKind.IndexedAccess && (<IndexedAccess>node.parent).index === node) {\r\n                        var objectType = checkExpression((<IndexedAccess>node.parent).object);\r\n                        if (objectType === unknownType) return undefined;\r\n                        var apparentType = getApparentType(objectType);\r\n                        if (apparentType === unknownType) return undefined;\r\n                        return getPropertyOfType(apparentType, (<LiteralExpression>node).text);\r\n                    }\r\n                    break;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        function getTypeOfNode(node: Node): Type {\r\n            if (isInsideWithStatementBody(node)) {\r\n                // We cannot answer semantic questions within a with block, do not proceed any further\r\n                return unknownType;\r\n            }\r\n\r\n            if (isExpression(node)) {\r\n                return getTypeOfExpression(<Expression>node);\r\n            }\r\n\r\n            if (isTypeNode(node)) {\r\n                return getTypeFromTypeNode(<TypeNode>node);\r\n            }\r\n\r\n            if (isTypeDeclaration(node)) {\r\n                // In this case, we call getSymbolOfNode instead of getSymbolInfo because it is a declaration\r\n                var symbol = getSymbolOfNode(node);\r\n                return getDeclaredTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isTypeDeclarationName(node)) {\r\n                var symbol = getSymbolInfo(node);\r\n                return symbol && getDeclaredTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isDeclaration(node)) {\r\n                // In this case, we call getSymbolOfNode instead of getSymbolInfo because it is a declaration\r\n                var symbol = getSymbolOfNode(node);\r\n                return getTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isDeclarationOrFunctionExpressionOrCatchVariableName(node)) {\r\n                var symbol = getSymbolInfo(node);\r\n                return symbol && getTypeOfSymbol(symbol);\r\n            }\r\n\r\n            if (isInRightSideOfImportOrExportAssignment(<Identifier>node)) {\r\n                var symbol = getSymbolInfo(node);\r\n                var declaredType = symbol && getDeclaredTypeOfSymbol(symbol);\r\n                return declaredType !== unknownType ? declaredType : getTypeOfSymbol(symbol);\r\n            }\r\n\r\n            return unknownType;\r\n        }\r\n\r\n        function getTypeOfExpression(expr: Expression): Type {\r\n            if (isRightSideOfQualifiedNameOrPropertyAccess(expr)) {\r\n                expr = expr.parent;\r\n            }\r\n            return checkExpression(expr);\r\n        }\r\n\r\n        // Return the list of properties of the given type, augmented with properties from Function\r\n        // if the type has call or construct signatures\r\n        function getAugmentedPropertiesOfType(type: Type): Symbol[] {\r\n            var type = getApparentType(type);\r\n            var propsByName = createSymbolTable(getPropertiesOfType(type));\r\n            if (getSignaturesOfType(type, SignatureKind.Call).length || getSignaturesOfType(type, SignatureKind.Construct).length) {\r\n                forEach(getPropertiesOfType(globalFunctionType), p => {\r\n                    if (!hasProperty(propsByName, p.name)) {\r\n                        propsByName[p.name] = p;\r\n                    }\r\n                });\r\n            }\r\n            return getNamedMembers(propsByName);\r\n        }\r\n\r\n        function getRootSymbols(symbol: Symbol): Symbol[]{\r\n            if (symbol.flags & SymbolFlags.UnionProperty) {\r\n                var symbols: Symbol[] = [];\r\n                var name = symbol.name;\r\n                forEach(getSymbolLinks(symbol).unionType.types, t => {\r\n                    symbols.push(getPropertyOfType(t, name));\r\n                });\r\n                return symbols;\r\n            }\r\n            else if (symbol.flags & SymbolFlags.Transient) {\r\n                var target = getSymbolLinks(symbol).target;\r\n                if (target) {\r\n                    return [target];\r\n                }\r\n            }\r\n            return [symbol];\r\n        }\r\n\r\n        // Emitter support\r\n\r\n        function isExternalModuleSymbol(symbol: Symbol): boolean {\r\n            return symbol.flags & SymbolFlags.ValueModule && symbol.declarations.length === 1 && symbol.declarations[0].kind === SyntaxKind.SourceFile;\r\n        }\r\n\r\n        function isNodeDescendentOf(node: Node, ancestor: Node): boolean {\r\n            while (node) {\r\n                if (node === ancestor) return true;\r\n                node = node.parent;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isUniqueLocalName(name: string, container: Node): boolean {\r\n            for (var node = container; isNodeDescendentOf(node, container); node = node.nextContainer) {\r\n                if (node.locals && hasProperty(node.locals, name) && node.locals[name].flags & (SymbolFlags.Value | SymbolFlags.ExportValue)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function getLocalNameOfContainer(container: Declaration): string {\r\n            var links = getNodeLinks(container);\r\n            if (!links.localModuleName) {\r\n                var prefix = \"\";\r\n                var name = unescapeIdentifier(container.name.text);\r\n                while (!isUniqueLocalName(escapeIdentifier(prefix + name), container)) {\r\n                    prefix += \"_\";\r\n                }\r\n                links.localModuleName = prefix + getTextOfNode(container.name);\r\n            }\r\n            return links.localModuleName;\r\n        }\r\n\r\n        function getLocalNameForSymbol(symbol: Symbol, location: Node): string {\r\n            var node = location;\r\n            while (node) {\r\n                if ((node.kind === SyntaxKind.ModuleDeclaration || node.kind === SyntaxKind.EnumDeclaration) && getSymbolOfNode(node) === symbol) {\r\n                    return getLocalNameOfContainer(node);\r\n                }\r\n                node = node.parent;\r\n            }\r\n            Debug.fail(\"getLocalNameForSymbol failed\");\r\n        }\r\n\r\n        function getExpressionNamePrefix(node: Identifier): string {\r\n            var symbol = getNodeLinks(node).resolvedSymbol;\r\n            if (symbol) {\r\n                // In general, we need to prefix an identifier with its parent name if it references\r\n                // an exported entity from another module declaration. If we reference an exported\r\n                // entity within the same module declaration, then whether we prefix depends on the\r\n                // kind of entity. SymbolFlags.ExportHasLocal encompasses all the kinds that we\r\n                // do NOT prefix.\r\n                var exportSymbol = getExportSymbolOfValueSymbolIfExported(symbol);\r\n                if (symbol !== exportSymbol && !(exportSymbol.flags & SymbolFlags.ExportHasLocal)) {\r\n                    symbol = exportSymbol;\r\n                }\r\n                if (symbol.parent) {\r\n                    return isExternalModuleSymbol(symbol.parent) ? \"exports\" : getLocalNameForSymbol(getParentOfSymbol(symbol), node.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getExportAssignmentName(node: SourceFile): string {\r\n            var symbol = getExportAssignmentSymbol(getSymbolOfNode(node));\r\n            return symbol && symbolIsValue(symbol) ? symbolToString(symbol): undefined;\r\n        }\r\n\r\n        function isTopLevelValueImportedViaEntityName(node: ImportDeclaration): boolean {\r\n            if (node.parent.kind !== SyntaxKind.SourceFile || !node.entityName) {\r\n                // parent is not source file or it is not reference to internal module\r\n                return false;\r\n            }\r\n            var symbol = getSymbolOfNode(node);\r\n            var target = resolveImport(symbol);\r\n            return target !== unknownSymbol && ((target.flags & SymbolFlags.Value) !== 0);\r\n        }\r\n\r\n        function hasSemanticErrors() {\r\n            // Return true if there is any semantic error in a file or globally\r\n            return getDiagnostics().length > 0 || getGlobalDiagnostics().length > 0;\r\n        }\r\n\r\n        function hasEarlyErrors(sourceFile?: SourceFile): boolean {\r\n            return forEach(getDiagnostics(sourceFile), d => d.isEarly);\r\n        }\r\n\r\n        function isReferencedImportDeclaration(node: ImportDeclaration): boolean {\r\n            var symbol = getSymbolOfNode(node);\r\n            if (getSymbolLinks(symbol).referenced) {\r\n                return true;\r\n            }\r\n            // logic below will answer 'true' for exported import declaration in a nested module that itself is not exported.\r\n            // As a consequence this might cause emitting extra.\r\n            if (node.flags & NodeFlags.Export) {\r\n                var target = resolveImport(symbol);\r\n                if (target !== unknownSymbol && target.flags & SymbolFlags.Value) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isImplementationOfOverload(node: FunctionDeclaration) {\r\n            if (node.body) {\r\n                var symbol = getSymbolOfNode(node);\r\n                var signaturesOfSymbol = getSignaturesOfSymbol(symbol);\r\n                // If this function body corresponds to function with multiple signature, it is implementation of overload\r\n                // e.g.: function foo(a: string): string;\r\n                //       function foo(a: number): number;\r\n                //       function foo(a: any) { // This is implementation of the overloads\r\n                //           return a;\r\n                //       }\r\n                return signaturesOfSymbol.length > 1 ||\r\n                    // If there is single signature for the symbol, it is overload if that signature isn't coming from the node\r\n                    // e.g.: function foo(a: string): string;\r\n                    //       function foo(a: any) { // This is implementation of the overloads\r\n                    //           return a;\r\n                    //       }\r\n                    (signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getNodeCheckFlags(node: Node): NodeCheckFlags {\r\n            return getNodeLinks(node).flags;\r\n        }\r\n\r\n        function getEnumMemberValue(node: EnumMember): number {\r\n            computeEnumMemberValues(<EnumDeclaration>node.parent);\r\n            return getNodeLinks(node).enumMemberValue;\r\n        }\r\n\r\n        function getConstantValue(node: PropertyAccess): number {\r\n            var symbol = getNodeLinks(node).resolvedSymbol;\r\n            if (symbol && (symbol.flags & SymbolFlags.EnumMember)) {\r\n                var declaration = symbol.valueDeclaration;\r\n                var constantValue: number;\r\n                if (declaration.kind === SyntaxKind.EnumMember && (constantValue = getNodeLinks(declaration).enumMemberValue) !== undefined) {\r\n                    return constantValue;\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function writeTypeAtLocation(location: Node, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter) {\r\n            // Get type of the symbol if this is the valid symbol otherwise get type at location\r\n            var symbol = getSymbolOfNode(location);\r\n            var type = symbol && !(symbol.flags & SymbolFlags.TypeLiteral) ? getTypeOfSymbol(symbol) : getTypeFromTypeNode(location);\r\n\r\n            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\r\n        }\r\n\r\n        function writeReturnTypeOfSignatureDeclaration(signatureDeclaration: SignatureDeclaration, enclosingDeclaration: Node, flags: TypeFormatFlags, writer: SymbolWriter) {\r\n            var signature = getSignatureFromDeclaration(signatureDeclaration);\r\n            getSymbolDisplayBuilder().buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags);\r\n        }\r\n\r\n        function invokeEmitter(targetSourceFile?: SourceFile) {\r\n            var resolver: EmitResolver = {\r\n                getProgram: () => program,\r\n                getLocalNameOfContainer: getLocalNameOfContainer,\r\n                getExpressionNamePrefix: getExpressionNamePrefix,\r\n                getExportAssignmentName: getExportAssignmentName,\r\n                isReferencedImportDeclaration: isReferencedImportDeclaration,\r\n                getNodeCheckFlags: getNodeCheckFlags,\r\n                getEnumMemberValue: getEnumMemberValue,\r\n                isTopLevelValueImportedViaEntityName: isTopLevelValueImportedViaEntityName,\r\n                hasSemanticErrors: hasSemanticErrors,\r\n                hasEarlyErrors: hasEarlyErrors,\r\n                isDeclarationVisible: isDeclarationVisible,\r\n                isImplementationOfOverload: isImplementationOfOverload,\r\n                writeTypeAtLocation: writeTypeAtLocation,\r\n                writeReturnTypeOfSignatureDeclaration: writeReturnTypeOfSignatureDeclaration,\r\n                isSymbolAccessible: isSymbolAccessible,\r\n                isImportDeclarationEntityNameReferenceDeclarationVisibile: isImportDeclarationEntityNameReferenceDeclarationVisibile,\r\n                getConstantValue: getConstantValue,\r\n            };\r\n            checkProgram();\r\n            return emitFiles(resolver, targetSourceFile);\r\n        }\r\n\r\n        function initializeTypeChecker() {\r\n            // Bind all source files and propagate errors\r\n            forEach(program.getSourceFiles(), file => {\r\n                bindSourceFile(file);\r\n                forEach(file.semanticErrors, addDiagnostic);\r\n            });\r\n            // Initialize global symbol table\r\n            forEach(program.getSourceFiles(), file => {\r\n                if (!isExternalModule(file)) {\r\n                    extendSymbolTable(globals, file.locals);\r\n                }\r\n            });\r\n            // Initialize special symbols\r\n            getSymbolLinks(undefinedSymbol).type = undefinedType;\r\n            getSymbolLinks(argumentsSymbol).type = getGlobalType(\"IArguments\");\r\n            getSymbolLinks(unknownSymbol).type = unknownType;\r\n            globals[undefinedSymbol.name] = undefinedSymbol;\r\n            // Initialize special types\r\n            globalArraySymbol = getGlobalSymbol(\"Array\");\r\n            globalArrayType = getTypeOfGlobalSymbol(globalArraySymbol, 1);\r\n            globalObjectType = getGlobalType(\"Object\");\r\n            globalFunctionType = getGlobalType(\"Function\");\r\n            globalStringType = getGlobalType(\"String\");\r\n            globalNumberType = getGlobalType(\"Number\");\r\n            globalBooleanType = getGlobalType(\"Boolean\");\r\n            globalRegExpType = getGlobalType(\"RegExp\");\r\n        }\r\n\r\n        initializeTypeChecker();\r\n\r\n        return checker;\r\n    }\r\n}\r\n"}