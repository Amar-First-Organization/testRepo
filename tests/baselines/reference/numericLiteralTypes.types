=== tests/cases/conformance/types/primitives/numericLiteral/numericLiteralTypes.ts ===
interface NumericMember {
>NumericMember : NumericMember

    member: 255;
>member : 255
}

interface HexMember {
>HexMember : HexMember

    member: 0xFF;
>member : 0xFF
}

interface OctalMember {
>OctalMember : OctalMember

    member: 0o377;
>member : 0o377
}

interface NumberMember {
>NumberMember : NumberMember

    member: number;
>member : number
}

var a: NumericMember;
>a : NumericMember
>NumericMember : NumericMember

var b: HexMember;
>b : HexMember
>HexMember : HexMember

var c: OctalMember;
>c : OctalMember
>OctalMember : OctalMember

var d: NumberMember;
>d : NumberMember
>NumberMember : NumberMember

a = b = c = {member: 2.55e2};
>a = b = c = {member: 2.55e2} : { member: 255; }
>a : NumericMember
>b = c = {member: 2.55e2} : { member: 255; }
>b : HexMember
>c = {member: 2.55e2} : { member: 255; }
>c : OctalMember
>{member: 2.55e2} : { member: 255; }
>member : 255
>2.55e2 : 255

d = a;
>d = a : NumericMember
>d : NumberMember
>a : NumericMember

d = b;
>d = b : HexMember
>d : NumberMember
>b : HexMember

d = c;
>d = c : OctalMember
>d : NumberMember
>c : OctalMember

interface NegativeNumericMember {
>NegativeNumericMember : NegativeNumericMember

    member: -255;
>member : -255
}

interface NegativeHexMember {
>NegativeHexMember : NegativeHexMember

    member: -0xFF;
>member : -0xFF
}

interface NegativeOctalMember {
>NegativeOctalMember : NegativeOctalMember

    member: -0o377;
>member : -0o377
}

var na: NegativeNumericMember;
>na : NegativeNumericMember
>NegativeNumericMember : NegativeNumericMember

var nb: NegativeHexMember;
>nb : NegativeHexMember
>NegativeHexMember : NegativeHexMember

var nc: NegativeOctalMember;
>nc : NegativeOctalMember
>NegativeOctalMember : NegativeOctalMember

na = nb = nc = {member: -2.55e2};
>na = nb = nc = {member: -2.55e2} : { member: -255; }
>na : NegativeNumericMember
>nb = nc = {member: -2.55e2} : { member: -255; }
>nb : NegativeHexMember
>nc = {member: -2.55e2} : { member: -255; }
>nc : NegativeOctalMember
>{member: -2.55e2} : { member: -255; }
>member : -255
>-2.55e2 : -255
>2.55e2 : 255

d = na;
>d = na : NegativeNumericMember
>d : NumberMember
>na : NegativeNumericMember

d = nb;
>d = nb : NegativeHexMember
>d : NumberMember
>nb : NegativeHexMember

d = nc;
>d = nc : NegativeOctalMember
>d : NumberMember
>nc : NegativeOctalMember

const zero: 0 = 0;
>zero : 0
>0 : 0

let one: 1 = 1;
>one : 1
>1 : 1

const two: 2 = 2;
>two : 2
>2 : 2

const three: 3 = 3;
>three : 3
>3 : 3

const four: 4 = 4;
>four : 4
>4 : 4

const ten: 10 = 10;
>ten : 10
>10 : 10

const twenty: 20 = 20;
>twenty : 20
>20 : 20

one = one * one;
>one = one * one : 1
>one : 1
>one * one : 1
>one : 1
>one : 1

one = one ** zero;
>one = one ** zero : 1
>one : 1
>one ** zero : 1
>one : 1
>zero : 0

one = one / one;
>one = one / one : 1
>one : 1
>one / one : 1
>one : 1
>one : 1

one = one % twenty;
>one = one % twenty : 1
>one : 1
>one % twenty : 1
>one : 1
>twenty : 20

one = one + zero;
>one = one + zero : 1
>one : 1
>one + zero : 1
>one : 1
>zero : 0

one = one - zero;
>one = one - zero : 1
>one : 1
>one - zero : 1
>one : 1
>zero : 0

one = one & one;
>one = one & one : 1
>one : 1
>one & one : 1
>one : 1
>one : 1

one = one ^ zero;
>one = one ^ zero : 1
>one : 1
>one ^ zero : 1
>one : 1
>zero : 0

one = one | one;
>one = one | one : 1
>one : 1
>one | one : 1
>one : 1
>one : 1

one = (((two ** two) - four) + (ten * two)) % three / two;
>one = (((two ** two) - four) + (ten * two)) % three / two : 1
>one : 1
>(((two ** two) - four) + (ten * two)) % three / two : 1
>(((two ** two) - four) + (ten * two)) % three : 2
>(((two ** two) - four) + (ten * two)) : 20
>((two ** two) - four) + (ten * two) : 20
>((two ** two) - four) : 0
>(two ** two) - four : 0
>(two ** two) : 4
>two ** two : 4
>two : 2
>two : 2
>four : 4
>(ten * two) : 20
>ten * two : 20
>ten : 10
>two : 2
>three : 3
>two : 2

/*type True = 1;
type False = 0;

function isTrue(x: True | False): x is True {
    return !!x;
}

let x: True | False;

if (isTrue(x)) {
    let y: True = x;
}
else {
    let z: False = x;
}
*/
