//// [tests/cases/compiler/mappedTypeIndexedAccessConstraint.ts] ////

=== mappedTypeIndexedAccessConstraint.ts ===
type M0 = { a: 1, b: 2 };
>M0 : Symbol(M0, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 0))
>a : Symbol(a, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 11))
>b : Symbol(b, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 17))

type M1 = { [K in keyof Partial<M0>]: M0[K] };
>M1 : Symbol(M1, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 25))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 2, 13))
>Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
>M0 : Symbol(M0, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 0))
>M0 : Symbol(M0, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 0))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 2, 13))

type M2 = { [K in keyof Required<M1>]: M1[K] };
>M2 : Symbol(M2, Decl(mappedTypeIndexedAccessConstraint.ts, 2, 46))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 4, 13))
>Required : Symbol(Required, Decl(lib.es5.d.ts, --, --))
>M1 : Symbol(M1, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 25))
>M1 : Symbol(M1, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 25))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 4, 13))

function foo<K extends keyof M0>(m1: M1[K], m2: M2[K]) {
>foo : Symbol(foo, Decl(mappedTypeIndexedAccessConstraint.ts, 4, 47))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 13))
>M0 : Symbol(M0, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 0))
>m1 : Symbol(m1, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 33))
>M1 : Symbol(M1, Decl(mappedTypeIndexedAccessConstraint.ts, 0, 25))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 13))
>m2 : Symbol(m2, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 43))
>M2 : Symbol(M2, Decl(mappedTypeIndexedAccessConstraint.ts, 2, 46))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 13))

    m1.toString();  // Error
>m1.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>m1 : Symbol(m1, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 33))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

    m1?.toString();
>m1?.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>m1 : Symbol(m1, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 33))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

    m2.toString();  // Error
>m2.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>m2 : Symbol(m2, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 43))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

    m2?.toString();
>m2?.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>m2 : Symbol(m2, Decl(mappedTypeIndexedAccessConstraint.ts, 6, 43))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
}

// Repro from #57487

type Obj = {
>Obj : Symbol(Obj, Decl(mappedTypeIndexedAccessConstraint.ts, 11, 1))

    a: 1,
>a : Symbol(a, Decl(mappedTypeIndexedAccessConstraint.ts, 15, 12))

    b: 2
>b : Symbol(b, Decl(mappedTypeIndexedAccessConstraint.ts, 16, 9))

};

const mapped: { [K in keyof Partial<Obj>]: Obj[K] } = {};
>mapped : Symbol(mapped, Decl(mappedTypeIndexedAccessConstraint.ts, 20, 5))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 20, 17))
>Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
>Obj : Symbol(Obj, Decl(mappedTypeIndexedAccessConstraint.ts, 11, 1))
>Obj : Symbol(Obj, Decl(mappedTypeIndexedAccessConstraint.ts, 11, 1))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 20, 17))

const resolveMapped = <K extends keyof typeof mapped>(key: K) => mapped[key].toString();  // Error
>resolveMapped : Symbol(resolveMapped, Decl(mappedTypeIndexedAccessConstraint.ts, 22, 5))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 22, 23))
>mapped : Symbol(mapped, Decl(mappedTypeIndexedAccessConstraint.ts, 20, 5))
>key : Symbol(key, Decl(mappedTypeIndexedAccessConstraint.ts, 22, 54))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 22, 23))
>mapped[key].toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>mapped : Symbol(mapped, Decl(mappedTypeIndexedAccessConstraint.ts, 20, 5))
>key : Symbol(key, Decl(mappedTypeIndexedAccessConstraint.ts, 22, 54))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

// Additional repro from #57487

const arr = ["foo", "12", 42] as const;
>arr : Symbol(arr, Decl(mappedTypeIndexedAccessConstraint.ts, 26, 5))
>const : Symbol(const)

type Mappings = { foo: boolean, "12": number, 42: string };
>Mappings : Symbol(Mappings, Decl(mappedTypeIndexedAccessConstraint.ts, 26, 39))
>foo : Symbol(foo, Decl(mappedTypeIndexedAccessConstraint.ts, 28, 17))
>"12" : Symbol("12", Decl(mappedTypeIndexedAccessConstraint.ts, 28, 31))
>42 : Symbol(42, Decl(mappedTypeIndexedAccessConstraint.ts, 28, 45))

type MapperArgs<K extends (typeof arr)[number]> = {
>MapperArgs : Symbol(MapperArgs, Decl(mappedTypeIndexedAccessConstraint.ts, 28, 59))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 30, 16))
>arr : Symbol(arr, Decl(mappedTypeIndexedAccessConstraint.ts, 26, 5))

    v: K,
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 30, 51))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 30, 16))

    i: number
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 31, 9))

};

type SetOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
>SetOptional : Symbol(SetOptional, Decl(mappedTypeIndexedAccessConstraint.ts, 33, 2))
>T : Symbol(T, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 17))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 19))
>T : Symbol(T, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 17))
>Omit : Symbol(Omit, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 17))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 19))
>Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
>Pick : Symbol(Pick, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 17))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 19))

type PartMappings = SetOptional<Mappings, "foo">;
>PartMappings : Symbol(PartMappings, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 74))
>SetOptional : Symbol(SetOptional, Decl(mappedTypeIndexedAccessConstraint.ts, 33, 2))
>Mappings : Symbol(Mappings, Decl(mappedTypeIndexedAccessConstraint.ts, 26, 39))

const mapper: { [K in keyof PartMappings]: (o: MapperArgs<K>) => PartMappings[K] } = {
>mapper : Symbol(mapper, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 5))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 17))
>PartMappings : Symbol(PartMappings, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 74))
>o : Symbol(o, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 44))
>MapperArgs : Symbol(MapperArgs, Decl(mappedTypeIndexedAccessConstraint.ts, 28, 59))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 17))
>PartMappings : Symbol(PartMappings, Decl(mappedTypeIndexedAccessConstraint.ts, 35, 74))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 17))

    foo: ({ v, i }) => v.length + i > 4,
>foo : Symbol(foo, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 86))
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 40, 11))
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 40, 14))
>v.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 40, 11))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 40, 14))

    "12": ({ v, i }) => Number(v) + i,
>"12" : Symbol("12", Decl(mappedTypeIndexedAccessConstraint.ts, 40, 40))
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 41, 12))
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 41, 15))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 41, 12))
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 41, 15))

    42: ({ v, i }) => `${v}${i}`,
>42 : Symbol(42, Decl(mappedTypeIndexedAccessConstraint.ts, 41, 38))
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 42, 10))
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 42, 13))
>v : Symbol(v, Decl(mappedTypeIndexedAccessConstraint.ts, 42, 10))
>i : Symbol(i, Decl(mappedTypeIndexedAccessConstraint.ts, 42, 13))
}

const resolveMapper1 = <K extends keyof typeof mapper>(
>resolveMapper1 : Symbol(resolveMapper1, Decl(mappedTypeIndexedAccessConstraint.ts, 45, 5))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 45, 24))
>mapper : Symbol(mapper, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 5))

    key: K, o: MapperArgs<K>) => mapper[key](o);  // Error
>key : Symbol(key, Decl(mappedTypeIndexedAccessConstraint.ts, 45, 55))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 45, 24))
>o : Symbol(o, Decl(mappedTypeIndexedAccessConstraint.ts, 46, 11))
>MapperArgs : Symbol(MapperArgs, Decl(mappedTypeIndexedAccessConstraint.ts, 28, 59))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 45, 24))
>mapper : Symbol(mapper, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 5))
>key : Symbol(key, Decl(mappedTypeIndexedAccessConstraint.ts, 45, 55))
>o : Symbol(o, Decl(mappedTypeIndexedAccessConstraint.ts, 46, 11))

const resolveMapper2 = <K extends keyof typeof mapper>(
>resolveMapper2 : Symbol(resolveMapper2, Decl(mappedTypeIndexedAccessConstraint.ts, 48, 5))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 48, 24))
>mapper : Symbol(mapper, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 5))

    key: K, o: MapperArgs<K>) => mapper[key]?.(o)
>key : Symbol(key, Decl(mappedTypeIndexedAccessConstraint.ts, 48, 55))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 48, 24))
>o : Symbol(o, Decl(mappedTypeIndexedAccessConstraint.ts, 49, 11))
>MapperArgs : Symbol(MapperArgs, Decl(mappedTypeIndexedAccessConstraint.ts, 28, 59))
>K : Symbol(K, Decl(mappedTypeIndexedAccessConstraint.ts, 48, 24))
>mapper : Symbol(mapper, Decl(mappedTypeIndexedAccessConstraint.ts, 39, 5))
>key : Symbol(key, Decl(mappedTypeIndexedAccessConstraint.ts, 48, 55))
>o : Symbol(o, Decl(mappedTypeIndexedAccessConstraint.ts, 49, 11))

