typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8518,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8518,40): error TS1005: ';' expected.
typescript_standalone.d.ts(8974,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8974,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9234,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9234,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9584,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9584,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9608,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9608,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9695,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9695,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10860,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10860,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10871,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10871,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10881,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10881,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10956,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10956,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11013,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11013,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11067,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11067,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11087,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11087,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11097,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11097,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11131,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11131,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11134,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11134,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11138,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11138,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11156,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11156,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11182,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11182,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11185,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11185,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11197,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11197,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11227,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11227,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11261,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11261,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11272,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11272,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11296,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11296,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11304,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11304,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11308,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11308,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11338,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11338,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11381,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11381,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11568,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11568,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11570,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11570,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11574,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11574,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11576,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11578,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11580,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11582,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11591,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11591,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11593,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11593,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11595,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11595,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11597,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11597,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11599,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11599,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11601,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11601,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11603,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11603,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11605,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11605,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11607,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11607,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11609,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11609,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11611,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11611,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11613,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11613,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11615,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11615,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11617,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11617,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11619,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11619,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11629,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11629,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11631,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11631,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11633,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11633,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11635,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11635,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11637,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11637,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11639,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11639,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11641,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11641,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11643,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11643,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11645,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11645,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11717,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11717,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11719,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11719,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11721,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11721,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11762,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11762,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_watcher.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The sample sources can be found
             at: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#incremental-build-support-using-the-language-services
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var process: any;
    declare var console: any;
    declare var fs: {
        existsSync(path: string): boolean;
        readdirSync(path: string): string[];
        readFileSync(filename: string, encoding?: string): string;
        writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; } | string): void;
        watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: { mtime: Date }, prev: { mtime: Date }) => void): void;
    };
    declare var path: any;
    
    import * as ts from "typescript";
    
    function watch(rootFileNames: string[], options: ts.CompilerOptions) {
        const files: ts.MapLike<{ version: number }> = {};
    
        // initialize the list of files
        rootFileNames.forEach(fileName => {
            files[fileName] = { version: 0 };
        });
    
        // Create the language service host to allow the LS to communicate with the host
        const servicesHost: ts.LanguageServiceHost = {
            getScriptFileNames: () => rootFileNames,
            getScriptVersion: (fileName) => files[fileName] && files[fileName].version.toString(),
            getScriptSnapshot: (fileName) => {
                if (!fs.existsSync(fileName)) {
                    return undefined;
                }
    
                return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());
            },
            getCurrentDirectory: () => process.cwd(),
            getCompilationSettings: () => options,
            getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options),
        };
    
        // Create the language service files
        const services = ts.createLanguageService(servicesHost, ts.createDocumentRegistry())
    
        // Now let's watch the files
        rootFileNames.forEach(fileName => {
            // First time around, emit all files
            emitFile(fileName);
    
            // Add a watch on the file to handle next change
            fs.watchFile(fileName,
                { persistent: true, interval: 250 },
                (curr, prev) => {
                    // Check timestamp
                    if (+curr.mtime <= +prev.mtime) {
                        return;
                    }
    
                    // Update the version to signal a change in the file
                    files[fileName].version++;
    
                    // write the changes to disk
                    emitFile(fileName);
                });
        });
    
        function emitFile(fileName: string) {
            let output = services.getEmitOutput(fileName);
    
            if (!output.emitSkipped) {
                console.log(`Emitting ${fileName}`);
            }
            else {
                console.log(`Emitting ${fileName} failed`);
                logErrors(fileName);
            }
    
            output.outputFiles.forEach(o => {
                fs.writeFileSync(o.name, o.text, "utf8");
            });
        }
    
        function logErrors(fileName: string) {
            let allDiagnostics = services.getCompilerOptionsDiagnostics()
                .concat(services.getSyntacticDiagnostics(fileName))
                .concat(services.getSemanticDiagnostics(fileName));
    
            allDiagnostics.forEach(diagnostic => {
                let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, "\n");
                if (diagnostic.file) {
                    let { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);
                    console.log(`  Error ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
                }
                else {
                    console.log(`  Error: ${message}`);
                }
            });
        }
    }
    
    // Initialize files constituting the program as all .ts files in the current directory
    const currentDirectoryFiles = fs.readdirSync(process.cwd()).
        filter(fileName=> fileName.length >= 3 && fileName.substr(fileName.length - 3, 3) === ".ts");
    
    // Start the watcher
    watch(currentDirectoryFiles, { module: ts.ModuleKind.CommonJS });
    