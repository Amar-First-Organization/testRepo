=== tests/cases/compiler/unionPropertyExistence.ts ===
interface A {
    inAll: string;
>inAll : string

    notInB: string;
>notInB : string

    notInC: string;
>notInC : string
}

interface B {
    inAll: boolean;
>inAll : boolean

    onlyInB: number;
>onlyInB : number

    notInC: string;
>notInC : string
}

interface C {
    inAll: number;
>inAll : number

    notInB: string;
>notInB : string
}

type AB = A | B;
>AB : AB

type ABC = C | AB;
>ABC : ABC

var ab: AB;
>ab : AB

var abc: ABC;
>abc : ABC

declare const x: "foo" | "bar";
>x : "foo" | "bar"

declare const bFoo: B | "foo";
>bFoo : B | "foo"

x.nope();
>x.nope() : any (error)
>x.nope : any (error)
>x : "foo" | "bar"
>nope : any (error)

bFoo.onlyInB;
>bFoo.onlyInB : any (error)
>bFoo : B | "foo"
>onlyInB : any (error)

x.length; // Ok
>x.length : number
>x : "foo" | "bar"
>length : number

bFoo.length;
>bFoo.length : any (error)
>bFoo : B | "foo"
>length : any (error)

ab.onlyInB;
>ab.onlyInB : any (error)
>ab : AB
>onlyInB : any (error)

ab.notInC; // Ok
>ab.notInC : string
>ab : AB
>notInC : string

abc.notInC;
>abc.notInC : any (error)
>abc : ABC
>notInC : any (error)

ab.notInB;
>ab.notInB : any (error)
>ab : AB
>notInB : any (error)

abc.notInB;
>abc.notInB : any (error)
>abc : ABC
>notInB : any (error)

abc.inAll; // Ok
>abc.inAll : string | number | boolean
>abc : ABC
>inAll : string | number | boolean

abc.inNone;
>abc.inNone : any (error)
>abc : ABC
>inNone : any (error)

