//// [tests/cases/compiler/narrowUnionOfObjectsByPrimitiveProperty.ts] ////

=== narrowUnionOfObjectsByPrimitiveProperty.ts ===
interface State<Type> {
  state: Type;
>state : Type
>      : ^^^^
}

interface UserName {
  first: string;
>first : string
>      : ^^^^^^

  last?: string;
>last : string | undefined
>     : ^^^^^^^^^^^^^^^^^^
}

const nameState = {} as {
>nameState : { value: string; state: State<string>; } | { value: UserName; state: State<UserName>; }
>          : ^^^^^^^^^      ^^^^^^^^^             ^^^^^^^^^^^^^^^        ^^^^^^^^^               ^^^
>{} as {  value: string;  state: State<string>;} | {  value: UserName;  state: State<UserName>;} : { value: string; state: State<string>; } | { value: UserName; state: State<UserName>; }
>                                                                                                : ^^^^^^^^^      ^^^^^^^^^             ^^^^^^^^^^^^^^^        ^^^^^^^^^               ^^^
>{} : {}
>   : ^^

  value: string;
>value : string
>      : ^^^^^^

  state: State<string>;
>state : State<string>
>      : ^^^^^^^^^^^^^

} | {
  value: UserName;
>value : UserName
>      : ^^^^^^^^

  state: State<UserName>;
>state : State<UserName>
>      : ^^^^^^^^^^^^^^^
}

if (typeof nameState.value === "string") {
>typeof nameState.value === "string" : boolean
>                                    : ^^^^^^^
>typeof nameState.value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameState.value : string | UserName
>                : ^^^^^^^^^^^^^^^^^
>nameState : { value: string; state: State<string>; } | { value: UserName; state: State<UserName>; }
>          : ^^^^^^^^^      ^^^^^^^^^             ^^^^^^^^^^^^^^^        ^^^^^^^^^               ^^^
>value : string | UserName
>      : ^^^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

  nameState.state satisfies  State<string>;
>nameState.state satisfies  State<string> : State<string>
>                                         : ^^^^^^^^^^^^^
>nameState.state : State<string>
>                : ^^^^^^^^^^^^^
>nameState : { value: string; state: State<string>; }
>          : ^^^^^^^^^      ^^^^^^^^^             ^^^
>state : State<string>
>      : ^^^^^^^^^^^^^

} else {
  nameState.state satisfies State<UserName>;
>nameState.state satisfies State<UserName> : State<UserName>
>                                          : ^^^^^^^^^^^^^^^
>nameState.state : State<UserName>
>                : ^^^^^^^^^^^^^^^
>nameState : { value: UserName; state: State<UserName>; }
>          : ^^^^^^^^^        ^^^^^^^^^               ^^^
>state : State<UserName>
>      : ^^^^^^^^^^^^^^^
}


declare const arr: [string, number] | [number, string];
>arr : [string, number] | [number, string]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if (typeof arr[0] === "string") {
>typeof arr[0] === "string" : boolean
>                           : ^^^^^^^
>typeof arr[0] : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>arr[0] : string | number
>       : ^^^^^^^^^^^^^^^
>arr : [string, number] | [number, string]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>"string" : "string"
>         : ^^^^^^^^

  arr[1] satisfies number;
>arr[1] satisfies number : number
>                        : ^^^^^^
>arr[1] : number
>       : ^^^^^^
>arr : [string, number]
>    : ^^^^^^^^^^^^^^^^
>1 : 1
>  : ^

} else {
  arr[1] satisfies string;
>arr[1] satisfies string : string
>                        : ^^^^^^
>arr[1] : string
>       : ^^^^^^
>arr : [number, string]
>    : ^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
}


function aStringOrANumber<T extends { a: string } | { a: number }>(param: T): T extends { a: string } ? string : T extends { a: number } ? number : never {
>aStringOrANumber : <T extends { a: string; } | { a: number; }>(param: T) => T extends { a: string; } ? string : T extends { a: number; } ? number : never
>                 : ^ ^^^^^^^^^                               ^^     ^^ ^^^^^                                                                             
>a : string
>  : ^^^^^^
>a : number
>  : ^^^^^^
>param : T
>      : ^
>a : string
>  : ^^^^^^
>a : number
>  : ^^^^^^

  if (typeof param.a === "string") {
>typeof param.a === "string" : boolean
>                            : ^^^^^^^
>typeof param.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>param.a : string | number
>        : ^^^^^^^^^^^^^^^
>param : { a: string; } | { a: number; }
>      : ^^^^^      ^^^^^^^^^^^      ^^^
>a : string | number
>  : ^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

    return param.a.repeat(3);
>param.a.repeat(3) : any
>                  : ^^^
>param.a.repeat : any
>               : ^^^
>param.a : string
>        : ^^^^^^
>param : { a: string; }
>      : ^^^^^      ^^^
>a : string
>  : ^^^^^^
>repeat : any
>       : ^^^
>3 : 3
>  : ^
  }
  if (typeof param.a === "number") {
>typeof param.a === "number" : boolean
>                            : ^^^^^^^
>typeof param.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>param.a : number
>        : ^^^^^^
>param : { a: number; }
>      : ^^^^^      ^^^
>a : number
>  : ^^^^^^
>"number" : "number"
>         : ^^^^^^^^

    return Math.exp(param.a);
>Math.exp(param.a) : number
>                  : ^^^^^^
>Math.exp : (x: number) => number
>         : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>exp : (x: number) => number
>    : ^ ^^      ^^^^^      
>param.a : number
>        : ^^^^^^
>param : { a: number; }
>      : ^^^^^      ^^^
>a : number
>  : ^^^^^^
  }
  throw new Error()
>new Error() : Error
>            : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
}

aStringOrANumber({ a: "string" })
>aStringOrANumber({ a: "string" }) : string
>                                  : ^^^^^^
>aStringOrANumber : <T extends { a: string; } | { a: number; }>(param: T) => T extends { a: string; } ? string : T extends { a: number; } ? number : never
>                 : ^ ^^^^^^^^^                               ^^     ^^ ^^^^^                                                                             
>{ a: "string" } : { a: string; }
>                : ^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>"string" : "string"
>         : ^^^^^^^^

aStringOrANumber({ a: 42 })
>aStringOrANumber({ a: 42 }) : number
>                            : ^^^^^^
>aStringOrANumber : <T extends { a: string; } | { a: number; }>(param: T) => T extends { a: string; } ? string : T extends { a: number; } ? number : never
>                 : ^ ^^^^^^^^^                               ^^     ^^ ^^^^^                                                                             
>{ a: 42 } : { a: number; }
>          : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>42 : 42
>   : ^^

