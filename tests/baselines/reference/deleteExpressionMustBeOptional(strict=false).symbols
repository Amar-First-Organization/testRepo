=== tests/cases/compiler/deleteExpressionMustBeOptional.ts ===
interface Foo {
>Foo : Symbol(Foo, Decl(deleteExpressionMustBeOptional.ts, 0, 0))

    a: number
>a : Symbol(Foo.a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))

    b: number | undefined
>b : Symbol(Foo.b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))

    c: number | null
>c : Symbol(Foo.c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))

    d?: number
>d : Symbol(Foo.d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))

    e: number | undefined | null
>e : Symbol(Foo.e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))

    f?: number | undefined | null
>f : Symbol(Foo.f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))

    g: unknown
>g : Symbol(Foo.g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))

    h: any
>h : Symbol(Foo.h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))

    i: never
>i : Symbol(Foo.i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
}

declare const f: Foo
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>Foo : Symbol(Foo, Decl(deleteExpressionMustBeOptional.ts, 0, 0))

delete f.a
>f.a : Symbol(Foo.a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>a : Symbol(Foo.a, Decl(deleteExpressionMustBeOptional.ts, 0, 15))

delete f.b
>f.b : Symbol(Foo.b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>b : Symbol(Foo.b, Decl(deleteExpressionMustBeOptional.ts, 1, 13))

delete f.c
>f.c : Symbol(Foo.c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>c : Symbol(Foo.c, Decl(deleteExpressionMustBeOptional.ts, 2, 25))

delete f.d
>f.d : Symbol(Foo.d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>d : Symbol(Foo.d, Decl(deleteExpressionMustBeOptional.ts, 3, 20))

delete f.e
>f.e : Symbol(Foo.e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>e : Symbol(Foo.e, Decl(deleteExpressionMustBeOptional.ts, 4, 14))

delete f.f
>f.f : Symbol(Foo.f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>f : Symbol(Foo.f, Decl(deleteExpressionMustBeOptional.ts, 5, 32))

delete f.g
>f.g : Symbol(Foo.g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>g : Symbol(Foo.g, Decl(deleteExpressionMustBeOptional.ts, 6, 33))

delete f.h
>f.h : Symbol(Foo.h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>h : Symbol(Foo.h, Decl(deleteExpressionMustBeOptional.ts, 7, 14))

delete f.i
>f.i : Symbol(Foo.i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))
>i : Symbol(Foo.i, Decl(deleteExpressionMustBeOptional.ts, 8, 10))

delete f.j
>f : Symbol(f, Decl(deleteExpressionMustBeOptional.ts, 12, 13))

