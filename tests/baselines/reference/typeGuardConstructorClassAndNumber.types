=== tests/cases/compiler/typeGuardConstructorClassAndNumber.ts ===
// Typical case
class C1 {
>C1 : C1

    property1: string;
>property1 : string
}

let var1: C1 | number;
>var1 : number | C1

if (var1.constructor == C1) {
>var1.constructor == C1 : boolean
>var1.constructor : Function
>var1 : number | C1
>constructor : Function
>C1 : typeof C1

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (var1["constructor"] == C1) {
>var1["constructor"] == C1 : boolean
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"
>C1 : typeof C1

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (var1.constructor === C1) {
>var1.constructor === C1 : boolean
>var1.constructor : Function
>var1 : number | C1
>constructor : Function
>C1 : typeof C1

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (var1["constructor"] === C1) {
>var1["constructor"] === C1 : boolean
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"
>C1 : typeof C1

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (C1 == var1.constructor) {
>C1 == var1.constructor : boolean
>C1 : typeof C1
>var1.constructor : Function
>var1 : number | C1
>constructor : Function

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (C1 == var1["constructor"]) {
>C1 == var1["constructor"] : boolean
>C1 : typeof C1
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (C1 === var1.constructor) {
>C1 === var1.constructor : boolean
>C1 : typeof C1
>var1.constructor : Function
>var1 : number | C1
>constructor : Function

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}
if (C1 === var1["constructor"]) {
>C1 === var1["constructor"] : boolean
>C1 : typeof C1
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"

    var1; // C1
>var1 : C1

    var1.property1; // string
>var1.property1 : string
>var1 : C1
>property1 : string
}

if (var1.constructor != C1) {
>var1.constructor != C1 : boolean
>var1.constructor : Function
>var1 : number | C1
>constructor : Function
>C1 : typeof C1

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (var1["constructor"] != C1) {
>var1["constructor"] != C1 : boolean
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"
>C1 : typeof C1

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (var1.constructor !== C1) {
>var1.constructor !== C1 : boolean
>var1.constructor : Function
>var1 : number | C1
>constructor : Function
>C1 : typeof C1

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (var1["constructor"] !== C1) {
>var1["constructor"] !== C1 : boolean
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"
>C1 : typeof C1

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (C1 != var1.constructor) {
>C1 != var1.constructor : boolean
>C1 : typeof C1
>var1.constructor : Function
>var1 : number | C1
>constructor : Function

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (C1 != var1["constructor"]) {
>C1 != var1["constructor"] : boolean
>C1 : typeof C1
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (C1 !== var1.constructor) {
>C1 !== var1.constructor : boolean
>C1 : typeof C1
>var1.constructor : Function
>var1 : number | C1
>constructor : Function

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}
if (C1 !== var1["constructor"]) {
>C1 !== var1["constructor"] : boolean
>C1 : typeof C1
>var1["constructor"] : Function
>var1 : number | C1
>"constructor" : "constructor"

    var1; // C1 | number
>var1 : number | C1

    var1.property1; // error
>var1.property1 : any
>var1 : number | C1
>property1 : any
}

