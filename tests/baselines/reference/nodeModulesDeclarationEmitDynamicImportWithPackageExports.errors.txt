tests/cases/conformance/node/other2.cts(2,14): error TS2742: The inferred type of 'd' cannot be named without a reference to './node_modules/inner/index.cjs'. This is likely not portable. A type annotation is necessary.
tests/cases/conformance/node/other2.cts(3,14): error TS2742: The inferred type of 'e' cannot be named without a reference to './node_modules/inner/index.mjs'. This is likely not portable. A type annotation is necessary.
tests/cases/conformance/node/other2.mts(2,14): error TS2742: The inferred type of 'd' cannot be named without a reference to './node_modules/inner/index.cjs'. This is likely not portable. A type annotation is necessary.
tests/cases/conformance/node/other2.mts(3,14): error TS2742: The inferred type of 'e' cannot be named without a reference to './node_modules/inner/index.mjs'. This is likely not portable. A type annotation is necessary.
tests/cases/conformance/node/other2.ts(2,14): error TS2742: The inferred type of 'd' cannot be named without a reference to './node_modules/inner/index.cjs'. This is likely not portable. A type annotation is necessary.
tests/cases/conformance/node/other2.ts(3,14): error TS2742: The inferred type of 'e' cannot be named without a reference to './node_modules/inner/index.mjs'. This is likely not portable. A type annotation is necessary.


==== tests/cases/conformance/node/index.ts (0 errors) ====
    // esm format file
    export {};
==== tests/cases/conformance/node/index.mts (0 errors) ====
    // esm format file
    export {};
==== tests/cases/conformance/node/index.cts (0 errors) ====
    // cjs format file
    export {};
==== tests/cases/conformance/node/other.ts (0 errors) ====
    // esm format file
    export const a = await import("package/cjs");
    export const b = await import("package/mjs");
    export const c = await import("package");
    export const f = await import("inner");
==== tests/cases/conformance/node/other2.ts (2 errors) ====
    // esm format file
    export const d = await import("inner/cjs");
                 ~
!!! error TS2742: The inferred type of 'd' cannot be named without a reference to './node_modules/inner/index.cjs'. This is likely not portable. A type annotation is necessary.
    export const e = await import("inner/mjs");
                 ~
!!! error TS2742: The inferred type of 'e' cannot be named without a reference to './node_modules/inner/index.mjs'. This is likely not portable. A type annotation is necessary.
==== tests/cases/conformance/node/other.mts (0 errors) ====
    // esm format file
    export const a = await import("package/cjs");
    export const b = await import("package/mjs");
    export const c = await import("package");
    export const f = await import("inner");
==== tests/cases/conformance/node/other2.mts (2 errors) ====
    // esm format file
    export const d = await import("inner/cjs");
                 ~
!!! error TS2742: The inferred type of 'd' cannot be named without a reference to './node_modules/inner/index.cjs'. This is likely not portable. A type annotation is necessary.
    export const e = await import("inner/mjs");
                 ~
!!! error TS2742: The inferred type of 'e' cannot be named without a reference to './node_modules/inner/index.mjs'. This is likely not portable. A type annotation is necessary.
==== tests/cases/conformance/node/other.cts (0 errors) ====
    // cjs format file, no TLA
    export const a = import("package/cjs");
    export const b = import("package/mjs");
    export const c = import("package");
    export const f = import("inner");
==== tests/cases/conformance/node/other2.cts (2 errors) ====
    // cjs format file, no TLA
    export const d = import("inner/cjs");
                 ~
!!! error TS2742: The inferred type of 'd' cannot be named without a reference to './node_modules/inner/index.cjs'. This is likely not portable. A type annotation is necessary.
    export const e = import("inner/mjs");
                 ~
!!! error TS2742: The inferred type of 'e' cannot be named without a reference to './node_modules/inner/index.mjs'. This is likely not portable. A type annotation is necessary.
==== tests/cases/conformance/node/node_modules/inner/index.d.ts (0 errors) ====
    // cjs format file
    export const cjsMain = true;
==== tests/cases/conformance/node/node_modules/inner/index.d.mts (0 errors) ====
    // esm format file
    export const esm = true;
==== tests/cases/conformance/node/node_modules/inner/index.d.cts (0 errors) ====
    // cjs format file
    export const cjsNonmain = true;
==== tests/cases/conformance/node/package.json (0 errors) ====
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
==== tests/cases/conformance/node/node_modules/inner/package.json (0 errors) ====
    {
        "name": "inner",
        "private": true,
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }