//// [tests/cases/compiler/deferredConditionalTypes3.ts] ////

=== deferredConditionalTypes3.ts ===
// https://github.com/microsoft/TypeScript/issues/59450

declare function f(fun: <T>(t: T) => void): void;
>f : (fun: <T>(t: T) => void) => void
>  : ^   ^^                 ^^^^^    
>fun : <T>(t: T) => void
>    : ^ ^^ ^^ ^^^^^    
>t : T
>  : ^

f((t) => {
>f((t) => {  type T = typeof t;  type IsAny = T extends any ? true : false;  type IsAnyArray = T[] extends any[] ? true : false;  type IsString = T extends string ? true : false;  type IsStringArray = T[] extends string[] ? true : false;}) : void
>                                                                                                                                                                                                                                               : ^^^^
>f : (fun: <T>(t: T) => void) => void
>  : ^   ^^                 ^^^^^    
>(t) => {  type T = typeof t;  type IsAny = T extends any ? true : false;  type IsAnyArray = T[] extends any[] ? true : false;  type IsString = T extends string ? true : false;  type IsStringArray = T[] extends string[] ? true : false;} : <T>(t: T) => void
>                                                                                                                                                                                                                                            : ^ ^^ ^^^^^^^^^^^^
>t : T
>  : ^

  type T = typeof t;
>T : T
>  : ^
>t : T
>  : ^

  type IsAny = T extends any ? true : false;
>IsAny : T extends any ? true : false
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  type IsAnyArray = T[] extends any[] ? true : false;
>IsAnyArray : true
>           : ^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  type IsString = T extends string ? true : false;
>IsString : T extends string ? true : false
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  type IsStringArray = T[] extends string[] ? true : false;
>IsStringArray : T[] extends string[] ? true : false
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

});

function g<T>(t: T) {
>g : <T>(t: T) => void
>  : ^ ^^ ^^ ^^^^^^^^^
>t : T
>  : ^

  type IsAny = T extends any ? true : false;
>IsAny : T extends any ? true : false
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  type IsAnyArray = T[] extends any[] ? true : false;
>IsAnyArray : true
>           : ^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  type IsString = T extends string ? true : false;
>IsString : T extends string ? true : false
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  type IsStringArray = T[] extends string[] ? true : false;
>IsStringArray : T[] extends string[] ? true : false
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^
}

function h<Outer>() {
>h : <Outer>() => void
>  : ^     ^^^^^^^^^^^

  f((t) => {
>f((t) => {    type T = typeof t;    type IsAny = T extends any ? true : false;    type IsAnyArray = T[] extends any[] ? true : false;    type IsString = T extends string ? true : false;    type IsStringArray = T[] extends string[] ? true : false;  }) : void
>                                                                                                                                                                                                                                                           : ^^^^
>f : (fun: <T>(t: T) => void) => void
>  : ^   ^^                 ^^^^^    
>(t) => {    type T = typeof t;    type IsAny = T extends any ? true : false;    type IsAnyArray = T[] extends any[] ? true : false;    type IsString = T extends string ? true : false;    type IsStringArray = T[] extends string[] ? true : false;  } : <T>(t: T) => void
>                                                                                                                                                                                                                                                        : ^ ^^ ^^^^^^^^^^^^
>t : T
>  : ^

    type T = typeof t;
>T : T
>  : ^
>t : T
>  : ^

    type IsAny = T extends any ? true : false;
>IsAny : T extends any ? true : false
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

    type IsAnyArray = T[] extends any[] ? true : false;
>IsAnyArray : true
>           : ^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

    type IsString = T extends string ? true : false;
>IsString : T extends string ? true : false
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

    type IsStringArray = T[] extends string[] ? true : false;
>IsStringArray : T[] extends string[] ? true : false
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

  });
}

