=== tests/cases/conformance/expressions/binaryOperators/logicalOrOperator/shortCircuitEvaluation.ts ===
let a = undefined || 1;
>a : number
>undefined || 1 : 1
>undefined : undefined
>1 : 1

a++
>a++ : number
>a : number

let b = null || 'foo';
>b : string
>null || 'foo' : "foo"
>null : null
>'foo' : "foo"

b.concat('bar')
>b.concat('bar') : string
>b.concat : (...strings: string[]) => string
>b : string
>concat : (...strings: string[]) => string
>'bar' : "bar"

type EventType = 'click' | 'dblclick'
>EventType : EventType

const handlerMap: { [P in EventType]?: any[] } = {}
>handlerMap : { click?: any[] | undefined; dblclick?: any[] | undefined; }
>{} : {}

function addHandler<P extends EventType>(evType: P) {
>addHandler : <P extends EventType>(evType: P) => void
>evType : P

  const handlerList = handlerMap[evType] || <any[]>[]
>handlerList : any[]
>handlerMap[evType] || <any[]>[] : any[]
>handlerMap[evType] : { click?: any[] | undefined; dblclick?: any[] | undefined; }[P]
>handlerMap : { click?: any[] | undefined; dblclick?: any[] | undefined; }
>evType : P
><any[]>[] : any[]
>[] : never[]

  handlerList.push({})
>handlerList.push({}) : number
>handlerList.push : (...items: any[]) => number
>handlerList : any[]
>push : (...items: any[]) => number
>{} : {}

  handlerMap[evType] = handlerList
>handlerMap[evType] = handlerList : any[]
>handlerMap[evType] : { click?: any[] | undefined; dblclick?: any[] | undefined; }[P]
>handlerMap : { click?: any[] | undefined; dblclick?: any[] | undefined; }
>evType : P
>handlerList : any[]
}
