=== tests/cases/compiler/keyRemappingKeyofResult.ts ===
export const sym = Symbol("")
>sym : Symbol(sym, Decl(keyRemappingKeyofResult.ts, 0, 12))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type Orig = { [k: string]: any, str: any, [sym]: any }
>Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 0, 29))
>k : Symbol(k, Decl(keyRemappingKeyofResult.ts, 1, 15))
>str : Symbol(str, Decl(keyRemappingKeyofResult.ts, 1, 31))
>[sym] : Symbol([sym], Decl(keyRemappingKeyofResult.ts, 1, 41))
>sym : Symbol(sym, Decl(keyRemappingKeyofResult.ts, 0, 12))

type Okay = Exclude<keyof Orig, never>
>Okay : Symbol(Okay, Decl(keyRemappingKeyofResult.ts, 1, 54))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 0, 29))

// type Okay = string | number | typeof sym

type Remapped = { [K in keyof Orig as {} extends Record<K, any> ? never : K]: any }
>Remapped : Symbol(Remapped, Decl(keyRemappingKeyofResult.ts, 3, 38))
>K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 6, 19))
>Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 0, 29))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 6, 19))
>K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 6, 19))

/* type Remapped = {
    str: any;
    [sym]: any;
} */
// no string index signature, right?

type Oops = Exclude<keyof Remapped, never>
>Oops : Symbol(Oops, Decl(keyRemappingKeyofResult.ts, 6, 83))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>Remapped : Symbol(Remapped, Decl(keyRemappingKeyofResult.ts, 3, 38))

declare let x: Oops;
>x : Symbol(x, Decl(keyRemappingKeyofResult.ts, 14, 11))
>Oops : Symbol(Oops, Decl(keyRemappingKeyofResult.ts, 6, 83))

x = sym;
>x : Symbol(x, Decl(keyRemappingKeyofResult.ts, 14, 11))
>sym : Symbol(sym, Decl(keyRemappingKeyofResult.ts, 0, 12))

x = "str";
>x : Symbol(x, Decl(keyRemappingKeyofResult.ts, 14, 11))

// type Oops = typeof sym <-- what happened to "str"?
