tests/cases/compiler/complicatedIndexedAccessKeyofReliesOnKeyofNeverUpperBound.ts(33,5): error TS2322: Type '{ type: T; localChannelId: string; }' is not assignable to type 'NewChannel<ChannelOfType<T, TextChannel> | ChannelOfType<T, EmailChannel>>'.
  Type '{ type: T; localChannelId: string; }' is not assignable to type 'Pick<ChannelOfType<T, EmailChannel>, "type"> & Partial<Pick<ChannelOfType<T, EmailChannel>, (({ [P in keyof ChannelOfType<T, TextChannel>]: P; } | { [P in keyof ChannelOfType<T, EmailChannel>]: P; }) & { type: never; id: never; } & { [x: string]: never; })[keyof ChannelOfType<T, TextChannel> & keyof ChannelOfType<T, EmailChannel>]>> & { localChannelId: string; }'.
    Type '{ type: T; localChannelId: string; }' is not assignable to type 'Pick<ChannelOfType<T, EmailChannel>, "type">'.


==== tests/cases/compiler/complicatedIndexedAccessKeyofReliesOnKeyofNeverUpperBound.ts (1 errors) ====
    interface TextChannel {
        id: string;
        type: 'text';
        phoneNumber: string;
    }
    
    interface EmailChannel {
        id: string;
        type: 'email';
        addres: string;
    }
    
    type Channel = TextChannel | EmailChannel;
    
    export type ChannelType = Channel extends { type: infer R } ? R : never;
    
    type Omit<T, K extends keyof T> = Pick<
        T,
        ({ [P in keyof T]: P } & { [P in K]: never } & { [x: string]: never })[keyof T]
    >;
    
    type ChannelOfType<T extends ChannelType, A = Channel> = A extends { type: T }
        ? A
        : never;
    
    
    export type NewChannel<T extends Channel> = Pick<T, 'type'> &
        Partial<Omit<T, 'type' | 'id'>> & { localChannelId: string };
    
    
    export function makeNewChannel<T extends ChannelType>(type: T): NewChannel<ChannelOfType<T>> {
        const localChannelId = `blahblahblah`;
        return { type, localChannelId };
        ~~~~~~
!!! error TS2322: Type '{ type: T; localChannelId: string; }' is not assignable to type 'NewChannel<ChannelOfType<T, TextChannel> | ChannelOfType<T, EmailChannel>>'.
!!! error TS2322:   Type '{ type: T; localChannelId: string; }' is not assignable to type 'Pick<ChannelOfType<T, EmailChannel>, "type"> & Partial<Pick<ChannelOfType<T, EmailChannel>, (({ [P in keyof ChannelOfType<T, TextChannel>]: P; } | { [P in keyof ChannelOfType<T, EmailChannel>]: P; }) & { type: never; id: never; } & { [x: string]: never; })[keyof ChannelOfType<T, TextChannel> & keyof ChannelOfType<T, EmailChannel>]>> & { localChannelId: string; }'.
!!! error TS2322:     Type '{ type: T; localChannelId: string; }' is not assignable to type 'Pick<ChannelOfType<T, EmailChannel>, "type">'.
    }
    
    const newTextChannel = makeNewChannel('text');
    // This should work
    newTextChannel.phoneNumber = '613-555-1234';
    
    const newTextChannel2 : NewChannel<TextChannel> = makeNewChannel('text');
    // Compare with this, which ofc works.
    newTextChannel2.phoneNumber = '613-555-1234';
    