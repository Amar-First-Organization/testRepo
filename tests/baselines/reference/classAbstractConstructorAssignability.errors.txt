classAbstractConstructorAssignability.ts(7,5): error TS2322: Type 'typeof B' is not assignable to type 'typeof A'.
  Cannot assign an abstract constructor type to a non-abstract constructor type.
classAbstractConstructorAssignability.ts(9,5): error TS2322: Type 'typeof B' is not assignable to type 'typeof C'.
  Cannot assign an abstract constructor type to a non-abstract constructor type.
classAbstractConstructorAssignability.ts(12,1): error TS2511: Cannot create an instance of an abstract class.


==== classAbstractConstructorAssignability.ts (3 errors) ====
    class A {}
    
    abstract class B extends A {}
    
    class C extends B {}
    
    var AA : typeof A = B;
        ~~
!!! error TS2322: Type 'typeof B' is not assignable to type 'typeof A'.
!!! error TS2322:   Cannot assign an abstract constructor type to a non-abstract constructor type.
    var BB : typeof B = A;
    var CC : typeof C = B;
        ~~
!!! error TS2322: Type 'typeof B' is not assignable to type 'typeof C'.
!!! error TS2322:   Cannot assign an abstract constructor type to a non-abstract constructor type.
    
    new AA;
    new BB;
    ~~~~~~
!!! error TS2511: Cannot create an instance of an abstract class.
    new CC;
    
    // https://github.com/microsoft/TypeScript/issues/57412
    
    // private methods have parameters stripped away in the generated declaration files
    abstract class GeneratedConstructable {
      private constructor() {}
    }
    
    class MyPrivateClass {
      private privateVal: boolean;
      private constructor(
        public readonly foo: string,
        public readonly bar: string,
      ) {
        this.privateVal = true;
      }
    }
    
    export const funcThatAcceptsAnyGeneratedClass = (
      clazz: typeof GeneratedConstructable,
    ) => {};
    
    funcThatAcceptsAnyGeneratedClass(MyPrivateClass);
    