//// [tests/cases/conformance/controlFlow/dependentDestructuredVariables.ts] ////



/// [Declarations] ////



//// [dependentDestructuredVariables.d.ts]
type Action = {
    kind: 'A';
    payload: number;
} | {
    kind: 'B';
    payload: string;
};
declare function f10({ kind, payload }: Action): void;
declare function f11(action: Action): void;
declare function f12({ kind, payload }: Action): void;
declare function f13<T extends Action>({ kind, payload }: T): void;
declare function f14<T extends Action>(t: T): void;
type Action2 = {
    kind: 'A';
    payload: number | undefined;
} | {
    kind: 'B';
    payload: string | undefined;
};
declare function f20({ kind, payload }: Action2): void;
declare function f21(action: Action2): void;
declare function f22(action: Action2): void;
declare function f23({ kind, payload }: Action2): void;
type Foo = {
    kind: 'A';
    isA: true;
} | {
    kind: 'B';
    isA: false;
} | {
    kind: 'C';
    isA: false;
};
declare function f30({ kind, isA }: Foo): void;
type Args = ['A', number] | ['B', string];
declare function f40(...[kind, data]: Args): void;
interface A<T> {
    variant: 'a';
    value: T;
}
interface B<T> {
    variant: 'b';
    value: Array<T>;
}
type AB<T> = A<T> | B<T>;
declare function printValue<T>(t: T): void;
declare function printValueList<T>(t: Array<T>): void;
declare function unrefined1<T>(ab: AB<T>): void;
type Action3 = {
    type: 'add';
    payload: {
        toAdd: number;
    };
} | {
    type: 'remove';
    payload: {
        toRemove: number;
    };
};
declare const reducerBroken: (state: number, { type, payload }: Action3) => number;
declare var it: Iterator<number>;
declare const dest: IteratorResult<number, any>;
declare const value: any;
declare const done: boolean | undefined;
declare function f50(cb: (...args: Args) => void): void;
declare const f51: (...args: ['A', number] | ['B', string]) => void;
declare const f52: (...args: ['A', number] | ['B']) => void;
declare function readFile(path: string, callback: (...args: [err: null, data: unknown[]] | [err: Error, data: undefined]) => void): void;
type ReducerArgs = ["add", {
    a: number;
    b: number;
}] | ["concat", {
    firstArr: any[];
    secondArr: any[];
}];
declare const reducer: (...args: ReducerArgs) => void;
type FooMethod = {
    method(...args: [
        type: "str",
        cb: (e: string) => void
    ] | [
        type: "num",
        cb: (e: number) => void
    ]): void;
};
declare let fooM: FooMethod;
type FooAsyncMethod = {
    method(...args: [
        type: "str",
        cb: (e: string) => void
    ] | [
        type: "num",
        cb: (e: number) => void
    ]): Promise<any>;
};
declare let fooAsyncM: FooAsyncMethod;
type FooGenMethod = {
    method(...args: [
        type: "str",
        cb: (e: string) => void
    ] | [
        type: "num",
        cb: (e: number) => void
    ]): Generator<any, any, any>;
};
declare let fooGenM: FooGenMethod;
type FooAsyncGenMethod = {
    method(...args: [
        type: "str",
        cb: (e: string) => void
    ] | [
        type: "num",
        cb: (e: number) => void
    ]): AsyncGenerator<any, any, any>;
};
declare let fooAsyncGenM: FooAsyncGenMethod;
type Func = <T extends ["a", number] | ["b", string]>(...args: T) => void;
declare const f60: Func;
declare function foo({ value1, test1, test2, test3, test4, test5, test6, test7, test8, test9 }: {
    value1: any;
    test1?: any;
    test2?: any;
    test3?: any;
    test4?: any;
    test5?: any;
    test6?: any;
    test7?: any;
    test8?: any;
    test9?: any;
}): void;
declare function fa1(x: [true, number] | [false, string]): void;
declare function fa2(x: {
    guard: true;
    value: number;
} | {
    guard: false;
    value: string;
}): void;
declare const fa3: (...args: [true, number] | [false, string]) => void;
interface ClientEvents {
    warn: [message: string];
    shardDisconnect: [closeEvent: CloseEvent, shardId: number];
}
declare class Client {
    on<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => void): void;
}
declare const bot: Client;
declare function fz1([x, y]: [1, 2] | [3, 4] | [5]): void;
declare function tooNarrow([x, y]: [1, 1] | [1, 2] | [1]): void;
declare function parameterReassigned1([x, y]: [1, 2] | [3, 4]): void;
declare function parameterReassigned2([x, y]: [1, 2] | [3, 4]): void;
declare const parameterReassignedContextualRest1: (...args: [1, 2] | [3, 4]) => void;
//# sourceMappingURL=dependentDestructuredVariables.d.ts.map

/// [Declarations Maps] ////


//// [dependentDestructuredVariables.d.ts.map]
{"version":3,"file":"dependentDestructuredVariables.d.ts","sourceRoot":"","sources":["dependentDestructuredVariables.ts"],"names":[],"mappings":"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"}

//// https://sokra.github.io/source-map-visualization#base64,dHlwZSBBY3Rpb24gPSB7DQogICAga2luZDogJ0EnOw0KICAgIHBheWxvYWQ6IG51bWJlcjsNCn0gfCB7DQogICAga2luZDogJ0InOw0KICAgIHBheWxvYWQ6IHN0cmluZzsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGYxMCh7IGtpbmQsIHBheWxvYWQgfTogQWN0aW9uKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gZjExKGFjdGlvbjogQWN0aW9uKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gZjEyKHsga2luZCwgcGF5bG9hZCB9OiBBY3Rpb24pOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmMTM8VCBleHRlbmRzIEFjdGlvbj4oeyBraW5kLCBwYXlsb2FkIH06IFQpOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmMTQ8VCBleHRlbmRzIEFjdGlvbj4odDogVCk6IHZvaWQ7DQp0eXBlIEFjdGlvbjIgPSB7DQogICAga2luZDogJ0EnOw0KICAgIHBheWxvYWQ6IG51bWJlciB8IHVuZGVmaW5lZDsNCn0gfCB7DQogICAga2luZDogJ0InOw0KICAgIHBheWxvYWQ6IHN0cmluZyB8IHVuZGVmaW5lZDsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGYyMCh7IGtpbmQsIHBheWxvYWQgfTogQWN0aW9uMik6IHZvaWQ7DQpkZWNsYXJlIGZ1bmN0aW9uIGYyMShhY3Rpb246IEFjdGlvbjIpOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmMjIoYWN0aW9uOiBBY3Rpb24yKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gZjIzKHsga2luZCwgcGF5bG9hZCB9OiBBY3Rpb24yKTogdm9pZDsNCnR5cGUgRm9vID0gew0KICAgIGtpbmQ6ICdBJzsNCiAgICBpc0E6IHRydWU7DQp9IHwgew0KICAgIGtpbmQ6ICdCJzsNCiAgICBpc0E6IGZhbHNlOw0KfSB8IHsNCiAgICBraW5kOiAnQyc7DQogICAgaXNBOiBmYWxzZTsNCn07DQpkZWNsYXJlIGZ1bmN0aW9uIGYzMCh7IGtpbmQsIGlzQSB9OiBGb28pOiB2b2lkOw0KdHlwZSBBcmdzID0gWydBJywgbnVtYmVyXSB8IFsnQicsIHN0cmluZ107DQpkZWNsYXJlIGZ1bmN0aW9uIGY0MCguLi5ba2luZCwgZGF0YV06IEFyZ3MpOiB2b2lkOw0KaW50ZXJmYWNlIEE8VD4gew0KICAgIHZhcmlhbnQ6ICdhJzsNCiAgICB2YWx1ZTogVDsNCn0NCmludGVyZmFjZSBCPFQ+IHsNCiAgICB2YXJpYW50OiAnYic7DQogICAgdmFsdWU6IEFycmF5PFQ+Ow0KfQ0KdHlwZSBBQjxUPiA9IEE8VD4gfCBCPFQ+Ow0KZGVjbGFyZSBmdW5jdGlvbiBwcmludFZhbHVlPFQ+KHQ6IFQpOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBwcmludFZhbHVlTGlzdDxUPih0OiBBcnJheTxUPik6IHZvaWQ7DQpkZWNsYXJlIGZ1bmN0aW9uIHVucmVmaW5lZDE8VD4oYWI6IEFCPFQ+KTogdm9pZDsNCnR5cGUgQWN0aW9uMyA9IHsNCiAgICB0eXBlOiAnYWRkJzsNCiAgICBwYXlsb2FkOiB7DQogICAgICAgIHRvQWRkOiBudW1iZXI7DQogICAgfTsNCn0gfCB7DQogICAgdHlwZTogJ3JlbW92ZSc7DQogICAgcGF5bG9hZDogew0KICAgICAgICB0b1JlbW92ZTogbnVtYmVyOw0KICAgIH07DQp9Ow0KZGVjbGFyZSBjb25zdCByZWR1Y2VyQnJva2VuOiAoc3RhdGU6IG51bWJlciwgeyB0eXBlLCBwYXlsb2FkIH06IEFjdGlvbjMpID0+IG51bWJlcjsNCmRlY2xhcmUgdmFyIGl0OiBJdGVyYXRvcjxudW1iZXI+Ow0KZGVjbGFyZSBjb25zdCBkZXN0OiBJdGVyYXRvclJlc3VsdDxudW1iZXIsIGFueT47DQpkZWNsYXJlIGNvbnN0IHZhbHVlOiBhbnk7DQpkZWNsYXJlIGNvbnN0IGRvbmU6IGJvb2xlYW4gfCB1bmRlZmluZWQ7DQpkZWNsYXJlIGZ1bmN0aW9uIGY1MChjYjogKC4uLmFyZ3M6IEFyZ3MpID0+IHZvaWQpOiB2b2lkOw0KZGVjbGFyZSBjb25zdCBmNTE6ICguLi5hcmdzOiBbJ0EnLCBudW1iZXJdIHwgWydCJywgc3RyaW5nXSkgPT4gdm9pZDsNCmRlY2xhcmUgY29uc3QgZjUyOiAoLi4uYXJnczogWydBJywgbnVtYmVyXSB8IFsnQiddKSA9PiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiByZWFkRmlsZShwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiAoLi4uYXJnczogW2VycjogbnVsbCwgZGF0YTogdW5rbm93bltdXSB8IFtlcnI6IEVycm9yLCBkYXRhOiB1bmRlZmluZWRdKSA9PiB2b2lkKTogdm9pZDsNCnR5cGUgUmVkdWNlckFyZ3MgPSBbImFkZCIsIHsNCiAgICBhOiBudW1iZXI7DQogICAgYjogbnVtYmVyOw0KfV0gfCBbImNvbmNhdCIsIHsNCiAgICBmaXJzdEFycjogYW55W107DQogICAgc2Vjb25kQXJyOiBhbnlbXTsNCn1dOw0KZGVjbGFyZSBjb25zdCByZWR1Y2VyOiAoLi4uYXJnczogUmVkdWNlckFyZ3MpID0+IHZvaWQ7DQp0eXBlIEZvb01ldGhvZCA9IHsNCiAgICBtZXRob2QoLi4uYXJnczogWw0KICAgICAgICB0eXBlOiAic3RyIiwNCiAgICAgICAgY2I6IChlOiBzdHJpbmcpID0+IHZvaWQNCiAgICBdIHwgWw0KICAgICAgICB0eXBlOiAibnVtIiwNCiAgICAgICAgY2I6IChlOiBudW1iZXIpID0+IHZvaWQNCiAgICBdKTogdm9pZDsNCn07DQpkZWNsYXJlIGxldCBmb29NOiBGb29NZXRob2Q7DQp0eXBlIEZvb0FzeW5jTWV0aG9kID0gew0KICAgIG1ldGhvZCguLi5hcmdzOiBbDQogICAgICAgIHR5cGU6ICJzdHIiLA0KICAgICAgICBjYjogKGU6IHN0cmluZykgPT4gdm9pZA0KICAgIF0gfCBbDQogICAgICAgIHR5cGU6ICJudW0iLA0KICAgICAgICBjYjogKGU6IG51bWJlcikgPT4gdm9pZA0KICAgIF0pOiBQcm9taXNlPGFueT47DQp9Ow0KZGVjbGFyZSBsZXQgZm9vQXN5bmNNOiBGb29Bc3luY01ldGhvZDsNCnR5cGUgRm9vR2VuTWV0aG9kID0gew0KICAgIG1ldGhvZCguLi5hcmdzOiBbDQogICAgICAgIHR5cGU6ICJzdHIiLA0KICAgICAgICBjYjogKGU6IHN0cmluZykgPT4gdm9pZA0KICAgIF0gfCBbDQogICAgICAgIHR5cGU6ICJudW0iLA0KICAgICAgICBjYjogKGU6IG51bWJlcikgPT4gdm9pZA0KICAgIF0pOiBHZW5lcmF0b3I8YW55LCBhbnksIGFueT47DQp9Ow0KZGVjbGFyZSBsZXQgZm9vR2VuTTogRm9vR2VuTWV0aG9kOw0KdHlwZSBGb29Bc3luY0dlbk1ldGhvZCA9IHsNCiAgICBtZXRob2QoLi4uYXJnczogWw0KICAgICAgICB0eXBlOiAic3RyIiwNCiAgICAgICAgY2I6IChlOiBzdHJpbmcpID0+IHZvaWQNCiAgICBdIHwgWw0KICAgICAgICB0eXBlOiAibnVtIiwNCiAgICAgICAgY2I6IChlOiBudW1iZXIpID0+IHZvaWQNCiAgICBdKTogQXN5bmNHZW5lcmF0b3I8YW55LCBhbnksIGFueT47DQp9Ow0KZGVjbGFyZSBsZXQgZm9vQXN5bmNHZW5NOiBGb29Bc3luY0dlbk1ldGhvZDsNCnR5cGUgRnVuYyA9IDxUIGV4dGVuZHMgWyJhIiwgbnVtYmVyXSB8IFsiYiIsIHN0cmluZ10+KC4uLmFyZ3M6IFQpID0+IHZvaWQ7DQpkZWNsYXJlIGNvbnN0IGY2MDogRnVuYzsNCmRlY2xhcmUgZnVuY3Rpb24gZm9vKHsgdmFsdWUxLCB0ZXN0MSwgdGVzdDIsIHRlc3QzLCB0ZXN0NCwgdGVzdDUsIHRlc3Q2LCB0ZXN0NywgdGVzdDgsIHRlc3Q5IH06IHsNCiAgICB2YWx1ZTE6IGFueTsNCiAgICB0ZXN0MT86IGFueTsNCiAgICB0ZXN0Mj86IGFueTsNCiAgICB0ZXN0Mz86IGFueTsNCiAgICB0ZXN0ND86IGFueTsNCiAgICB0ZXN0NT86IGFueTsNCiAgICB0ZXN0Nj86IGFueTsNCiAgICB0ZXN0Nz86IGFueTsNCiAgICB0ZXN0OD86IGFueTsNCiAgICB0ZXN0OT86IGFueTsNCn0pOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmYTEoeDogW3RydWUsIG51bWJlcl0gfCBbZmFsc2UsIHN0cmluZ10pOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmYTIoeDogew0KICAgIGd1YXJkOiB0cnVlOw0KICAgIHZhbHVlOiBudW1iZXI7DQp9IHwgew0KICAgIGd1YXJkOiBmYWxzZTsNCiAgICB2YWx1ZTogc3RyaW5nOw0KfSk6IHZvaWQ7DQpkZWNsYXJlIGNvbnN0IGZhMzogKC4uLmFyZ3M6IFt0cnVlLCBudW1iZXJdIHwgW2ZhbHNlLCBzdHJpbmddKSA9PiB2b2lkOw0KaW50ZXJmYWNlIENsaWVudEV2ZW50cyB7DQogICAgd2FybjogW21lc3NhZ2U6IHN0cmluZ107DQogICAgc2hhcmREaXNjb25uZWN0OiBbY2xvc2VFdmVudDogQ2xvc2VFdmVudCwgc2hhcmRJZDogbnVtYmVyXTsNCn0NCmRlY2xhcmUgY2xhc3MgQ2xpZW50IHsNCiAgICBvbjxLIGV4dGVuZHMga2V5b2YgQ2xpZW50RXZlbnRzPihldmVudDogSywgbGlzdGVuZXI6ICguLi5hcmdzOiBDbGllbnRFdmVudHNbS10pID0+IHZvaWQpOiB2b2lkOw0KfQ0KZGVjbGFyZSBjb25zdCBib3Q6IENsaWVudDsNCmRlY2xhcmUgZnVuY3Rpb24gZnoxKFt4LCB5XTogWzEsIDJdIHwgWzMsIDRdIHwgWzVdKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gdG9vTmFycm93KFt4LCB5XTogWzEsIDFdIHwgWzEsIDJdIHwgWzFdKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gcGFyYW1ldGVyUmVhc3NpZ25lZDEoW3gsIHldOiBbMSwgMl0gfCBbMywgNF0pOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBwYXJhbWV0ZXJSZWFzc2lnbmVkMihbeCwgeV06IFsxLCAyXSB8IFszLCA0XSk6IHZvaWQ7DQpkZWNsYXJlIGNvbnN0IHBhcmFtZXRlclJlYXNzaWduZWRDb250ZXh0dWFsUmVzdDE6ICguLi5hcmdzOiBbMSwgMl0gfCBbMywgNF0pID0+IHZvaWQ7DQovLyMgc291cmNlTWFwcGluZ1VSTD1kZXBlbmRlbnREZXN0cnVjdHVyZWRWYXJpYWJsZXMuZC50cy5tYXA=,,

