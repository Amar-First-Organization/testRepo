=== tests/cases/compiler/indexedAccessRelation.ts ===
// Repro from #14723

class Component<S> {
>Component : Component<S>

    setState<K extends keyof S>(state: Pick<S, K>) {}
>setState : <K extends keyof S>(state: Pick<S, K>) => void
>state : Pick<S, K>
}

export interface State<T> {
    a?: T;
>a : T
}

class Foo {}
>Foo : Foo

class Comp<T extends Foo, S> extends Component<S & State<T>>
>Comp : Comp<T, S>
>Component : Component<S & State<T>>
{
    foo(a: T) {
>foo : (a: T) => void
>a : T

        this.setState({ a: a });
>this.setState({ a: a }) : any
>this.setState : <K extends keyof S | "a">(state: Pick<S & State<T>, K>) => void
>this : this
>setState : <K extends keyof S | "a">(state: Pick<S & State<T>, K>) => void
>{ a: a } : { a: T; }
>a : T
>a : T
    }
}

// Repro from #31833

type Foo1 = {
>Foo1 : Foo1

  type: 'foo1';
>type : "foo1"

  extra: number;
>extra : number

};

type Foo2 = {
>Foo2 : Foo2

  type: 'foo2';
>type : "foo2"

  extra: string;
>extra : string

};

type Both = Foo1 | Foo2;
>Both : Both

type FooTypes = Both['type'];
>FooTypes : "foo1" | "foo2"

export type FooFromType<T extends FooTypes, O extends Both = Both> = O extends { type: T } ? O : never;
>FooFromType : FooFromType<T, O>
>type : T

type FooExtraFromType<T extends FooTypes> = FooFromType<T>['extra'];
>FooExtraFromType : (FooFromType<T, Foo1> | FooFromType<T, Foo2>)["extra"]

function fnWithFooExtra<T extends FooTypes>(type: T, extra: FooExtraFromType<T>) { }
>fnWithFooExtra : <T extends "foo1" | "foo2">(type: T, extra: (FooFromType<T, Foo1> | FooFromType<T, Foo2>)["extra"]) => void
>type : T
>extra : (FooFromType<T, Foo1> | FooFromType<T, Foo2>)["extra"]

type FnType = <T extends FooTypes>(type: T, extra: FooExtraFromType<T>) => void;
>FnType : FnType
>type : T
>extra : (FooFromType<T, Foo1> | FooFromType<T, Foo2>)["extra"]

const fn: FnType = fnWithFooExtra;
>fn : FnType
>fnWithFooExtra : <T extends "foo1" | "foo2">(type: T, extra: (FooFromType<T, Foo1> | FooFromType<T, Foo2>)["extra"]) => void

