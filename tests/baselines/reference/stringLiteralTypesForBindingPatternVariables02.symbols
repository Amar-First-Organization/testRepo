=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesForBindingPatternVariables02.ts ===

var kindAndVal: ["kindA", any];
>kindAndVal : Symbol(kindAndVal, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 1, 3))

namespace Consts {
>Consts : Symbol(Consts, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 1, 31))

    export const [ kind, val ] = kindAndVal;
>kind : Symbol(kind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 4, 18))
>val : Symbol(val, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 4, 24))
>kindAndVal : Symbol(kindAndVal, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 1, 3))

    export let a: "kindA" = kind;
>a : Symbol(a, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 5, 14))
>kind : Symbol(kind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 4, 18))
}

namespace Lets {
>Lets : Symbol(Lets, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 6, 1))

    export let [ kind ] = kindAndVal;
>kind : Symbol(kind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 9, 16))
>kindAndVal : Symbol(kindAndVal, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 1, 3))

    export let { 0: letKind } = kindAndVal;
>letKind : Symbol(letKind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 10, 16))
>kindAndVal : Symbol(kindAndVal, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 1, 3))

    kind = letKind;
>kind : Symbol(kind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 9, 16))
>letKind : Symbol(letKind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 10, 16))

    letKind = kind;
>letKind : Symbol(letKind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 10, 16))
>kind : Symbol(kind, Decl(stringLiteralTypesForBindingPatternVariables02.ts, 9, 16))
}
