// [[Reason: Can't fix class expressions]] ////

//// [tests/cases/compiler/emitClassExpressionInDeclarationFile.ts] ////

===================================================================
--- TSC	declarations
+++ DTE	declarations
@@ -1,23 +1,9 @@
 
 
 //// [emitClassExpressionInDeclarationFile.d.ts]
-export declare var simpleExample: {
-    new (): {
-        tags(): void;
-    };
-    getTags(): void;
-};
-export declare var circularReference: {
-    new (): {
-        tags(c: any): any;
-    };
-    getTags(c: {
-        tags(c: any): any;
-    }): {
-        tags(c: any): any;
-    };
-};
+export declare var simpleExample: invalid;
+export declare var circularReference: invalid;
 export declare class FooItem {
     foo(): void;
     name?: string;
 }
@@ -40,5 +26,61 @@
 } & typeof FooItem;
 export declare class Test extends TestBase {
 }
 export {};
-//# sourceMappingURL=emitClassExpressionInDeclarationFile.d.ts.map
\ No newline at end of file
+//# sourceMappingURL=emitClassExpressionInDeclarationFile.d.ts.map
+/// [Errors] ////
+
+emitClassExpressionInDeclarationFile.ts(1,28): error TS9022: Inference from class expressions is not supported with --isolatedDeclarations.
+emitClassExpressionInDeclarationFile.ts(5,38): error TS9022: Inference from class expressions is not supported with --isolatedDeclarations.
+
+
+==== emitClassExpressionInDeclarationFile.ts (2 errors) ====
+    export var simpleExample = class {
+                               ~~~~~
+!!! error TS9022: Inference from class expressions is not supported with --isolatedDeclarations.
+        static getTags() { }
+        tags() { }
+    }
+    export var circularReference = class C {
+                                         ~
+!!! error TS9022: Inference from class expressions is not supported with --isolatedDeclarations.
+        static getTags(c: C): C { return c }
+        tags(c: C): C { return c }
+    }
+    
+    // repro from #15066
+    export class FooItem {
+        foo(): void { }
+        name?: string;
+    }
+    
+    export type Constructor<T> = new(...args: any[]) => T;
+    export function WithTags<T extends Constructor<FooItem>>(Base: T): {
+        new(...args: any[]): {
+            tags(): void;
+            foo(): void;
+            name?: string;
+        };
+        getTags(): void;
+    } & T {
+        return class extends Base {
+            static getTags(): void { }
+            tags(): void { }
+        }
+    }
+    
+    const TestBase: {
+        new(...args: any[]): {
+            tags(): void;
+            foo(): void;
+            name?: string;
+        };
+        getTags(): void;
+    } & typeof FooItem = WithTags(FooItem);
+    export class Test extends TestBase {}
+    
+    const test = new Test();
+    
+    Test.getTags()
+    test.tags();
+    
\ No newline at end of file
