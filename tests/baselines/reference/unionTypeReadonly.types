=== tests/cases/conformance/types/union/unionTypeReadonly.ts ===
interface Base {
    readonly value: number;
>value : number
}
interface Identical {
    readonly value: number;
>value : number
}
interface Mutable {
    value: number;
>value : number
}
interface DifferentType {
    readonly value: string;
>value : string
}
interface DifferentName {
    readonly other: number;
>other : number
}
let base: Base;
>base : Base

base.value = 12 // error, lhs can't be a readonly property
>base.value = 12 : 12
>base.value : any (error)
>base : Base
>value : any (error)
>12 : 12

let identical: Base | Identical;
>identical : Base | Identical

identical.value = 12; // error, lhs can't be a readonly property
>identical.value = 12 : 12
>identical.value : any (error)
>identical : Base | Identical
>value : any (error)
>12 : 12

let mutable: Base | Mutable;
>mutable : Base | Mutable

mutable.value = 12; // error, lhs can't be a readonly property
>mutable.value = 12 : 12
>mutable.value : any (error)
>mutable : Base | Mutable
>value : any (error)
>12 : 12

let differentType: Base | DifferentType;
>differentType : Base | DifferentType

differentType.value = 12; // error, lhs can't be a readonly property
>differentType.value = 12 : 12
>differentType.value : any (error)
>differentType : Base | DifferentType
>value : any (error)
>12 : 12

let differentName: Base | DifferentName;
>differentName : Base | DifferentName

differentName.value = 12; // error, property 'value' doesn't exist
>differentName.value = 12 : 12
>differentName.value : any (error)
>differentName : Base | DifferentName
>value : any (error)
>12 : 12


