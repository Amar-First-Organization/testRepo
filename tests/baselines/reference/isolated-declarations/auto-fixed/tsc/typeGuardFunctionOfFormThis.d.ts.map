//// [tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThis.ts] ////



/// [Declarations] ////



//// [typeGuardFunctionOfFormThis.d.ts]
declare class RoyalGuard {
    isLeader(): this is LeadGuard;
    isFollower(): this is FollowerGuard;
}
declare class LeadGuard extends RoyalGuard {
    lead(): void;
}
declare class FollowerGuard extends RoyalGuard {
    follow(): void;
}
declare let a: RoyalGuard;
interface GuardInterface extends RoyalGuard {
}
declare let b: GuardInterface;
declare var holder2: {
    a: RoyalGuard;
};
declare class ArrowGuard {
    isElite: () => this is ArrowElite;
    isMedic: () => this is ArrowMedic;
}
declare class ArrowElite extends ArrowGuard {
    defend(): void;
}
declare class ArrowMedic extends ArrowGuard {
    heal(): void;
}
declare let guard: ArrowGuard;
interface Supplies {
    spoiled: boolean;
}
interface Sundries {
    broken: boolean;
}
interface Crate<T> {
    contents: T;
    volume: number;
    isSupplies(): this is Crate<Supplies>;
    isSundries(): this is Crate<Sundries>;
}
declare let crate: Crate<{}>;
declare class MimicGuard {
    isLeader(): this is MimicLeader;
    isFollower(): this is MimicFollower;
}
declare class MimicLeader extends MimicGuard {
    lead(): void;
}
declare class MimicFollower extends MimicGuard {
    follow(): void;
}
declare let mimic: MimicGuard;
interface MimicGuardInterface {
    isLeader(): this is LeadGuard;
    isFollower(): this is FollowerGuard;
}
//# sourceMappingURL=typeGuardFunctionOfFormThis.d.ts.map

/// [Declarations Maps] ////


//// [typeGuardFunctionOfFormThis.d.ts.map]
{"version":3,"file":"typeGuardFunctionOfFormThis.d.ts","sourceRoot":"","sources":["typeGuardFunctionOfFormThis.ts"],"names":[],"mappings":"AAAA,cAAM,UAAU;IACZ,QAAQ,IAAI,IAAI,IAAI,SAAS;IAG7B,UAAU,IAAI,IAAI,IAAI,aAAa;CAGtC;AAED,cAAM,SAAU,SAAQ,UAAU;IAC9B,IAAI,IAAI,IAAI;CACf;AAED,cAAM,aAAc,SAAQ,UAAU;IAClC,MAAM,IAAI,IAAI;CACjB;AAED,QAAA,IAAI,CAAC,EAAE,UAAgC,CAAC;AAQxC,UAAU,cAAe,SAAQ,UAAU;CAAG;AAE9C,QAAA,IAAI,CAAC,EAAE,cAAc,CAAC;AAsBtB,QAAA,IAAI,OAAO,EAAE;IACT,CAAC,EAAE,UAAU,CAAC;CACX,CAAC;AASR,cAAM,UAAU;IACZ,OAAO,2BAEN;IACD,OAAO,2BAEN;CACJ;AAED,cAAM,UAAW,SAAQ,UAAU;IAC/B,MAAM,IAAI,IAAI;CACjB;AAED,cAAM,UAAW,SAAQ,UAAU;IAC/B,IAAI,IAAI,IAAI;CACf;AAED,QAAA,IAAI,KAAK,EAAE,UAA6B,CAAC;AAQzC,UAAU,QAAQ;IACd,OAAO,EAAE,OAAO,CAAC;CACpB;AAED,UAAU,QAAQ;IACd,MAAM,EAAE,OAAO,CAAC;CACnB;AAED,UAAU,KAAK,CAAC,CAAC;IACb,QAAQ,EAAE,CAAC,CAAC;IACZ,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;IACtC,UAAU,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;CACzC;AAED,QAAA,IAAI,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;AAcrB,cAAM,UAAU;IACZ,QAAQ,IAAI,IAAI,IAAI,WAAW;IAC/B,UAAU,IAAI,IAAI,IAAI,aAAa;CACtC;AAED,cAAM,WAAY,SAAQ,UAAU;IAChC,IAAI,IAAI,IAAI;CACf;AAED,cAAM,aAAc,SAAQ,UAAU;IAClC,MAAM,IAAI,IAAI;CACjB;AAED,QAAA,IAAI,KAAK,EAAE,UAA6B,CAAC;AAWzC,UAAU,mBAAmB;IACzB,QAAQ,IAAI,IAAI,IAAI,SAAS,CAAC;IAC9B,UAAU,IAAI,IAAI,IAAI,aAAa,CAAC;CACvC"}

//// https://sokra.github.io/source-map-visualization#base64,ZGVjbGFyZSBjbGFzcyBSb3lhbEd1YXJkIHsNCiAgICBpc0xlYWRlcigpOiB0aGlzIGlzIExlYWRHdWFyZDsNCiAgICBpc0ZvbGxvd2VyKCk6IHRoaXMgaXMgRm9sbG93ZXJHdWFyZDsNCn0NCmRlY2xhcmUgY2xhc3MgTGVhZEd1YXJkIGV4dGVuZHMgUm95YWxHdWFyZCB7DQogICAgbGVhZCgpOiB2b2lkOw0KfQ0KZGVjbGFyZSBjbGFzcyBGb2xsb3dlckd1YXJkIGV4dGVuZHMgUm95YWxHdWFyZCB7DQogICAgZm9sbG93KCk6IHZvaWQ7DQp9DQpkZWNsYXJlIGxldCBhOiBSb3lhbEd1YXJkOw0KaW50ZXJmYWNlIEd1YXJkSW50ZXJmYWNlIGV4dGVuZHMgUm95YWxHdWFyZCB7DQp9DQpkZWNsYXJlIGxldCBiOiBHdWFyZEludGVyZmFjZTsNCmRlY2xhcmUgdmFyIGhvbGRlcjI6IHsNCiAgICBhOiBSb3lhbEd1YXJkOw0KfTsNCmRlY2xhcmUgY2xhc3MgQXJyb3dHdWFyZCB7DQogICAgaXNFbGl0ZTogKCkgPT4gdGhpcyBpcyBBcnJvd0VsaXRlOw0KICAgIGlzTWVkaWM6ICgpID0+IHRoaXMgaXMgQXJyb3dNZWRpYzsNCn0NCmRlY2xhcmUgY2xhc3MgQXJyb3dFbGl0ZSBleHRlbmRzIEFycm93R3VhcmQgew0KICAgIGRlZmVuZCgpOiB2b2lkOw0KfQ0KZGVjbGFyZSBjbGFzcyBBcnJvd01lZGljIGV4dGVuZHMgQXJyb3dHdWFyZCB7DQogICAgaGVhbCgpOiB2b2lkOw0KfQ0KZGVjbGFyZSBsZXQgZ3VhcmQ6IEFycm93R3VhcmQ7DQppbnRlcmZhY2UgU3VwcGxpZXMgew0KICAgIHNwb2lsZWQ6IGJvb2xlYW47DQp9DQppbnRlcmZhY2UgU3VuZHJpZXMgew0KICAgIGJyb2tlbjogYm9vbGVhbjsNCn0NCmludGVyZmFjZSBDcmF0ZTxUPiB7DQogICAgY29udGVudHM6IFQ7DQogICAgdm9sdW1lOiBudW1iZXI7DQogICAgaXNTdXBwbGllcygpOiB0aGlzIGlzIENyYXRlPFN1cHBsaWVzPjsNCiAgICBpc1N1bmRyaWVzKCk6IHRoaXMgaXMgQ3JhdGU8U3VuZHJpZXM+Ow0KfQ0KZGVjbGFyZSBsZXQgY3JhdGU6IENyYXRlPHt9PjsNCmRlY2xhcmUgY2xhc3MgTWltaWNHdWFyZCB7DQogICAgaXNMZWFkZXIoKTogdGhpcyBpcyBNaW1pY0xlYWRlcjsNCiAgICBpc0ZvbGxvd2VyKCk6IHRoaXMgaXMgTWltaWNGb2xsb3dlcjsNCn0NCmRlY2xhcmUgY2xhc3MgTWltaWNMZWFkZXIgZXh0ZW5kcyBNaW1pY0d1YXJkIHsNCiAgICBsZWFkKCk6IHZvaWQ7DQp9DQpkZWNsYXJlIGNsYXNzIE1pbWljRm9sbG93ZXIgZXh0ZW5kcyBNaW1pY0d1YXJkIHsNCiAgICBmb2xsb3coKTogdm9pZDsNCn0NCmRlY2xhcmUgbGV0IG1pbWljOiBNaW1pY0d1YXJkOw0KaW50ZXJmYWNlIE1pbWljR3VhcmRJbnRlcmZhY2Ugew0KICAgIGlzTGVhZGVyKCk6IHRoaXMgaXMgTGVhZEd1YXJkOw0KICAgIGlzRm9sbG93ZXIoKTogdGhpcyBpcyBGb2xsb3dlckd1YXJkOw0KfQ0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZUd1YXJkRnVuY3Rpb25PZkZvcm1UaGlzLmQudHMubWFw,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZUd1YXJkRnVuY3Rpb25PZkZvcm1UaGlzLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlR3VhcmRGdW5jdGlvbk9mRm9ybVRoaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBTSxVQUFVO0lBQ1osUUFBUSxJQUFJLElBQUksSUFBSSxTQUFTO0lBRzdCLFVBQVUsSUFBSSxJQUFJLElBQUksYUFBYTtDQUd0QztBQUVELGNBQU0sU0FBVSxTQUFRLFVBQVU7SUFDOUIsSUFBSSxJQUFJLElBQUk7Q0FDZjtBQUVELGNBQU0sYUFBYyxTQUFRLFVBQVU7SUFDbEMsTUFBTSxJQUFJLElBQUk7Q0FDakI7QUFFRCxRQUFBLElBQUksQ0FBQyxFQUFFLFVBQWdDLENBQUM7QUFReEMsVUFBVSxjQUFlLFNBQVEsVUFBVTtDQUFHO0FBRTlDLFFBQUEsSUFBSSxDQUFDLEVBQUUsY0FBYyxDQUFDO0FBc0J0QixRQUFBLElBQUksT0FBTyxFQUFFO0lBQ1QsQ0FBQyxFQUFFLFVBQVUsQ0FBQztDQUNYLENBQUM7QUFTUixjQUFNLFVBQVU7SUFDWixPQUFPLDJCQUVOO0lBQ0QsT0FBTywyQkFFTjtDQUNKO0FBRUQsY0FBTSxVQUFXLFNBQVEsVUFBVTtJQUMvQixNQUFNLElBQUksSUFBSTtDQUNqQjtBQUVELGNBQU0sVUFBVyxTQUFRLFVBQVU7SUFDL0IsSUFBSSxJQUFJLElBQUk7Q0FDZjtBQUVELFFBQUEsSUFBSSxLQUFLLEVBQUUsVUFBNkIsQ0FBQztBQVF6QyxVQUFVLFFBQVE7SUFDZCxPQUFPLEVBQUUsT0FBTyxDQUFDO0NBQ3BCO0FBRUQsVUFBVSxRQUFRO0lBQ2QsTUFBTSxFQUFFLE9BQU8sQ0FBQztDQUNuQjtBQUVELFVBQVUsS0FBSyxDQUFDLENBQUM7SUFDYixRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ1osTUFBTSxFQUFFLE1BQU0sQ0FBQztJQUNmLFVBQVUsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLFVBQVUsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3pDO0FBRUQsUUFBQSxJQUFJLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFjckIsY0FBTSxVQUFVO0lBQ1osUUFBUSxJQUFJLElBQUksSUFBSSxXQUFXO0lBQy9CLFVBQVUsSUFBSSxJQUFJLElBQUksYUFBYTtDQUN0QztBQUVELGNBQU0sV0FBWSxTQUFRLFVBQVU7SUFDaEMsSUFBSSxJQUFJLElBQUk7Q0FDZjtBQUVELGNBQU0sYUFBYyxTQUFRLFVBQVU7SUFDbEMsTUFBTSxJQUFJLElBQUk7Q0FDakI7QUFFRCxRQUFBLElBQUksS0FBSyxFQUFFLFVBQTZCLENBQUM7QUFXekMsVUFBVSxtQkFBbUI7SUFDekIsUUFBUSxJQUFJLElBQUksSUFBSSxTQUFTLENBQUM7SUFDOUIsVUFBVSxJQUFJLElBQUksSUFBSSxhQUFhLENBQUM7Q0FDdkMifQ==,Y2xhc3MgUm95YWxHdWFyZCB7CiAgICBpc0xlYWRlcigpOiB0aGlzIGlzIExlYWRHdWFyZCB7CiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBMZWFkR3VhcmQ7CiAgICB9CiAgICBpc0ZvbGxvd2VyKCk6IHRoaXMgaXMgRm9sbG93ZXJHdWFyZCB7CiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBGb2xsb3dlckd1YXJkOwogICAgfQp9CgpjbGFzcyBMZWFkR3VhcmQgZXh0ZW5kcyBSb3lhbEd1YXJkIHsKICAgIGxlYWQoKTogdm9pZCB7fTsKfQoKY2xhc3MgRm9sbG93ZXJHdWFyZCBleHRlbmRzIFJveWFsR3VhcmQgewogICAgZm9sbG93KCk6IHZvaWQge307Cn0KCmxldCBhOiBSb3lhbEd1YXJkID0gbmV3IEZvbGxvd2VyR3VhcmQoKTsKaWYgKGEuaXNMZWFkZXIoKSkgewogICAgYS5sZWFkKCk7Cn0KZWxzZSBpZiAoYS5pc0ZvbGxvd2VyKCkpIHsKICAgIGEuZm9sbG93KCk7Cn0KCmludGVyZmFjZSBHdWFyZEludGVyZmFjZSBleHRlbmRzIFJveWFsR3VhcmQge30KCmxldCBiOiBHdWFyZEludGVyZmFjZTsKaWYgKGIuaXNMZWFkZXIoKSkgewogICAgYi5sZWFkKCk7Cn0KZWxzZSBpZiAoYi5pc0ZvbGxvd2VyKCkpIHsKICAgIGIuZm9sbG93KCk7Cn0KCi8vIGlmICgoKGEuaXNMZWFkZXIpKCkpKSB7Ci8vICAgICBhLmxlYWQoKTsKLy8gfQovLyBlbHNlIGlmICgoKGEpLmlzRm9sbG93ZXIoKSkpIHsKLy8gICAgIGEuZm9sbG93KCk7Ci8vIH0KCi8vIGlmICgoKGFbImlzTGVhZGVyIl0pKCkpKSB7Ci8vICAgICBhLmxlYWQoKTsKLy8gfQovLyBlbHNlIGlmICgoKGEpWyJpc0ZvbGxvd2VyIl0oKSkpIHsKLy8gICAgIGEuZm9sbG93KCk7Ci8vIH0KCnZhciBob2xkZXIyOiB7CiAgICBhOiBSb3lhbEd1YXJkOwp9ID0ge2F9OwoKaWYgKGhvbGRlcjIuYS5pc0xlYWRlcigpKSB7CiAgICBob2xkZXIyLmE7Cn0KZWxzZSB7CiAgICBob2xkZXIyLmE7Cn0KCmNsYXNzIEFycm93R3VhcmQgewogICAgaXNFbGl0ZSA9ICgpOiB0aGlzIGlzIEFycm93RWxpdGUgPT4gewogICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQXJyb3dFbGl0ZTsKICAgIH0KICAgIGlzTWVkaWMgPSAoKTogdGhpcyBpcyBBcnJvd01lZGljID0+IHsKICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEFycm93TWVkaWM7CiAgICB9Cn0KCmNsYXNzIEFycm93RWxpdGUgZXh0ZW5kcyBBcnJvd0d1YXJkIHsKICAgIGRlZmVuZCgpOiB2b2lkIHt9Cn0KCmNsYXNzIEFycm93TWVkaWMgZXh0ZW5kcyBBcnJvd0d1YXJkIHsKICAgIGhlYWwoKTogdm9pZCB7fQp9CgpsZXQgZ3VhcmQ6IEFycm93R3VhcmQgPSBuZXcgQXJyb3dHdWFyZCgpOwppZiAoZ3VhcmQuaXNFbGl0ZSgpKSB7CiAgICBndWFyZC5kZWZlbmQoKTsKfQplbHNlIGlmIChndWFyZC5pc01lZGljKCkpIHsKICAgIGd1YXJkLmhlYWwoKTsKfQoKaW50ZXJmYWNlIFN1cHBsaWVzIHsKICAgIHNwb2lsZWQ6IGJvb2xlYW47Cn0KCmludGVyZmFjZSBTdW5kcmllcyB7CiAgICBicm9rZW46IGJvb2xlYW47Cn0KCmludGVyZmFjZSBDcmF0ZTxUPiB7CiAgICBjb250ZW50czogVDsKICAgIHZvbHVtZTogbnVtYmVyOwogICAgaXNTdXBwbGllcygpOiB0aGlzIGlzIENyYXRlPFN1cHBsaWVzPjsKICAgIGlzU3VuZHJpZXMoKTogdGhpcyBpcyBDcmF0ZTxTdW5kcmllcz47Cn0KCmxldCBjcmF0ZTogQ3JhdGU8e30+OwoKaWYgKGNyYXRlLmlzU3VuZHJpZXMoKSkgewogICAgY3JhdGUuY29udGVudHMuYnJva2VuID0gdHJ1ZTsKfQplbHNlIGlmIChjcmF0ZS5pc1N1cHBsaWVzKCkpIHsKICAgIGNyYXRlLmNvbnRlbnRzLnNwb2lsZWQgPSB0cnVlOwp9CgovLyBNYXRjaGluZyBndWFyZHMgc2hvdWxkIGJlIGFzc2lnbmFibGUKCmEuaXNGb2xsb3dlciA9IGIuaXNGb2xsb3dlcjsKYS5pc0xlYWRlciA9IGIuaXNMZWFkZXI7CgpjbGFzcyBNaW1pY0d1YXJkIHsKICAgIGlzTGVhZGVyKCk6IHRoaXMgaXMgTWltaWNMZWFkZXIgeyByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE1pbWljTGVhZGVyOyB9OwogICAgaXNGb2xsb3dlcigpOiB0aGlzIGlzIE1pbWljRm9sbG93ZXIgeyByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE1pbWljRm9sbG93ZXI7IH07Cn0KCmNsYXNzIE1pbWljTGVhZGVyIGV4dGVuZHMgTWltaWNHdWFyZCB7CiAgICBsZWFkKCk6IHZvaWQge30KfQoKY2xhc3MgTWltaWNGb2xsb3dlciBleHRlbmRzIE1pbWljR3VhcmQgewogICAgZm9sbG93KCk6IHZvaWQge30KfQoKbGV0IG1pbWljOiBNaW1pY0d1YXJkID0gbmV3IE1pbWljR3VhcmQoKTsKCmEuaXNMZWFkZXIgPSBtaW1pYy5pc0xlYWRlcjsKYS5pc0ZvbGxvd2VyID0gbWltaWMuaXNGb2xsb3dlcjsKCmlmIChtaW1pYy5pc0ZvbGxvd2VyKCkpIHsKICAgIG1pbWljLmZvbGxvdygpOwogICAgbWltaWMuaXNGb2xsb3dlciA9IGEuaXNGb2xsb3dlcjsKfQoKCmludGVyZmFjZSBNaW1pY0d1YXJkSW50ZXJmYWNlIHsKICAgIGlzTGVhZGVyKCk6IHRoaXMgaXMgTGVhZEd1YXJkOwogICAgaXNGb2xsb3dlcigpOiB0aGlzIGlzIEZvbGxvd2VyR3VhcmQ7Cn0K

