=== tests/cases/compiler/recursiveArrayNotCircular.ts ===
type Action<T, P> = P extends void ? { type : T } : { type: T, payload: P }
>Action : Action<T, P>
>type : T
>type : T
>payload : P

enum ActionType {
>ActionType : ActionType

    Foo,
>Foo : ActionType.Foo

    Bar,
>Bar : ActionType.Bar

    Baz,
>Baz : ActionType.Baz

    Batch
>Batch : ActionType.Batch
}

type ReducerAction =
>ReducerAction : { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }

  | Action<ActionType.Bar, number>
>ActionType : any

  | Action<ActionType.Baz, boolean>
>ActionType : any

  | Action<ActionType.Foo, string>
>ActionType : any

  | Action<ActionType.Batch, ReducerAction[]>
>ActionType : any

function assertNever(a: never): never {
>assertNever : (a: never) => never
>a : never

    throw new Error("Unreachable!");
>new Error("Unreachable!") : Error
>Error : ErrorConstructor
>"Unreachable!" : "Unreachable!"
}

function reducer(action: ReducerAction): void {
>reducer : (action: { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }) => void
>action : { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }

    switch(action.type) {
>action.type : ActionType
>action : { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }
>type : ActionType

        case ActionType.Bar:
>ActionType.Bar : ActionType.Bar
>ActionType : typeof ActionType
>Bar : ActionType.Bar

            const x: number = action.payload;
>x : number
>action.payload : number
>action : { type: ActionType.Bar; payload: number; }
>payload : number

            break;
        case ActionType.Baz:
>ActionType.Baz : ActionType.Baz
>ActionType : typeof ActionType
>Baz : ActionType.Baz

            const y: boolean = action.payload;
>y : boolean
>action.payload : boolean
>action : { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; }
>payload : boolean

            break;
        case ActionType.Foo:
>ActionType.Foo : ActionType.Foo
>ActionType : typeof ActionType
>Foo : ActionType.Foo

            const z: string = action.payload;
>z : string
>action.payload : string
>action : { type: ActionType.Foo; payload: string; }
>payload : string

            break;
        case ActionType.Batch:
>ActionType.Batch : ActionType.Batch
>ActionType : typeof ActionType
>Batch : ActionType.Batch

            action.payload.map(reducer);
>action.payload.map(reducer) : void[]
>action.payload.map : <U>(callbackfn: (value: { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }, index: number, array: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; })[]) => U, thisArg?: any) => U[]
>action.payload : ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; })[]
>action : { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }
>payload : ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; })[]
>map : <U>(callbackfn: (value: { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }, index: number, array: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; })[]) => U, thisArg?: any) => U[]
>reducer : (action: { type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | { type: ActionType.Batch; payload: ({ type: ActionType.Bar; payload: number; } | { type: ActionType.Baz; payload: false; } | { type: ActionType.Baz; payload: true; } | { type: ActionType.Foo; payload: string; } | any)[]; }) => void

            break;
        default: return assertNever(action);
>assertNever(action) : never
>assertNever : (a: never) => never
>action : never
    }
}
