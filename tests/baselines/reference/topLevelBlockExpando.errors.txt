tests/cases/compiler/check.js(22,8): error TS2339: Property 'first' does not exist on type '() => number'.
tests/cases/compiler/check.js(23,8): error TS2339: Property 'last' does not exist on type '() => number'.
tests/cases/compiler/check.js(25,17): error TS2345: Argument of type '() => number' is not assignable to parameter of type 'Human'.
  Type '() => number' is missing the following properties from type 'Human': first, last


==== tests/cases/compiler/check.ts (0 errors) ====
    // 
    
    
    
    // https://github.com/microsoft/TypeScript/issues/31972
    interface Person {
      first: string;
      last: string;
    }
    
    {
      const dice = () => Math.floor(Math.random() * 6);
      dice.first = 'Rando';  
      dice.last = 'Calrissian';
      const diceP: Person = dice;  
    }
    
==== tests/cases/compiler/check.js (3 errors) ====
    // Creates a type { first:string, last: string }
    /**
     * @typedef {Object} Human - creates a new type named 'SpecialType'
     * @property {string} first - a string property of SpecialType
     * @property {string} last - a number property of SpecialType
     */
    
    /**
     * @param {Human} param used as a validation tool
     */
    function doHumanThings(param) {}
    
    const dice = () => Math.floor(Math.random() * 6);
    dice.first = 'Rando';
    dice.last = 'Calrissian';
    
    doHumanThings(dice)
    
    // but inside a block... you can't call iut a human
    {
      const dice = () => Math.floor(Math.random() * 6);
      dice.first = 'Rando';
           ~~~~~
!!! error TS2339: Property 'first' does not exist on type '() => number'.
      dice.last = 'Calrissian'; 
           ~~~~
!!! error TS2339: Property 'last' does not exist on type '() => number'.
      
      doHumanThings(dice)
                    ~~~~
!!! error TS2345: Argument of type '() => number' is not assignable to parameter of type 'Human'.
!!! error TS2345:   Type '() => number' is missing the following properties from type 'Human': first, last
    }
    