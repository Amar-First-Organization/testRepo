//// [tests/cases/compiler/coAndContraVariantInferences13.ts] ////

=== coAndContraVariantInferences13.ts ===
// https://github.com/microsoft/TypeScript/issues/59765

type FunctionComponent<P = any> = (props: P) => Element | null;
>FunctionComponent : FunctionComponent<P>
>                  : ^^^^^^^^^^^^^^^^^^^^
>props : P
>      : ^

interface ElementAttributes {
  idomKey: string | null | number;
>idomKey : string | number | null
>        : ^^^^^^^^^^^^^^^^^^^^^^

  children?: unknown;
>children : unknown
>         : ^^^^^^^

  skip?: boolean;
>skip : boolean | undefined
>     : ^^^^^^^^^^^^^^^^^^^
}

declare function element<P>(
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       

  tag: FunctionComponent<P & ElementAttributes>,
>tag : FunctionComponent<P & ElementAttributes>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  attributes: P & ElementAttributes,
>attributes : P & ElementAttributes
>           : ^^^^^^^^^^^^^^^^^^^^^

): Element;

declare function ElName(props: { name?: string }): Element;
>ElName : (props: { name?: string; }) => Element
>       : ^     ^^                  ^^^^^       
>props : { name?: string; }
>      : ^^^^^^^^^      ^^^
>name : string | undefined
>     : ^^^^^^^^^^^^^^^^^^

element(ElName, {}); // error
>element(ElName, {}) : Element
>                    : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName : (props: { name?: string; }) => Element
>       : ^     ^^                  ^^^^^       
>{} : {}
>   : ^^

element(ElName, { age: 42 }); // error
>element(ElName, { age: 42 }) : Element
>                             : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName : (props: { name?: string; }) => Element
>       : ^     ^^                  ^^^^^       
>{ age: 42 } : { age: number; }
>            : ^^^^^^^^^^^^^^^^
>age : number
>    : ^^^^^^
>42 : 42
>   : ^^

element(ElName, { idomKey: null }); // ok
>element(ElName, { idomKey: null }) : Element
>                                   : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName : (props: { name?: string; }) => Element
>       : ^     ^^                  ^^^^^       
>{ idomKey: null } : { idomKey: null; }
>                  : ^^^^^^^^^^^^^^^^^^
>idomKey : null
>        : ^^^^

element(ElName, { idomKey: null, name: "Trevor" }); // ok
>element(ElName, { idomKey: null, name: "Trevor" }) : Element
>                                                   : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName : (props: { name?: string; }) => Element
>       : ^     ^^                  ^^^^^       
>{ idomKey: null, name: "Trevor" } : { idomKey: null; name: string; }
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>idomKey : null
>        : ^^^^
>name : string
>     : ^^^^^^
>"Trevor" : "Trevor"
>         : ^^^^^^^^

declare function ElName2(props: { name: string }): Element;
>ElName2 : (props: { name: string; }) => Element
>        : ^     ^^                 ^^^^^       
>props : { name: string; }
>      : ^^^^^^^^      ^^^
>name : string
>     : ^^^^^^

element(ElName2, {}); // error
>element(ElName2, {}) : Element
>                     : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName2 : (props: { name: string; }) => Element
>        : ^     ^^                 ^^^^^       
>{} : {}
>   : ^^

element(ElName2, { age: 42 }); // error
>element(ElName2, { age: 42 }) : Element
>                              : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName2 : (props: { name: string; }) => Element
>        : ^     ^^                 ^^^^^       
>{ age: 42 } : { age: number; }
>            : ^^^^^^^^^^^^^^^^
>age : number
>    : ^^^^^^
>42 : 42
>   : ^^

element(ElName2, { idomKey: null }); // error
>element(ElName2, { idomKey: null }) : Element
>                                    : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElName2 : (props: { name: string; }) => Element
>        : ^     ^^                 ^^^^^       
>{ idomKey: null } : { idomKey: null; }
>                  : ^^^^^^^^^^^^^^^^^^
>idomKey : null
>        : ^^^^

declare function ElEmpty(props: {}): Element;
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>props : {}
>      : ^^

element(ElEmpty, { name: "Trevor" }); // error
>element(ElEmpty, { name: "Trevor" }) : Element
>                                     : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>{ name: "Trevor" } : { name: string; }
>                   : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"Trevor" : "Trevor"
>         : ^^^^^^^^

element(ElEmpty, { age: 42 }); // error
>element(ElEmpty, { age: 42 }) : Element
>                              : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>{ age: 42 } : { age: number; }
>            : ^^^^^^^^^^^^^^^^
>age : number
>    : ^^^^^^
>42 : 42
>   : ^^

element(ElEmpty, { idomKey: null }); // ok
>element(ElEmpty, { idomKey: null }) : Element
>                                    : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>{ idomKey: null } : { idomKey: null; }
>                  : ^^^^^^^^^^^^^^^^^^
>idomKey : null
>        : ^^^^

element(ElEmpty, { idomKey: null, name: "Trevor" }); // ok
>element(ElEmpty, { idomKey: null, name: "Trevor" }) : Element
>                                                    : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>{ idomKey: null, name: "Trevor" } : { idomKey: null; name: string; }
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>idomKey : null
>        : ^^^^
>name : string
>     : ^^^^^^
>"Trevor" : "Trevor"
>         : ^^^^^^^^

declare const withOptionalName: { name?: string };
>withOptionalName : { name?: string; }
>                 : ^^^^^^^^^      ^^^
>name : string | undefined
>     : ^^^^^^^^^^^^^^^^^^

element(ElEmpty, withOptionalName); // error
>element(ElEmpty, withOptionalName) : Element
>                                   : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>withOptionalName : { name?: string; }
>                 : ^^^^^^^^^      ^^^

element(ElEmpty, { ...withOptionalName, idomKey: null }); // ok
>element(ElEmpty, { ...withOptionalName, idomKey: null }) : Element
>                                                         : ^^^^^^^
>element : <P>(tag: FunctionComponent<P & ElementAttributes>, attributes: P & ElementAttributes) => Element
>        : ^ ^^   ^^                                        ^^          ^^                     ^^^^^       
>ElEmpty : (props: {}) => Element
>        : ^     ^^  ^^^^^       
>{ ...withOptionalName, idomKey: null } : { idomKey: null; name?: string; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>withOptionalName : { name?: string; }
>                 : ^^^^^^^^^      ^^^
>idomKey : null
>        : ^^^^

