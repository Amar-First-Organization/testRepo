//// [tests/cases/compiler/genericSignatureRelations.ts] ////

=== genericSignatureRelations.ts ===
// Repro from #48070

type S<X> = <T>() => T extends X ? 1 : '2';
>S : Symbol(S, Decl(genericSignatureRelations.ts, 0, 0))
>X : Symbol(X, Decl(genericSignatureRelations.ts, 2, 7))
>T : Symbol(T, Decl(genericSignatureRelations.ts, 2, 13))
>T : Symbol(T, Decl(genericSignatureRelations.ts, 2, 13))
>X : Symbol(X, Decl(genericSignatureRelations.ts, 2, 7))

type Foo1 = S<'s1'>;
>Foo1 : Symbol(Foo1, Decl(genericSignatureRelations.ts, 2, 43))
>S : Symbol(S, Decl(genericSignatureRelations.ts, 0, 0))

type Foo2 = S<'s2'>;
>Foo2 : Symbol(Foo2, Decl(genericSignatureRelations.ts, 4, 20))
>S : Symbol(S, Decl(genericSignatureRelations.ts, 0, 0))

type Result1 = Foo1 extends Foo2 ? true : false;
>Result1 : Symbol(Result1, Decl(genericSignatureRelations.ts, 5, 20))
>Foo1 : Symbol(Foo1, Decl(genericSignatureRelations.ts, 2, 43))
>Foo2 : Symbol(Foo2, Decl(genericSignatureRelations.ts, 4, 20))

type Result2 = S<'s1'> extends S<'s2'> ? true : false;
>Result2 : Symbol(Result2, Decl(genericSignatureRelations.ts, 7, 48))
>S : Symbol(S, Decl(genericSignatureRelations.ts, 0, 0))
>S : Symbol(S, Decl(genericSignatureRelations.ts, 0, 0))

