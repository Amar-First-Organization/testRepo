tests/cases/compiler/coAndContraVariantInferences4.ts(22,11): error TS2345: Argument of type 'readonly Decorator[] | readonly Modifier[]' is not assignable to parameter of type 'readonly Decorator[]'.
  Type 'readonly Modifier[]' is not assignable to type 'readonly Decorator[]'.
    Type 'Modifier' is not assignable to type 'Decorator'.
      Types of property 'kind' are incompatible.
        Type 'SyntaxKind.Modifier' is not assignable to type 'SyntaxKind.Decorator'.


==== tests/cases/compiler/coAndContraVariantInferences4.ts (1 errors) ====
    const enum SyntaxKind {
        Modifier,
        Decorator,
    }
    
    interface Node {
        kind: SyntaxKind;
    }
    
    interface Modifier extends Node { kind: SyntaxKind.Modifier; }
    interface Decorator extends Node { kind: SyntaxKind.Decorator; }
    
    declare function isModifier(node: Node): node is Modifier;
    declare function isDecorator(node: Node): node is Decorator;
    
    declare function every<T, U extends T>(array: readonly T[], callback: (element: T) => element is U): array is readonly U[];
    
    declare const modifiers: readonly Decorator[] | readonly Modifier[];
    
    function foo() {
        every(modifiers, isModifier);
        every(modifiers, isDecorator);
              ~~~~~~~~~
!!! error TS2345: Argument of type 'readonly Decorator[] | readonly Modifier[]' is not assignable to parameter of type 'readonly Decorator[]'.
!!! error TS2345:   Type 'readonly Modifier[]' is not assignable to type 'readonly Decorator[]'.
!!! error TS2345:     Type 'Modifier' is not assignable to type 'Decorator'.
!!! error TS2345:       Types of property 'kind' are incompatible.
!!! error TS2345:         Type 'SyntaxKind.Modifier' is not assignable to type 'SyntaxKind.Decorator'.
    }
    