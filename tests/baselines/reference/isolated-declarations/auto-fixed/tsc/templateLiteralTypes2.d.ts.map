//// [tests/cases/conformance/types/literal/templateLiteralTypes2.ts] ////



/// [Declarations] ////



//// [templateLiteralTypes2.d.ts]
declare function ft1<T extends string>(s: string, n: number, u: 'foo' | 'bar' | 'baz', t: T): void;
declare function ft2(s: string): string;
declare function ft10(s: string): void;
declare function ft11(s: string, cond: boolean): void;
declare function ft12(s: string): void;
declare function widening<T>(x: T): T;
declare function nonWidening<T extends string | number | symbol>(x: T): T;
declare function ft13(s: string, cond: boolean): void;
type T0 = string | `${number}px`;
declare function ft14(t: `foo${number}`): void;
declare function g1<T>(x: T): T;
declare function g2<T extends string>(x: T): T;
declare function ft20(s: string): void;
declare function takesLiteral<T extends string>(literal: T): T extends `foo.bar.${infer R}` ? R : unknown;
declare const t1: "baz";
declare const id2 = "foo.bar.baz";
declare const t2: "baz";
declare const someString: string;
declare const t3: string;
declare const id4: string;
declare const t4: unknown;
declare const someUnion: 'abc' | 'def' | 'ghi';
declare const t5: "abc" | "def" | "ghi";
declare const pixelValue: number;
type PixelValueType = `${number}px`;
declare const pixelString: PixelValueType;
declare const pixelStringWithTemplate: PixelValueType;
declare function getCardTitle(title: string): `test-${string}`;
declare const interpolatedStyle: {
    rotate: number;
};
declare function C2(transform: "-moz-initial" | (string & {})): number;
//# sourceMappingURL=templateLiteralTypes2.d.ts.map

/// [Declarations Maps] ////


//// [templateLiteralTypes2.d.ts.map]
{"version":3,"file":"templateLiteralTypes2.d.ts","sourceRoot":"","sources":["templateLiteralTypes2.ts"],"names":[],"mappings":"AAAA,iBAAS,GAAG,CAAC,CAAC,SAAS,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CASzF;AAED,iBAAS,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,MAAM,CAE9B;AAED,iBAAS,IAAI,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAS7B;AAED,iBAAS,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,GAAG,IAAI,CAW5C;AAED,iBAAS,IAAI,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAW7B;AAED,OAAO,UAAU,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACtC,OAAO,UAAU,WAAW,CAAC,CAAC,SAAS,MAAM,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AAE1E,iBAAS,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,GAAG,IAAI,CAK5C;AAED,KAAK,EAAE,GAAG,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC;AAEjC,iBAAS,IAAI,CAAC,CAAC,EAAE,MAAM,MAAM,EAAE,GAAG,IAAI,CAMrC;AAED,OAAO,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AAChC,OAAO,UAAU,EAAE,CAAC,CAAC,SAAS,MAAM,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AAE/C,iBAAS,IAAI,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAG7B;AAID,OAAO,UAAU,YAAY,CAAC,CAAC,SAAS,MAAM,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,SAAS,WAAW,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG,OAAO,CAAC;AAE1G,QAAA,MAAM,EAAE,EAAE,KAAmC,CAAC;AAC9C,QAAA,MAAM,GAAG,gBAAgB,CAAC;AAC1B,QAAA,MAAM,EAAE,EAAE,KAAyB,CAAC;AAEpC,OAAO,CAAC,MAAM,UAAU,EAAE,MAAM,CAAC;AACjC,QAAA,MAAM,EAAE,EAAE,MAA8C,CAAC;AAEzD,QAAA,MAAM,GAAG,QAA0B,CAAC;AACpC,QAAA,MAAM,EAAE,EAAE,OAA2B,CAAC;AAEtC,OAAO,CAAC,MAAM,SAAS,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAC/C,QAAA,MAAM,EAAE,EAAE,KAAK,GAAG,KAAK,GAAG,KAA4C,CAAC;AAIvE,QAAA,MAAM,UAAU,EAAE,MAAW,CAAC;AAE9B,KAAK,cAAc,GAAG,GAAG,MAAM,IAAI,CAAC;AAEpC,QAAA,MAAM,WAAW,EAAE,cAAuB,CAAC;AAE3C,QAAA,MAAM,uBAAuB,EAAE,cAAkC,CAAC;AAIlE,iBAAS,YAAY,CAAC,KAAK,EAAE,MAAM,GAAG,QAAQ,MAAM,EAAE,CAErD;AAID,QAAA,MAAM,iBAAiB;;CAAiB,CAAC;AACzC,iBAAS,EAAE,CAAC,SAAS,EAAE,cAAc,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,MAAM,CAAe"}

//// https://sokra.github.io/source-map-visualization#base64,ZGVjbGFyZSBmdW5jdGlvbiBmdDE8VCBleHRlbmRzIHN0cmluZz4oczogc3RyaW5nLCBuOiBudW1iZXIsIHU6ICdmb28nIHwgJ2JhcicgfCAnYmF6JywgdDogVCk6IHZvaWQ7DQpkZWNsYXJlIGZ1bmN0aW9uIGZ0MihzOiBzdHJpbmcpOiBzdHJpbmc7DQpkZWNsYXJlIGZ1bmN0aW9uIGZ0MTAoczogc3RyaW5nKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gZnQxMShzOiBzdHJpbmcsIGNvbmQ6IGJvb2xlYW4pOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmdDEyKHM6IHN0cmluZyk6IHZvaWQ7DQpkZWNsYXJlIGZ1bmN0aW9uIHdpZGVuaW5nPFQ+KHg6IFQpOiBUOw0KZGVjbGFyZSBmdW5jdGlvbiBub25XaWRlbmluZzxUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sPih4OiBUKTogVDsNCmRlY2xhcmUgZnVuY3Rpb24gZnQxMyhzOiBzdHJpbmcsIGNvbmQ6IGJvb2xlYW4pOiB2b2lkOw0KdHlwZSBUMCA9IHN0cmluZyB8IGAke251bWJlcn1weGA7DQpkZWNsYXJlIGZ1bmN0aW9uIGZ0MTQodDogYGZvbyR7bnVtYmVyfWApOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBnMTxUPih4OiBUKTogVDsNCmRlY2xhcmUgZnVuY3Rpb24gZzI8VCBleHRlbmRzIHN0cmluZz4oeDogVCk6IFQ7DQpkZWNsYXJlIGZ1bmN0aW9uIGZ0MjAoczogc3RyaW5nKTogdm9pZDsNCmRlY2xhcmUgZnVuY3Rpb24gdGFrZXNMaXRlcmFsPFQgZXh0ZW5kcyBzdHJpbmc+KGxpdGVyYWw6IFQpOiBUIGV4dGVuZHMgYGZvby5iYXIuJHtpbmZlciBSfWAgPyBSIDogdW5rbm93bjsNCmRlY2xhcmUgY29uc3QgdDE6ICJiYXoiOw0KZGVjbGFyZSBjb25zdCBpZDIgPSAiZm9vLmJhci5iYXoiOw0KZGVjbGFyZSBjb25zdCB0MjogImJheiI7DQpkZWNsYXJlIGNvbnN0IHNvbWVTdHJpbmc6IHN0cmluZzsNCmRlY2xhcmUgY29uc3QgdDM6IHN0cmluZzsNCmRlY2xhcmUgY29uc3QgaWQ0OiBzdHJpbmc7DQpkZWNsYXJlIGNvbnN0IHQ0OiB1bmtub3duOw0KZGVjbGFyZSBjb25zdCBzb21lVW5pb246ICdhYmMnIHwgJ2RlZicgfCAnZ2hpJzsNCmRlY2xhcmUgY29uc3QgdDU6ICJhYmMiIHwgImRlZiIgfCAiZ2hpIjsNCmRlY2xhcmUgY29uc3QgcGl4ZWxWYWx1ZTogbnVtYmVyOw0KdHlwZSBQaXhlbFZhbHVlVHlwZSA9IGAke251bWJlcn1weGA7DQpkZWNsYXJlIGNvbnN0IHBpeGVsU3RyaW5nOiBQaXhlbFZhbHVlVHlwZTsNCmRlY2xhcmUgY29uc3QgcGl4ZWxTdHJpbmdXaXRoVGVtcGxhdGU6IFBpeGVsVmFsdWVUeXBlOw0KZGVjbGFyZSBmdW5jdGlvbiBnZXRDYXJkVGl0bGUodGl0bGU6IHN0cmluZyk6IGB0ZXN0LSR7c3RyaW5nfWA7DQpkZWNsYXJlIGNvbnN0IGludGVycG9sYXRlZFN0eWxlOiB7DQogICAgcm90YXRlOiBudW1iZXI7DQp9Ow0KZGVjbGFyZSBmdW5jdGlvbiBDMih0cmFuc2Zvcm06ICItbW96LWluaXRpYWwiIHwgKHN0cmluZyAmIHt9KSk6IG51bWJlcjsNCi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlTGl0ZXJhbFR5cGVzMi5kLnRzLm1hcA==,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVMaXRlcmFsVHlwZXMyLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZW1wbGF0ZUxpdGVyYWxUeXBlczIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FTekY7QUFFRCxpQkFBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxNQUFNLENBRTlCO0FBRUQsaUJBQVMsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsSUFBSSxDQVM3QjtBQUVELGlCQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEdBQUcsSUFBSSxDQVc1QztBQUVELGlCQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FXN0I7QUFFRCxPQUFPLFVBQVUsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QyxPQUFPLFVBQVUsV0FBVyxDQUFDLENBQUMsU0FBUyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUUxRSxpQkFBUyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FLNUM7QUFFRCxLQUFLLEVBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQztBQUVqQyxpQkFBUyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sTUFBTSxFQUFFLEdBQUcsSUFBSSxDQU1yQztBQUVELE9BQU8sVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLE9BQU8sVUFBVSxFQUFFLENBQUMsQ0FBQyxTQUFTLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUUvQyxpQkFBUyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBRzdCO0FBSUQsT0FBTyxVQUFVLFlBQVksQ0FBQyxDQUFDLFNBQVMsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLFdBQVcsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBRTFHLFFBQUEsTUFBTSxFQUFFLEVBQUUsS0FBbUMsQ0FBQztBQUM5QyxRQUFBLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQztBQUMxQixRQUFBLE1BQU0sRUFBRSxFQUFFLEtBQXlCLENBQUM7QUFFcEMsT0FBTyxDQUFDLE1BQU0sVUFBVSxFQUFFLE1BQU0sQ0FBQztBQUNqQyxRQUFBLE1BQU0sRUFBRSxFQUFFLE1BQThDLENBQUM7QUFFekQsUUFBQSxNQUFNLEdBQUcsUUFBMEIsQ0FBQztBQUNwQyxRQUFBLE1BQU0sRUFBRSxFQUFFLE9BQTJCLENBQUM7QUFFdEMsT0FBTyxDQUFDLE1BQU0sU0FBUyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQy9DLFFBQUEsTUFBTSxFQUFFLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUE0QyxDQUFDO0FBSXZFLFFBQUEsTUFBTSxVQUFVLEVBQUUsTUFBVyxDQUFDO0FBRTlCLEtBQUssY0FBYyxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUM7QUFFcEMsUUFBQSxNQUFNLFdBQVcsRUFBRSxjQUF1QixDQUFDO0FBRTNDLFFBQUEsTUFBTSx1QkFBdUIsRUFBRSxjQUFrQyxDQUFDO0FBSWxFLGlCQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLFFBQVEsTUFBTSxFQUFFLENBRXJEO0FBSUQsUUFBQSxNQUFNLGlCQUFpQjs7Q0FBaUIsQ0FBQztBQUN6QyxpQkFBUyxFQUFFLENBQUMsU0FBUyxFQUFFLGNBQWMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQWUifQ==,ZnVuY3Rpb24gZnQxPFQgZXh0ZW5kcyBzdHJpbmc+KHM6IHN0cmluZywgbjogbnVtYmVyLCB1OiAnZm9vJyB8ICdiYXInIHwgJ2JheicsIHQ6IFQpOiB2b2lkIHsKICAgIGNvbnN0IGMxID0gYGFiYyR7c31gOwogICAgY29uc3QgYzIgPSBgYWJjJHtufWA7CiAgICBjb25zdCBjMyA9IGBhYmMke3V9YDsKICAgIGNvbnN0IGM0ID0gYGFiYyR7dH1gOwogICAgY29uc3QgZDE6IGBhYmMke3N0cmluZ31gID0gYGFiYyR7c31gOwogICAgY29uc3QgZDI6IGBhYmMke251bWJlcn1gID0gYGFiYyR7bn1gOwogICAgY29uc3QgZDM6IGBhYmMkeydmb28nIHwgJ2JhcicgfCAnYmF6J31gID0gYGFiYyR7dX1gOwogICAgY29uc3QgZDQ6IGBhYmMke1R9YCA9IGBhYmMke3R9YDsKfQoKZnVuY3Rpb24gZnQyKHM6IHN0cmluZyk6IHN0cmluZyB7CiAgICByZXR1cm4gYGFiYyR7c31gOwp9CgpmdW5jdGlvbiBmdDEwKHM6IHN0cmluZyk6IHZvaWQgewogICAgY29uc3QgYzEgPSBgYWJjJHtzfWA7ICAvLyBUeXBlIHN0cmluZwogICAgbGV0IHYxID0gYzE7ICAvLyBUeXBlIHN0cmluZwogICAgY29uc3QgYzIgPSBjMTsgIC8vIFR5cGUgc3RyaW5nCiAgICBsZXQgdjIgPSBjMjsgIC8vIFR5cGUgc3RyaW5nCiAgICBjb25zdCBjMzogYGFiYyR7c3RyaW5nfWAgPSBgYWJjJHtzfWA7CiAgICBsZXQgdjMgPSBjMzsgIC8vIFR5cGUgYGFiYyR7c3RyaW5nfWAKICAgIGNvbnN0IGM0OiBgYWJjJHtzdHJpbmd9YCA9IGMxOyAgLy8gVHlwZSBgYWJjJHtzdHJpbmd9YAogICAgbGV0IHY0ID0gYzQ7ICAvLyBUeXBlIGBhYmMke3N0cmluZ31gCn0KCmZ1bmN0aW9uIGZ0MTEoczogc3RyaW5nLCBjb25kOiBib29sZWFuKTogdm9pZCB7CiAgICBjb25zdCBjMSA9IGNvbmQgPyBgZm9vJHtzfWAgOiBgYmFyJHtzfWA7ICAvLyBzdHJpbmcKICAgIGNvbnN0IGMyOiBgZm9vJHtzdHJpbmd9YCB8IGBiYXIke3N0cmluZ31gID0gYzE7ICAvLyBgZm9vJHtzdHJpbmd9YCB8IGBiYXIke3N0cmluZ31gCiAgICBjb25zdCBjMyA9IGNvbmQgPyBjMSA6IGMyOyAgLy8gc3RyaW5nCiAgICBjb25zdCBjNCA9IGNvbmQgPyBjMyA6IGBiYXoke3N9YDsgIC8vIHN0cmluZwogICAgY29uc3QgYzU6IGBmb28ke3N0cmluZ31gIHwgYGJhciR7c3RyaW5nfWAgfCBgYmF6JHtzdHJpbmd9YCA9IGM0OyAvLyBgZm9vJHtzdHJpbmd9YCB8IGBiYXIke3N0cmluZ31gIHwgYGJheiR7c3RyaW5nfWAKICAgIGxldCB2MSA9IGMxOyAgLy8gc3RyaW5nCiAgICBsZXQgdjIgPSBjMjsgIC8vIGBmb28ke3N0cmluZ31gIHwgYGJhciR7c3RyaW5nfWAKICAgIGxldCB2MyA9IGMzOyAgLy8gc3RyaW5nCiAgICBsZXQgdjQgPSBjNDsgIC8vIHN0cmluZwogICAgbGV0IHY1ID0gYzU7ICAvLyBgZm9vJHtzdHJpbmd9YCB8IGBiYXIke3N0cmluZ31gIHwgYGJheiR7c3RyaW5nfWAKfQoKZnVuY3Rpb24gZnQxMihzOiBzdHJpbmcpOiB2b2lkIHsKICAgIGNvbnN0IGMxID0gYGZvbyR7c31gOwogICAgbGV0IHYxID0gYzE7CiAgICBjb25zdCBjMjogYGZvbyR7c3RyaW5nfWAgPSBgZm9vJHtzfWA7CiAgICBsZXQgdjIgPSBjMjsKICAgIGNvbnN0IGMzID0gYGZvbyR7c31gIGFzIGBmb28ke3N0cmluZ31gOwogICAgbGV0IHYzID0gYzM7CiAgICBjb25zdCBjNCA9IDxgZm9vJHtzdHJpbmd9YD5gZm9vJHtzfWA7CiAgICBsZXQgdjQgPSBjNDsKICAgIGNvbnN0IGM1ID0gYGZvbyR7c31gIGFzIGNvbnN0OwogICAgbGV0IHY1ID0gYzU7Cn0KCmRlY2xhcmUgZnVuY3Rpb24gd2lkZW5pbmc8VD4oeDogVCk6IFQ7CmRlY2xhcmUgZnVuY3Rpb24gbm9uV2lkZW5pbmc8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbD4oeDogVCk6IFQ7CgpmdW5jdGlvbiBmdDEzKHM6IHN0cmluZywgY29uZDogYm9vbGVhbik6IHZvaWQgewogICAgbGV0IHgxID0gd2lkZW5pbmcoYGZvbyR7c31gKTsKICAgIGxldCB4MiA9IHdpZGVuaW5nKGNvbmQgPyAnYScgOiBgZm9vJHtzfWApOwogICAgbGV0IHkxID0gbm9uV2lkZW5pbmcoYGZvbyR7c31gKTsKICAgIGxldCB5MiA9IG5vbldpZGVuaW5nKGNvbmQgPyAnYScgOiBgZm9vJHtzfWApOwp9Cgp0eXBlIFQwID0gc3RyaW5nIHwgYCR7bnVtYmVyfXB4YDsKCmZ1bmN0aW9uIGZ0MTQodDogYGZvbyR7bnVtYmVyfWApOiB2b2lkIHsKICAgIGxldCB4MTogc3RyaW5nID0gdDsKICAgIGxldCB4MjogU3RyaW5nID0gdDsKICAgIGxldCB4MzogT2JqZWN0ID0gdDsKICAgIGxldCB4NDoge30gPSB0OwogICAgbGV0IHg2OiB7IGxlbmd0aDogbnVtYmVyIH0gPSB0Owp9CgpkZWNsYXJlIGZ1bmN0aW9uIGcxPFQ+KHg6IFQpOiBUOwpkZWNsYXJlIGZ1bmN0aW9uIGcyPFQgZXh0ZW5kcyBzdHJpbmc+KHg6IFQpOiBUOwoKZnVuY3Rpb24gZnQyMChzOiBzdHJpbmcpOiB2b2lkIHsKICAgIGxldCB4MSA9IGcxKGB4eXotJHtzfWApOyAgLy8gc3RyaW5nCiAgICBsZXQgeDIgPSBnMihgeHl6LSR7c31gKTsgIC8vIGB4eXotJHtzdHJpbmd9YAp9CgovLyBSZXBybyBmcm9tICM0MTYzMQoKZGVjbGFyZSBmdW5jdGlvbiB0YWtlc0xpdGVyYWw8VCBleHRlbmRzIHN0cmluZz4obGl0ZXJhbDogVCk6IFQgZXh0ZW5kcyBgZm9vLmJhci4ke2luZmVyIFJ9YCA/IFIgOiB1bmtub3duOwoKY29uc3QgdDE6ICJiYXoiID0gdGFrZXNMaXRlcmFsKCJmb28uYmFyLmJheiIpOyAvLyAiYmF6Igpjb25zdCBpZDIgPSAiZm9vLmJhci5iYXoiOwpjb25zdCB0MjogImJheiIgPSB0YWtlc0xpdGVyYWwoaWQyKTsgLy8gImJheiIKCmRlY2xhcmUgY29uc3Qgc29tZVN0cmluZzogc3RyaW5nOwpjb25zdCB0Mzogc3RyaW5nID0gdGFrZXNMaXRlcmFsKGBmb28uYmFyLiR7c29tZVN0cmluZ31gKTsgIC8vIHN0cmluZwoKY29uc3QgaWQ0ID0gYGZvby5iYXIuJHtzb21lU3RyaW5nfWA7CmNvbnN0IHQ0OiB1bmtub3duID0gdGFrZXNMaXRlcmFsKGlkNCk7ICAvLyB1bmtub3duCgpkZWNsYXJlIGNvbnN0IHNvbWVVbmlvbjogJ2FiYycgfCAnZGVmJyB8ICdnaGknOwpjb25zdCB0NTogImFiYyIgfCAiZGVmIiB8ICJnaGkiID0gdGFrZXNMaXRlcmFsKGBmb28uYmFyLiR7c29tZVVuaW9ufWApOyAgLy8gImFiYyIgfCAiZGVmIiB8ICJnaGkiCgovLyBSZXBybyBmcm9tICM0MTczMgoKY29uc3QgcGl4ZWxWYWx1ZTogbnVtYmVyID0gMjI7Cgp0eXBlIFBpeGVsVmFsdWVUeXBlID0gYCR7bnVtYmVyfXB4YDsKCmNvbnN0IHBpeGVsU3RyaW5nOiBQaXhlbFZhbHVlVHlwZSA9IGAyMnB4YDsKCmNvbnN0IHBpeGVsU3RyaW5nV2l0aFRlbXBsYXRlOiBQaXhlbFZhbHVlVHlwZSA9IGAke3BpeGVsVmFsdWV9cHhgOwoKLy8gUmVwcm8gZnJvbSAjNDMxNDMKCmZ1bmN0aW9uIGdldENhcmRUaXRsZSh0aXRsZTogc3RyaW5nKTogYHRlc3QtJHtzdHJpbmd9YCB7CiAgICByZXR1cm4gYHRlc3QtJHt0aXRsZX1gOwp9CgovLyBSZXBybyBmcm9tICM0MzQyNAoKY29uc3QgaW50ZXJwb2xhdGVkU3R5bGUgPSB7IHJvdGF0ZTogMTIgfTsKZnVuY3Rpb24gQzIodHJhbnNmb3JtOiAiLW1vei1pbml0aWFsIiB8IChzdHJpbmcgJiB7fSkpOiBudW1iZXIgeyByZXR1cm4gMTI7IH0KQzIoYHJvdGF0ZSgke2ludGVycG9sYXRlZFN0eWxlLnJvdGF0ZX1kaWcpYCk7Cg==

