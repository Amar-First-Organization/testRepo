tests/cases/compiler/truthinessCallExpressionCoercion.ts(3,5): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(7,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(24,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(27,9): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
tests/cases/compiler/truthinessCallExpressionCoercion.ts(44,13): error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?


==== tests/cases/compiler/truthinessCallExpressionCoercion.ts (5 errors) ====
    function func() { return Math.random() > 0.5; }
    
    if (func) { // error
        ~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
    }
    
    function onlyErrorsWhenNonNullable(required: () => boolean, optional?: () => boolean) {
        if (required) { // error
            ~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    
        if (required()) { // ok
        }
    
        if (optional) { // ok
        }
    }
    
    function checksPropertyAndElementAccess() {
        const x = {
            foo: {
                bar() { }
            }
        }
    
        if (x.foo.bar) { // error
            ~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
        
        if (x.foo['bar']) { // error
            ~~~~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
        }
    }
    
    function maybeBoolean(param: boolean | (() => boolean)) {
        if (param) { // ok
        }
    }
    
    class Foo {
        maybeIsUser?: () => boolean;
    
        isUser() {
            return true;
        }
    
        test() {
            if (this.isUser) { // error
                ~~~~~~~~~~~
!!! error TS2774: This condition will always return true since the function is always defined. Did you mean to call it instead?
            }
    
            if (this.maybeIsUser) { // ok
            }
        }
    }
    