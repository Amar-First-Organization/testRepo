function numberLiteral() { return 1; }
                        ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "number"
    }
  ],
  "position": 52,
  "kind": "Type",
  "whitespaceBefore": true
}

function stringLiteral() { return "foo"; }
                        ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "string"
    }
  ],
  "position": 91,
  "kind": "Type",
  "whitespaceBefore": true
}

function nothing() { }
                  ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "void"
    }
  ],
  "position": 128,
  "kind": "Type",
  "whitespaceBefore": true
}

function closure() { return () => 1; }
                  ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "("
    },
    {
      "text": ")"
    },
    {
      "text": " => "
    },
    {
      "text": "number"
    }
  ],
  "position": 151,
  "kind": "Type",
  "whitespaceBefore": true
}

function closure() { return () => 1; }
                              ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "number"
    }
  ],
  "position": 163,
  "kind": "Type",
  "whitespaceBefore": true
}

function fooClosure() { return (foo: Foo) => foo.bar; }
                     ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "("
    },
    {
      "text": ")"
    },
    {
      "text": " => "
    },
    {
      "text": "number"
    }
  ],
  "position": 193,
  "kind": "Type",
  "whitespaceBefore": true
}

function fooClosure() { return (foo: Foo) => foo.bar; }
                                         ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "number"
    }
  ],
  "position": 213,
  "kind": "Type",
  "whitespaceBefore": true
}

function returnFoo(foo: Foo) { return foo; }
                            ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "Foo",
      "span": {
        "start": 5,
        "length": 3
      },
      "file": "/tests/cases/fourslash/inlayHintsInteractiveReturnType.ts"
    }
  ],
  "position": 256,
  "kind": "Type",
  "whitespaceBefore": true
}

function returnMaybeFoo(foo: Foo) { if (Math.random()) return foo; }
                                 ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "Foo",
      "span": {
        "start": 5,
        "length": 3
      },
      "file": "/tests/cases/fourslash/inlayHintsInteractiveReturnType.ts"
    }
  ],
  "position": 306,
  "kind": "Type",
  "whitespaceBefore": true
}

function returnFoos(foo: Foo) { return [foo, foo]; }
                             ^
{
  "text": "",
  "displayParts": [
    {
      "text": ": "
    },
    {
      "text": "Foo",
      "span": {
        "start": 5,
        "length": 3
      },
      "file": "/tests/cases/fourslash/inlayHintsInteractiveReturnType.ts"
    },
    {
      "text": "[]"
    }
  ],
  "position": 371,
  "kind": "Type",
  "whitespaceBefore": true
}