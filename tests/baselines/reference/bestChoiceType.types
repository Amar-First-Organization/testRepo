=== tests/cases/compiler/bestChoiceType.ts ===

// Repro from #10041

(''.match(/ /) || []).map(s => s.toLowerCase());
>(''.match(/ /) || []).map(s => s.toLowerCase()) : string[]
>(''.match(/ /) || []).map : <U>(this: RegExpMatchArray, callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>(''.match(/ /) || []) : RegExpMatchArray
>''.match(/ /) || [] : RegExpMatchArray
>''.match(/ /) : RegExpMatchArray | null
>''.match : { (this: String, regexp: string): RegExpMatchArray | null; (this: String, regexp: RegExp): RegExpMatchArray | null; }
>'' : ""
>match : { (this: String, regexp: string): RegExpMatchArray | null; (this: String, regexp: RegExp): RegExpMatchArray | null; }
>/ / : RegExp
>[] : never[]
>map : <U>(this: RegExpMatchArray, callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>s => s.toLowerCase() : (s: string) => string
>s : string
>s.toLowerCase() : string
>s.toLowerCase : (this: String) => string
>s : string
>toLowerCase : (this: String) => string

// Similar cases

function f1() {
>f1 : () => void

    let x = ''.match(/ /);
>x : RegExpMatchArray | null
>''.match(/ /) : RegExpMatchArray | null
>''.match : { (this: String, regexp: string): RegExpMatchArray | null; (this: String, regexp: RegExp): RegExpMatchArray | null; }
>'' : ""
>match : { (this: String, regexp: string): RegExpMatchArray | null; (this: String, regexp: RegExp): RegExpMatchArray | null; }
>/ / : RegExp

    let y = x || [];
>y : RegExpMatchArray
>x || [] : RegExpMatchArray
>x : RegExpMatchArray | null
>[] : never[]

    let z = y.map(s => s.toLowerCase());
>z : string[]
>y.map(s => s.toLowerCase()) : string[]
>y.map : <U>(this: RegExpMatchArray, callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>y : RegExpMatchArray
>map : <U>(this: RegExpMatchArray, callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>s => s.toLowerCase() : (s: string) => string
>s : string
>s.toLowerCase() : string
>s.toLowerCase : (this: String) => string
>s : string
>toLowerCase : (this: String) => string
}

function f2() {
>f2 : () => void

    let x = ''.match(/ /);
>x : RegExpMatchArray | null
>''.match(/ /) : RegExpMatchArray | null
>''.match : { (this: String, regexp: string): RegExpMatchArray | null; (this: String, regexp: RegExp): RegExpMatchArray | null; }
>'' : ""
>match : { (this: String, regexp: string): RegExpMatchArray | null; (this: String, regexp: RegExp): RegExpMatchArray | null; }
>/ / : RegExp

    let y = x ? x : [];
>y : RegExpMatchArray
>x ? x : [] : RegExpMatchArray
>x : RegExpMatchArray | null
>x : RegExpMatchArray
>[] : never[]

    let z = y.map(s => s.toLowerCase());
>z : string[]
>y.map(s => s.toLowerCase()) : string[]
>y.map : <U>(this: RegExpMatchArray, callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>y : RegExpMatchArray
>map : <U>(this: RegExpMatchArray, callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
>s => s.toLowerCase() : (s: string) => string
>s : string
>s.toLowerCase() : string
>s.toLowerCase : (this: String) => string
>s : string
>toLowerCase : (this: String) => string
}

