=== tests/cases/conformance/types/specifyingTypes/typeQueries/typeofThis.ts ===
class Test {
>Test : Test

    data = {};
>data : {}
>{} : {}

    constructor() {
        var copy: typeof this.data = {};
>copy : {}
>this.data : {}
>this : any
>data : {}
>{} : {}
    }
}

class Test1 {
>Test1 : Test1

    data = { foo: '' };
>data : { foo: string; }
>{ foo: '' } : { foo: string; }
>foo : string
>'' : ""

    ['this'] = '';
>['this'] : string
>'this' : "this"
>'' : ""

    constructor() {
        var copy: typeof this.data = { foo: '' };
>copy : { foo: string; }
>this.data : { foo: string; }
>this : any
>data : { foo: string; }
>{ foo: '' } : { foo: string; }
>foo : string
>'' : ""

        var self: typeof this = this;
>self : this
>this : any
>this : this

        self.data;
>self.data : { foo: string; }
>self : this
>data : { foo: string; }

        var str: typeof this.this = '';
>str : string
>this.this : string
>this : any
>this : string
>'' : ""
    }
}


function Test2() {
>Test2 : () => void

    let x: typeof this.no = 1;
>x : any
>this.no : any
>this : any
>no : any
>1 : 1
}

function Test3(this: { no: number }) {
>Test3 : (this: {    no: number;}) => void
>this : { no: number; }
>no : number

    let x: typeof this.no = 1;
>x : any
>this.no : any
>this : { no: number; }
>no : any
>1 : 1
}

function Test4(this: { no: number } | undefined) {
>Test4 : (this: {    no: number;} | undefined) => void
>this : { no: number; }
>no : number

    let x: typeof this.no = 1;
>x : any
>this.no : any
>this : { no: number; }
>no : any
>1 : 1
}

class Test5 {
>Test5 : Test5

    no = 1;
>no : number
>1 : 1

    f = () => {
>f : () => void
>() => {        let x: typeof this.no = 1;        let self: typeof this = this;    } : () => void

        let x: typeof this.no = 1;
>x : number
>this.no : number
>this : any
>no : number
>1 : 1

        let self: typeof this = this;
>self : this
>this : any
>this : this
    }
}

namespace Test6 {
>Test6 : typeof Test6

    export let f = () => {
>f : () => void
>() => {        let x: typeof this.no = 1;    } : () => void

        let x: typeof this.no = 1;
>x : any
>this.no : any
>this : any
>no : any
>1 : 1
    }
}

module Test7 {
>Test7 : typeof Test7

    export let f = () => {
>f : () => void
>() => {        let x: typeof this.no = 1;    } : () => void

        let x: typeof this.no = 1;
>x : any
>this.no : any
>this : any
>no : any
>1 : 1
    }
}

const Test8 = () => {
>Test8 : () => void
>() => {    let x: typeof this.no = 1;} : () => void

    let x: typeof this.no = 1;
>x : any
>this.no : any
>this : any
>no : any
>1 : 1
}

