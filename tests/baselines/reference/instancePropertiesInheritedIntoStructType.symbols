=== tests/cases/conformance/structs/members/structTypes/instancePropertiesInheritedIntoStructType.ts ===
// doc 2.4
// All base struct instance type property that are not overridden in the struct
// ok

module NonGeneric {
>NonGeneric : Symbol(NonGeneric, Decl(instancePropertiesInheritedIntoStructType.ts, 0, 0))

    struct C {
>C : Symbol(C, Decl(instancePropertiesInheritedIntoStructType.ts, 4, 19))

        x: string;
>x : Symbol(x, Decl(instancePropertiesInheritedIntoStructType.ts, 5, 14))

        fn() { return this; }
>fn : Symbol(fn, Decl(instancePropertiesInheritedIntoStructType.ts, 6, 18))
>this : Symbol(C, Decl(instancePropertiesInheritedIntoStructType.ts, 4, 19))

        constructor(public a: number, private b: number) { }
>a : Symbol(a, Decl(instancePropertiesInheritedIntoStructType.ts, 8, 20))
>b : Symbol(b, Decl(instancePropertiesInheritedIntoStructType.ts, 8, 37))
    }

    struct D extends C { e: string; }
>D : Symbol(D, Decl(instancePropertiesInheritedIntoStructType.ts, 9, 5))
>C : Symbol(C, Decl(instancePropertiesInheritedIntoStructType.ts, 4, 19))
>e : Symbol(e, Decl(instancePropertiesInheritedIntoStructType.ts, 11, 24))

    var d = new D(1, 2);
>d : Symbol(d, Decl(instancePropertiesInheritedIntoStructType.ts, 13, 7))
>D : Symbol(D, Decl(instancePropertiesInheritedIntoStructType.ts, 9, 5))

    var r = d.fn();
>r : Symbol(r, Decl(instancePropertiesInheritedIntoStructType.ts, 14, 7))
>d.fn : Symbol(C.fn, Decl(instancePropertiesInheritedIntoStructType.ts, 6, 18))
>d : Symbol(d, Decl(instancePropertiesInheritedIntoStructType.ts, 13, 7))
>fn : Symbol(C.fn, Decl(instancePropertiesInheritedIntoStructType.ts, 6, 18))

    var r2 = r.x;
>r2 : Symbol(r2, Decl(instancePropertiesInheritedIntoStructType.ts, 15, 7))
>r.x : Symbol(C.x, Decl(instancePropertiesInheritedIntoStructType.ts, 5, 14))
>r : Symbol(r, Decl(instancePropertiesInheritedIntoStructType.ts, 14, 7))
>x : Symbol(C.x, Decl(instancePropertiesInheritedIntoStructType.ts, 5, 14))

}

/* module Generic {
    struct C<T, U> {
        x: T;
        fn() { return this; }
        constructor(public a: T, private b: U) { }
    }

    struct D<T, U> extends C<T, U> { e: T; }

    var d = new D(1, '');
    var r = d.fn();
    var r2 = r.x;
} */
