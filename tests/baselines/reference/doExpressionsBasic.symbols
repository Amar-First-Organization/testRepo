=== tests/cases/compiler/doExpressionsBasic.ts ===
//#region If
const a = do {
>a : Symbol(a, Decl(doExpressionsBasic.ts, 1, 5))

    if (Math.random() > 0.5) true;
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    else false;
}
const b = do {
>b : Symbol(b, Decl(doExpressionsBasic.ts, 5, 5))

    const tmp = Math.random();
>tmp : Symbol(tmp, Decl(doExpressionsBasic.ts, 6, 9))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    if (tmp > 0.3) 3;
>tmp : Symbol(tmp, Decl(doExpressionsBasic.ts, 6, 9))

    else if (tmp > 0.6) 6;
>tmp : Symbol(tmp, Decl(doExpressionsBasic.ts, 6, 9))

    else 10;
}
//#endregion

//#region try
const c = do {
>c : Symbol(c, Decl(doExpressionsBasic.ts, 14, 5))

    try { 1; } catch { 2; }
}
const d = do {
>d : Symbol(d, Decl(doExpressionsBasic.ts, 17, 5))

    try { 1; } finally { 2 }
}
const e = do {
>e : Symbol(e, Decl(doExpressionsBasic.ts, 20, 5))

    try { 1; } catch { 2; } finally {3}
}
//#endregion

//#region Switch
const f = do {
>f : Symbol(f, Decl(doExpressionsBasic.ts, 26, 5))

    switch (Math.random()) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

        case 0: "lucky";
        default: "Normal";
    }
}
//#endregion

//#region Await
async function g() {
>g : Symbol(g, Decl(doExpressionsBasic.ts, 31, 1))

    const val = do {
>val : Symbol(val, Decl(doExpressionsBasic.ts, 36, 9))

        await 1;
    }
}
//#endregion

//#region Yield
function* h() {
>h : Symbol(h, Decl(doExpressionsBasic.ts, 39, 1))

    const val = do {
>val : Symbol(val, Decl(doExpressionsBasic.ts, 44, 9))

        const val: number = yield 1;
>val : Symbol(val, Decl(doExpressionsBasic.ts, 45, 13))

        val * val;
>val : Symbol(val, Decl(doExpressionsBasic.ts, 45, 13))
>val : Symbol(val, Decl(doExpressionsBasic.ts, 45, 13))
    }
}
//#endregion

//#region Await and Yield
async function* i() {
>i : Symbol(i, Decl(doExpressionsBasic.ts, 48, 1))

    const val = do {
>val : Symbol(val, Decl(doExpressionsBasic.ts, 53, 9))

        const val: number = yield await 1
>val : Symbol(val, Decl(doExpressionsBasic.ts, 54, 13))

        val * val;
>val : Symbol(val, Decl(doExpressionsBasic.ts, 54, 13))
>val : Symbol(val, Decl(doExpressionsBasic.ts, 54, 13))
    }
    const val2 = do {
>val2 : Symbol(val2, Decl(doExpressionsBasic.ts, 57, 9))

        await 1
    }
}
//#endregion

//#region Nested
const j = do {
>j : Symbol(j, Decl(doExpressionsBasic.ts, 64, 5))

    if (6 > 5) 5;
    else if (6 > 2) 3;
    else {
        try {
            4;
        } catch {
            5
        }
    }
}
//#endregion

//#region Not across boundary
const k = do {
>k : Symbol(k, Decl(doExpressionsBasic.ts, 78, 5))

    function x() {
>x : Symbol(x, Decl(doExpressionsBasic.ts, 78, 14))

        1 * 1; // no transform here
    }
    class T {
>T : Symbol(T, Decl(doExpressionsBasic.ts, 81, 5))

        field = x
>field : Symbol(T.field, Decl(doExpressionsBasic.ts, 82, 13))
>x : Symbol(x, Decl(doExpressionsBasic.ts, 78, 14))
    }
    1 * 2;
}
//#endregion

