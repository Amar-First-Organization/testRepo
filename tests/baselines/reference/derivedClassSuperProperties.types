=== tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperProperties.ts ===
class Base {
>Base : Base

    constructor(a?) { }
>a : any

    receivesAnything(param?) { }
>receivesAnything : (param?: any) => void
>param : any
}

class Derived1 extends Base {
>Derived1 : Derived1
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super.receivesAnything();
>super.receivesAnything() : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void

        super();
>super() : void
>super : typeof Base
    }
}

class Derived2 extends Base {
>Derived2 : Derived2
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super.receivesAnything(this);
>super.receivesAnything(this) : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void
>this : this

        super();
>super() : void
>super : typeof Base
    }
}

class Derived3 extends Base {
>Derived3 : Derived3
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super.receivesAnything();
>super.receivesAnything() : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void

        super(this);
>super(this) : void
>super : typeof Base
>this : this
    }
}

class Derived4 extends Base {
>Derived4 : Derived4
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super.receivesAnything(this);
>super.receivesAnything(this) : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void
>this : this

        super(this);
>super(this) : void
>super : typeof Base
>this : this
    }
}

class Derived5 extends Base {
>Derived5 : Derived5
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super();
>super() : void
>super : typeof Base

        super.receivesAnything();
>super.receivesAnything() : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void
    }
}

class Derived6 extends Base {
>Derived6 : Derived6
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super(this);
>super(this) : void
>super : typeof Base
>this : this

        super.receivesAnything();
>super.receivesAnything() : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void
    }
}

class Derived7 extends Base {
>Derived7 : Derived7
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super();
>super() : void
>super : typeof Base

        super.receivesAnything(this);
>super.receivesAnything(this) : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void
>this : this
    }
}

class Derived8 extends Base {
>Derived8 : Derived8
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        super(this);
>super(this) : void
>super : typeof Base
>this : this

        super.receivesAnything(this);
>super.receivesAnything(this) : void
>super.receivesAnything : (param?: any) => void
>super : Base
>receivesAnything : (param?: any) => void
>this : this
    }
}

class DerivedWithArrowFunction extends Base {
>DerivedWithArrowFunction : DerivedWithArrowFunction
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        (() => this)();
>(() => this)() : this
>(() => this) : () => this
>() => this : () => this
>this : this

        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithFunctionDeclaration extends Base {
>DerivedWithFunctionDeclaration : DerivedWithFunctionDeclaration
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        function declaration() {
>declaration : () => any

            return this;
>this : any
        }
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithFunctionDeclarationAndThisParam extends Base {
>DerivedWithFunctionDeclarationAndThisParam : DerivedWithFunctionDeclarationAndThisParam
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        function declaration(param = this) {
>declaration : (param?: any) => any
>param : any
>this : any

            return param;
>param : any
        }
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithFunctionExpression extends Base {
>DerivedWithFunctionExpression : DerivedWithFunctionExpression
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        (function () {
>(function () {            return this;        })() : any
>(function () {            return this;        }) : () => any
>function () {            return this;        } : () => any

            return this;
>this : any

        })();
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithClassExpression extends Base {
>DerivedWithClassExpression : DerivedWithClassExpression
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        console.log(class { });
>console.log(class { }) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>class { } : typeof (Anonymous class)

        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithDerivedClassExpression extends Base {
>DerivedWithDerivedClassExpression : DerivedWithDerivedClassExpression
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        console.log(class extends Base {
>console.log(class extends Base {            constructor() {                super();            }        }) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>class extends Base {            constructor() {                super();            }        } : typeof (Anonymous class)
>Base : Base

            constructor() {
                super();
>super() : void
>super : typeof Base
            }
        });
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithNewDerivedClassExpression extends Base {
>DerivedWithNewDerivedClassExpression : DerivedWithNewDerivedClassExpression
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        console.log(new class extends Base {
>console.log(new class extends Base {            constructor() {                super();            }        }()) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>new class extends Base {            constructor() {                super();            }        }() : (Anonymous class)
>class extends Base {            constructor() {                super();            }        } : typeof (Anonymous class)
>Base : Base

            constructor() {
                super();
>super() : void
>super : typeof Base
            }
        }());
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithObjectAccessors extends Base {
>DerivedWithObjectAccessors : DerivedWithObjectAccessors
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        const obj = {
>obj : { prop: boolean; }
>{            get prop() {                return true;            },            set prop(param) {                this._prop = param;            }        } : { prop: boolean; }

            get prop() {
>prop : boolean

                return true;
>true : true

            },
            set prop(param) {
>prop : boolean
>param : boolean

                this._prop = param;
>this._prop = param : boolean
>this._prop : any
>this : any
>_prop : any
>param : boolean
            }
        };
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithObjectAccessorsUsingThis extends Base {
>DerivedWithObjectAccessorsUsingThis : DerivedWithObjectAccessorsUsingThis
>Base : Base

    propName = "prop";
>propName : string
>"prop" : "prop"

    constructor() {
        const obj = {
>obj : { [x: string]: any; }
>{            get [this.propName]() {                return true;            },            set [this.propName](param) {                this._prop = param;            }        } : { [x: string]: any; }

            get [this.propName]() {
>[this.propName] : boolean
>this.propName : string
>this : this
>propName : string

                return true;
>true : true

            },
            set [this.propName](param) {
>[this.propName] : any
>this.propName : string
>this : this
>propName : string
>param : any

                this._prop = param;
>this._prop = param : any
>this._prop : any
>this : any
>_prop : any
>param : any
            }
        };
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithObjectComputedPropertyName extends Base {
>DerivedWithObjectComputedPropertyName : DerivedWithObjectComputedPropertyName
>Base : Base

    propName = "prop";
>propName : string
>"prop" : "prop"

    constructor() {
        const obj = {
>obj : { [x: string]: boolean; }
>{            [this.propName]: true,        } : { [x: string]: boolean; }

            [this.propName]: true,
>[this.propName] : boolean
>this.propName : string
>this : this
>propName : string
>true : true

        };
        super();
>super() : void
>super : typeof Base
    }
}

class DerivedWithObjectMethod extends Base {
>DerivedWithObjectMethod : DerivedWithObjectMethod
>Base : Base

    prop = true;
>prop : boolean
>true : true

    constructor() {
        const obj = {
>obj : { getProp(): any; }
>{            getProp() {                return this;            },        } : { getProp(): any; }

            getProp() {
>getProp : () => any

                return this;
>this : any

            },
        };
        super();
>super() : void
>super : typeof Base
    }
}

