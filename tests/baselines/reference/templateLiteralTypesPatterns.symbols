=== tests/cases/conformance/types/literal/templateLiteralTypesPatterns.ts ===
type RequiresLeadingSlash = `/${string}`;
>RequiresLeadingSlash : Symbol(RequiresLeadingSlash, Decl(templateLiteralTypesPatterns.ts, 0, 0))

// ok
const a: RequiresLeadingSlash = "/bin";
>a : Symbol(a, Decl(templateLiteralTypesPatterns.ts, 3, 5))
>RequiresLeadingSlash : Symbol(RequiresLeadingSlash, Decl(templateLiteralTypesPatterns.ts, 0, 0))

// not ok
const b: RequiresLeadingSlash = "no slash";
>b : Symbol(b, Decl(templateLiteralTypesPatterns.ts, 6, 5))
>RequiresLeadingSlash : Symbol(RequiresLeadingSlash, Decl(templateLiteralTypesPatterns.ts, 0, 0))

type Protocol<T extends string, U extends string> = `${T}://${U}`;
>Protocol : Symbol(Protocol, Decl(templateLiteralTypesPatterns.ts, 6, 43))
>T : Symbol(T, Decl(templateLiteralTypesPatterns.ts, 8, 14))
>U : Symbol(U, Decl(templateLiteralTypesPatterns.ts, 8, 31))
>T : Symbol(T, Decl(templateLiteralTypesPatterns.ts, 8, 14))
>U : Symbol(U, Decl(templateLiteralTypesPatterns.ts, 8, 31))

function download(hostSpec: Protocol<"http" | "https" | "ftp", string>) { }
>download : Symbol(download, Decl(templateLiteralTypesPatterns.ts, 8, 66))
>hostSpec : Symbol(hostSpec, Decl(templateLiteralTypesPatterns.ts, 9, 18))
>Protocol : Symbol(Protocol, Decl(templateLiteralTypesPatterns.ts, 6, 43))

// ok, has protocol
download("http://example.com/protocol");
>download : Symbol(download, Decl(templateLiteralTypesPatterns.ts, 8, 66))

// issues error - no protocol
download("example.com/noprotocol");
>download : Symbol(download, Decl(templateLiteralTypesPatterns.ts, 8, 66))

// issues error, incorrect protocol
download("gopher://example.com/protocol");
>download : Symbol(download, Decl(templateLiteralTypesPatterns.ts, 8, 66))

const q: RequiresLeadingSlash extends string ? true : false = true;
>q : Symbol(q, Decl(templateLiteralTypesPatterns.ts, 17, 5))
>RequiresLeadingSlash : Symbol(RequiresLeadingSlash, Decl(templateLiteralTypesPatterns.ts, 0, 0))

declare function bools(x: `${boolean}`): void;
>bools : Symbol(bools, Decl(templateLiteralTypesPatterns.ts, 17, 67))
>x : Symbol(x, Decl(templateLiteralTypesPatterns.ts, 19, 23))

// ok
bools("true");
>bools : Symbol(bools, Decl(templateLiteralTypesPatterns.ts, 17, 67))

bools("false");
>bools : Symbol(bools, Decl(templateLiteralTypesPatterns.ts, 17, 67))

// not ok
bools("other");
>bools : Symbol(bools, Decl(templateLiteralTypesPatterns.ts, 17, 67))

type Pat<T extends string | null | undefined> = `${T}`
>Pat : Symbol(Pat, Decl(templateLiteralTypesPatterns.ts, 25, 15))
>T : Symbol(T, Decl(templateLiteralTypesPatterns.ts, 27, 9))
>T : Symbol(T, Decl(templateLiteralTypesPatterns.ts, 27, 9))

declare function nullishes(x: Pat<null | undefined>): void;
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))
>x : Symbol(x, Decl(templateLiteralTypesPatterns.ts, 28, 27))
>Pat : Symbol(Pat, Decl(templateLiteralTypesPatterns.ts, 25, 15))

// ok
nullishes("null");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

nullishes("undefined");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

// not ok
nullishes("0");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

nullishes("false");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

nullishes("NaN");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

nullishes("");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

nullishes("other");
>nullishes : Symbol(nullishes, Decl(templateLiteralTypesPatterns.ts, 27, 54))

declare function numbers(x: `${number}`): void;
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))
>x : Symbol(x, Decl(templateLiteralTypesPatterns.ts, 40, 25))

// the following should work
numbers("1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("-1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("0");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("0b1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("0x1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("0o1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1e21");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1E21");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1e-21");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1E-21");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1.1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("-1.1");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("-1.1e-10");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("-1.1E-10");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1.1e-10");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

// the following should be errors since they're not numbers
numbers("?");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("NaN");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("Infinity");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("+Infinity");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("-Infinity");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("1_000");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

// the following should be errors since they don't match the pattern
numbers("a10");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

numbers("10a");
>numbers : Symbol(numbers, Decl(templateLiteralTypesPatterns.ts, 38, 19))

declare function bigints(x: `${bigint}`): void;
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))
>x : Symbol(x, Decl(templateLiteralTypesPatterns.ts, 70, 25))

// the following should work
bigints("1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0b1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0x1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0o1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

// bigints do not allow scientific notation in their parsing/scanning, so these are all errors
bigints("1e21");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1E21");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1e-21");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1E-21");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

// these are all errors because they're not big_int_s
bigints("1.0");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1.1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1.1");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1.1e-10");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1.1E-10");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1.1e-10");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

// the following should be errors since they're not numbers
bigints("?");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("NaN");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("Infinity");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("+Infinity");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-Infinity");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1_000");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

// the following should be errors since they don't match the pattern
bigints("a10n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("10an");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

// the following should all be errors because the `BigInt` constructor (and thus bigint parsing) doesn't take the trailing `n` used in literals
bigints("1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0b1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0x1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("0o1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1e21n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1E21n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1e-21n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1E-21n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1.1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1.1n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1.1e-10n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("-1.1E-10n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

bigints("1.1e-10n");
>bigints : Symbol(bigints, Decl(templateLiteralTypesPatterns.ts, 68, 15))

