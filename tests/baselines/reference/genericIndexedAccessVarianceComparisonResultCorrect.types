=== tests/cases/compiler/genericIndexedAccessVarianceComparisonResultCorrect.ts ===
class A {
>A : A

    x: string = 'A';
>x : string
>'A' : "A"

    y: number = 0;
>y : number
>0 : 0
}

class B {
>B : B

    x: string = 'B';
>x : string
>'B' : "B"

    z: boolean = true;
>z : boolean
>true : true
}

type T<X extends { x: any }> = Pick<X, 'x'>;
>T : Pick<X, "x">
>x : any

type C = T<A>;
>C : Pick<A, "x">

type D = T<B>;
>D : Pick<B, "x">

type C_extends_D = C extends D ? true : false;                                  // true
>C_extends_D : true
>true : true
>false : false

type PickA_extends_PickB = Pick<A, 'x'> extends Pick<B, 'x'> ? true : false;    // true
>PickA_extends_PickB : true
>true : true
>false : false

type TA_extends_TB = T<A> extends T<B> ? true : false;                          // should be true
>TA_extends_TB : true
>true : true
>false : false

declare let a: T<A>;
>a : Pick<A, "x">

declare let b: T<B>;
>b : Pick<B, "x">

declare let c: C;
>c : Pick<A, "x">

declare let d: D;
>d : Pick<B, "x">

b = a;      // should be no error
>b = a : Pick<A, "x">
>b : Pick<B, "x">
>a : Pick<A, "x">

c = d;
>c = d : Pick<B, "x">
>c : Pick<A, "x">
>d : Pick<B, "x">

