=== tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperProperties.ts ===
class Base {
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    constructor(a?) { }
>a : Symbol(a, Decl(derivedClassSuperProperties.ts, 1, 16))

    receivesAnything(param?) { }
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 3, 21))
}

class Derived1 extends Base {
>Derived1 : Symbol(Derived1, Decl(derivedClassSuperProperties.ts, 4, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived1.prop, Decl(derivedClassSuperProperties.ts, 6, 29))

    constructor() {
        super.receivesAnything();
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))

        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class Derived2 extends Base {
>Derived2 : Symbol(Derived2, Decl(derivedClassSuperProperties.ts, 12, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived2.prop, Decl(derivedClassSuperProperties.ts, 14, 29))

    constructor() {
        super.receivesAnything(this);
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>this : Symbol(Derived2, Decl(derivedClassSuperProperties.ts, 12, 1))

        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class Derived3 extends Base {
>Derived3 : Symbol(Derived3, Decl(derivedClassSuperProperties.ts, 20, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived3.prop, Decl(derivedClassSuperProperties.ts, 22, 29))

    constructor() {
        super.receivesAnything();
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))

        super(this);
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>this : Symbol(Derived3, Decl(derivedClassSuperProperties.ts, 20, 1))
    }
}

class Derived4 extends Base {
>Derived4 : Symbol(Derived4, Decl(derivedClassSuperProperties.ts, 28, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived4.prop, Decl(derivedClassSuperProperties.ts, 30, 29))

    constructor() {
        super.receivesAnything(this);
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>this : Symbol(Derived4, Decl(derivedClassSuperProperties.ts, 28, 1))

        super(this);
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>this : Symbol(Derived4, Decl(derivedClassSuperProperties.ts, 28, 1))
    }
}

class Derived5 extends Base {
>Derived5 : Symbol(Derived5, Decl(derivedClassSuperProperties.ts, 36, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived5.prop, Decl(derivedClassSuperProperties.ts, 38, 29))

    constructor() {
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

        super.receivesAnything();
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
    }
}

class Derived6 extends Base {
>Derived6 : Symbol(Derived6, Decl(derivedClassSuperProperties.ts, 44, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived6.prop, Decl(derivedClassSuperProperties.ts, 46, 29))

    constructor() {
        super(this);
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>this : Symbol(Derived6, Decl(derivedClassSuperProperties.ts, 44, 1))

        super.receivesAnything();
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
    }
}

class Derived7 extends Base {
>Derived7 : Symbol(Derived7, Decl(derivedClassSuperProperties.ts, 52, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived7.prop, Decl(derivedClassSuperProperties.ts, 54, 29))

    constructor() {
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

        super.receivesAnything(this);
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>this : Symbol(Derived7, Decl(derivedClassSuperProperties.ts, 52, 1))
    }
}

class Derived8 extends Base {
>Derived8 : Symbol(Derived8, Decl(derivedClassSuperProperties.ts, 60, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(Derived8.prop, Decl(derivedClassSuperProperties.ts, 62, 29))

    constructor() {
        super(this);
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>this : Symbol(Derived8, Decl(derivedClassSuperProperties.ts, 60, 1))

        super.receivesAnything(this);
>super.receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
>receivesAnything : Symbol(Base.receivesAnything, Decl(derivedClassSuperProperties.ts, 1, 23))
>this : Symbol(Derived8, Decl(derivedClassSuperProperties.ts, 60, 1))
    }
}

class DerivedWithArrowFunction extends Base {
>DerivedWithArrowFunction : Symbol(DerivedWithArrowFunction, Decl(derivedClassSuperProperties.ts, 68, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithArrowFunction.prop, Decl(derivedClassSuperProperties.ts, 70, 45))

    constructor() {
        (() => this)();
>this : Symbol(DerivedWithArrowFunction, Decl(derivedClassSuperProperties.ts, 68, 1))

        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithArrowFunctionParameter extends Base {
>DerivedWithArrowFunctionParameter : Symbol(DerivedWithArrowFunctionParameter, Decl(derivedClassSuperProperties.ts, 76, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithArrowFunctionParameter.prop, Decl(derivedClassSuperProperties.ts, 78, 54))

    constructor() {
        const lambda = (param = this) => {};
>lambda : Symbol(lambda, Decl(derivedClassSuperProperties.ts, 81, 13))
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 81, 24))
>this : Symbol(DerivedWithArrowFunctionParameter, Decl(derivedClassSuperProperties.ts, 76, 1))

        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithFunctionDeclaration extends Base {
>DerivedWithFunctionDeclaration : Symbol(DerivedWithFunctionDeclaration, Decl(derivedClassSuperProperties.ts, 84, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithFunctionDeclaration.prop, Decl(derivedClassSuperProperties.ts, 86, 51))

    constructor() {
        function declaration() {
>declaration : Symbol(declaration, Decl(derivedClassSuperProperties.ts, 88, 19))

            return this;
        }
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithFunctionDeclarationAndThisParam extends Base {
>DerivedWithFunctionDeclarationAndThisParam : Symbol(DerivedWithFunctionDeclarationAndThisParam, Decl(derivedClassSuperProperties.ts, 94, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithFunctionDeclarationAndThisParam.prop, Decl(derivedClassSuperProperties.ts, 96, 63))

    constructor() {
        function declaration(param = this) {
>declaration : Symbol(declaration, Decl(derivedClassSuperProperties.ts, 98, 19))
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 99, 29))

            return param;
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 99, 29))
        }
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithFunctionExpression extends Base {
>DerivedWithFunctionExpression : Symbol(DerivedWithFunctionExpression, Decl(derivedClassSuperProperties.ts, 104, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithFunctionExpression.prop, Decl(derivedClassSuperProperties.ts, 106, 50))

    constructor() {
        (function () {
            return this;
        })();
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithClassDeclaration extends Base {
>DerivedWithClassDeclaration : Symbol(DerivedWithClassDeclaration, Decl(derivedClassSuperProperties.ts, 114, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithClassDeclaration.prop, Decl(derivedClassSuperProperties.ts, 116, 48))

    constructor() {
        class InnerClass {
>InnerClass : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 118, 19))

            private method() {
>method : Symbol(InnerClass.method, Decl(derivedClassSuperProperties.ts, 119, 26))

                return this;
>this : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 118, 19))
            }
            private property = 7;
>property : Symbol(InnerClass.property, Decl(derivedClassSuperProperties.ts, 122, 13))

            constructor() {
                this.property;
>this.property : Symbol(InnerClass.property, Decl(derivedClassSuperProperties.ts, 122, 13))
>this : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 118, 19))
>property : Symbol(InnerClass.property, Decl(derivedClassSuperProperties.ts, 122, 13))

                this.method();
>this.method : Symbol(InnerClass.method, Decl(derivedClassSuperProperties.ts, 119, 26))
>this : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 118, 19))
>method : Symbol(InnerClass.method, Decl(derivedClassSuperProperties.ts, 119, 26))
            }
        }
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithClassDeclarationExtendingMember extends Base {
>DerivedWithClassDeclarationExtendingMember : Symbol(DerivedWithClassDeclarationExtendingMember, Decl(derivedClassSuperProperties.ts, 131, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    memberClass = class { };
>memberClass : Symbol(DerivedWithClassDeclarationExtendingMember.memberClass, Decl(derivedClassSuperProperties.ts, 133, 63))

    constructor() {
        class InnerClass extends this.memberClass {
>InnerClass : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 135, 19))
>this.memberClass : Symbol(DerivedWithClassDeclarationExtendingMember.memberClass, Decl(derivedClassSuperProperties.ts, 133, 63))
>this : Symbol(DerivedWithClassDeclarationExtendingMember, Decl(derivedClassSuperProperties.ts, 131, 1))
>memberClass : Symbol(DerivedWithClassDeclarationExtendingMember.memberClass, Decl(derivedClassSuperProperties.ts, 133, 63))

            private method() {
>method : Symbol(InnerClass.method, Decl(derivedClassSuperProperties.ts, 136, 51))

                return this;
>this : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 135, 19))
            }
            private property = 7;
>property : Symbol(InnerClass.property, Decl(derivedClassSuperProperties.ts, 139, 13))

            constructor() {
                super();
>super : Symbol((Anonymous class), Decl(derivedClassSuperProperties.ts, 134, 17))

                this.property;
>this.property : Symbol(InnerClass.property, Decl(derivedClassSuperProperties.ts, 139, 13))
>this : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 135, 19))
>property : Symbol(InnerClass.property, Decl(derivedClassSuperProperties.ts, 139, 13))

                this.method();
>this.method : Symbol(InnerClass.method, Decl(derivedClassSuperProperties.ts, 136, 51))
>this : Symbol(InnerClass, Decl(derivedClassSuperProperties.ts, 135, 19))
>method : Symbol(InnerClass.method, Decl(derivedClassSuperProperties.ts, 136, 51))
            }
        }
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithClassExpression extends Base {
>DerivedWithClassExpression : Symbol(DerivedWithClassExpression, Decl(derivedClassSuperProperties.ts, 149, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithClassExpression.prop, Decl(derivedClassSuperProperties.ts, 151, 47))

    constructor() {
        console.log(class {
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

            private method() {
>method : Symbol((Anonymous class).method, Decl(derivedClassSuperProperties.ts, 154, 27))

                return this;
>this : Symbol((Anonymous class), Decl(derivedClassSuperProperties.ts, 154, 20))
            }
            private property = 7;
>property : Symbol((Anonymous class).property, Decl(derivedClassSuperProperties.ts, 157, 13))

            constructor() {
                this.property;
>this.property : Symbol((Anonymous class).property, Decl(derivedClassSuperProperties.ts, 157, 13))
>this : Symbol((Anonymous class), Decl(derivedClassSuperProperties.ts, 154, 20))
>property : Symbol((Anonymous class).property, Decl(derivedClassSuperProperties.ts, 157, 13))

                this.method();
>this.method : Symbol((Anonymous class).method, Decl(derivedClassSuperProperties.ts, 154, 27))
>this : Symbol((Anonymous class), Decl(derivedClassSuperProperties.ts, 154, 20))
>method : Symbol((Anonymous class).method, Decl(derivedClassSuperProperties.ts, 154, 27))
            }
        });
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithClassExpressionExtendingMember extends Base {
>DerivedWithClassExpressionExtendingMember : Symbol(DerivedWithClassExpressionExtendingMember, Decl(derivedClassSuperProperties.ts, 166, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    memberClass = class { };
>memberClass : Symbol(DerivedWithClassExpressionExtendingMember.memberClass, Decl(derivedClassSuperProperties.ts, 168, 62))

    constructor() {
        console.log(class extends this.memberClass { });
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>this.memberClass : Symbol(DerivedWithClassExpressionExtendingMember.memberClass, Decl(derivedClassSuperProperties.ts, 168, 62))
>this : Symbol(DerivedWithClassExpressionExtendingMember, Decl(derivedClassSuperProperties.ts, 166, 1))
>memberClass : Symbol(DerivedWithClassExpressionExtendingMember.memberClass, Decl(derivedClassSuperProperties.ts, 168, 62))

        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithDerivedClassExpression extends Base {
>DerivedWithDerivedClassExpression : Symbol(DerivedWithDerivedClassExpression, Decl(derivedClassSuperProperties.ts, 174, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithDerivedClassExpression.prop, Decl(derivedClassSuperProperties.ts, 176, 54))

    constructor() {
        console.log(class extends Base {
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

            constructor() {
                super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
            }
            public foo() {
>foo : Symbol((Anonymous class).foo, Decl(derivedClassSuperProperties.ts, 182, 13))

                return this;
>this : Symbol((Anonymous class), Decl(derivedClassSuperProperties.ts, 179, 20))
            }
            public bar = () => this;
>bar : Symbol((Anonymous class).bar, Decl(derivedClassSuperProperties.ts, 185, 13))
>this : Symbol((Anonymous class), Decl(derivedClassSuperProperties.ts, 179, 20))

        });
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithNewDerivedClassExpression extends Base {
>DerivedWithNewDerivedClassExpression : Symbol(DerivedWithNewDerivedClassExpression, Decl(derivedClassSuperProperties.ts, 190, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithNewDerivedClassExpression.prop, Decl(derivedClassSuperProperties.ts, 192, 57))

    constructor() {
        console.log(new class extends Base {
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

            constructor() {
                super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
            }
        }());
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithObjectAccessors extends Base {
>DerivedWithObjectAccessors : Symbol(DerivedWithObjectAccessors, Decl(derivedClassSuperProperties.ts, 202, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithObjectAccessors.prop, Decl(derivedClassSuperProperties.ts, 204, 47))

    constructor() {
        const obj = {
>obj : Symbol(obj, Decl(derivedClassSuperProperties.ts, 207, 13))

            get prop() {
>prop : Symbol(prop, Decl(derivedClassSuperProperties.ts, 207, 21), Decl(derivedClassSuperProperties.ts, 210, 14))

                return true;
            },
            set prop(param) {
>prop : Symbol(prop, Decl(derivedClassSuperProperties.ts, 207, 21), Decl(derivedClassSuperProperties.ts, 210, 14))
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 211, 21))

                this._prop = param;
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 211, 21))
            }
        };
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithObjectAccessorsUsingThisInKeys extends Base {
>DerivedWithObjectAccessorsUsingThisInKeys : Symbol(DerivedWithObjectAccessorsUsingThisInKeys, Decl(derivedClassSuperProperties.ts, 217, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    propName = "prop";
>propName : Symbol(DerivedWithObjectAccessorsUsingThisInKeys.propName, Decl(derivedClassSuperProperties.ts, 219, 62))

    constructor() {
        const obj = {
>obj : Symbol(obj, Decl(derivedClassSuperProperties.ts, 222, 13))

            _prop: "prop",
>_prop : Symbol(_prop, Decl(derivedClassSuperProperties.ts, 222, 21))

            get [this.propName]() {
>[this.propName] : Symbol([this.propName], Decl(derivedClassSuperProperties.ts, 223, 26))
>this.propName : Symbol(DerivedWithObjectAccessorsUsingThisInKeys.propName, Decl(derivedClassSuperProperties.ts, 219, 62))
>this : Symbol(DerivedWithObjectAccessorsUsingThisInKeys, Decl(derivedClassSuperProperties.ts, 217, 1))
>propName : Symbol(DerivedWithObjectAccessorsUsingThisInKeys.propName, Decl(derivedClassSuperProperties.ts, 219, 62))

                return true;
            },
            set [this.propName](param) {
>[this.propName] : Symbol([this.propName], Decl(derivedClassSuperProperties.ts, 226, 14))
>this.propName : Symbol(DerivedWithObjectAccessorsUsingThisInKeys.propName, Decl(derivedClassSuperProperties.ts, 219, 62))
>this : Symbol(DerivedWithObjectAccessorsUsingThisInKeys, Decl(derivedClassSuperProperties.ts, 217, 1))
>propName : Symbol(DerivedWithObjectAccessorsUsingThisInKeys.propName, Decl(derivedClassSuperProperties.ts, 219, 62))
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 227, 32))

                this._prop = param;
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 227, 32))
            }
        };
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithObjectAccessorsUsingThisInBodies extends Base {
>DerivedWithObjectAccessorsUsingThisInBodies : Symbol(DerivedWithObjectAccessorsUsingThisInBodies, Decl(derivedClassSuperProperties.ts, 233, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    propName = "prop";
>propName : Symbol(DerivedWithObjectAccessorsUsingThisInBodies.propName, Decl(derivedClassSuperProperties.ts, 235, 64))

    constructor() {
        const obj = {
>obj : Symbol(obj, Decl(derivedClassSuperProperties.ts, 238, 13))

            _prop: "prop",
>_prop : Symbol(_prop, Decl(derivedClassSuperProperties.ts, 238, 21))

            get prop() {
>prop : Symbol(prop, Decl(derivedClassSuperProperties.ts, 239, 26), Decl(derivedClassSuperProperties.ts, 242, 14))

                return this._prop;
            },
            set prop(param) {
>prop : Symbol(prop, Decl(derivedClassSuperProperties.ts, 239, 26), Decl(derivedClassSuperProperties.ts, 242, 14))
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 243, 21))

                this._prop = param;
>param : Symbol(param, Decl(derivedClassSuperProperties.ts, 243, 21))
            }
        };
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithObjectComputedPropertyBody extends Base {
>DerivedWithObjectComputedPropertyBody : Symbol(DerivedWithObjectComputedPropertyBody, Decl(derivedClassSuperProperties.ts, 249, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    propName = "prop";
>propName : Symbol(DerivedWithObjectComputedPropertyBody.propName, Decl(derivedClassSuperProperties.ts, 251, 58))

    constructor() {
        const obj = {
>obj : Symbol(obj, Decl(derivedClassSuperProperties.ts, 254, 13))

            prop: this.propName,
>prop : Symbol(prop, Decl(derivedClassSuperProperties.ts, 254, 21))
>this.propName : Symbol(DerivedWithObjectComputedPropertyBody.propName, Decl(derivedClassSuperProperties.ts, 251, 58))
>this : Symbol(DerivedWithObjectComputedPropertyBody, Decl(derivedClassSuperProperties.ts, 249, 1))
>propName : Symbol(DerivedWithObjectComputedPropertyBody.propName, Decl(derivedClassSuperProperties.ts, 251, 58))

        };
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithObjectComputedPropertyName extends Base {
>DerivedWithObjectComputedPropertyName : Symbol(DerivedWithObjectComputedPropertyName, Decl(derivedClassSuperProperties.ts, 259, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    propName = "prop";
>propName : Symbol(DerivedWithObjectComputedPropertyName.propName, Decl(derivedClassSuperProperties.ts, 261, 58))

    constructor() {
        const obj = {
>obj : Symbol(obj, Decl(derivedClassSuperProperties.ts, 264, 13))

            [this.propName]: true,
>[this.propName] : Symbol([this.propName], Decl(derivedClassSuperProperties.ts, 264, 21))
>this.propName : Symbol(DerivedWithObjectComputedPropertyName.propName, Decl(derivedClassSuperProperties.ts, 261, 58))
>this : Symbol(DerivedWithObjectComputedPropertyName, Decl(derivedClassSuperProperties.ts, 259, 1))
>propName : Symbol(DerivedWithObjectComputedPropertyName.propName, Decl(derivedClassSuperProperties.ts, 261, 58))

        };
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

class DerivedWithObjectMethod extends Base {
>DerivedWithObjectMethod : Symbol(DerivedWithObjectMethod, Decl(derivedClassSuperProperties.ts, 269, 1))
>Base : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))

    prop = true;
>prop : Symbol(DerivedWithObjectMethod.prop, Decl(derivedClassSuperProperties.ts, 271, 44))

    constructor() {
        const obj = {
>obj : Symbol(obj, Decl(derivedClassSuperProperties.ts, 274, 13))

            getProp() {
>getProp : Symbol(getProp, Decl(derivedClassSuperProperties.ts, 274, 21))

                return this;
            },
        };
        super();
>super : Symbol(Base, Decl(derivedClassSuperProperties.ts, 0, 0))
    }
}

