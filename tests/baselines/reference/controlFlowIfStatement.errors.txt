tests/cases/conformance/controlFlow/controlFlowIfStatement.ts(39,27): error TS2345: Argument of type 'string | (T & string)' is not assignable to parameter of type 'T & string extends DisallowedJSONParseText ? never : T & string extends AllowedJSONParseText ? AllowedJSONParseText & T & string : never'.
  Type 'string' is not assignable to type 'T & string extends DisallowedJSONParseText ? never : T & string extends AllowedJSONParseText ? AllowedJSONParseText & T & string : never'.


==== tests/cases/conformance/controlFlow/controlFlowIfStatement.ts (1 errors) ====
    let x: string | number | boolean | RegExp;
    let cond: boolean;
    
    x = /a/;
    if (x /* RegExp */, (x = true)) {
        x; // boolean
        x = "";
    }
    else {
        x; // boolean
        x = 42;
    }
    x; // string | number
    
    function a() {
        let x: string | number;
        if (cond) {
            x = 42;
        }
        else {
            x = "";
            return;
        }
        x; // number
    }
    function b() {
        let x: string | number;
        if (cond) {
            x = 42;
            throw "";
        }
        else {
            x = "";
        }
        x; // string
    }
    function c<T>(data: string | T): T {
        if (typeof data === 'string') {
            return JSON.parse(data);
                              ~~~~
!!! error TS2345: Argument of type 'string | (T & string)' is not assignable to parameter of type 'T & string extends DisallowedJSONParseText ? never : T & string extends AllowedJSONParseText ? AllowedJSONParseText & T & string : never'.
!!! error TS2345:   Type 'string' is not assignable to type 'T & string extends DisallowedJSONParseText ? never : T & string extends AllowedJSONParseText ? AllowedJSONParseText & T & string : never'.
        }
        else {
            return data;
        }
    }
    function d<T extends string>(data: string | T): never {
        if (typeof data === 'string') {
            throw new Error('will always happen');
        }
        else {
            return data;
        }
    }
    
    interface I<T> {
      p: T;
    }
    function e(x: I<"A" | "B">) {
        if (x.p === "A") {
            let a: "A" = (null as unknown as typeof x.p)
        }
    }
    