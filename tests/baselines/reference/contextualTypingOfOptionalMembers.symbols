=== tests/cases/compiler/index.ts ===
interface ActionsObject<State> {
>ActionsObject : Symbol(ActionsObject, Decl(index.ts, 0, 0))
>State : Symbol(State, Decl(index.ts, 0, 24))

    [prop: string]: (state: State) => State;
>prop : Symbol(prop, Decl(index.ts, 1, 5))
>state : Symbol(state, Decl(index.ts, 1, 21))
>State : Symbol(State, Decl(index.ts, 0, 24))
>State : Symbol(State, Decl(index.ts, 0, 24))
}

interface Options<State, Actions> {
>Options : Symbol(Options, Decl(index.ts, 2, 1))
>State : Symbol(State, Decl(index.ts, 4, 18))
>Actions : Symbol(Actions, Decl(index.ts, 4, 24))

    state?: State;
>state : Symbol(Options.state, Decl(index.ts, 4, 35))
>State : Symbol(State, Decl(index.ts, 4, 18))

    view?: (state: State, actions: Actions) => any;
>view : Symbol(Options.view, Decl(index.ts, 5, 18))
>state : Symbol(state, Decl(index.ts, 6, 12))
>State : Symbol(State, Decl(index.ts, 4, 18))
>actions : Symbol(actions, Decl(index.ts, 6, 25))
>Actions : Symbol(Actions, Decl(index.ts, 4, 24))

    actions: string | Actions;
>actions : Symbol(Options.actions, Decl(index.ts, 6, 51))
>Actions : Symbol(Actions, Decl(index.ts, 4, 24))
}

declare function app<State, Actions extends ActionsObject<State>>(obj: Options<State, Actions>): void;
>app : Symbol(app, Decl(index.ts, 8, 1))
>State : Symbol(State, Decl(index.ts, 10, 21))
>Actions : Symbol(Actions, Decl(index.ts, 10, 27))
>ActionsObject : Symbol(ActionsObject, Decl(index.ts, 0, 0))
>State : Symbol(State, Decl(index.ts, 10, 21))
>obj : Symbol(obj, Decl(index.ts, 10, 66))
>Options : Symbol(Options, Decl(index.ts, 2, 1))
>State : Symbol(State, Decl(index.ts, 10, 21))
>Actions : Symbol(Actions, Decl(index.ts, 10, 27))

app({
>app : Symbol(app, Decl(index.ts, 8, 1))

    state: 100,
>state : Symbol(state, Decl(index.ts, 12, 5))

    actions: {
>actions : Symbol(actions, Decl(index.ts, 13, 15))

        foo: s => s // Should be typed number => number
>foo : Symbol(foo, Decl(index.ts, 14, 14))
>s : Symbol(s, Decl(index.ts, 15, 12))
>s : Symbol(s, Decl(index.ts, 15, 12))

    },
    view: (s, a) => undefined as any,
>view : Symbol(view, Decl(index.ts, 16, 6))
>s : Symbol(s, Decl(index.ts, 17, 11))
>a : Symbol(a, Decl(index.ts, 17, 13))
>undefined : Symbol(undefined)

});


interface Bar {
>Bar : Symbol(Bar, Decl(index.ts, 18, 3))

    bar: (a: number) => void;
>bar : Symbol(Bar.bar, Decl(index.ts, 21, 15))
>a : Symbol(a, Decl(index.ts, 22, 10))
}

declare function foo<T extends Bar>(x: string | T): T;
>foo : Symbol(foo, Decl(index.ts, 23, 1))
>T : Symbol(T, Decl(index.ts, 25, 21))
>Bar : Symbol(Bar, Decl(index.ts, 18, 3))
>x : Symbol(x, Decl(index.ts, 25, 36))
>T : Symbol(T, Decl(index.ts, 25, 21))
>T : Symbol(T, Decl(index.ts, 25, 21))

const y = foo({
>y : Symbol(y, Decl(index.ts, 27, 5))
>foo : Symbol(foo, Decl(index.ts, 23, 1))

    bar(x) { // Should be typed number => void
>bar : Symbol(bar, Decl(index.ts, 27, 15))
>x : Symbol(x, Decl(index.ts, 28, 8))
    }
});

interface Options2<State, Actions> {
>Options2 : Symbol(Options2, Decl(index.ts, 30, 3))
>State : Symbol(State, Decl(index.ts, 32, 19))
>Actions : Symbol(Actions, Decl(index.ts, 32, 25))

    state?: State;
>state : Symbol(Options2.state, Decl(index.ts, 32, 36))
>State : Symbol(State, Decl(index.ts, 32, 19))

    view?: (state: State, actions: Actions) => any;
>view : Symbol(Options2.view, Decl(index.ts, 33, 18))
>state : Symbol(state, Decl(index.ts, 34, 12))
>State : Symbol(State, Decl(index.ts, 32, 19))
>actions : Symbol(actions, Decl(index.ts, 34, 25))
>Actions : Symbol(Actions, Decl(index.ts, 32, 25))

    actions?: Actions;
>actions : Symbol(Options2.actions, Decl(index.ts, 34, 51))
>Actions : Symbol(Actions, Decl(index.ts, 32, 25))
}

declare function app2<State, Actions extends ActionsObject<State>>(obj: Options2<State, Actions>): void;
>app2 : Symbol(app2, Decl(index.ts, 36, 1))
>State : Symbol(State, Decl(index.ts, 38, 22))
>Actions : Symbol(Actions, Decl(index.ts, 38, 28))
>ActionsObject : Symbol(ActionsObject, Decl(index.ts, 0, 0))
>State : Symbol(State, Decl(index.ts, 38, 22))
>obj : Symbol(obj, Decl(index.ts, 38, 67))
>Options2 : Symbol(Options2, Decl(index.ts, 30, 3))
>State : Symbol(State, Decl(index.ts, 38, 22))
>Actions : Symbol(Actions, Decl(index.ts, 38, 28))

app2({
>app2 : Symbol(app2, Decl(index.ts, 36, 1))

    state: 100,
>state : Symbol(state, Decl(index.ts, 40, 6))

    actions: {
>actions : Symbol(actions, Decl(index.ts, 41, 15))

        foo: s => s // Should be typed number => number
>foo : Symbol(foo, Decl(index.ts, 42, 14))
>s : Symbol(s, Decl(index.ts, 43, 12))
>s : Symbol(s, Decl(index.ts, 43, 12))

    },
    view: (s, a) => undefined as any,
>view : Symbol(view, Decl(index.ts, 44, 6))
>s : Symbol(s, Decl(index.ts, 45, 11))
>a : Symbol(a, Decl(index.ts, 45, 13))
>undefined : Symbol(undefined)

});

