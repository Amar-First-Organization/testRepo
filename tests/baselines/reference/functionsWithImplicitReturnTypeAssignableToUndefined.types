=== tests/cases/compiler/functionsWithImplicitReturnTypeAssignableToUndefined.ts ===
function f1(): {} {
>f1 : () => {}

    if (Math.random() < 0.5) return {};
>Math.random() < 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>{} : {}

    // Implicit return, but undefined is assignable to object.
}

function f2(): Record<string, any> {
>f2 : () => Record<string, any>

    if (Math.random() < 0.5) return { "foo": true };
>Math.random() < 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>{ "foo": true } : { foo: boolean; }
>"foo" : boolean
>true : true

    // Implicit return, but undefined is assignable to records (which are just fancy objects).
}

function f3(): null {
>f3 : () => null

    if (Math.random() < 0.5) return null;
>Math.random() < 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

    // Implicit return, but undefined is assignable to null.
}

function f4(): string | null {
>f4 : () => string | null

    if (Math.random() < 0.5) return "string";
>Math.random() < 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5
>"string" : "string"

    // Implicit return, but undefined is assignable to null.
}

