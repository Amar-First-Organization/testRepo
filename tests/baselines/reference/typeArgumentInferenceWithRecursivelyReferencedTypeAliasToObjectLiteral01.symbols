=== tests/cases/compiler/typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts ===
type TreeNode = {
>TreeNode : Symbol(TreeNode, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 0, 0))

    name: string;
>name : Symbol(name, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 0, 17))

    parent: TreeNode;
>parent : Symbol(parent, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 1, 17))
>TreeNode : Symbol(TreeNode, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 0, 0))
}

var nodes: TreeNode[];
>nodes : Symbol(nodes, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 5, 3))
>TreeNode : Symbol(TreeNode, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 0, 0))

nodes.map(n => n.name);
>nodes.map : Symbol(Array.map, Decl(lib.d.ts, 1115, 92))
>nodes : Symbol(nodes, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 5, 3))
>map : Symbol(Array.map, Decl(lib.d.ts, 1115, 92))
>n : Symbol(n, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 6, 10))
>n.name : Symbol(name, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 0, 17))
>n : Symbol(n, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 6, 10))
>name : Symbol(name, Decl(typeArgumentInferenceWithRecursivelyReferencedTypeAliasToObjectLiteral01.ts, 0, 17))

