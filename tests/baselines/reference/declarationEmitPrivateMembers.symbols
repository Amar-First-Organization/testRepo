=== tests/cases/compiler/declarationEmitPrivateMembers.ts ===

class A {
>A : Symbol(A, Decl(declarationEmitPrivateMembers.ts, 0, 0))

    // private fields
    private field1: number;
>field1 : Symbol(A.field1, Decl(declarationEmitPrivateMembers.ts, 1, 9))

    private static field1: number;
>field1 : Symbol(A.field1, Decl(declarationEmitPrivateMembers.ts, 3, 27))

    private readonly field2: number;
>field2 : Symbol(A.field2, Decl(declarationEmitPrivateMembers.ts, 4, 34))

    private static readonly field2: number;
>field2 : Symbol(A.field2, Decl(declarationEmitPrivateMembers.ts, 5, 36))

    // private properties
    private get prop1(): string { return "string"; }
>prop1 : Symbol(A.prop1, Decl(declarationEmitPrivateMembers.ts, 6, 43), Decl(declarationEmitPrivateMembers.ts, 8, 52))

    private set prop1(v: string) { }
>prop1 : Symbol(A.prop1, Decl(declarationEmitPrivateMembers.ts, 6, 43), Decl(declarationEmitPrivateMembers.ts, 8, 52))
>v : Symbol(v, Decl(declarationEmitPrivateMembers.ts, 9, 22))

    private get prop2(): string { return "string"; }
>prop2 : Symbol(A.prop2, Decl(declarationEmitPrivateMembers.ts, 9, 36))

    private set prop3(v: string) { }
>prop3 : Symbol(A.prop3, Decl(declarationEmitPrivateMembers.ts, 10, 52))
>v : Symbol(v, Decl(declarationEmitPrivateMembers.ts, 11, 22))

    private static get prop1(): string { return "string"; }
>prop1 : Symbol(A.prop1, Decl(declarationEmitPrivateMembers.ts, 11, 36), Decl(declarationEmitPrivateMembers.ts, 12, 59))

    private static set prop1(v: string) { }
>prop1 : Symbol(A.prop1, Decl(declarationEmitPrivateMembers.ts, 11, 36), Decl(declarationEmitPrivateMembers.ts, 12, 59))
>v : Symbol(v, Decl(declarationEmitPrivateMembers.ts, 13, 29))

    private static get prop2(): string { return "string"; }
>prop2 : Symbol(A.prop2, Decl(declarationEmitPrivateMembers.ts, 13, 43))

    private static set prop3(v: string) { }
>prop3 : Symbol(A.prop3, Decl(declarationEmitPrivateMembers.ts, 14, 59))
>v : Symbol(v, Decl(declarationEmitPrivateMembers.ts, 15, 29))

    // private methods
    private method1(a: number): string { return "string"; }
>method1 : Symbol(A.method1, Decl(declarationEmitPrivateMembers.ts, 15, 43))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 17, 20))

    private static method1(a: number): string { return "string"; }
>method1 : Symbol(A.method1, Decl(declarationEmitPrivateMembers.ts, 17, 59))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 18, 27))

    // private methods with overloads
    private method2(a: string): void;
>method2 : Symbol(A.method2, Decl(declarationEmitPrivateMembers.ts, 18, 66), Decl(declarationEmitPrivateMembers.ts, 20, 37), Decl(declarationEmitPrivateMembers.ts, 21, 37))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 20, 20))

    private method2(a: number): void;
>method2 : Symbol(A.method2, Decl(declarationEmitPrivateMembers.ts, 18, 66), Decl(declarationEmitPrivateMembers.ts, 20, 37), Decl(declarationEmitPrivateMembers.ts, 21, 37))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 21, 20))

    private method2(a: string | number): void { }
>method2 : Symbol(A.method2, Decl(declarationEmitPrivateMembers.ts, 18, 66), Decl(declarationEmitPrivateMembers.ts, 20, 37), Decl(declarationEmitPrivateMembers.ts, 21, 37))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 22, 20))

    private static method2(a: string): void;
>method2 : Symbol(A.method2, Decl(declarationEmitPrivateMembers.ts, 22, 49), Decl(declarationEmitPrivateMembers.ts, 23, 44), Decl(declarationEmitPrivateMembers.ts, 24, 44))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 23, 27))

    private static method2(a: number): void;
>method2 : Symbol(A.method2, Decl(declarationEmitPrivateMembers.ts, 22, 49), Decl(declarationEmitPrivateMembers.ts, 23, 44), Decl(declarationEmitPrivateMembers.ts, 24, 44))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 24, 27))

    private static method2(a: string | number): void { }
>method2 : Symbol(A.method2, Decl(declarationEmitPrivateMembers.ts, 22, 49), Decl(declarationEmitPrivateMembers.ts, 23, 44), Decl(declarationEmitPrivateMembers.ts, 24, 44))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 25, 27))

    // private methods as fields
    private method3: (a: number) => string;
>method3 : Symbol(A.method3, Decl(declarationEmitPrivateMembers.ts, 25, 56))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 27, 22))

    private static method3: (a: number) => string;
>method3 : Symbol(A.method3, Decl(declarationEmitPrivateMembers.ts, 27, 43))
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 28, 29))

    // private constructors with overloads
    private constructor(a: number);
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 30, 24))

    private constructor(a: string);
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 31, 24))

    private constructor(a: number | string) { }
>a : Symbol(a, Decl(declarationEmitPrivateMembers.ts, 32, 24))
}
