=== tests/cases/conformance/classes/constructorDeclarations/quotedConstructors.ts ===
class C {
>C : C

    "constructor"() {
>"constructor" : error

        console.log(this);
>console.log(this) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>this : this
    }
}

class D {
>D : D

    'constructor'() {
>'constructor' : error

        console.log(this);
>console.log(this) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>this : this
    }
}

class E {
>E : E

    ['constructor']() {
>['constructor'] : () => void
>'constructor' : "constructor"

        console.log(this);
>console.log(this) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>this : this
    }
}

new class {
>new class {    "constructor"() {        console.log(this);    }} : (Anonymous class)
>class {    "constructor"() {        console.log(this);    }} : typeof (Anonymous class)

    "constructor"() {
>"constructor" : error

        console.log(this);
>console.log(this) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>this : this
    }
};

var o = { "constructor"() {} };
>o : { "constructor"(): void; }
>{ "constructor"() {} } : { "constructor"(): void; }
>"constructor" : () => void

