=== tests/cases/compiler/genericMemberFunction.ts ===
export class BuildError<A, B, C>{
>BuildError : BuildError<A, B, C>

  public parent<A, B extends A, C>(): FileWithErrors<A, B, C> {
>parent : <A, B extends A, C>() => FileWithErrors<A, B, C>

    return undefined;
>undefined : undefined
  }
}
export class FileWithErrors<A, B, C>{
>FileWithErrors : FileWithErrors<A, B, C>

  public errors<A, B extends A, C>(): BuildError<A, B, C>[] {
>errors : <A, B extends A, C>() => BuildError<A, B, C>[]

    return undefined;
>undefined : undefined
  }
  public parent<A, B extends A, C>(): BuildResult<A, B, C> {
>parent : <A, B extends A, C>() => BuildResult<A, B, C>

    return undefined;
>undefined : undefined
  }
}
export class BuildResult<A, B, C>{
>BuildResult : BuildResult<A, B, C>

  public merge<A, B extends A, C>(other: BuildResult<A, B, C>): void {
>merge : <A, B extends A, C>(other: BuildResult<A, B, C>) => void
>other : BuildResult<A, B, C>

    a.b.c.d.e.f.g = 0;
>a.b.c.d.e.f.g = 0 : 0
>a.b.c.d.e.f.g : any (error)
>a.b.c.d.e.f : any (error)
>a.b.c.d.e : any (error)
>a.b.c.d : any (error)
>a.b.c : any (error)
>a.b : any (error)
>a : any (error)
>b : any (error)
>c : any (error)
>d : any (error)
>e : any (error)
>f : any (error)
>g : any (error)
>0 : 0

    removedFiles.forEach(<A, B extends A, C>(each: FileWithErrors<A, B, C>) => {
>removedFiles.forEach(<A, B extends A, C>(each: FileWithErrors<A, B, C>) => {      this.removeFile(each);    }) : any (error)
>removedFiles.forEach : any (error)
>removedFiles : any (error)
>forEach : any (error)
><A, B extends A, C>(each: FileWithErrors<A, B, C>) => {      this.removeFile(each);    } : <A, B extends A, C>(each: FileWithErrors<A, B, C>) => void
>each : FileWithErrors<A, B, C>

      this.removeFile(each);
>this.removeFile(each) : any (error)
>this.removeFile : any (error)
>this : this
>removeFile : any (error)
>each : FileWithErrors<A, B, C>

    });
  }
}

