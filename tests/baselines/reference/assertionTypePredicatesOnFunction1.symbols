//// [tests/cases/conformance/controlFlow/assertionTypePredicatesOnFunction1.ts] ////

=== assertionTypePredicatesOnFunction1.ts ===
// https://github.com/microsoft/TypeScript/issues/41232

interface LabelledFunction {
>LabelledFunction : Symbol(LabelledFunction, Decl(assertionTypePredicatesOnFunction1.ts, 0, 0))

  label: string;
>label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))
}

declare function assignLabel<T extends (...args: never) => unknown>(
>assignLabel : Symbol(assignLabel, Decl(assertionTypePredicatesOnFunction1.ts, 4, 1))
>T : Symbol(T, Decl(assertionTypePredicatesOnFunction1.ts, 6, 29))
>args : Symbol(args, Decl(assertionTypePredicatesOnFunction1.ts, 6, 40))

  fn: T,
>fn : Symbol(fn, Decl(assertionTypePredicatesOnFunction1.ts, 6, 68))
>T : Symbol(T, Decl(assertionTypePredicatesOnFunction1.ts, 6, 29))

  label: string,
>label : Symbol(label, Decl(assertionTypePredicatesOnFunction1.ts, 7, 8))

): asserts fn is T & LabelledFunction;
>fn : Symbol(fn, Decl(assertionTypePredicatesOnFunction1.ts, 6, 68))
>T : Symbol(T, Decl(assertionTypePredicatesOnFunction1.ts, 6, 29))
>LabelledFunction : Symbol(LabelledFunction, Decl(assertionTypePredicatesOnFunction1.ts, 0, 0))

function a() {}
>a : Symbol(a, Decl(assertionTypePredicatesOnFunction1.ts, 9, 38))

assignLabel(a, "a");
>assignLabel : Symbol(assignLabel, Decl(assertionTypePredicatesOnFunction1.ts, 4, 1))
>a : Symbol(a, Decl(assertionTypePredicatesOnFunction1.ts, 9, 38))

a.label;
>a.label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))
>a : Symbol(a, Decl(assertionTypePredicatesOnFunction1.ts, 9, 38))
>label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))

const b = function () {};
>b : Symbol(b, Decl(assertionTypePredicatesOnFunction1.ts, 15, 5))

assignLabel(b, "b");
>assignLabel : Symbol(assignLabel, Decl(assertionTypePredicatesOnFunction1.ts, 4, 1))
>b : Symbol(b, Decl(assertionTypePredicatesOnFunction1.ts, 15, 5))

b.label;
>b.label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))
>b : Symbol(b, Decl(assertionTypePredicatesOnFunction1.ts, 15, 5))
>label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))

const c = () => {};
>c : Symbol(c, Decl(assertionTypePredicatesOnFunction1.ts, 19, 5))

assignLabel(c, "c");
>assignLabel : Symbol(assignLabel, Decl(assertionTypePredicatesOnFunction1.ts, 4, 1))
>c : Symbol(c, Decl(assertionTypePredicatesOnFunction1.ts, 19, 5))

c.label;
>c.label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))
>c : Symbol(c, Decl(assertionTypePredicatesOnFunction1.ts, 19, 5))
>label : Symbol(LabelledFunction.label, Decl(assertionTypePredicatesOnFunction1.ts, 2, 28))

