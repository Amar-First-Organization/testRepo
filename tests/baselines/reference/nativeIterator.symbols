//// [tests/cases/compiler/nativeIterator.ts] ////

=== nativeIterator.ts ===
const iterator = Iterator.from([0, 1, 2]);
>iterator : Symbol(iterator, Decl(nativeIterator.ts, 0, 5))
>Iterator.from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))

const mapped = iterator.map(String);
>mapped : Symbol(mapped, Decl(nativeIterator.ts, 2, 5))
>iterator.map : Symbol(NativeIterator.map, Decl(lib.esnext.iterator.d.ts, --, --))
>iterator : Symbol(iterator, Decl(nativeIterator.ts, 0, 5))
>map : Symbol(NativeIterator.map, Decl(lib.esnext.iterator.d.ts, --, --))
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --) ... and 6 more)

const filtered = iterator.filter(x => x > 0);
>filtered : Symbol(filtered, Decl(nativeIterator.ts, 4, 5))
>iterator.filter : Symbol(NativeIterator.filter, Decl(lib.esnext.iterator.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>iterator : Symbol(iterator, Decl(nativeIterator.ts, 0, 5))
>filter : Symbol(NativeIterator.filter, Decl(lib.esnext.iterator.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>x : Symbol(x, Decl(nativeIterator.ts, 4, 33))
>x : Symbol(x, Decl(nativeIterator.ts, 4, 33))

function isZero(x: number): x is 0 {
>isZero : Symbol(isZero, Decl(nativeIterator.ts, 4, 45))
>x : Symbol(x, Decl(nativeIterator.ts, 6, 16))
>x : Symbol(x, Decl(nativeIterator.ts, 6, 16))

  return x === 0;
>x : Symbol(x, Decl(nativeIterator.ts, 6, 16))
}
const zero = iterator.filter(isZero);
>zero : Symbol(zero, Decl(nativeIterator.ts, 9, 5))
>iterator.filter : Symbol(NativeIterator.filter, Decl(lib.esnext.iterator.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>iterator : Symbol(iterator, Decl(nativeIterator.ts, 0, 5))
>filter : Symbol(NativeIterator.filter, Decl(lib.esnext.iterator.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>isZero : Symbol(isZero, Decl(nativeIterator.ts, 4, 45))

const iteratorFromBare = Iterator.from({
>iteratorFromBare : Symbol(iteratorFromBare, Decl(nativeIterator.ts, 11, 5))
>Iterator.from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))

  next() {
>next : Symbol(next, Decl(nativeIterator.ts, 11, 40))

    return {
      done: Math.random() < .5,
>done : Symbol(done, Decl(nativeIterator.ts, 13, 12))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

      value: "a string",
>value : Symbol(value, Decl(nativeIterator.ts, 14, 31))

    };
  },
});


function* gen() {
>gen : Symbol(gen, Decl(nativeIterator.ts, 18, 3))

  yield 0;
}

const mappedGen = gen().map(x => x === 0 ? "zero" : "other");
>mappedGen : Symbol(mappedGen, Decl(nativeIterator.ts, 25, 5))
>gen().map : Symbol(NativeIterator.map, Decl(lib.esnext.iterator.d.ts, --, --))
>gen : Symbol(gen, Decl(nativeIterator.ts, 18, 3))
>map : Symbol(NativeIterator.map, Decl(lib.esnext.iterator.d.ts, --, --))
>x : Symbol(x, Decl(nativeIterator.ts, 25, 28))
>x : Symbol(x, Decl(nativeIterator.ts, 25, 28))

const mappedValues = [0, 1, 2].values().map(x => x === 0 ? "zero" : "other");
>mappedValues : Symbol(mappedValues, Decl(nativeIterator.ts, 27, 5))
>[0, 1, 2].values().map : Symbol(NativeIterator.map, Decl(lib.esnext.iterator.d.ts, --, --))
>[0, 1, 2].values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>map : Symbol(NativeIterator.map, Decl(lib.esnext.iterator.d.ts, --, --))
>x : Symbol(x, Decl(nativeIterator.ts, 27, 44))
>x : Symbol(x, Decl(nativeIterator.ts, 27, 44))

