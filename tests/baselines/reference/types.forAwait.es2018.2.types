//// [tests/cases/conformance/types/forAwait/types.forAwait.es2018.2.ts] ////

=== types.forAwait.es2018.2.ts ===
declare const asyncIterable: AsyncIterable<number>;
>asyncIterable : AsyncIterable<number, void, undefined>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const iterable: Iterable<number>;
>iterable : Iterable<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

async function f() {
>f : () => Promise<void>
>  : ^^^^^^^^^^^^^^^^^^^

    let y: number;
>y : number
>  : ^^^^^^

    let z: string;
>z : string
>  : ^^^^^^

    for await (const x of {}) {
>x : any
>  : ^^^
>{} : {}
>   : ^^
    }
    for await (y of {}) {
>y : number
>  : ^^^^^^
>{} : {}
>   : ^^
    }
    for await (z of asyncIterable) {
>z : string
>  : ^^^^^^
>asyncIterable : AsyncIterable<number, void, undefined>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    for await (z of iterable) {
>z : string
>  : ^^^^^^
>iterable : Iterable<number, void, undefined>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    for (const x of asyncIterable) {
>x : any
>  : ^^^
>asyncIterable : AsyncIterable<number, void, undefined>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    for (y of asyncIterable) {
>y : number
>  : ^^^^^^
>asyncIterable : AsyncIterable<number, void, undefined>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
}

