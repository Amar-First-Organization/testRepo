//// [tests/cases/conformance/controlFlow/exhaustiveSwitchStatements1.ts] ////

//// [exhaustiveSwitchStatements1.ts]
function f1(x: 1 | 2): string {
    if (!!true) {
        switch (x) {
            case 1: return 'a';
            case 2: return 'b';
        }
        x;  // Unreachable
    }
    else {
        throw 0;
    }
}

function f2(x: 1 | 2): void {
    let z: number;
    switch (x) {
        case 1: z = 10; break;
        case 2: z = 20; break;
    }
    z;  // Definitely assigned
}

function f3(x: 1 | 2): 10 | 20 {
    switch (x) {
        case 1: return 10;
        case 2: return 20;
        // Default considered reachable to allow defensive coding
        default: throw new Error("Bad input");
    }
}

// Repro from #11572

enum E { A, B }

function f(e: E): number {
    switch (e) {
        case E.A: return 0
        case E.B: return 1
    }
}

function g(e: E): number {
    if (!true)
        return -1
    else
        switch (e) {
            case E.A: return 0
            case E.B: return 1
        }
}

// Repro from #12668

interface Square { kind: "square"; size: number; }

interface Rectangle { kind: "rectangle"; width: number; height: number; }

interface Circle { kind: "circle"; radius: number; }

interface Triangle { kind: "triangle"; side: number; }

type Shape = Square | Rectangle | Circle | Triangle;

function area(s: Shape): number {
    let area;
    switch (s.kind) {
        case "square": area = s.size * s.size; break;
        case "rectangle": area = s.width * s.height; break;
        case "circle": area = Math.PI * s.radius * s.radius; break;
        case "triangle": area = Math.sqrt(3) / 4 * s.side * s.side; break;
    }
    return area;
}

function areaWrapped(s: Shape): number {
    let area;
    area = (() => {
        switch (s.kind) {
            case "square": return s.size * s.size;
            case "rectangle": return s.width * s.height;
            case "circle": return Math.PI * s.radius * s.radius;
            case "triangle": return Math.sqrt(3) / 4 * s.side * s.side;
        }
    })();
    return area;
}

// Repro from #13241

enum MyEnum {
	A,
	B
}

function thisGivesError(e: MyEnum): string {
	let s: string;
	switch (e) {
		case MyEnum.A: s = "it was A"; break;
		case MyEnum.B: s = "it was B"; break;
	}
	return s;
}

function good1(e: MyEnum): string {
	let s: string;
	switch (e) {
		case MyEnum.A: s = "it was A"; break;
		case MyEnum.B: s = "it was B"; break;
		default: s = "it was something else"; break;
	}
	return s;
}

function good2(e: MyEnum): string {
	switch (e) {
		case MyEnum.A: return "it was A";
		case MyEnum.B: return "it was B";
	}
}

// Repro from #18362

enum Level {
  One,
  Two,
}

const doSomethingWithLevel = (level: Level): Level => {
  let next: Level;
  switch (level) {
    case Level.One:
      next = Level.Two;
      break;
    case Level.Two:
      next = Level.One;
      break;
  }
  return next;
};

// Repro from #20409

interface Square2 {
    kind: "square";
    size: number;
}

interface Circle2 {
    kind: "circle";
    radius: number;
}

type Shape2 = Square2 | Circle2;

function withDefault(s1: Shape2, s2: Shape2): string {
    switch (s1.kind) {
        case "square":
            return "1";
        case "circle":
            switch (s2.kind) {
                case "square":
                    return "2";
                case "circle":
                    return "3";
                default:
                    return "never";
            }
    }
}

function withoutDefault(s1: Shape2, s2: Shape2): string {
    switch (s1.kind) {
        case "square":
            return "1";
        case "circle":
            switch (s2.kind) {
                case "square":
                    return "2";
                case "circle":
                    return "3";
            }
    }
}

// Repro from #20823

function test4(value: 1 | 2): string {
    let x: string;
    switch (value) {
        case 1: x = "one"; break;
        case 2: x = "two"; break;
    }
    return x;
}

// Repro from #34661

enum Animal { DOG, CAT }

declare const zoo: { animal: Animal } | undefined;

function expression(): Animal {
    switch (zoo?.animal ?? Animal.DOG) {
        case Animal.DOG: return Animal.DOG
        case Animal.CAT: return Animal.CAT
    }
}

// Repro from #34840

function foo(): void {
    const foo: number | undefined = 0;
    while (true) {
        const stats = foo;
        switch (stats) {
            case 1: break;
            case 2: break;
        }
    }
}

// Repro from #35070

type O = {
    a: number,
    b: number
};
type K = keyof O | 'c';
function ff(o: O, k: K): number {
    switch(k) {
        case 'c':
            k = 'a';
    }
    k === 'c';  // Error
    return o[k];
}

// Repro from #35431
type A = { kind: "abc" } | { kind: "def" };

function f35431(a: A): void {
  switch (a.kind) {
    case "abc":
    case "def": return;
    default:
      a!.kind; // Error expected
  }
}

/// [Declarations] ////



//// [exhaustiveSwitchStatements1.d.ts]
declare function f1(x: 1 | 2): string;
declare function f2(x: 1 | 2): void;
declare function f3(x: 1 | 2): 10 | 20;
declare enum E {
    A = 0,
    B = 1
}
declare function f(e: E): number;
declare function g(e: E): number;
interface Square {
    kind: "square";
    size: number;
}
interface Rectangle {
    kind: "rectangle";
    width: number;
    height: number;
}
interface Circle {
    kind: "circle";
    radius: number;
}
interface Triangle {
    kind: "triangle";
    side: number;
}
type Shape = Square | Rectangle | Circle | Triangle;
declare function area(s: Shape): number;
declare function areaWrapped(s: Shape): number;
declare enum MyEnum {
    A = 0,
    B = 1
}
declare function thisGivesError(e: MyEnum): string;
declare function good1(e: MyEnum): string;
declare function good2(e: MyEnum): string;
declare enum Level {
    One = 0,
    Two = 1
}
declare const doSomethingWithLevel: (level: Level) => Level;
interface Square2 {
    kind: "square";
    size: number;
}
interface Circle2 {
    kind: "circle";
    radius: number;
}
type Shape2 = Square2 | Circle2;
declare function withDefault(s1: Shape2, s2: Shape2): string;
declare function withoutDefault(s1: Shape2, s2: Shape2): string;
declare function test4(value: 1 | 2): string;
declare enum Animal {
    DOG = 0,
    CAT = 1
}
declare const zoo: {
    animal: Animal;
} | undefined;
declare function expression(): Animal;
declare function foo(): void;
type O = {
    a: number;
    b: number;
};
type K = keyof O | 'c';
declare function ff(o: O, k: K): number;
type A = {
    kind: "abc";
} | {
    kind: "def";
};
declare function f35431(a: A): void;
//# sourceMappingURL=exhaustiveSwitchStatements1.d.ts.map

/// [Declarations Maps] ////


//// [exhaustiveSwitchStatements1.d.ts.map]
{"version":3,"file":"exhaustiveSwitchStatements1.d.ts","sourceRoot":"","sources":["exhaustiveSwitchStatements1.ts"],"names":[],"mappings":"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"}

//// https://sokra.github.io/source-map-visualization#base64,ZGVjbGFyZSBmdW5jdGlvbiBmMSh4OiAxIHwgMik6IHN0cmluZzsNCmRlY2xhcmUgZnVuY3Rpb24gZjIoeDogMSB8IDIpOiB2b2lkOw0KZGVjbGFyZSBmdW5jdGlvbiBmMyh4OiAxIHwgMik6IDEwIHwgMjA7DQpkZWNsYXJlIGVudW0gRSB7DQogICAgQSA9IDAsDQogICAgQiA9IDENCn0NCmRlY2xhcmUgZnVuY3Rpb24gZihlOiBFKTogbnVtYmVyOw0KZGVjbGFyZSBmdW5jdGlvbiBnKGU6IEUpOiBudW1iZXI7DQppbnRlcmZhY2UgU3F1YXJlIHsNCiAgICBraW5kOiAic3F1YXJlIjsNCiAgICBzaXplOiBudW1iZXI7DQp9DQppbnRlcmZhY2UgUmVjdGFuZ2xlIHsNCiAgICBraW5kOiAicmVjdGFuZ2xlIjsNCiAgICB3aWR0aDogbnVtYmVyOw0KICAgIGhlaWdodDogbnVtYmVyOw0KfQ0KaW50ZXJmYWNlIENpcmNsZSB7DQogICAga2luZDogImNpcmNsZSI7DQogICAgcmFkaXVzOiBudW1iZXI7DQp9DQppbnRlcmZhY2UgVHJpYW5nbGUgew0KICAgIGtpbmQ6ICJ0cmlhbmdsZSI7DQogICAgc2lkZTogbnVtYmVyOw0KfQ0KdHlwZSBTaGFwZSA9IFNxdWFyZSB8IFJlY3RhbmdsZSB8IENpcmNsZSB8IFRyaWFuZ2xlOw0KZGVjbGFyZSBmdW5jdGlvbiBhcmVhKHM6IFNoYXBlKTogbnVtYmVyOw0KZGVjbGFyZSBmdW5jdGlvbiBhcmVhV3JhcHBlZChzOiBTaGFwZSk6IG51bWJlcjsNCmRlY2xhcmUgZW51bSBNeUVudW0gew0KICAgIEEgPSAwLA0KICAgIEIgPSAxDQp9DQpkZWNsYXJlIGZ1bmN0aW9uIHRoaXNHaXZlc0Vycm9yKGU6IE15RW51bSk6IHN0cmluZzsNCmRlY2xhcmUgZnVuY3Rpb24gZ29vZDEoZTogTXlFbnVtKTogc3RyaW5nOw0KZGVjbGFyZSBmdW5jdGlvbiBnb29kMihlOiBNeUVudW0pOiBzdHJpbmc7DQpkZWNsYXJlIGVudW0gTGV2ZWwgew0KICAgIE9uZSA9IDAsDQogICAgVHdvID0gMQ0KfQ0KZGVjbGFyZSBjb25zdCBkb1NvbWV0aGluZ1dpdGhMZXZlbDogKGxldmVsOiBMZXZlbCkgPT4gTGV2ZWw7DQppbnRlcmZhY2UgU3F1YXJlMiB7DQogICAga2luZDogInNxdWFyZSI7DQogICAgc2l6ZTogbnVtYmVyOw0KfQ0KaW50ZXJmYWNlIENpcmNsZTIgew0KICAgIGtpbmQ6ICJjaXJjbGUiOw0KICAgIHJhZGl1czogbnVtYmVyOw0KfQ0KdHlwZSBTaGFwZTIgPSBTcXVhcmUyIHwgQ2lyY2xlMjsNCmRlY2xhcmUgZnVuY3Rpb24gd2l0aERlZmF1bHQoczE6IFNoYXBlMiwgczI6IFNoYXBlMik6IHN0cmluZzsNCmRlY2xhcmUgZnVuY3Rpb24gd2l0aG91dERlZmF1bHQoczE6IFNoYXBlMiwgczI6IFNoYXBlMik6IHN0cmluZzsNCmRlY2xhcmUgZnVuY3Rpb24gdGVzdDQodmFsdWU6IDEgfCAyKTogc3RyaW5nOw0KZGVjbGFyZSBlbnVtIEFuaW1hbCB7DQogICAgRE9HID0gMCwNCiAgICBDQVQgPSAxDQp9DQpkZWNsYXJlIGNvbnN0IHpvbzogew0KICAgIGFuaW1hbDogQW5pbWFsOw0KfSB8IHVuZGVmaW5lZDsNCmRlY2xhcmUgZnVuY3Rpb24gZXhwcmVzc2lvbigpOiBBbmltYWw7DQpkZWNsYXJlIGZ1bmN0aW9uIGZvbygpOiB2b2lkOw0KdHlwZSBPID0gew0KICAgIGE6IG51bWJlcjsNCiAgICBiOiBudW1iZXI7DQp9Ow0KdHlwZSBLID0ga2V5b2YgTyB8ICdjJzsNCmRlY2xhcmUgZnVuY3Rpb24gZmYobzogTywgazogSyk6IG51bWJlcjsNCnR5cGUgQSA9IHsNCiAgICBraW5kOiAiYWJjIjsNCn0gfCB7DQogICAga2luZDogImRlZiI7DQp9Ow0KZGVjbGFyZSBmdW5jdGlvbiBmMzU0MzEoYTogQSk6IHZvaWQ7DQovLyMgc291cmNlTWFwcGluZ1VSTD1leGhhdXN0aXZlU3dpdGNoU3RhdGVtZW50czEuZC50cy5tYXA=,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhoYXVzdGl2ZVN3aXRjaFN0YXRlbWVudHMxLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleGhhdXN0aXZlU3dpdGNoU3RhdGVtZW50czEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FXNUI7QUFFRCxpQkFBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQU8xQjtBQUVELGlCQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQU83QjtBQUlELGFBQUssQ0FBQztJQUFHLENBQUMsSUFBQTtJQUFFLENBQUMsSUFBQTtDQUFFO0FBRWYsaUJBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUt2QjtBQUVELGlCQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FRdkI7QUFJRCxVQUFVLE1BQU07SUFBRyxJQUFJLEVBQUUsUUFBUSxDQUFDO0lBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztDQUFFO0FBRWxELFVBQVUsU0FBUztJQUFHLElBQUksRUFBRSxXQUFXLENBQUM7SUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO0lBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztDQUFFO0FBRXpFLFVBQVUsTUFBTTtJQUFHLElBQUksRUFBRSxRQUFRLENBQUM7SUFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO0NBQUU7QUFFcEQsVUFBVSxRQUFRO0lBQUcsSUFBSSxFQUFFLFVBQVUsQ0FBQztJQUFDLElBQUksRUFBRSxNQUFNLENBQUM7Q0FBRTtBQUV0RCxLQUFLLEtBQUssR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUM7QUFFcEQsaUJBQVMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxDQVM5QjtBQUVELGlCQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLE1BQU0sQ0FXckM7QUFJRCxhQUFLLE1BQU07SUFDVixDQUFDLElBQUE7SUFDRCxDQUFDLElBQUE7Q0FDRDtBQUVELGlCQUFTLGNBQWMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLE1BQU0sQ0FPekM7QUFFRCxpQkFBUyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxNQUFNLENBUWhDO0FBRUQsaUJBQVMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsTUFBTSxDQUtoQztBQUlELGFBQUssS0FBSztJQUNSLEdBQUcsSUFBQTtJQUNILEdBQUcsSUFBQTtDQUNKO0FBRUQsUUFBQSxNQUFNLG9CQUFvQixHQUFJLEtBQUssRUFBRSxLQUFLLEtBQUcsS0FXNUMsQ0FBQztBQUlGLFVBQVUsT0FBTztJQUNiLElBQUksRUFBRSxRQUFRLENBQUM7SUFDZixJQUFJLEVBQUUsTUFBTSxDQUFDO0NBQ2hCO0FBRUQsVUFBVSxPQUFPO0lBQ2IsSUFBSSxFQUFFLFFBQVEsQ0FBQztJQUNmLE1BQU0sRUFBRSxNQUFNLENBQUM7Q0FDbEI7QUFFRCxLQUFLLE1BQU0sR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBRWhDLGlCQUFTLFdBQVcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsTUFBTSxDQWNuRDtBQUVELGlCQUFTLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsTUFBTSxDQVl0RDtBQUlELGlCQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBT25DO0FBSUQsYUFBSyxNQUFNO0lBQUcsR0FBRyxJQUFBO0lBQUUsR0FBRyxJQUFBO0NBQUU7QUFFeEIsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFO0lBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQTtDQUFFLEdBQUcsU0FBUyxDQUFDO0FBRWxELGlCQUFTLFVBQVUsSUFBSSxNQUFNLENBSzVCO0FBSUQsaUJBQVMsR0FBRyxJQUFJLElBQUksQ0FTbkI7QUFJRCxLQUFLLENBQUMsR0FBRztJQUNMLENBQUMsRUFBRSxNQUFNLENBQUM7SUFDVixDQUFDLEVBQUUsTUFBTSxDQUFBO0NBQ1osQ0FBQztBQUNGLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUN2QixpQkFBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FPOUI7QUFHRCxLQUFLLENBQUMsR0FBRztJQUFFLElBQUksRUFBRSxLQUFLLENBQUE7Q0FBRSxHQUFHO0lBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQTtDQUFFLENBQUM7QUFFM0MsaUJBQVMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQU8xQiJ9,ZnVuY3Rpb24gZjEoeDogMSB8IDIpOiBzdHJpbmcgewogICAgaWYgKCEhdHJ1ZSkgewogICAgICAgIHN3aXRjaCAoeCkgewogICAgICAgICAgICBjYXNlIDE6IHJldHVybiAnYSc7CiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuICdiJzsKICAgICAgICB9CiAgICAgICAgeDsgIC8vIFVucmVhY2hhYmxlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICB0aHJvdyAwOwogICAgfQp9CgpmdW5jdGlvbiBmMih4OiAxIHwgMik6IHZvaWQgewogICAgbGV0IHo6IG51bWJlcjsKICAgIHN3aXRjaCAoeCkgewogICAgICAgIGNhc2UgMTogeiA9IDEwOyBicmVhazsKICAgICAgICBjYXNlIDI6IHogPSAyMDsgYnJlYWs7CiAgICB9CiAgICB6OyAgLy8gRGVmaW5pdGVseSBhc3NpZ25lZAp9CgpmdW5jdGlvbiBmMyh4OiAxIHwgMik6IDEwIHwgMjAgewogICAgc3dpdGNoICh4KSB7CiAgICAgICAgY2FzZSAxOiByZXR1cm4gMTA7CiAgICAgICAgY2FzZSAyOiByZXR1cm4gMjA7CiAgICAgICAgLy8gRGVmYXVsdCBjb25zaWRlcmVkIHJlYWNoYWJsZSB0byBhbGxvdyBkZWZlbnNpdmUgY29kaW5nCiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCJCYWQgaW5wdXQiKTsKICAgIH0KfQoKLy8gUmVwcm8gZnJvbSAjMTE1NzIKCmVudW0gRSB7IEEsIEIgfQoKZnVuY3Rpb24gZihlOiBFKTogbnVtYmVyIHsKICAgIHN3aXRjaCAoZSkgewogICAgICAgIGNhc2UgRS5BOiByZXR1cm4gMAogICAgICAgIGNhc2UgRS5COiByZXR1cm4gMQogICAgfQp9CgpmdW5jdGlvbiBnKGU6IEUpOiBudW1iZXIgewogICAgaWYgKCF0cnVlKQogICAgICAgIHJldHVybiAtMQogICAgZWxzZQogICAgICAgIHN3aXRjaCAoZSkgewogICAgICAgICAgICBjYXNlIEUuQTogcmV0dXJuIDAKICAgICAgICAgICAgY2FzZSBFLkI6IHJldHVybiAxCiAgICAgICAgfQp9CgovLyBSZXBybyBmcm9tICMxMjY2OAoKaW50ZXJmYWNlIFNxdWFyZSB7IGtpbmQ6ICJzcXVhcmUiOyBzaXplOiBudW1iZXI7IH0KCmludGVyZmFjZSBSZWN0YW5nbGUgeyBraW5kOiAicmVjdGFuZ2xlIjsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXI7IH0KCmludGVyZmFjZSBDaXJjbGUgeyBraW5kOiAiY2lyY2xlIjsgcmFkaXVzOiBudW1iZXI7IH0KCmludGVyZmFjZSBUcmlhbmdsZSB7IGtpbmQ6ICJ0cmlhbmdsZSI7IHNpZGU6IG51bWJlcjsgfQoKdHlwZSBTaGFwZSA9IFNxdWFyZSB8IFJlY3RhbmdsZSB8IENpcmNsZSB8IFRyaWFuZ2xlOwoKZnVuY3Rpb24gYXJlYShzOiBTaGFwZSk6IG51bWJlciB7CiAgICBsZXQgYXJlYTsKICAgIHN3aXRjaCAocy5raW5kKSB7CiAgICAgICAgY2FzZSAic3F1YXJlIjogYXJlYSA9IHMuc2l6ZSAqIHMuc2l6ZTsgYnJlYWs7CiAgICAgICAgY2FzZSAicmVjdGFuZ2xlIjogYXJlYSA9IHMud2lkdGggKiBzLmhlaWdodDsgYnJlYWs7CiAgICAgICAgY2FzZSAiY2lyY2xlIjogYXJlYSA9IE1hdGguUEkgKiBzLnJhZGl1cyAqIHMucmFkaXVzOyBicmVhazsKICAgICAgICBjYXNlICJ0cmlhbmdsZSI6IGFyZWEgPSBNYXRoLnNxcnQoMykgLyA0ICogcy5zaWRlICogcy5zaWRlOyBicmVhazsKICAgIH0KICAgIHJldHVybiBhcmVhOwp9CgpmdW5jdGlvbiBhcmVhV3JhcHBlZChzOiBTaGFwZSk6IG51bWJlciB7CiAgICBsZXQgYXJlYTsKICAgIGFyZWEgPSAoKCkgPT4gewogICAgICAgIHN3aXRjaCAocy5raW5kKSB7CiAgICAgICAgICAgIGNhc2UgInNxdWFyZSI6IHJldHVybiBzLnNpemUgKiBzLnNpemU7CiAgICAgICAgICAgIGNhc2UgInJlY3RhbmdsZSI6IHJldHVybiBzLndpZHRoICogcy5oZWlnaHQ7CiAgICAgICAgICAgIGNhc2UgImNpcmNsZSI6IHJldHVybiBNYXRoLlBJICogcy5yYWRpdXMgKiBzLnJhZGl1czsKICAgICAgICAgICAgY2FzZSAidHJpYW5nbGUiOiByZXR1cm4gTWF0aC5zcXJ0KDMpIC8gNCAqIHMuc2lkZSAqIHMuc2lkZTsKICAgICAgICB9CiAgICB9KSgpOwogICAgcmV0dXJuIGFyZWE7Cn0KCi8vIFJlcHJvIGZyb20gIzEzMjQxCgplbnVtIE15RW51bSB7CglBLAoJQgp9CgpmdW5jdGlvbiB0aGlzR2l2ZXNFcnJvcihlOiBNeUVudW0pOiBzdHJpbmcgewoJbGV0IHM6IHN0cmluZzsKCXN3aXRjaCAoZSkgewoJCWNhc2UgTXlFbnVtLkE6IHMgPSAiaXQgd2FzIEEiOyBicmVhazsKCQljYXNlIE15RW51bS5COiBzID0gIml0IHdhcyBCIjsgYnJlYWs7Cgl9CglyZXR1cm4gczsKfQoKZnVuY3Rpb24gZ29vZDEoZTogTXlFbnVtKTogc3RyaW5nIHsKCWxldCBzOiBzdHJpbmc7Cglzd2l0Y2ggKGUpIHsKCQljYXNlIE15RW51bS5BOiBzID0gIml0IHdhcyBBIjsgYnJlYWs7CgkJY2FzZSBNeUVudW0uQjogcyA9ICJpdCB3YXMgQiI7IGJyZWFrOwoJCWRlZmF1bHQ6IHMgPSAiaXQgd2FzIHNvbWV0aGluZyBlbHNlIjsgYnJlYWs7Cgl9CglyZXR1cm4gczsKfQoKZnVuY3Rpb24gZ29vZDIoZTogTXlFbnVtKTogc3RyaW5nIHsKCXN3aXRjaCAoZSkgewoJCWNhc2UgTXlFbnVtLkE6IHJldHVybiAiaXQgd2FzIEEiOwoJCWNhc2UgTXlFbnVtLkI6IHJldHVybiAiaXQgd2FzIEIiOwoJfQp9CgovLyBSZXBybyBmcm9tICMxODM2MgoKZW51bSBMZXZlbCB7CiAgT25lLAogIFR3bywKfQoKY29uc3QgZG9Tb21ldGhpbmdXaXRoTGV2ZWwgPSAobGV2ZWw6IExldmVsKTogTGV2ZWwgPT4gewogIGxldCBuZXh0OiBMZXZlbDsKICBzd2l0Y2ggKGxldmVsKSB7CiAgICBjYXNlIExldmVsLk9uZToKICAgICAgbmV4dCA9IExldmVsLlR3bzsKICAgICAgYnJlYWs7CiAgICBjYXNlIExldmVsLlR3bzoKICAgICAgbmV4dCA9IExldmVsLk9uZTsKICAgICAgYnJlYWs7CiAgfQogIHJldHVybiBuZXh0Owp9OwoKLy8gUmVwcm8gZnJvbSAjMjA0MDkKCmludGVyZmFjZSBTcXVhcmUyIHsKICAgIGtpbmQ6ICJzcXVhcmUiOwogICAgc2l6ZTogbnVtYmVyOwp9CgppbnRlcmZhY2UgQ2lyY2xlMiB7CiAgICBraW5kOiAiY2lyY2xlIjsKICAgIHJhZGl1czogbnVtYmVyOwp9Cgp0eXBlIFNoYXBlMiA9IFNxdWFyZTIgfCBDaXJjbGUyOwoKZnVuY3Rpb24gd2l0aERlZmF1bHQoczE6IFNoYXBlMiwgczI6IFNoYXBlMik6IHN0cmluZyB7CiAgICBzd2l0Y2ggKHMxLmtpbmQpIHsKICAgICAgICBjYXNlICJzcXVhcmUiOgogICAgICAgICAgICByZXR1cm4gIjEiOwogICAgICAgIGNhc2UgImNpcmNsZSI6CiAgICAgICAgICAgIHN3aXRjaCAoczIua2luZCkgewogICAgICAgICAgICAgICAgY2FzZSAic3F1YXJlIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjIiOwogICAgICAgICAgICAgICAgY2FzZSAiY2lyY2xlIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjMiOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIm5ldmVyIjsKICAgICAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiB3aXRob3V0RGVmYXVsdChzMTogU2hhcGUyLCBzMjogU2hhcGUyKTogc3RyaW5nIHsKICAgIHN3aXRjaCAoczEua2luZCkgewogICAgICAgIGNhc2UgInNxdWFyZSI6CiAgICAgICAgICAgIHJldHVybiAiMSI7CiAgICAgICAgY2FzZSAiY2lyY2xlIjoKICAgICAgICAgICAgc3dpdGNoIChzMi5raW5kKSB7CiAgICAgICAgICAgICAgICBjYXNlICJzcXVhcmUiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAiMiI7CiAgICAgICAgICAgICAgICBjYXNlICJjaXJjbGUiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAiMyI7CiAgICAgICAgICAgIH0KICAgIH0KfQoKLy8gUmVwcm8gZnJvbSAjMjA4MjMKCmZ1bmN0aW9uIHRlc3Q0KHZhbHVlOiAxIHwgMik6IHN0cmluZyB7CiAgICBsZXQgeDogc3RyaW5nOwogICAgc3dpdGNoICh2YWx1ZSkgewogICAgICAgIGNhc2UgMTogeCA9ICJvbmUiOyBicmVhazsKICAgICAgICBjYXNlIDI6IHggPSAidHdvIjsgYnJlYWs7CiAgICB9CiAgICByZXR1cm4geDsKfQoKLy8gUmVwcm8gZnJvbSAjMzQ2NjEKCmVudW0gQW5pbWFsIHsgRE9HLCBDQVQgfQoKZGVjbGFyZSBjb25zdCB6b286IHsgYW5pbWFsOiBBbmltYWwgfSB8IHVuZGVmaW5lZDsKCmZ1bmN0aW9uIGV4cHJlc3Npb24oKTogQW5pbWFsIHsKICAgIHN3aXRjaCAoem9vPy5hbmltYWwgPz8gQW5pbWFsLkRPRykgewogICAgICAgIGNhc2UgQW5pbWFsLkRPRzogcmV0dXJuIEFuaW1hbC5ET0cKICAgICAgICBjYXNlIEFuaW1hbC5DQVQ6IHJldHVybiBBbmltYWwuQ0FUCiAgICB9Cn0KCi8vIFJlcHJvIGZyb20gIzM0ODQwCgpmdW5jdGlvbiBmb28oKTogdm9pZCB7CiAgICBjb25zdCBmb286IG51bWJlciB8IHVuZGVmaW5lZCA9IDA7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIGNvbnN0IHN0YXRzID0gZm9vOwogICAgICAgIHN3aXRjaCAoc3RhdHMpIHsKICAgICAgICAgICAgY2FzZSAxOiBicmVhazsKICAgICAgICAgICAgY2FzZSAyOiBicmVhazsKICAgICAgICB9CiAgICB9Cn0KCi8vIFJlcHJvIGZyb20gIzM1MDcwCgp0eXBlIE8gPSB7CiAgICBhOiBudW1iZXIsCiAgICBiOiBudW1iZXIKfTsKdHlwZSBLID0ga2V5b2YgTyB8ICdjJzsKZnVuY3Rpb24gZmYobzogTywgazogSyk6IG51bWJlciB7CiAgICBzd2l0Y2goaykgewogICAgICAgIGNhc2UgJ2MnOgogICAgICAgICAgICBrID0gJ2EnOwogICAgfQogICAgayA9PT0gJ2MnOyAgLy8gRXJyb3IKICAgIHJldHVybiBvW2tdOwp9CgovLyBSZXBybyBmcm9tICMzNTQzMQp0eXBlIEEgPSB7IGtpbmQ6ICJhYmMiIH0gfCB7IGtpbmQ6ICJkZWYiIH07CgpmdW5jdGlvbiBmMzU0MzEoYTogQSk6IHZvaWQgewogIHN3aXRjaCAoYS5raW5kKSB7CiAgICBjYXNlICJhYmMiOgogICAgY2FzZSAiZGVmIjogcmV0dXJuOwogICAgZGVmYXVsdDoKICAgICAgYSEua2luZDsgLy8gRXJyb3IgZXhwZWN0ZWQKICB9Cn0=

