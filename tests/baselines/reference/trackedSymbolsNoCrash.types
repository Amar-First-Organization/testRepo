//// [tests/cases/compiler/trackedSymbolsNoCrash.ts] ////

=== index.ts ===
import ts = require("typescript");
>ts : typeof ts

// TODO(jakebailey): this test should not depend on typescript itself
export const isNodeOfType =
>isNodeOfType : <NodeType extends ts.SyntaxKind>(nodeType: NodeType) => (node: ts.ForEachChildNodes | null | undefined) => node is Extract<ts.JSDoc, { kind: NodeType; }> | Extract<ts.JSDocCallbackTag, { kind: NodeType; }> | Extract<ts.JSDocEnumTag, { kind: NodeType; }> | Extract<ts.JSDocFunctionType, { kind: NodeType; }> | Extract<ts.JSDocSignature, { kind: NodeType; }> | Extract<ts.JSDocTypedefTag, { kind: NodeType; }> | Extract<ts.SourceFile, { kind: NodeType; }> | Extract<ts.ArrowFunction, { kind: NodeType; }> | Extract<ts.Block, { kind: NodeType; }> | Extract<ts.CallSignatureDeclaration, { kind: NodeType; }> | Extract<ts.CaseBlock, { kind: NodeType; }> | Extract<ts.CatchClause, { kind: NodeType; }> | Extract<ts.ClassStaticBlockDeclaration, { kind: NodeType; }> | Extract<ts.ConditionalTypeNode, { kind: NodeType; }> | Extract<ts.ConstructorDeclaration, { kind: NodeType; }> | Extract<ts.ConstructorTypeNode, { kind: NodeType; }> | Extract<ts.ConstructSignatureDeclaration, { kind: NodeType; }> | Extract<ts.ForStatement, { kind: NodeType; }> | Extract<ts.ForInStatement, { kind: NodeType; }> | Extract<ts.ForOfStatement, { kind: NodeType; }> | Extract<ts.FunctionDeclaration, { kind: NodeType; }> | Extract<ts.FunctionExpression, { kind: NodeType; }> | Extract<ts.FunctionTypeNode, { kind: NodeType; }> | Extract<ts.GetAccessorDeclaration, { kind: NodeType; }> | Extract<ts.IndexSignatureDeclaration, { kind: NodeType; }> | Extract<ts.MappedTypeNode, { kind: NodeType; }> | Extract<ts.MethodDeclaration, { kind: NodeType; }> | Extract<ts.MethodSignature, { kind: NodeType; }> | Extract<ts.ModuleDeclaration, { kind: NodeType; }> | Extract<ts.SetAccessorDeclaration, { kind: NodeType; }> | Extract<ts.TypeAliasDeclaration, { kind: NodeType; }> | Extract<ts.QualifiedName, { kind: NodeType; }> | Extract<ts.MetaProperty, { kind: NodeType; }> | Extract<ts.ElementAccessExpression, { kind: NodeType; }> | Extract<ts.PropertyAccessExpression, { kind: NodeType; }> | Extract<ts.BindingElement, { kind: NodeType; }> | Extract<ts.VariableStatement, { kind: NodeType; }> | Extract<ts.ExpressionStatement, { kind: NodeType; }> | Extract<ts.IfStatement, { kind: NodeType; }> | Extract<ts.DoStatement, { kind: NodeType; }> | Extract<ts.WhileStatement, { kind: NodeType; }> | Extract<ts.ContinueStatement, { kind: NodeType; }> | Extract<ts.BreakStatement, { kind: NodeType; }> | Extract<ts.ReturnStatement, { kind: NodeType; }> | Extract<ts.WithStatement, { kind: NodeType; }> | Extract<ts.SwitchStatement, { kind: NodeType; }> | Extract<ts.LabeledStatement, { kind: NodeType; }> | Extract<ts.ThrowStatement, { kind: NodeType; }> | Extract<ts.TryStatement, { kind: NodeType; }> | Extract<ts.ComputedPropertyName, { kind: NodeType; }> | Extract<ts.TypeParameterDeclaration, { kind: NodeType; }> | Extract<ts.ParameterDeclaration, { kind: NodeType; }> | Extract<ts.Decorator, { kind: NodeType; }> | Extract<ts.PropertySignature, { kind: NodeType; }> | Extract<ts.PropertyDeclaration, { kind: NodeType; }> | Extract<ts.TypePredicateNode, { kind: NodeType; }> | Extract<ts.TypeReferenceNode, { kind: NodeType; }> | Extract<ts.TypeQueryNode, { kind: NodeType; }> | Extract<ts.TypeLiteralNode, { kind: NodeType; }> | Extract<ts.ArrayTypeNode, { kind: NodeType; }> | Extract<ts.TupleTypeNode, { kind: NodeType; }> | Extract<ts.OptionalTypeNode, { kind: NodeType; }> | Extract<ts.RestTypeNode, { kind: NodeType; }> | Extract<ts.UnionTypeNode, { kind: NodeType; }> | Extract<ts.IntersectionTypeNode, { kind: NodeType; }> | Extract<ts.InferTypeNode, { kind: NodeType; }> | Extract<ts.ImportTypeNode, { kind: NodeType; }> | Extract<ts.ImportTypeAssertionContainer, { kind: NodeType; }> | Extract<ts.NamedTupleMember, { kind: NodeType; }> | Extract<ts.ParenthesizedTypeNode, { kind: NodeType; }> | Extract<ts.TypeOperatorNode, { kind: NodeType; }> | Extract<ts.IndexedAccessTypeNode, { kind: NodeType; }> | Extract<ts.LiteralTypeNode, { kind: NodeType; }> | Extract<ts.TemplateLiteralTypeNode, { kind: NodeType; }> | Extract<ts.TemplateLiteralTypeSpan, { kind: NodeType; }> | Extract<ts.ObjectBindingPattern, { kind: NodeType; }> | Extract<ts.ArrayBindingPattern, { kind: NodeType; }> | Extract<ts.ArrayLiteralExpression, { kind: NodeType; }> | Extract<ts.ObjectLiteralExpression, { kind: NodeType; }> | Extract<ts.CallExpression, { kind: NodeType; }> | Extract<ts.NewExpression, { kind: NodeType; }> | Extract<ts.TaggedTemplateExpression, { kind: NodeType; }> | Extract<ts.TypeAssertion, { kind: NodeType; }> | Extract<ts.ParenthesizedExpression, { kind: NodeType; }> | Extract<ts.DeleteExpression, { kind: NodeType; }> | Extract<ts.TypeOfExpression, { kind: NodeType; }> | Extract<ts.VoidExpression, { kind: NodeType; }> | Extract<ts.AwaitExpression, { kind: NodeType; }> | Extract<ts.PrefixUnaryExpression, { kind: NodeType; }> | Extract<ts.PostfixUnaryExpression, { kind: NodeType; }> | Extract<ts.BinaryExpression, { kind: NodeType; }> | Extract<ts.ConditionalExpression, { kind: NodeType; }> | Extract<ts.TemplateExpression, { kind: NodeType; }> | Extract<ts.YieldExpression, { kind: NodeType; }> | Extract<ts.SpreadElement, { kind: NodeType; }> | Extract<ts.ClassExpression, { kind: NodeType; }> | Extract<ts.ExpressionWithTypeArguments, { kind: NodeType; }> | Extract<ts.AsExpression, { kind: NodeType; }> | Extract<ts.NonNullExpression, { kind: NodeType; }> | Extract<ts.SatisfiesExpression, { kind: NodeType; }> | Extract<ts.TemplateSpan, { kind: NodeType; }> | Extract<ts.VariableDeclaration, { kind: NodeType; }> | Extract<ts.VariableDeclarationList, { kind: NodeType; }> | Extract<ts.ClassDeclaration, { kind: NodeType; }> | Extract<ts.InterfaceDeclaration, { kind: NodeType; }> | Extract<ts.EnumDeclaration, { kind: NodeType; }> | Extract<ts.ModuleBlock, { kind: NodeType; }> | Extract<ts.NamespaceExportDeclaration, { kind: NodeType; }> | Extract<ts.ImportEqualsDeclaration, { kind: NodeType; }> | Extract<ts.ImportDeclaration, { kind: NodeType; }> | Extract<ts.ImportAttributes, { kind: NodeType; }> | Extract<ts.ImportAttribute, { kind: NodeType; }> | Extract<ts.ImportClause, { kind: NodeType; }> | Extract<ts.NamespaceImport, { kind: NodeType; }> | Extract<ts.NamespaceExport, { kind: NodeType; }> | Extract<ts.NamedImports, { kind: NodeType; }> | Extract<ts.ImportSpecifier, { kind: NodeType; }> | Extract<ts.ExportAssignment, { kind: NodeType; }> | Extract<ts.ExportDeclaration, { kind: NodeType; }> | Extract<ts.NamedExports, { kind: NodeType; }> | Extract<ts.ExportSpecifier, { kind: NodeType; }> | Extract<ts.ExternalModuleReference, { kind: NodeType; }> | Extract<ts.JsxElement, { kind: NodeType; }> | Extract<ts.JsxSelfClosingElement, { kind: NodeType; }> | Extract<ts.JsxOpeningElement, { kind: NodeType; }> | Extract<ts.JsxClosingElement, { kind: NodeType; }> | Extract<ts.JsxFragment, { kind: NodeType; }> | Extract<ts.JsxAttribute, { kind: NodeType; }> | Extract<ts.JsxAttributes, { kind: NodeType; }> | Extract<ts.JsxSpreadAttribute, { kind: NodeType; }> | Extract<ts.JsxExpression, { kind: NodeType; }> | Extract<ts.JsxNamespacedName, { kind: NodeType; }> | Extract<ts.CaseClause, { kind: NodeType; }> | Extract<ts.DefaultClause, { kind: NodeType; }> | Extract<ts.HeritageClause, { kind: NodeType; }> | Extract<ts.PropertyAssignment, { kind: NodeType; }> | Extract<ts.ShorthandPropertyAssignment, { kind: NodeType; }> | Extract<ts.SpreadAssignment, { kind: NodeType; }> | Extract<ts.EnumMember, { kind: NodeType; }> | Extract<ts.PartiallyEmittedExpression, { kind: NodeType; }> | Extract<ts.CommaListExpression, { kind: NodeType; }> | Extract<ts.MissingDeclaration, { kind: NodeType; }> | Extract<ts.JSDocTypeExpression, { kind: NodeType; }> | Extract<ts.JSDocNonNullableType, { kind: NodeType; }> | Extract<ts.JSDocNullableType, { kind: NodeType; }> | Extract<ts.JSDocOptionalType, { kind: NodeType; }> | Extract<ts.JSDocVariadicType, { kind: NodeType; }> | Extract<ts.JSDocSeeTag, { kind: NodeType; }> | Extract<ts.JSDocNameReference, { kind: NodeType; }> | Extract<ts.JSDocMemberName, { kind: NodeType; }> | Extract<ts.JSDocParameterTag, { kind: NodeType; }> | Extract<ts.JSDocPropertyTag, { kind: NodeType; }> | Extract<ts.JSDocAuthorTag, { kind: NodeType; }> | Extract<ts.JSDocImplementsTag, { kind: NodeType; }> | Extract<ts.JSDocAugmentsTag, { kind: NodeType; }> | Extract<ts.JSDocTemplateTag, { kind: NodeType; }> | Extract<ts.JSDocReturnTag, { kind: NodeType; }> | Extract<ts.JSDocTypeTag, { kind: NodeType; }> | Extract<ts.JSDocThisTag, { kind: NodeType; }> | Extract<ts.JSDocLink, { kind: NodeType; }> | Extract<ts.JSDocLinkCode, { kind: NodeType; }> | Extract<ts.JSDocLinkPlain, { kind: NodeType; }> | Extract<ts.JSDocTypeLiteral, { kind: NodeType; }> | Extract<ts.JSDocUnknownTag, { kind: NodeType; }> | Extract<ts.JSDocClassTag, { kind: NodeType; }> | Extract<ts.JSDocPublicTag, { kind: NodeType; }> | Extract<ts.JSDocPrivateTag, { kind: NodeType; }> | Extract<ts.JSDocProtectedTag, { kind: NodeType; }> | Extract<ts.JSDocReadonlyTag, { kind: NodeType; }> | Extract<ts.JSDocDeprecatedTag, { kind: NodeType; }> | Extract<ts.JSDocThrowsTag, { kind: NodeType; }> | Extract<ts.JSDocOverrideTag, { kind: NodeType; }> | Extract<ts.JSDocSatisfiesTag, { kind: NodeType; }> | Extract<ts.JSDocOverloadTag, { kind: NodeType; }>

  <NodeType extends ts.SyntaxKind>(nodeType: NodeType) =>
><NodeType extends ts.SyntaxKind>(nodeType: NodeType) =>  (    node: ts.ForEachChildNodes | null | undefined,  ): node is Extract<ts.ForEachChildNodes, { kind: NodeType }> =>    node?.kind === nodeType : <NodeType extends ts.SyntaxKind>(nodeType: NodeType) => (node: ts.ForEachChildNodes | null | undefined) => node is Extract<ts.JSDoc, { kind: NodeType; }> | Extract<ts.JSDocCallbackTag, { kind: NodeType; }> | Extract<ts.JSDocEnumTag, { kind: NodeType; }> | Extract<ts.JSDocFunctionType, { kind: NodeType; }> | Extract<ts.JSDocSignature, { kind: NodeType; }> | Extract<ts.JSDocTypedefTag, { kind: NodeType; }> | Extract<ts.SourceFile, { kind: NodeType; }> | Extract<ts.ArrowFunction, { kind: NodeType; }> | Extract<ts.Block, { kind: NodeType; }> | Extract<ts.CallSignatureDeclaration, { kind: NodeType; }> | Extract<ts.CaseBlock, { kind: NodeType; }> | Extract<ts.CatchClause, { kind: NodeType; }> | Extract<ts.ClassStaticBlockDeclaration, { kind: NodeType; }> | Extract<ts.ConditionalTypeNode, { kind: NodeType; }> | Extract<ts.ConstructorDeclaration, { kind: NodeType; }> | Extract<ts.ConstructorTypeNode, { kind: NodeType; }> | Extract<ts.ConstructSignatureDeclaration, { kind: NodeType; }> | Extract<ts.ForStatement, { kind: NodeType; }> | Extract<ts.ForInStatement, { kind: NodeType; }> | Extract<ts.ForOfStatement, { kind: NodeType; }> | Extract<ts.FunctionDeclaration, { kind: NodeType; }> | Extract<ts.FunctionExpression, { kind: NodeType; }> | Extract<ts.FunctionTypeNode, { kind: NodeType; }> | Extract<ts.GetAccessorDeclaration, { kind: NodeType; }> | Extract<ts.IndexSignatureDeclaration, { kind: NodeType; }> | Extract<ts.MappedTypeNode, { kind: NodeType; }> | Extract<ts.MethodDeclaration, { kind: NodeType; }> | Extract<ts.MethodSignature, { kind: NodeType; }> | Extract<ts.ModuleDeclaration, { kind: NodeType; }> | Extract<ts.SetAccessorDeclaration, { kind: NodeType; }> | Extract<ts.TypeAliasDeclaration, { kind: NodeType; }> | Extract<ts.QualifiedName, { kind: NodeType; }> | Extract<ts.MetaProperty, { kind: NodeType; }> | Extract<ts.ElementAccessExpression, { kind: NodeType; }> | Extract<ts.PropertyAccessExpression, { kind: NodeType; }> | Extract<ts.BindingElement, { kind: NodeType; }> | Extract<ts.VariableStatement, { kind: NodeType; }> | Extract<ts.ExpressionStatement, { kind: NodeType; }> | Extract<ts.IfStatement, { kind: NodeType; }> | Extract<ts.DoStatement, { kind: NodeType; }> | Extract<ts.WhileStatement, { kind: NodeType; }> | Extract<ts.ContinueStatement, { kind: NodeType; }> | Extract<ts.BreakStatement, { kind: NodeType; }> | Extract<ts.ReturnStatement, { kind: NodeType; }> | Extract<ts.WithStatement, { kind: NodeType; }> | Extract<ts.SwitchStatement, { kind: NodeType; }> | Extract<ts.LabeledStatement, { kind: NodeType; }> | Extract<ts.ThrowStatement, { kind: NodeType; }> | Extract<ts.TryStatement, { kind: NodeType; }> | Extract<ts.ComputedPropertyName, { kind: NodeType; }> | Extract<ts.TypeParameterDeclaration, { kind: NodeType; }> | Extract<ts.ParameterDeclaration, { kind: NodeType; }> | Extract<ts.Decorator, { kind: NodeType; }> | Extract<ts.PropertySignature, { kind: NodeType; }> | Extract<ts.PropertyDeclaration, { kind: NodeType; }> | Extract<ts.TypePredicateNode, { kind: NodeType; }> | Extract<ts.TypeReferenceNode, { kind: NodeType; }> | Extract<ts.TypeQueryNode, { kind: NodeType; }> | Extract<ts.TypeLiteralNode, { kind: NodeType; }> | Extract<ts.ArrayTypeNode, { kind: NodeType; }> | Extract<ts.TupleTypeNode, { kind: NodeType; }> | Extract<ts.OptionalTypeNode, { kind: NodeType; }> | Extract<ts.RestTypeNode, { kind: NodeType; }> | Extract<ts.UnionTypeNode, { kind: NodeType; }> | Extract<ts.IntersectionTypeNode, { kind: NodeType; }> | Extract<ts.InferTypeNode, { kind: NodeType; }> | Extract<ts.ImportTypeNode, { kind: NodeType; }> | Extract<ts.ImportTypeAssertionContainer, { kind: NodeType; }> | Extract<ts.NamedTupleMember, { kind: NodeType; }> | Extract<ts.ParenthesizedTypeNode, { kind: NodeType; }> | Extract<ts.TypeOperatorNode, { kind: NodeType; }> | Extract<ts.IndexedAccessTypeNode, { kind: NodeType; }> | Extract<ts.LiteralTypeNode, { kind: NodeType; }> | Extract<ts.TemplateLiteralTypeNode, { kind: NodeType; }> | Extract<ts.TemplateLiteralTypeSpan, { kind: NodeType; }> | Extract<ts.ObjectBindingPattern, { kind: NodeType; }> | Extract<ts.ArrayBindingPattern, { kind: NodeType; }> | Extract<ts.ArrayLiteralExpression, { kind: NodeType; }> | Extract<ts.ObjectLiteralExpression, { kind: NodeType; }> | Extract<ts.CallExpression, { kind: NodeType; }> | Extract<ts.NewExpression, { kind: NodeType; }> | Extract<ts.TaggedTemplateExpression, { kind: NodeType; }> | Extract<ts.TypeAssertion, { kind: NodeType; }> | Extract<ts.ParenthesizedExpression, { kind: NodeType; }> | Extract<ts.DeleteExpression, { kind: NodeType; }> | Extract<ts.TypeOfExpression, { kind: NodeType; }> | Extract<ts.VoidExpression, { kind: NodeType; }> | Extract<ts.AwaitExpression, { kind: NodeType; }> | Extract<ts.PrefixUnaryExpression, { kind: NodeType; }> | Extract<ts.PostfixUnaryExpression, { kind: NodeType; }> | Extract<ts.BinaryExpression, { kind: NodeType; }> | Extract<ts.ConditionalExpression, { kind: NodeType; }> | Extract<ts.TemplateExpression, { kind: NodeType; }> | Extract<ts.YieldExpression, { kind: NodeType; }> | Extract<ts.SpreadElement, { kind: NodeType; }> | Extract<ts.ClassExpression, { kind: NodeType; }> | Extract<ts.ExpressionWithTypeArguments, { kind: NodeType; }> | Extract<ts.AsExpression, { kind: NodeType; }> | Extract<ts.NonNullExpression, { kind: NodeType; }> | Extract<ts.SatisfiesExpression, { kind: NodeType; }> | Extract<ts.TemplateSpan, { kind: NodeType; }> | Extract<ts.VariableDeclaration, { kind: NodeType; }> | Extract<ts.VariableDeclarationList, { kind: NodeType; }> | Extract<ts.ClassDeclaration, { kind: NodeType; }> | Extract<ts.InterfaceDeclaration, { kind: NodeType; }> | Extract<ts.EnumDeclaration, { kind: NodeType; }> | Extract<ts.ModuleBlock, { kind: NodeType; }> | Extract<ts.NamespaceExportDeclaration, { kind: NodeType; }> | Extract<ts.ImportEqualsDeclaration, { kind: NodeType; }> | Extract<ts.ImportDeclaration, { kind: NodeType; }> | Extract<ts.ImportAttributes, { kind: NodeType; }> | Extract<ts.ImportAttribute, { kind: NodeType; }> | Extract<ts.ImportClause, { kind: NodeType; }> | Extract<ts.NamespaceImport, { kind: NodeType; }> | Extract<ts.NamespaceExport, { kind: NodeType; }> | Extract<ts.NamedImports, { kind: NodeType; }> | Extract<ts.ImportSpecifier, { kind: NodeType; }> | Extract<ts.ExportAssignment, { kind: NodeType; }> | Extract<ts.ExportDeclaration, { kind: NodeType; }> | Extract<ts.NamedExports, { kind: NodeType; }> | Extract<ts.ExportSpecifier, { kind: NodeType; }> | Extract<ts.ExternalModuleReference, { kind: NodeType; }> | Extract<ts.JsxElement, { kind: NodeType; }> | Extract<ts.JsxSelfClosingElement, { kind: NodeType; }> | Extract<ts.JsxOpeningElement, { kind: NodeType; }> | Extract<ts.JsxClosingElement, { kind: NodeType; }> | Extract<ts.JsxFragment, { kind: NodeType; }> | Extract<ts.JsxAttribute, { kind: NodeType; }> | Extract<ts.JsxAttributes, { kind: NodeType; }> | Extract<ts.JsxSpreadAttribute, { kind: NodeType; }> | Extract<ts.JsxExpression, { kind: NodeType; }> | Extract<ts.JsxNamespacedName, { kind: NodeType; }> | Extract<ts.CaseClause, { kind: NodeType; }> | Extract<ts.DefaultClause, { kind: NodeType; }> | Extract<ts.HeritageClause, { kind: NodeType; }> | Extract<ts.PropertyAssignment, { kind: NodeType; }> | Extract<ts.ShorthandPropertyAssignment, { kind: NodeType; }> | Extract<ts.SpreadAssignment, { kind: NodeType; }> | Extract<ts.EnumMember, { kind: NodeType; }> | Extract<ts.PartiallyEmittedExpression, { kind: NodeType; }> | Extract<ts.CommaListExpression, { kind: NodeType; }> | Extract<ts.MissingDeclaration, { kind: NodeType; }> | Extract<ts.JSDocTypeExpression, { kind: NodeType; }> | Extract<ts.JSDocNonNullableType, { kind: NodeType; }> | Extract<ts.JSDocNullableType, { kind: NodeType; }> | Extract<ts.JSDocOptionalType, { kind: NodeType; }> | Extract<ts.JSDocVariadicType, { kind: NodeType; }> | Extract<ts.JSDocSeeTag, { kind: NodeType; }> | Extract<ts.JSDocNameReference, { kind: NodeType; }> | Extract<ts.JSDocMemberName, { kind: NodeType; }> | Extract<ts.JSDocParameterTag, { kind: NodeType; }> | Extract<ts.JSDocPropertyTag, { kind: NodeType; }> | Extract<ts.JSDocAuthorTag, { kind: NodeType; }> | Extract<ts.JSDocImplementsTag, { kind: NodeType; }> | Extract<ts.JSDocAugmentsTag, { kind: NodeType; }> | Extract<ts.JSDocTemplateTag, { kind: NodeType; }> | Extract<ts.JSDocReturnTag, { kind: NodeType; }> | Extract<ts.JSDocTypeTag, { kind: NodeType; }> | Extract<ts.JSDocThisTag, { kind: NodeType; }> | Extract<ts.JSDocLink, { kind: NodeType; }> | Extract<ts.JSDocLinkCode, { kind: NodeType; }> | Extract<ts.JSDocLinkPlain, { kind: NodeType; }> | Extract<ts.JSDocTypeLiteral, { kind: NodeType; }> | Extract<ts.JSDocUnknownTag, { kind: NodeType; }> | Extract<ts.JSDocClassTag, { kind: NodeType; }> | Extract<ts.JSDocPublicTag, { kind: NodeType; }> | Extract<ts.JSDocPrivateTag, { kind: NodeType; }> | Extract<ts.JSDocProtectedTag, { kind: NodeType; }> | Extract<ts.JSDocReadonlyTag, { kind: NodeType; }> | Extract<ts.JSDocDeprecatedTag, { kind: NodeType; }> | Extract<ts.JSDocThrowsTag, { kind: NodeType; }> | Extract<ts.JSDocOverrideTag, { kind: NodeType; }> | Extract<ts.JSDocSatisfiesTag, { kind: NodeType; }> | Extract<ts.JSDocOverloadTag, { kind: NodeType; }>
>ts : any
>nodeType : NodeType

  (
>(    node: ts.ForEachChildNodes | null | undefined,  ): node is Extract<ts.ForEachChildNodes, { kind: NodeType }> =>    node?.kind === nodeType : (node: ts.ForEachChildNodes | null | undefined) => node is Extract<ts.JSDoc, { kind: NodeType; }> | Extract<ts.JSDocCallbackTag, { kind: NodeType; }> | Extract<ts.JSDocEnumTag, { kind: NodeType; }> | Extract<ts.JSDocFunctionType, { kind: NodeType; }> | Extract<ts.JSDocSignature, { kind: NodeType; }> | Extract<ts.JSDocTypedefTag, { kind: NodeType; }> | Extract<ts.SourceFile, { kind: NodeType; }> | Extract<ts.ArrowFunction, { kind: NodeType; }> | Extract<ts.Block, { kind: NodeType; }> | Extract<ts.CallSignatureDeclaration, { kind: NodeType; }> | Extract<ts.CaseBlock, { kind: NodeType; }> | Extract<ts.CatchClause, { kind: NodeType; }> | Extract<ts.ClassStaticBlockDeclaration, { kind: NodeType; }> | Extract<ts.ConditionalTypeNode, { kind: NodeType; }> | Extract<ts.ConstructorDeclaration, { kind: NodeType; }> | Extract<ts.ConstructorTypeNode, { kind: NodeType; }> | Extract<ts.ConstructSignatureDeclaration, { kind: NodeType; }> | Extract<ts.ForStatement, { kind: NodeType; }> | Extract<ts.ForInStatement, { kind: NodeType; }> | Extract<ts.ForOfStatement, { kind: NodeType; }> | Extract<ts.FunctionDeclaration, { kind: NodeType; }> | Extract<ts.FunctionExpression, { kind: NodeType; }> | Extract<ts.FunctionTypeNode, { kind: NodeType; }> | Extract<ts.GetAccessorDeclaration, { kind: NodeType; }> | Extract<ts.IndexSignatureDeclaration, { kind: NodeType; }> | Extract<ts.MappedTypeNode, { kind: NodeType; }> | Extract<ts.MethodDeclaration, { kind: NodeType; }> | Extract<ts.MethodSignature, { kind: NodeType; }> | Extract<ts.ModuleDeclaration, { kind: NodeType; }> | Extract<ts.SetAccessorDeclaration, { kind: NodeType; }> | Extract<ts.TypeAliasDeclaration, { kind: NodeType; }> | Extract<ts.QualifiedName, { kind: NodeType; }> | Extract<ts.MetaProperty, { kind: NodeType; }> | Extract<ts.ElementAccessExpression, { kind: NodeType; }> | Extract<ts.PropertyAccessExpression, { kind: NodeType; }> | Extract<ts.BindingElement, { kind: NodeType; }> | Extract<ts.VariableStatement, { kind: NodeType; }> | Extract<ts.ExpressionStatement, { kind: NodeType; }> | Extract<ts.IfStatement, { kind: NodeType; }> | Extract<ts.DoStatement, { kind: NodeType; }> | Extract<ts.WhileStatement, { kind: NodeType; }> | Extract<ts.ContinueStatement, { kind: NodeType; }> | Extract<ts.BreakStatement, { kind: NodeType; }> | Extract<ts.ReturnStatement, { kind: NodeType; }> | Extract<ts.WithStatement, { kind: NodeType; }> | Extract<ts.SwitchStatement, { kind: NodeType; }> | Extract<ts.LabeledStatement, { kind: NodeType; }> | Extract<ts.ThrowStatement, { kind: NodeType; }> | Extract<ts.TryStatement, { kind: NodeType; }> | Extract<ts.ComputedPropertyName, { kind: NodeType; }> | Extract<ts.TypeParameterDeclaration, { kind: NodeType; }> | Extract<ts.ParameterDeclaration, { kind: NodeType; }> | Extract<ts.Decorator, { kind: NodeType; }> | Extract<ts.PropertySignature, { kind: NodeType; }> | Extract<ts.PropertyDeclaration, { kind: NodeType; }> | Extract<ts.TypePredicateNode, { kind: NodeType; }> | Extract<ts.TypeReferenceNode, { kind: NodeType; }> | Extract<ts.TypeQueryNode, { kind: NodeType; }> | Extract<ts.TypeLiteralNode, { kind: NodeType; }> | Extract<ts.ArrayTypeNode, { kind: NodeType; }> | Extract<ts.TupleTypeNode, { kind: NodeType; }> | Extract<ts.OptionalTypeNode, { kind: NodeType; }> | Extract<ts.RestTypeNode, { kind: NodeType; }> | Extract<ts.UnionTypeNode, { kind: NodeType; }> | Extract<ts.IntersectionTypeNode, { kind: NodeType; }> | Extract<ts.InferTypeNode, { kind: NodeType; }> | Extract<ts.ImportTypeNode, { kind: NodeType; }> | Extract<ts.ImportTypeAssertionContainer, { kind: NodeType; }> | Extract<ts.NamedTupleMember, { kind: NodeType; }> | Extract<ts.ParenthesizedTypeNode, { kind: NodeType; }> | Extract<ts.TypeOperatorNode, { kind: NodeType; }> | Extract<ts.IndexedAccessTypeNode, { kind: NodeType; }> | Extract<ts.LiteralTypeNode, { kind: NodeType; }> | Extract<ts.TemplateLiteralTypeNode, { kind: NodeType; }> | Extract<ts.TemplateLiteralTypeSpan, { kind: NodeType; }> | Extract<ts.ObjectBindingPattern, { kind: NodeType; }> | Extract<ts.ArrayBindingPattern, { kind: NodeType; }> | Extract<ts.ArrayLiteralExpression, { kind: NodeType; }> | Extract<ts.ObjectLiteralExpression, { kind: NodeType; }> | Extract<ts.CallExpression, { kind: NodeType; }> | Extract<ts.NewExpression, { kind: NodeType; }> | Extract<ts.TaggedTemplateExpression, { kind: NodeType; }> | Extract<ts.TypeAssertion, { kind: NodeType; }> | Extract<ts.ParenthesizedExpression, { kind: NodeType; }> | Extract<ts.DeleteExpression, { kind: NodeType; }> | Extract<ts.TypeOfExpression, { kind: NodeType; }> | Extract<ts.VoidExpression, { kind: NodeType; }> | Extract<ts.AwaitExpression, { kind: NodeType; }> | Extract<ts.PrefixUnaryExpression, { kind: NodeType; }> | Extract<ts.PostfixUnaryExpression, { kind: NodeType; }> | Extract<ts.BinaryExpression, { kind: NodeType; }> | Extract<ts.ConditionalExpression, { kind: NodeType; }> | Extract<ts.TemplateExpression, { kind: NodeType; }> | Extract<ts.YieldExpression, { kind: NodeType; }> | Extract<ts.SpreadElement, { kind: NodeType; }> | Extract<ts.ClassExpression, { kind: NodeType; }> | Extract<ts.ExpressionWithTypeArguments, { kind: NodeType; }> | Extract<ts.AsExpression, { kind: NodeType; }> | Extract<ts.NonNullExpression, { kind: NodeType; }> | Extract<ts.SatisfiesExpression, { kind: NodeType; }> | Extract<ts.TemplateSpan, { kind: NodeType; }> | Extract<ts.VariableDeclaration, { kind: NodeType; }> | Extract<ts.VariableDeclarationList, { kind: NodeType; }> | Extract<ts.ClassDeclaration, { kind: NodeType; }> | Extract<ts.InterfaceDeclaration, { kind: NodeType; }> | Extract<ts.EnumDeclaration, { kind: NodeType; }> | Extract<ts.ModuleBlock, { kind: NodeType; }> | Extract<ts.NamespaceExportDeclaration, { kind: NodeType; }> | Extract<ts.ImportEqualsDeclaration, { kind: NodeType; }> | Extract<ts.ImportDeclaration, { kind: NodeType; }> | Extract<ts.ImportAttributes, { kind: NodeType; }> | Extract<ts.ImportAttribute, { kind: NodeType; }> | Extract<ts.ImportClause, { kind: NodeType; }> | Extract<ts.NamespaceImport, { kind: NodeType; }> | Extract<ts.NamespaceExport, { kind: NodeType; }> | Extract<ts.NamedImports, { kind: NodeType; }> | Extract<ts.ImportSpecifier, { kind: NodeType; }> | Extract<ts.ExportAssignment, { kind: NodeType; }> | Extract<ts.ExportDeclaration, { kind: NodeType; }> | Extract<ts.NamedExports, { kind: NodeType; }> | Extract<ts.ExportSpecifier, { kind: NodeType; }> | Extract<ts.ExternalModuleReference, { kind: NodeType; }> | Extract<ts.JsxElement, { kind: NodeType; }> | Extract<ts.JsxSelfClosingElement, { kind: NodeType; }> | Extract<ts.JsxOpeningElement, { kind: NodeType; }> | Extract<ts.JsxClosingElement, { kind: NodeType; }> | Extract<ts.JsxFragment, { kind: NodeType; }> | Extract<ts.JsxAttribute, { kind: NodeType; }> | Extract<ts.JsxAttributes, { kind: NodeType; }> | Extract<ts.JsxSpreadAttribute, { kind: NodeType; }> | Extract<ts.JsxExpression, { kind: NodeType; }> | Extract<ts.JsxNamespacedName, { kind: NodeType; }> | Extract<ts.CaseClause, { kind: NodeType; }> | Extract<ts.DefaultClause, { kind: NodeType; }> | Extract<ts.HeritageClause, { kind: NodeType; }> | Extract<ts.PropertyAssignment, { kind: NodeType; }> | Extract<ts.ShorthandPropertyAssignment, { kind: NodeType; }> | Extract<ts.SpreadAssignment, { kind: NodeType; }> | Extract<ts.EnumMember, { kind: NodeType; }> | Extract<ts.PartiallyEmittedExpression, { kind: NodeType; }> | Extract<ts.CommaListExpression, { kind: NodeType; }> | Extract<ts.MissingDeclaration, { kind: NodeType; }> | Extract<ts.JSDocTypeExpression, { kind: NodeType; }> | Extract<ts.JSDocNonNullableType, { kind: NodeType; }> | Extract<ts.JSDocNullableType, { kind: NodeType; }> | Extract<ts.JSDocOptionalType, { kind: NodeType; }> | Extract<ts.JSDocVariadicType, { kind: NodeType; }> | Extract<ts.JSDocSeeTag, { kind: NodeType; }> | Extract<ts.JSDocNameReference, { kind: NodeType; }> | Extract<ts.JSDocMemberName, { kind: NodeType; }> | Extract<ts.JSDocParameterTag, { kind: NodeType; }> | Extract<ts.JSDocPropertyTag, { kind: NodeType; }> | Extract<ts.JSDocAuthorTag, { kind: NodeType; }> | Extract<ts.JSDocImplementsTag, { kind: NodeType; }> | Extract<ts.JSDocAugmentsTag, { kind: NodeType; }> | Extract<ts.JSDocTemplateTag, { kind: NodeType; }> | Extract<ts.JSDocReturnTag, { kind: NodeType; }> | Extract<ts.JSDocTypeTag, { kind: NodeType; }> | Extract<ts.JSDocThisTag, { kind: NodeType; }> | Extract<ts.JSDocLink, { kind: NodeType; }> | Extract<ts.JSDocLinkCode, { kind: NodeType; }> | Extract<ts.JSDocLinkPlain, { kind: NodeType; }> | Extract<ts.JSDocTypeLiteral, { kind: NodeType; }> | Extract<ts.JSDocUnknownTag, { kind: NodeType; }> | Extract<ts.JSDocClassTag, { kind: NodeType; }> | Extract<ts.JSDocPublicTag, { kind: NodeType; }> | Extract<ts.JSDocPrivateTag, { kind: NodeType; }> | Extract<ts.JSDocProtectedTag, { kind: NodeType; }> | Extract<ts.JSDocReadonlyTag, { kind: NodeType; }> | Extract<ts.JSDocDeprecatedTag, { kind: NodeType; }> | Extract<ts.JSDocThrowsTag, { kind: NodeType; }> | Extract<ts.JSDocOverrideTag, { kind: NodeType; }> | Extract<ts.JSDocSatisfiesTag, { kind: NodeType; }> | Extract<ts.JSDocOverloadTag, { kind: NodeType; }>

    node: ts.ForEachChildNodes | null | undefined,
>node : ts.ForEachChildNodes | null | undefined
>ts : any

  ): node is Extract<ts.ForEachChildNodes, { kind: NodeType }> =>
>ts : any
>kind : NodeType

    node?.kind === nodeType;
>node?.kind === nodeType : boolean
>node?.kind : ts.SyntaxKind.QualifiedName | ts.SyntaxKind.ComputedPropertyName | ts.SyntaxKind.TypeParameter | ts.SyntaxKind.Parameter | ts.SyntaxKind.Decorator | ts.SyntaxKind.PropertySignature | ts.SyntaxKind.PropertyDeclaration | ts.SyntaxKind.MethodSignature | ts.SyntaxKind.MethodDeclaration | ts.SyntaxKind.ClassStaticBlockDeclaration | ts.SyntaxKind.Constructor | ts.SyntaxKind.GetAccessor | ts.SyntaxKind.SetAccessor | ts.SyntaxKind.CallSignature | ts.SyntaxKind.ConstructSignature | ts.SyntaxKind.IndexSignature | ts.SyntaxKind.TypePredicate | ts.SyntaxKind.TypeReference | ts.SyntaxKind.FunctionType | ts.SyntaxKind.ConstructorType | ts.SyntaxKind.TypeQuery | ts.SyntaxKind.TypeLiteral | ts.SyntaxKind.ArrayType | ts.SyntaxKind.TupleType | ts.SyntaxKind.OptionalType | ts.SyntaxKind.RestType | ts.SyntaxKind.UnionType | ts.SyntaxKind.IntersectionType | ts.SyntaxKind.ConditionalType | ts.SyntaxKind.InferType | ts.SyntaxKind.ParenthesizedType | ts.SyntaxKind.TypeOperator | ts.SyntaxKind.IndexedAccessType | ts.SyntaxKind.MappedType | ts.SyntaxKind.LiteralType | ts.SyntaxKind.NamedTupleMember | ts.SyntaxKind.TemplateLiteralType | ts.SyntaxKind.TemplateLiteralTypeSpan | ts.SyntaxKind.ImportType | ts.SyntaxKind.ObjectBindingPattern | ts.SyntaxKind.ArrayBindingPattern | ts.SyntaxKind.BindingElement | ts.SyntaxKind.ArrayLiteralExpression | ts.SyntaxKind.ObjectLiteralExpression | ts.SyntaxKind.PropertyAccessExpression | ts.SyntaxKind.ElementAccessExpression | ts.SyntaxKind.CallExpression | ts.SyntaxKind.NewExpression | ts.SyntaxKind.TaggedTemplateExpression | ts.SyntaxKind.TypeAssertionExpression | ts.SyntaxKind.ParenthesizedExpression | ts.SyntaxKind.FunctionExpression | ts.SyntaxKind.ArrowFunction | ts.SyntaxKind.DeleteExpression | ts.SyntaxKind.TypeOfExpression | ts.SyntaxKind.VoidExpression | ts.SyntaxKind.AwaitExpression | ts.SyntaxKind.PrefixUnaryExpression | ts.SyntaxKind.PostfixUnaryExpression | ts.SyntaxKind.BinaryExpression | ts.SyntaxKind.ConditionalExpression | ts.SyntaxKind.TemplateExpression | ts.SyntaxKind.YieldExpression | ts.SyntaxKind.SpreadElement | ts.SyntaxKind.ClassExpression | ts.SyntaxKind.ExpressionWithTypeArguments | ts.SyntaxKind.AsExpression | ts.SyntaxKind.NonNullExpression | ts.SyntaxKind.MetaProperty | ts.SyntaxKind.SatisfiesExpression | ts.SyntaxKind.TemplateSpan | ts.SyntaxKind.Block | ts.SyntaxKind.VariableStatement | ts.SyntaxKind.ExpressionStatement | ts.SyntaxKind.IfStatement | ts.SyntaxKind.DoStatement | ts.SyntaxKind.WhileStatement | ts.SyntaxKind.ForStatement | ts.SyntaxKind.ForInStatement | ts.SyntaxKind.ForOfStatement | ts.SyntaxKind.ContinueStatement | ts.SyntaxKind.BreakStatement | ts.SyntaxKind.ReturnStatement | ts.SyntaxKind.WithStatement | ts.SyntaxKind.SwitchStatement | ts.SyntaxKind.LabeledStatement | ts.SyntaxKind.ThrowStatement | ts.SyntaxKind.TryStatement | ts.SyntaxKind.VariableDeclaration | ts.SyntaxKind.VariableDeclarationList | ts.SyntaxKind.FunctionDeclaration | ts.SyntaxKind.ClassDeclaration | ts.SyntaxKind.InterfaceDeclaration | ts.SyntaxKind.TypeAliasDeclaration | ts.SyntaxKind.EnumDeclaration | ts.SyntaxKind.ModuleDeclaration | ts.SyntaxKind.ModuleBlock | ts.SyntaxKind.CaseBlock | ts.SyntaxKind.NamespaceExportDeclaration | ts.SyntaxKind.ImportEqualsDeclaration | ts.SyntaxKind.ImportDeclaration | ts.SyntaxKind.ImportClause | ts.SyntaxKind.NamespaceImport | ts.SyntaxKind.NamedImports | ts.SyntaxKind.ImportSpecifier | ts.SyntaxKind.ExportAssignment | ts.SyntaxKind.ExportDeclaration | ts.SyntaxKind.NamedExports | ts.SyntaxKind.NamespaceExport | ts.SyntaxKind.ExportSpecifier | ts.SyntaxKind.MissingDeclaration | ts.SyntaxKind.ExternalModuleReference | ts.SyntaxKind.JsxElement | ts.SyntaxKind.JsxSelfClosingElement | ts.SyntaxKind.JsxOpeningElement | ts.SyntaxKind.JsxClosingElement | ts.SyntaxKind.JsxFragment | ts.SyntaxKind.JsxAttribute | ts.SyntaxKind.JsxAttributes | ts.SyntaxKind.JsxSpreadAttribute | ts.SyntaxKind.JsxExpression | ts.SyntaxKind.JsxNamespacedName | ts.SyntaxKind.CaseClause | ts.SyntaxKind.DefaultClause | ts.SyntaxKind.HeritageClause | ts.SyntaxKind.CatchClause | ts.SyntaxKind.ImportAttributes | ts.SyntaxKind.ImportAttribute | ts.SyntaxKind.ImportTypeAssertionContainer | ts.SyntaxKind.PropertyAssignment | ts.SyntaxKind.ShorthandPropertyAssignment | ts.SyntaxKind.SpreadAssignment | ts.SyntaxKind.EnumMember | ts.SyntaxKind.SourceFile | ts.SyntaxKind.JSDocTypeExpression | ts.SyntaxKind.JSDocNameReference | ts.SyntaxKind.JSDocMemberName | ts.SyntaxKind.JSDocNullableType | ts.SyntaxKind.JSDocNonNullableType | ts.SyntaxKind.JSDocOptionalType | ts.SyntaxKind.JSDocFunctionType | ts.SyntaxKind.JSDocVariadicType | ts.SyntaxKind.JSDoc | ts.SyntaxKind.JSDocTypeLiteral | ts.SyntaxKind.JSDocSignature | ts.SyntaxKind.JSDocLink | ts.SyntaxKind.JSDocLinkCode | ts.SyntaxKind.JSDocLinkPlain | ts.SyntaxKind.JSDocTag | ts.SyntaxKind.JSDocAugmentsTag | ts.SyntaxKind.JSDocImplementsTag | ts.SyntaxKind.JSDocAuthorTag | ts.SyntaxKind.JSDocDeprecatedTag | ts.SyntaxKind.JSDocClassTag | ts.SyntaxKind.JSDocPublicTag | ts.SyntaxKind.JSDocPrivateTag | ts.SyntaxKind.JSDocProtectedTag | ts.SyntaxKind.JSDocReadonlyTag | ts.SyntaxKind.JSDocOverrideTag | ts.SyntaxKind.JSDocCallbackTag | ts.SyntaxKind.JSDocOverloadTag | ts.SyntaxKind.JSDocEnumTag | ts.SyntaxKind.JSDocParameterTag | ts.SyntaxKind.JSDocReturnTag | ts.SyntaxKind.JSDocThisTag | ts.SyntaxKind.JSDocTypeTag | ts.SyntaxKind.JSDocTemplateTag | ts.SyntaxKind.JSDocTypedefTag | ts.SyntaxKind.JSDocSeeTag | ts.SyntaxKind.JSDocPropertyTag | ts.SyntaxKind.JSDocThrowsTag | ts.SyntaxKind.JSDocSatisfiesTag | ts.SyntaxKind.PartiallyEmittedExpression | ts.SyntaxKind.CommaListExpression | undefined
>node : ts.ForEachChildNodes | null | undefined
>kind : ts.SyntaxKind.QualifiedName | ts.SyntaxKind.ComputedPropertyName | ts.SyntaxKind.TypeParameter | ts.SyntaxKind.Parameter | ts.SyntaxKind.Decorator | ts.SyntaxKind.PropertySignature | ts.SyntaxKind.PropertyDeclaration | ts.SyntaxKind.MethodSignature | ts.SyntaxKind.MethodDeclaration | ts.SyntaxKind.ClassStaticBlockDeclaration | ts.SyntaxKind.Constructor | ts.SyntaxKind.GetAccessor | ts.SyntaxKind.SetAccessor | ts.SyntaxKind.CallSignature | ts.SyntaxKind.ConstructSignature | ts.SyntaxKind.IndexSignature | ts.SyntaxKind.TypePredicate | ts.SyntaxKind.TypeReference | ts.SyntaxKind.FunctionType | ts.SyntaxKind.ConstructorType | ts.SyntaxKind.TypeQuery | ts.SyntaxKind.TypeLiteral | ts.SyntaxKind.ArrayType | ts.SyntaxKind.TupleType | ts.SyntaxKind.OptionalType | ts.SyntaxKind.RestType | ts.SyntaxKind.UnionType | ts.SyntaxKind.IntersectionType | ts.SyntaxKind.ConditionalType | ts.SyntaxKind.InferType | ts.SyntaxKind.ParenthesizedType | ts.SyntaxKind.TypeOperator | ts.SyntaxKind.IndexedAccessType | ts.SyntaxKind.MappedType | ts.SyntaxKind.LiteralType | ts.SyntaxKind.NamedTupleMember | ts.SyntaxKind.TemplateLiteralType | ts.SyntaxKind.TemplateLiteralTypeSpan | ts.SyntaxKind.ImportType | ts.SyntaxKind.ObjectBindingPattern | ts.SyntaxKind.ArrayBindingPattern | ts.SyntaxKind.BindingElement | ts.SyntaxKind.ArrayLiteralExpression | ts.SyntaxKind.ObjectLiteralExpression | ts.SyntaxKind.PropertyAccessExpression | ts.SyntaxKind.ElementAccessExpression | ts.SyntaxKind.CallExpression | ts.SyntaxKind.NewExpression | ts.SyntaxKind.TaggedTemplateExpression | ts.SyntaxKind.TypeAssertionExpression | ts.SyntaxKind.ParenthesizedExpression | ts.SyntaxKind.FunctionExpression | ts.SyntaxKind.ArrowFunction | ts.SyntaxKind.DeleteExpression | ts.SyntaxKind.TypeOfExpression | ts.SyntaxKind.VoidExpression | ts.SyntaxKind.AwaitExpression | ts.SyntaxKind.PrefixUnaryExpression | ts.SyntaxKind.PostfixUnaryExpression | ts.SyntaxKind.BinaryExpression | ts.SyntaxKind.ConditionalExpression | ts.SyntaxKind.TemplateExpression | ts.SyntaxKind.YieldExpression | ts.SyntaxKind.SpreadElement | ts.SyntaxKind.ClassExpression | ts.SyntaxKind.ExpressionWithTypeArguments | ts.SyntaxKind.AsExpression | ts.SyntaxKind.NonNullExpression | ts.SyntaxKind.MetaProperty | ts.SyntaxKind.SatisfiesExpression | ts.SyntaxKind.TemplateSpan | ts.SyntaxKind.Block | ts.SyntaxKind.VariableStatement | ts.SyntaxKind.ExpressionStatement | ts.SyntaxKind.IfStatement | ts.SyntaxKind.DoStatement | ts.SyntaxKind.WhileStatement | ts.SyntaxKind.ForStatement | ts.SyntaxKind.ForInStatement | ts.SyntaxKind.ForOfStatement | ts.SyntaxKind.ContinueStatement | ts.SyntaxKind.BreakStatement | ts.SyntaxKind.ReturnStatement | ts.SyntaxKind.WithStatement | ts.SyntaxKind.SwitchStatement | ts.SyntaxKind.LabeledStatement | ts.SyntaxKind.ThrowStatement | ts.SyntaxKind.TryStatement | ts.SyntaxKind.VariableDeclaration | ts.SyntaxKind.VariableDeclarationList | ts.SyntaxKind.FunctionDeclaration | ts.SyntaxKind.ClassDeclaration | ts.SyntaxKind.InterfaceDeclaration | ts.SyntaxKind.TypeAliasDeclaration | ts.SyntaxKind.EnumDeclaration | ts.SyntaxKind.ModuleDeclaration | ts.SyntaxKind.ModuleBlock | ts.SyntaxKind.CaseBlock | ts.SyntaxKind.NamespaceExportDeclaration | ts.SyntaxKind.ImportEqualsDeclaration | ts.SyntaxKind.ImportDeclaration | ts.SyntaxKind.ImportClause | ts.SyntaxKind.NamespaceImport | ts.SyntaxKind.NamedImports | ts.SyntaxKind.ImportSpecifier | ts.SyntaxKind.ExportAssignment | ts.SyntaxKind.ExportDeclaration | ts.SyntaxKind.NamedExports | ts.SyntaxKind.NamespaceExport | ts.SyntaxKind.ExportSpecifier | ts.SyntaxKind.MissingDeclaration | ts.SyntaxKind.ExternalModuleReference | ts.SyntaxKind.JsxElement | ts.SyntaxKind.JsxSelfClosingElement | ts.SyntaxKind.JsxOpeningElement | ts.SyntaxKind.JsxClosingElement | ts.SyntaxKind.JsxFragment | ts.SyntaxKind.JsxAttribute | ts.SyntaxKind.JsxAttributes | ts.SyntaxKind.JsxSpreadAttribute | ts.SyntaxKind.JsxExpression | ts.SyntaxKind.JsxNamespacedName | ts.SyntaxKind.CaseClause | ts.SyntaxKind.DefaultClause | ts.SyntaxKind.HeritageClause | ts.SyntaxKind.CatchClause | ts.SyntaxKind.ImportAttributes | ts.SyntaxKind.ImportAttribute | ts.SyntaxKind.ImportTypeAssertionContainer | ts.SyntaxKind.PropertyAssignment | ts.SyntaxKind.ShorthandPropertyAssignment | ts.SyntaxKind.SpreadAssignment | ts.SyntaxKind.EnumMember | ts.SyntaxKind.SourceFile | ts.SyntaxKind.JSDocTypeExpression | ts.SyntaxKind.JSDocNameReference | ts.SyntaxKind.JSDocMemberName | ts.SyntaxKind.JSDocNullableType | ts.SyntaxKind.JSDocNonNullableType | ts.SyntaxKind.JSDocOptionalType | ts.SyntaxKind.JSDocFunctionType | ts.SyntaxKind.JSDocVariadicType | ts.SyntaxKind.JSDoc | ts.SyntaxKind.JSDocTypeLiteral | ts.SyntaxKind.JSDocSignature | ts.SyntaxKind.JSDocLink | ts.SyntaxKind.JSDocLinkCode | ts.SyntaxKind.JSDocLinkPlain | ts.SyntaxKind.JSDocTag | ts.SyntaxKind.JSDocAugmentsTag | ts.SyntaxKind.JSDocImplementsTag | ts.SyntaxKind.JSDocAuthorTag | ts.SyntaxKind.JSDocDeprecatedTag | ts.SyntaxKind.JSDocClassTag | ts.SyntaxKind.JSDocPublicTag | ts.SyntaxKind.JSDocPrivateTag | ts.SyntaxKind.JSDocProtectedTag | ts.SyntaxKind.JSDocReadonlyTag | ts.SyntaxKind.JSDocOverrideTag | ts.SyntaxKind.JSDocCallbackTag | ts.SyntaxKind.JSDocOverloadTag | ts.SyntaxKind.JSDocEnumTag | ts.SyntaxKind.JSDocParameterTag | ts.SyntaxKind.JSDocReturnTag | ts.SyntaxKind.JSDocThisTag | ts.SyntaxKind.JSDocTypeTag | ts.SyntaxKind.JSDocTemplateTag | ts.SyntaxKind.JSDocTypedefTag | ts.SyntaxKind.JSDocSeeTag | ts.SyntaxKind.JSDocPropertyTag | ts.SyntaxKind.JSDocThrowsTag | ts.SyntaxKind.JSDocSatisfiesTag | ts.SyntaxKind.PartiallyEmittedExpression | ts.SyntaxKind.CommaListExpression | undefined
>nodeType : NodeType

