=== tests/cases/conformance/parser/ecmascript5/parserRealSource12.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : typeof TypeScript

    export interface IAstWalker {
        walk(ast: AST, parent: AST): AST;
>walk : (ast: any (error), parent: any (error)) => any (error)
>ast : any (error)
>parent : any (error)

        options: AstWalkOptions;
>options : AstWalkOptions

        state: any; // user state object
>state : any
    }

    export class AstWalkOptions {
>AstWalkOptions : AstWalkOptions

        public goChildren = true;
>goChildren : boolean
>true : true

        public goNextSibling = true;
>goNextSibling : boolean
>true : true

        public reverseSiblings = false; // visit siblings in reverse execution order
>reverseSiblings : boolean
>false : false

        public stopWalk(stop:boolean = true) {
>stopWalk : (stop?: boolean) => void
>stop : boolean
>true : true

            this.goChildren = !stop;
>this.goChildren = !stop : boolean
>this.goChildren : boolean
>this : this
>goChildren : boolean
>!stop : boolean
>stop : boolean

            this.goNextSibling = !stop;
>this.goNextSibling = !stop : boolean
>this.goNextSibling : boolean
>this : this
>goNextSibling : boolean
>!stop : boolean
>stop : boolean
        }
    }

    export interface IAstWalkCallback {
        (ast: AST, parent: AST, walker: IAstWalker): AST;
>ast : any (error)
>parent : any (error)
>walker : IAstWalker
    }

    export interface IAstWalkChildren {
        (preAst: AST, parent: AST, walker: IAstWalker): void;
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker
    }

    class AstWalker implements IAstWalker {
>AstWalker : AstWalker

        constructor (
            private childrenWalkers: IAstWalkChildren[],
>childrenWalkers : IAstWalkChildren[]

            private pre: IAstWalkCallback,
>pre : IAstWalkCallback

            private post: IAstWalkCallback,
>post : IAstWalkCallback

            public options: AstWalkOptions,
>options : AstWalkOptions

            public state: any) {
>state : any
        }

        public walk(ast: AST, parent: AST): AST {
>walk : (ast: any (error), parent: any (error)) => any (error)
>ast : any (error)
>parent : any (error)

            var preAst = this.pre(ast, parent, this);
>preAst : any (error)
>this.pre(ast, parent, this) : any (error)
>this.pre : IAstWalkCallback
>this : this
>pre : IAstWalkCallback
>ast : any (error)
>parent : any (error)
>this : this

            if (preAst === undefined) {
>preAst === undefined : boolean
>preAst : any (error)
>undefined : undefined

                preAst = ast;
>preAst = ast : any (error)
>preAst : any (error)
>ast : any (error)
            }
            if (this.options.goChildren) {
>this.options.goChildren : boolean
>this.options : AstWalkOptions
>this : this
>options : AstWalkOptions
>goChildren : boolean

                var svGoSib = this.options.goNextSibling;
>svGoSib : boolean
>this.options.goNextSibling : boolean
>this.options : AstWalkOptions
>this : this
>options : AstWalkOptions
>goNextSibling : boolean

                this.options.goNextSibling = true;
>this.options.goNextSibling = true : true
>this.options.goNextSibling : boolean
>this.options : AstWalkOptions
>this : this
>options : AstWalkOptions
>goNextSibling : boolean
>true : true

                // Call the "walkChildren" function corresponding to "nodeType".
                this.childrenWalkers[ast.nodeType](ast, parent, this);
>this.childrenWalkers[ast.nodeType](ast, parent, this) : void
>this.childrenWalkers[ast.nodeType] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>ast.nodeType : any (error)
>ast : any (error)
>nodeType : any (error)
>ast : any (error)
>parent : any (error)
>this : this

                this.options.goNextSibling = svGoSib;
>this.options.goNextSibling = svGoSib : boolean
>this.options.goNextSibling : boolean
>this.options : AstWalkOptions
>this : this
>options : AstWalkOptions
>goNextSibling : boolean
>svGoSib : boolean
            }
            else {
                // no go only applies to children of node issuing it
                this.options.goChildren = true;
>this.options.goChildren = true : true
>this.options.goChildren : boolean
>this.options : AstWalkOptions
>this : this
>options : AstWalkOptions
>goChildren : boolean
>true : true
            }
            if (this.post) {
>this.post : IAstWalkCallback
>this : this
>post : IAstWalkCallback

                var postAst = this.post(preAst, parent, this);
>postAst : any (error)
>this.post(preAst, parent, this) : any (error)
>this.post : IAstWalkCallback
>this : this
>post : IAstWalkCallback
>preAst : any (error)
>parent : any (error)
>this : this

                if (postAst === undefined) {
>postAst === undefined : boolean
>postAst : any (error)
>undefined : undefined

                    postAst = preAst;
>postAst = preAst : any (error)
>postAst : any (error)
>preAst : any (error)
                }
                return postAst;
>postAst : any (error)
            }
            else {
                return preAst;
>preAst : any (error)
            }
        }
    }

    export class AstWalkerFactory {
>AstWalkerFactory : AstWalkerFactory

        private childrenWalkers: IAstWalkChildren[] = [];
>childrenWalkers : IAstWalkChildren[]
>[] : undefined[]

        constructor () {
            this.initChildrenWalkers();
>this.initChildrenWalkers() : void
>this.initChildrenWalkers : () => void
>this : this
>initChildrenWalkers : () => void
        }

        public walk(ast: AST, pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): AST {
>walk : (ast: any (error), pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => any (error)
>ast : any (error)
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : any

            return this.getWalker(pre, post, options, state).walk(ast, null)
>this.getWalker(pre, post, options, state).walk(ast, null) : any (error)
>this.getWalker(pre, post, options, state).walk : (ast: any (error), parent: any (error)) => any (error)
>this.getWalker(pre, post, options, state) : IAstWalker
>this.getWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => IAstWalker
>this : this
>getWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => IAstWalker
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : any
>walk : (ast: any (error), parent: any (error)) => any (error)
>ast : any (error)
>null : null
        }

        public getWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {
>getWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => IAstWalker
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : any

            return this.getSlowWalker(pre, post, options, state);
>this.getSlowWalker(pre, post, options, state) : IAstWalker
>this.getSlowWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => IAstWalker
>this : this
>getSlowWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => IAstWalker
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : any
        }

        private getSlowWalker(pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any): IAstWalker {
>getSlowWalker : (pre: IAstWalkCallback, post?: IAstWalkCallback, options?: AstWalkOptions, state?: any) => IAstWalker
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : any

            if (!options) {
>!options : boolean
>options : AstWalkOptions

                options = new AstWalkOptions();
>options = new AstWalkOptions() : AstWalkOptions
>options : AstWalkOptions
>new AstWalkOptions() : AstWalkOptions
>AstWalkOptions : typeof AstWalkOptions
            }

            return new AstWalker(this.childrenWalkers, pre, post, options, state);
>new AstWalker(this.childrenWalkers, pre, post, options, state) : AstWalker
>AstWalker : typeof AstWalker
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>pre : IAstWalkCallback
>post : IAstWalkCallback
>options : AstWalkOptions
>state : any
        }

        private initChildrenWalkers(): void {
>initChildrenWalkers : () => void

            this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.None] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.None] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.None : any (error)
>NodeType : any (error)
>None : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Empty] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Empty] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Empty : any (error)
>NodeType : any (error)
>Empty : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.EmptyExpr] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.EmptyExpr] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.EmptyExpr : any (error)
>NodeType : any (error)
>EmptyExpr : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.True] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.True] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.True : any (error)
>NodeType : any (error)
>True : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.False] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.False] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.False : any (error)
>NodeType : any (error)
>False : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.This] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.This] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.This : any (error)
>NodeType : any (error)
>This : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Super] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Super] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Super : any (error)
>NodeType : any (error)
>Super : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.QString] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.QString] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.QString : any (error)
>NodeType : any (error)
>QString : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Regex] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Regex] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Regex : any (error)
>NodeType : any (error)
>Regex : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Null] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Null] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Null : any (error)
>NodeType : any (error)
>Null : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.ArrayLit] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ArrayLit] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ArrayLit : any (error)
>NodeType : any (error)
>ArrayLit : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.ObjectLit] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ObjectLit] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ObjectLit : any (error)
>NodeType : any (error)
>ObjectLit : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Void] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Void] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Void : any (error)
>NodeType : any (error)
>Void : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Comma] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Comma] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Comma : any (error)
>NodeType : any (error)
>Comma : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Pos] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Pos] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Pos : any (error)
>NodeType : any (error)
>Pos : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Neg] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Neg] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Neg : any (error)
>NodeType : any (error)
>Neg : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Delete] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Delete] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Delete : any (error)
>NodeType : any (error)
>Delete : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Await] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Await] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Await : any (error)
>NodeType : any (error)
>Await : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.In] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.In] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.In : any (error)
>NodeType : any (error)
>In : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Dot] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Dot] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Dot : any (error)
>NodeType : any (error)
>Dot : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.From] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.From] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.From : any (error)
>NodeType : any (error)
>From : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Is] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Is] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Is : any (error)
>NodeType : any (error)
>Is : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.InstOf] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.InstOf] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.InstOf : any (error)
>NodeType : any (error)
>InstOf : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Typeof] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Typeof] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Typeof : any (error)
>NodeType : any (error)
>Typeof : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.NumberLit] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.NumberLit] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.NumberLit : any (error)
>NodeType : any (error)
>NumberLit : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Name] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Name] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Name : any (error)
>NodeType : any (error)
>Name : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren;
>this.childrenWalkers[NodeType.TypeRef] = ChildrenWalkers.walkTypeReferenceChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.TypeRef] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.TypeRef : any (error)
>NodeType : any (error)
>TypeRef : any (error)
>ChildrenWalkers.walkTypeReferenceChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkTypeReferenceChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Index] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Index] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Index : any (error)
>NodeType : any (error)
>Index : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren;
>this.childrenWalkers[NodeType.Call] = ChildrenWalkers.walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Call] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Call : any (error)
>NodeType : any (error)
>Call : any (error)
>ChildrenWalkers.walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren;
>this.childrenWalkers[NodeType.New] = ChildrenWalkers.walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.New] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.New : any (error)
>NodeType : any (error)
>New : any (error)
>ChildrenWalkers.walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Asg] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Asg] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Asg : any (error)
>NodeType : any (error)
>Asg : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgAdd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgAdd] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgAdd : any (error)
>NodeType : any (error)
>AsgAdd : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgSub] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgSub] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgSub : any (error)
>NodeType : any (error)
>AsgSub : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgDiv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgDiv] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgDiv : any (error)
>NodeType : any (error)
>AsgDiv : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgMul] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgMul] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgMul : any (error)
>NodeType : any (error)
>AsgMul : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgMod] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgMod] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgMod : any (error)
>NodeType : any (error)
>AsgMod : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgAnd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgAnd] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgAnd : any (error)
>NodeType : any (error)
>AsgAnd : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgXor] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgXor] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgXor : any (error)
>NodeType : any (error)
>AsgXor : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgOr] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgOr] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgOr : any (error)
>NodeType : any (error)
>AsgOr : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgLsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgLsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgLsh : any (error)
>NodeType : any (error)
>AsgLsh : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgRsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgRsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgRsh : any (error)
>NodeType : any (error)
>AsgRsh : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.AsgRs2] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.AsgRs2] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.AsgRs2 : any (error)
>NodeType : any (error)
>AsgRs2 : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren;
>this.childrenWalkers[NodeType.ConditionalExpression] = ChildrenWalkers.walkTrinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ConditionalExpression] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ConditionalExpression : any (error)
>NodeType : any (error)
>ConditionalExpression : any (error)
>ChildrenWalkers.walkTrinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkTrinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.LogOr] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.LogOr] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.LogOr : any (error)
>NodeType : any (error)
>LogOr : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.LogAnd] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.LogAnd] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.LogAnd : any (error)
>NodeType : any (error)
>LogAnd : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Or] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Or] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Or : any (error)
>NodeType : any (error)
>Or : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Xor] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Xor] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Xor : any (error)
>NodeType : any (error)
>Xor : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.And] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.And] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.And : any (error)
>NodeType : any (error)
>And : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Eq] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Eq] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Eq : any (error)
>NodeType : any (error)
>Eq : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Ne] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Ne] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Ne : any (error)
>NodeType : any (error)
>Ne : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Eqv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Eqv] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Eqv : any (error)
>NodeType : any (error)
>Eqv : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.NEqv] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.NEqv] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.NEqv : any (error)
>NodeType : any (error)
>NEqv : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Lt] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Lt] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Lt : any (error)
>NodeType : any (error)
>Lt : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Le] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Le] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Le : any (error)
>NodeType : any (error)
>Le : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Gt] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Gt] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Gt : any (error)
>NodeType : any (error)
>Gt : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Ge] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Ge] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Ge : any (error)
>NodeType : any (error)
>Ge : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Add] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Add] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Add : any (error)
>NodeType : any (error)
>Add : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Sub] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Sub] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Sub : any (error)
>NodeType : any (error)
>Sub : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Mul] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Mul] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Mul : any (error)
>NodeType : any (error)
>Mul : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Div] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Div] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Div : any (error)
>NodeType : any (error)
>Div : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Mod] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Mod] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Mod : any (error)
>NodeType : any (error)
>Mod : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Lsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Lsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Lsh : any (error)
>NodeType : any (error)
>Lsh : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Rsh] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Rsh] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Rsh : any (error)
>NodeType : any (error)
>Rsh : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Rs2] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Rs2] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Rs2 : any (error)
>NodeType : any (error)
>Rs2 : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Not] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Not] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Not : any (error)
>NodeType : any (error)
>Not : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.LogNot] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.LogNot] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.LogNot : any (error)
>NodeType : any (error)
>LogNot : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.IncPre] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.IncPre] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.IncPre : any (error)
>NodeType : any (error)
>IncPre : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.DecPre] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.DecPre] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.DecPre : any (error)
>NodeType : any (error)
>DecPre : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.IncPost] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.IncPost] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.IncPost : any (error)
>NodeType : any (error)
>IncPost : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.DecPost] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.DecPost] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.DecPost : any (error)
>NodeType : any (error)
>DecPost : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.TypeAssertion] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.TypeAssertion] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.TypeAssertion : any (error)
>NodeType : any (error)
>TypeAssertion : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren;
>this.childrenWalkers[NodeType.FuncDecl] = ChildrenWalkers.walkFuncDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.FuncDecl] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.FuncDecl : any (error)
>NodeType : any (error)
>FuncDecl : any (error)
>ChildrenWalkers.walkFuncDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkFuncDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren;
>this.childrenWalkers[NodeType.Member] = ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Member] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Member : any (error)
>NodeType : any (error)
>Member : any (error)
>ChildrenWalkers.walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren;
>this.childrenWalkers[NodeType.VarDecl] = ChildrenWalkers.walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.VarDecl] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.VarDecl : any (error)
>NodeType : any (error)
>VarDecl : any (error)
>ChildrenWalkers.walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren;
>this.childrenWalkers[NodeType.ArgDecl] = ChildrenWalkers.walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ArgDecl] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ArgDecl : any (error)
>NodeType : any (error)
>ArgDecl : any (error)
>ChildrenWalkers.walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren;
>this.childrenWalkers[NodeType.Return] = ChildrenWalkers.walkReturnStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Return] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Return : any (error)
>NodeType : any (error)
>Return : any (error)
>ChildrenWalkers.walkReturnStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkReturnStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Break] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Break] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Break : any (error)
>NodeType : any (error)
>Break : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Continue] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Continue] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Continue : any (error)
>NodeType : any (error)
>Continue : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren;
>this.childrenWalkers[NodeType.Throw] = ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Throw] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Throw : any (error)
>NodeType : any (error)
>Throw : any (error)
>ChildrenWalkers.walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren;
>this.childrenWalkers[NodeType.For] = ChildrenWalkers.walkForStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.For] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.For : any (error)
>NodeType : any (error)
>For : any (error)
>ChildrenWalkers.walkForStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkForStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren;
>this.childrenWalkers[NodeType.ForIn] = ChildrenWalkers.walkForInStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ForIn] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ForIn : any (error)
>NodeType : any (error)
>ForIn : any (error)
>ChildrenWalkers.walkForInStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkForInStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren;
>this.childrenWalkers[NodeType.If] = ChildrenWalkers.walkIfStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.If] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.If : any (error)
>NodeType : any (error)
>If : any (error)
>ChildrenWalkers.walkIfStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkIfStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren;
>this.childrenWalkers[NodeType.While] = ChildrenWalkers.walkWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.While] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.While : any (error)
>NodeType : any (error)
>While : any (error)
>ChildrenWalkers.walkWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren;
>this.childrenWalkers[NodeType.DoWhile] = ChildrenWalkers.walkDoWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.DoWhile] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.DoWhile : any (error)
>NodeType : any (error)
>DoWhile : any (error)
>ChildrenWalkers.walkDoWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkDoWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren;
>this.childrenWalkers[NodeType.Block] = ChildrenWalkers.walkBlockChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Block] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Block : any (error)
>NodeType : any (error)
>Block : any (error)
>ChildrenWalkers.walkBlockChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkBlockChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren;
>this.childrenWalkers[NodeType.Case] = ChildrenWalkers.walkCaseStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Case] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Case : any (error)
>NodeType : any (error)
>Case : any (error)
>ChildrenWalkers.walkCaseStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkCaseStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren;
>this.childrenWalkers[NodeType.Switch] = ChildrenWalkers.walkSwitchStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Switch] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Switch : any (error)
>NodeType : any (error)
>Switch : any (error)
>ChildrenWalkers.walkSwitchStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkSwitchStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren;
>this.childrenWalkers[NodeType.Try] = ChildrenWalkers.walkTryChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Try] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Try : any (error)
>NodeType : any (error)
>Try : any (error)
>ChildrenWalkers.walkTryChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkTryChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren;
>this.childrenWalkers[NodeType.TryCatch] = ChildrenWalkers.walkTryCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.TryCatch] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.TryCatch : any (error)
>NodeType : any (error)
>TryCatch : any (error)
>ChildrenWalkers.walkTryCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkTryCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren;
>this.childrenWalkers[NodeType.TryFinally] = ChildrenWalkers.walkTryFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.TryFinally] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.TryFinally : any (error)
>NodeType : any (error)
>TryFinally : any (error)
>ChildrenWalkers.walkTryFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkTryFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren;
>this.childrenWalkers[NodeType.Finally] = ChildrenWalkers.walkFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Finally] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Finally : any (error)
>NodeType : any (error)
>Finally : any (error)
>ChildrenWalkers.walkFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren;
>this.childrenWalkers[NodeType.Catch] = ChildrenWalkers.walkCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Catch] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Catch : any (error)
>NodeType : any (error)
>Catch : any (error)
>ChildrenWalkers.walkCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren;
>this.childrenWalkers[NodeType.List] = ChildrenWalkers.walkListChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.List] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.List : any (error)
>NodeType : any (error)
>List : any (error)
>ChildrenWalkers.walkListChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkListChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren;
>this.childrenWalkers[NodeType.Script] = ChildrenWalkers.walkScriptChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Script] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Script : any (error)
>NodeType : any (error)
>Script : any (error)
>ChildrenWalkers.walkScriptChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkScriptChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren;
>this.childrenWalkers[NodeType.ClassDeclaration] = ChildrenWalkers.walkClassDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ClassDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ClassDeclaration : any (error)
>NodeType : any (error)
>ClassDeclaration : any (error)
>ChildrenWalkers.walkClassDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkClassDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren;
>this.childrenWalkers[NodeType.InterfaceDeclaration] = ChildrenWalkers.walkTypeDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.InterfaceDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.InterfaceDeclaration : any (error)
>NodeType : any (error)
>InterfaceDeclaration : any (error)
>ChildrenWalkers.walkTypeDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkTypeDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren;
>this.childrenWalkers[NodeType.ModuleDeclaration] = ChildrenWalkers.walkModuleDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ModuleDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ModuleDeclaration : any (error)
>NodeType : any (error)
>ModuleDeclaration : any (error)
>ChildrenWalkers.walkModuleDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkModuleDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren;
>this.childrenWalkers[NodeType.ImportDeclaration] = ChildrenWalkers.walkImportDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.ImportDeclaration] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.ImportDeclaration : any (error)
>NodeType : any (error)
>ImportDeclaration : any (error)
>ChildrenWalkers.walkImportDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkImportDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren;
>this.childrenWalkers[NodeType.With] = ChildrenWalkers.walkWithStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.With] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.With : any (error)
>NodeType : any (error)
>With : any (error)
>ChildrenWalkers.walkWithStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkWithStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren;
>this.childrenWalkers[NodeType.Label] = ChildrenWalkers.walkLabelChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Label] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Label : any (error)
>NodeType : any (error)
>Label : any (error)
>ChildrenWalkers.walkLabelChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkLabelChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren;
>this.childrenWalkers[NodeType.LabeledStatement] = ChildrenWalkers.walkLabeledStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.LabeledStatement] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.LabeledStatement : any (error)
>NodeType : any (error)
>LabeledStatement : any (error)
>ChildrenWalkers.walkLabeledStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkLabeledStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.EBStart] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.EBStart] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.EBStart : any (error)
>NodeType : any (error)
>EBStart : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.GotoEB] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.GotoEB] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.GotoEB : any (error)
>NodeType : any (error)
>GotoEB : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.EndCode] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.EndCode] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.EndCode : any (error)
>NodeType : any (error)
>EndCode : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Error] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Error] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Error : any (error)
>NodeType : any (error)
>Error : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Comment] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Comment] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Comment : any (error)
>NodeType : any (error)
>Comment : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone;
>this.childrenWalkers[NodeType.Debugger] = ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>this.childrenWalkers[NodeType.Debugger] : IAstWalkChildren
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>NodeType.Debugger : any (error)
>NodeType : any (error)
>Debugger : any (error)
>ChildrenWalkers.walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>ChildrenWalkers : typeof ChildrenWalkers
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void

            // Verify the code is up to date with the enum
            for (var e in (<any>NodeType)._map) {
>e : string
>(<any>NodeType)._map : any
>(<any>NodeType) : any
><any>NodeType : any
>NodeType : any (error)
>_map : any

                if ((<any>this.childrenWalkers)[e] === undefined) {
>(<any>this.childrenWalkers)[e] === undefined : boolean
>(<any>this.childrenWalkers)[e] : any
>(<any>this.childrenWalkers) : any
><any>this.childrenWalkers : any
>this.childrenWalkers : IAstWalkChildren[]
>this : this
>childrenWalkers : IAstWalkChildren[]
>e : string
>undefined : undefined

                    throw new Error("initWalkers function is not up to date with enum content!");
>new Error("initWalkers function is not up to date with enum content!") : Error
>Error : ErrorConstructor
>"initWalkers function is not up to date with enum content!" : "initWalkers function is not up to date with enum content!"
                }
            }
        }
    }

    var globalAstWalkerFactory: AstWalkerFactory;
>globalAstWalkerFactory : AstWalkerFactory

    export function getAstWalkerFactory(): AstWalkerFactory {
>getAstWalkerFactory : () => AstWalkerFactory

        if (!globalAstWalkerFactory) {
>!globalAstWalkerFactory : boolean
>globalAstWalkerFactory : AstWalkerFactory

            globalAstWalkerFactory = new AstWalkerFactory();
>globalAstWalkerFactory = new AstWalkerFactory() : AstWalkerFactory
>globalAstWalkerFactory : AstWalkerFactory
>new AstWalkerFactory() : AstWalkerFactory
>AstWalkerFactory : typeof AstWalkerFactory
        }
        return globalAstWalkerFactory;
>globalAstWalkerFactory : AstWalkerFactory
    }

    module ChildrenWalkers {
>ChildrenWalkers : typeof ChildrenWalkers

        export function walkNone(preAst: ASTList, parent: AST, walker: IAstWalker): void {
>walkNone : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            // Nothing to do
        }

        export function walkListChildren(preAst: ASTList, parent: AST, walker: IAstWalker): void {
>walkListChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            var len = preAst.members.length;
>len : any (error)
>preAst.members.length : any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
>length : any (error)

            if (walker.options.reverseSiblings) {
>walker.options.reverseSiblings : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : boolean

                for (var i = len - 1; i >= 0; i--) {
>i : number
>len - 1 : number
>len : any (error)
>1 : 1
>i >= 0 : boolean
>i : number
>0 : 0
>i-- : number
>i : number

                    if (walker.options.goNextSibling) {
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                        preAst.members[i] = walker.walk(preAst.members[i], preAst);
>preAst.members[i] = walker.walk(preAst.members[i], preAst) : any (error)
>preAst.members[i] : any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
>i : number
>walker.walk(preAst.members[i], preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.members[i] : any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
>i : number
>preAst : any (error)
                    }
                }
            }
            else {
                for (var i = 0; i < len; i++) {
>i : number
>0 : 0
>i < len : boolean
>i : number
>len : any (error)
>i++ : number
>i : number

                    if (walker.options.goNextSibling) {
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                        preAst.members[i] = walker.walk(preAst.members[i], preAst);
>preAst.members[i] = walker.walk(preAst.members[i], preAst) : any (error)
>preAst.members[i] : any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
>i : number
>walker.walk(preAst.members[i], preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.members[i] : any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
>i : number
>preAst : any (error)
                    }
                }
            }
        }

        export function walkUnaryExpressionChildren(preAst: UnaryExpression, parent: AST, walker: IAstWalker): void {
>walkUnaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.castTerm) {
>preAst.castTerm : any (error)
>preAst : any (error)
>castTerm : any (error)

                preAst.castTerm = walker.walk(preAst.castTerm, preAst);
>preAst.castTerm = walker.walk(preAst.castTerm, preAst) : any (error)
>preAst.castTerm : any (error)
>preAst : any (error)
>castTerm : any (error)
>walker.walk(preAst.castTerm, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.castTerm : any (error)
>preAst : any (error)
>castTerm : any (error)
>preAst : any (error)
            }
            if (preAst.operand) {
>preAst.operand : any (error)
>preAst : any (error)
>operand : any (error)

                preAst.operand = walker.walk(preAst.operand, preAst);
>preAst.operand = walker.walk(preAst.operand, preAst) : any (error)
>preAst.operand : any (error)
>preAst : any (error)
>operand : any (error)
>walker.walk(preAst.operand, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand : any (error)
>preAst : any (error)
>operand : any (error)
>preAst : any (error)
            }
        }

        export function walkBinaryExpressionChildren(preAst: BinaryExpression, parent: AST, walker: IAstWalker): void {
>walkBinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (walker.options.reverseSiblings) {
>walker.options.reverseSiblings : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : boolean

                if (preAst.operand2) {
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)

                    preAst.operand2 = walker.walk(preAst.operand2, preAst);
>preAst.operand2 = walker.walk(preAst.operand2, preAst) : any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>walker.walk(preAst.operand2, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>preAst : any (error)
                }
                if ((preAst.operand1) && (walker.options.goNextSibling)) {
>(preAst.operand1) && (walker.options.goNextSibling) : boolean
>(preAst.operand1) : any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                    preAst.operand1 = walker.walk(preAst.operand1, preAst);
>preAst.operand1 = walker.walk(preAst.operand1, preAst) : any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>walker.walk(preAst.operand1, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>preAst : any (error)
                }
            } else {
                if (preAst.operand1) {
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)

                    preAst.operand1 = walker.walk(preAst.operand1, preAst);
>preAst.operand1 = walker.walk(preAst.operand1, preAst) : any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>walker.walk(preAst.operand1, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>preAst : any (error)
                }
                if ((preAst.operand2) && (walker.options.goNextSibling)) {
>(preAst.operand2) && (walker.options.goNextSibling) : boolean
>(preAst.operand2) : any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                    preAst.operand2 = walker.walk(preAst.operand2, preAst);
>preAst.operand2 = walker.walk(preAst.operand2, preAst) : any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>walker.walk(preAst.operand2, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>preAst : any (error)
                }
            }
        }

        export function walkTypeReferenceChildren(preAst: TypeReference, parent: AST, walker: IAstWalker): void {
>walkTypeReferenceChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.term) {
>preAst.term : any (error)
>preAst : any (error)
>term : any (error)

                preAst.term = walker.walk(preAst.term, preAst);
>preAst.term = walker.walk(preAst.term, preAst) : any (error)
>preAst.term : any (error)
>preAst : any (error)
>term : any (error)
>walker.walk(preAst.term, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.term : any (error)
>preAst : any (error)
>term : any (error)
>preAst : any (error)
            }
        }

        export function walkCallExpressionChildren(preAst: CallExpression, parent: AST, walker: IAstWalker): void {
>walkCallExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (!walker.options.reverseSiblings) {
>!walker.options.reverseSiblings : boolean
>walker.options.reverseSiblings : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : boolean

                preAst.target = walker.walk(preAst.target, preAst);
>preAst.target = walker.walk(preAst.target, preAst) : any (error)
>preAst.target : any (error)
>preAst : any (error)
>target : any (error)
>walker.walk(preAst.target, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.target : any (error)
>preAst : any (error)
>target : any (error)
>preAst : any (error)
            }
            if (preAst.arguments && (walker.options.goNextSibling)) {
>preAst.arguments && (walker.options.goNextSibling) : boolean
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst);
>preAst.arguments = <ASTList> walker.walk(preAst.arguments, preAst) : any (error)
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
><ASTList> walker.walk(preAst.arguments, preAst) : any (error)
>walker.walk(preAst.arguments, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
>preAst : any (error)
            }
            if ((walker.options.reverseSiblings) && (walker.options.goNextSibling)) {
>(walker.options.reverseSiblings) && (walker.options.goNextSibling) : boolean
>(walker.options.reverseSiblings) : boolean
>walker.options.reverseSiblings : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>reverseSiblings : boolean
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.target = walker.walk(preAst.target, preAst);
>preAst.target = walker.walk(preAst.target, preAst) : any (error)
>preAst.target : any (error)
>preAst : any (error)
>target : any (error)
>walker.walk(preAst.target, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.target : any (error)
>preAst : any (error)
>target : any (error)
>preAst : any (error)
            }
        }

        export function walkTrinaryExpressionChildren(preAst: ConditionalExpression, parent: AST, walker: IAstWalker): void {
>walkTrinaryExpressionChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.operand1) {
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)

                preAst.operand1 = walker.walk(preAst.operand1, preAst);
>preAst.operand1 = walker.walk(preAst.operand1, preAst) : any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>walker.walk(preAst.operand1, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand1 : any (error)
>preAst : any (error)
>operand1 : any (error)
>preAst : any (error)
            }
            if (preAst.operand2 && (walker.options.goNextSibling)) {
>preAst.operand2 && (walker.options.goNextSibling) : boolean
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.operand2 = walker.walk(preAst.operand2, preAst);
>preAst.operand2 = walker.walk(preAst.operand2, preAst) : any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>walker.walk(preAst.operand2, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand2 : any (error)
>preAst : any (error)
>operand2 : any (error)
>preAst : any (error)
            }
            if (preAst.operand3 && (walker.options.goNextSibling)) {
>preAst.operand3 && (walker.options.goNextSibling) : boolean
>preAst.operand3 : any (error)
>preAst : any (error)
>operand3 : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.operand3 = walker.walk(preAst.operand3, preAst);
>preAst.operand3 = walker.walk(preAst.operand3, preAst) : any (error)
>preAst.operand3 : any (error)
>preAst : any (error)
>operand3 : any (error)
>walker.walk(preAst.operand3, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.operand3 : any (error)
>preAst : any (error)
>operand3 : any (error)
>preAst : any (error)
            }
        }

        export function walkFuncDeclChildren(preAst: FuncDecl, parent: AST, walker: IAstWalker): void {
>walkFuncDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.name) {
>preAst.name : any (error)
>preAst : any (error)
>name : any (error)

                preAst.name = <Identifier>walker.walk(preAst.name, preAst);
>preAst.name = <Identifier>walker.walk(preAst.name, preAst) : any (error)
>preAst.name : any (error)
>preAst : any (error)
>name : any (error)
><Identifier>walker.walk(preAst.name, preAst) : any (error)
>walker.walk(preAst.name, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.name : any (error)
>preAst : any (error)
>name : any (error)
>preAst : any (error)
            }
            if (preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling)) {
>preAst.arguments && (preAst.arguments.members.length > 0) && (walker.options.goNextSibling) : boolean
>preAst.arguments && (preAst.arguments.members.length > 0) : boolean
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
>(preAst.arguments.members.length > 0) : boolean
>preAst.arguments.members.length > 0 : boolean
>preAst.arguments.members.length : any (error)
>preAst.arguments.members : any (error)
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
>members : any (error)
>length : any (error)
>0 : 0
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst);
>preAst.arguments = <ASTList>walker.walk(preAst.arguments, preAst) : any (error)
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
><ASTList>walker.walk(preAst.arguments, preAst) : any (error)
>walker.walk(preAst.arguments, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.arguments : any (error)
>preAst : any (error)
>arguments : any (error)
>preAst : any (error)
            }
            if (preAst.returnTypeAnnotation && (walker.options.goNextSibling)) {
>preAst.returnTypeAnnotation && (walker.options.goNextSibling) : boolean
>preAst.returnTypeAnnotation : any (error)
>preAst : any (error)
>returnTypeAnnotation : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst);
>preAst.returnTypeAnnotation = walker.walk(preAst.returnTypeAnnotation, preAst) : any (error)
>preAst.returnTypeAnnotation : any (error)
>preAst : any (error)
>returnTypeAnnotation : any (error)
>walker.walk(preAst.returnTypeAnnotation, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.returnTypeAnnotation : any (error)
>preAst : any (error)
>returnTypeAnnotation : any (error)
>preAst : any (error)
            }
            if (preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling)) {
>preAst.bod && (preAst.bod.members.length > 0) && (walker.options.goNextSibling) : boolean
>preAst.bod && (preAst.bod.members.length > 0) : boolean
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)
>(preAst.bod.members.length > 0) : boolean
>preAst.bod.members.length > 0 : boolean
>preAst.bod.members.length : any (error)
>preAst.bod.members : any (error)
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)
>members : any (error)
>length : any (error)
>0 : 0
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);
>preAst.bod = <ASTList>walker.walk(preAst.bod, preAst) : any (error)
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)
><ASTList>walker.walk(preAst.bod, preAst) : any (error)
>walker.walk(preAst.bod, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)
>preAst : any (error)
            }
        }

        export function walkBoundDeclChildren(preAst: BoundDecl, parent: AST, walker: IAstWalker): void {
>walkBoundDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.id) {
>preAst.id : any (error)
>preAst : any (error)
>id : any (error)

                preAst.id = <Identifier>walker.walk(preAst.id, preAst);
>preAst.id = <Identifier>walker.walk(preAst.id, preAst) : any (error)
>preAst.id : any (error)
>preAst : any (error)
>id : any (error)
><Identifier>walker.walk(preAst.id, preAst) : any (error)
>walker.walk(preAst.id, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.id : any (error)
>preAst : any (error)
>id : any (error)
>preAst : any (error)
            }
            if (preAst.init) {
>preAst.init : any (error)
>preAst : any (error)
>init : any (error)

                preAst.init = walker.walk(preAst.init, preAst);
>preAst.init = walker.walk(preAst.init, preAst) : any (error)
>preAst.init : any (error)
>preAst : any (error)
>init : any (error)
>walker.walk(preAst.init, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.init : any (error)
>preAst : any (error)
>init : any (error)
>preAst : any (error)
            }
            if ((preAst.typeExpr) && (walker.options.goNextSibling)) {
>(preAst.typeExpr) && (walker.options.goNextSibling) : boolean
>(preAst.typeExpr) : any (error)
>preAst.typeExpr : any (error)
>preAst : any (error)
>typeExpr : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.typeExpr = walker.walk(preAst.typeExpr, preAst);
>preAst.typeExpr = walker.walk(preAst.typeExpr, preAst) : any (error)
>preAst.typeExpr : any (error)
>preAst : any (error)
>typeExpr : any (error)
>walker.walk(preAst.typeExpr, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.typeExpr : any (error)
>preAst : any (error)
>typeExpr : any (error)
>preAst : any (error)
            }
        }

        export function walkReturnStatementChildren(preAst: ReturnStatement, parent: AST, walker: IAstWalker): void {
>walkReturnStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.returnExpression) {
>preAst.returnExpression : any (error)
>preAst : any (error)
>returnExpression : any (error)

                preAst.returnExpression = walker.walk(preAst.returnExpression, preAst);
>preAst.returnExpression = walker.walk(preAst.returnExpression, preAst) : any (error)
>preAst.returnExpression : any (error)
>preAst : any (error)
>returnExpression : any (error)
>walker.walk(preAst.returnExpression, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.returnExpression : any (error)
>preAst : any (error)
>returnExpression : any (error)
>preAst : any (error)
            }
        }

        export function walkForStatementChildren(preAst: ForStatement, parent: AST, walker: IAstWalker): void {
>walkForStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.init) {
>preAst.init : any (error)
>preAst : any (error)
>init : any (error)

                preAst.init = walker.walk(preAst.init, preAst);
>preAst.init = walker.walk(preAst.init, preAst) : any (error)
>preAst.init : any (error)
>preAst : any (error)
>init : any (error)
>walker.walk(preAst.init, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.init : any (error)
>preAst : any (error)
>init : any (error)
>preAst : any (error)
            }

            if (preAst.cond && walker.options.goNextSibling) {
>preAst.cond && walker.options.goNextSibling : boolean
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>walker.walk(preAst.cond, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>preAst : any (error)
            }

            if (preAst.incr && walker.options.goNextSibling) {
>preAst.incr && walker.options.goNextSibling : boolean
>preAst.incr : any (error)
>preAst : any (error)
>incr : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.incr = walker.walk(preAst.incr, preAst);
>preAst.incr = walker.walk(preAst.incr, preAst) : any (error)
>preAst.incr : any (error)
>preAst : any (error)
>incr : any (error)
>walker.walk(preAst.incr, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.incr : any (error)
>preAst : any (error)
>incr : any (error)
>preAst : any (error)
            }

            if (preAst.body && walker.options.goNextSibling) {
>preAst.body && walker.options.goNextSibling : boolean
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkForInStatementChildren(preAst: ForInStatement, parent: AST, walker: IAstWalker): void {
>walkForInStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            preAst.lval = walker.walk(preAst.lval, preAst);
>preAst.lval = walker.walk(preAst.lval, preAst) : any (error)
>preAst.lval : any (error)
>preAst : any (error)
>lval : any (error)
>walker.walk(preAst.lval, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.lval : any (error)
>preAst : any (error)
>lval : any (error)
>preAst : any (error)

            if (walker.options.goNextSibling) {
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.obj = walker.walk(preAst.obj, preAst);
>preAst.obj = walker.walk(preAst.obj, preAst) : any (error)
>preAst.obj : any (error)
>preAst : any (error)
>obj : any (error)
>walker.walk(preAst.obj, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.obj : any (error)
>preAst : any (error)
>obj : any (error)
>preAst : any (error)
            }
            if (preAst.body && (walker.options.goNextSibling)) {
>preAst.body && (walker.options.goNextSibling) : boolean
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkIfStatementChildren(preAst: IfStatement, parent: AST, walker: IAstWalker): void {
>walkIfStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>walker.walk(preAst.cond, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>preAst : any (error)

            if (preAst.thenBod && (walker.options.goNextSibling)) {
>preAst.thenBod && (walker.options.goNextSibling) : boolean
>preAst.thenBod : any (error)
>preAst : any (error)
>thenBod : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.thenBod = walker.walk(preAst.thenBod, preAst);
>preAst.thenBod = walker.walk(preAst.thenBod, preAst) : any (error)
>preAst.thenBod : any (error)
>preAst : any (error)
>thenBod : any (error)
>walker.walk(preAst.thenBod, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.thenBod : any (error)
>preAst : any (error)
>thenBod : any (error)
>preAst : any (error)
            }
            if (preAst.elseBod && (walker.options.goNextSibling)) {
>preAst.elseBod && (walker.options.goNextSibling) : boolean
>preAst.elseBod : any (error)
>preAst : any (error)
>elseBod : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.elseBod = walker.walk(preAst.elseBod, preAst);
>preAst.elseBod = walker.walk(preAst.elseBod, preAst) : any (error)
>preAst.elseBod : any (error)
>preAst : any (error)
>elseBod : any (error)
>walker.walk(preAst.elseBod, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.elseBod : any (error)
>preAst : any (error)
>elseBod : any (error)
>preAst : any (error)
            }
        }

        export function walkWhileStatementChildren(preAst: WhileStatement, parent: AST, walker: IAstWalker): void {
>walkWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>walker.walk(preAst.cond, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>preAst : any (error)

            if (preAst.body && (walker.options.goNextSibling)) {
>preAst.body && (walker.options.goNextSibling) : boolean
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkDoWhileStatementChildren(preAst: DoWhileStatement, parent: AST, walker: IAstWalker): void {
>walkDoWhileStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            preAst.cond = walker.walk(preAst.cond, preAst);
>preAst.cond = walker.walk(preAst.cond, preAst) : any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>walker.walk(preAst.cond, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.cond : any (error)
>preAst : any (error)
>cond : any (error)
>preAst : any (error)

            if (preAst.body && (walker.options.goNextSibling)) {
>preAst.body && (walker.options.goNextSibling) : boolean
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>(walker.options.goNextSibling) : boolean
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkBlockChildren(preAst: Block, parent: AST, walker: IAstWalker): void {
>walkBlockChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.statements) {
>preAst.statements : any (error)
>preAst : any (error)
>statements : any (error)

                preAst.statements = <ASTList>walker.walk(preAst.statements, preAst);
>preAst.statements = <ASTList>walker.walk(preAst.statements, preAst) : any (error)
>preAst.statements : any (error)
>preAst : any (error)
>statements : any (error)
><ASTList>walker.walk(preAst.statements, preAst) : any (error)
>walker.walk(preAst.statements, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.statements : any (error)
>preAst : any (error)
>statements : any (error)
>preAst : any (error)
            }
        }

        export function walkCaseStatementChildren(preAst: CaseStatement, parent: AST, walker: IAstWalker): void {
>walkCaseStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.expr) {
>preAst.expr : any (error)
>preAst : any (error)
>expr : any (error)

                preAst.expr = walker.walk(preAst.expr, preAst);
>preAst.expr = walker.walk(preAst.expr, preAst) : any (error)
>preAst.expr : any (error)
>preAst : any (error)
>expr : any (error)
>walker.walk(preAst.expr, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.expr : any (error)
>preAst : any (error)
>expr : any (error)
>preAst : any (error)
            }

            if (preAst.body && walker.options.goNextSibling) {
>preAst.body && walker.options.goNextSibling : boolean
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = <ASTList>walker.walk(preAst.body, preAst);
>preAst.body = <ASTList>walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
><ASTList>walker.walk(preAst.body, preAst) : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkSwitchStatementChildren(preAst: SwitchStatement, parent: AST, walker: IAstWalker): void {
>walkSwitchStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.val) {
>preAst.val : any (error)
>preAst : any (error)
>val : any (error)

                preAst.val = walker.walk(preAst.val, preAst);
>preAst.val = walker.walk(preAst.val, preAst) : any (error)
>preAst.val : any (error)
>preAst : any (error)
>val : any (error)
>walker.walk(preAst.val, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.val : any (error)
>preAst : any (error)
>val : any (error)
>preAst : any (error)
            }

            if ((preAst.caseList) && walker.options.goNextSibling) {
>(preAst.caseList) && walker.options.goNextSibling : boolean
>(preAst.caseList) : any (error)
>preAst.caseList : any (error)
>preAst : any (error)
>caseList : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst);
>preAst.caseList = <ASTList>walker.walk(preAst.caseList, preAst) : any (error)
>preAst.caseList : any (error)
>preAst : any (error)
>caseList : any (error)
><ASTList>walker.walk(preAst.caseList, preAst) : any (error)
>walker.walk(preAst.caseList, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.caseList : any (error)
>preAst : any (error)
>caseList : any (error)
>preAst : any (error)
            }
        }

        export function walkTryChildren(preAst: Try, parent: AST, walker: IAstWalker): void {
>walkTryChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.body) {
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkTryCatchChildren(preAst: TryCatch, parent: AST, walker: IAstWalker): void {
>walkTryCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.tryNode) {
>preAst.tryNode : any (error)
>preAst : any (error)
>tryNode : any (error)

                preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst);
>preAst.tryNode = <Try>walker.walk(preAst.tryNode, preAst) : any (error)
>preAst.tryNode : any (error)
>preAst : any (error)
>tryNode : any (error)
><Try>walker.walk(preAst.tryNode, preAst) : any (error)
>walker.walk(preAst.tryNode, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.tryNode : any (error)
>preAst : any (error)
>tryNode : any (error)
>preAst : any (error)
            }

            if ((preAst.catchNode) && walker.options.goNextSibling) {
>(preAst.catchNode) && walker.options.goNextSibling : boolean
>(preAst.catchNode) : any (error)
>preAst.catchNode : any (error)
>preAst : any (error)
>catchNode : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst);
>preAst.catchNode = <Catch>walker.walk(preAst.catchNode, preAst) : any (error)
>preAst.catchNode : any (error)
>preAst : any (error)
>catchNode : any (error)
><Catch>walker.walk(preAst.catchNode, preAst) : any (error)
>walker.walk(preAst.catchNode, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.catchNode : any (error)
>preAst : any (error)
>catchNode : any (error)
>preAst : any (error)
            }
        }

        export function walkTryFinallyChildren(preAst: TryFinally, parent: AST, walker: IAstWalker): void {
>walkTryFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.tryNode) {
>preAst.tryNode : any (error)
>preAst : any (error)
>tryNode : any (error)

                preAst.tryNode = walker.walk(preAst.tryNode, preAst);
>preAst.tryNode = walker.walk(preAst.tryNode, preAst) : any (error)
>preAst.tryNode : any (error)
>preAst : any (error)
>tryNode : any (error)
>walker.walk(preAst.tryNode, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.tryNode : any (error)
>preAst : any (error)
>tryNode : any (error)
>preAst : any (error)
            }

            if (preAst.finallyNode && walker.options.goNextSibling) {
>preAst.finallyNode && walker.options.goNextSibling : boolean
>preAst.finallyNode : any (error)
>preAst : any (error)
>finallyNode : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst);
>preAst.finallyNode = <Finally>walker.walk(preAst.finallyNode, preAst) : any (error)
>preAst.finallyNode : any (error)
>preAst : any (error)
>finallyNode : any (error)
><Finally>walker.walk(preAst.finallyNode, preAst) : any (error)
>walker.walk(preAst.finallyNode, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.finallyNode : any (error)
>preAst : any (error)
>finallyNode : any (error)
>preAst : any (error)
            }
        }

        export function walkFinallyChildren(preAst: Finally, parent: AST, walker: IAstWalker): void {
>walkFinallyChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.body) {
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkCatchChildren(preAst: Catch, parent: AST, walker: IAstWalker): void {
>walkCatchChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.param) {
>preAst.param : any (error)
>preAst : any (error)
>param : any (error)

                preAst.param = <VarDecl>walker.walk(preAst.param, preAst);
>preAst.param = <VarDecl>walker.walk(preAst.param, preAst) : any (error)
>preAst.param : any (error)
>preAst : any (error)
>param : any (error)
><VarDecl>walker.walk(preAst.param, preAst) : any (error)
>walker.walk(preAst.param, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.param : any (error)
>preAst : any (error)
>param : any (error)
>preAst : any (error)
            }

            if ((preAst.body) && walker.options.goNextSibling) {
>(preAst.body) && walker.options.goNextSibling : boolean
>(preAst.body) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkRecordChildren(preAst: NamedDeclaration, parent: AST, walker: IAstWalker): void {
>walkRecordChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            preAst.name = <Identifier>walker.walk(preAst.name, preAst);
>preAst.name = <Identifier>walker.walk(preAst.name, preAst) : any (error)
>preAst.name : any (error)
>preAst : any (error)
>name : any (error)
><Identifier>walker.walk(preAst.name, preAst) : any (error)
>walker.walk(preAst.name, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.name : any (error)
>preAst : any (error)
>name : any (error)
>preAst : any (error)

            if (walker.options.goNextSibling && preAst.members) {
>walker.options.goNextSibling && preAst.members : any
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)

                preAst.members = <ASTList>walker.walk(preAst.members, preAst);
>preAst.members = <ASTList>walker.walk(preAst.members, preAst) : any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
><ASTList>walker.walk(preAst.members, preAst) : any (error)
>walker.walk(preAst.members, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.members : any (error)
>preAst : any (error)
>members : any (error)
>preAst : any (error)
            }

        }

        export function walkNamedTypeChildren(preAst: TypeDeclaration, parent: AST, walker: IAstWalker): void {
>walkNamedTypeChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            walkRecordChildren(preAst, parent, walker);
>walkRecordChildren(preAst, parent, walker) : void
>walkRecordChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker
        }

        export function walkClassDeclChildren(preAst: ClassDeclaration, parent: AST, walker: IAstWalker): void {
>walkClassDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            walkNamedTypeChildren(preAst, parent, walker);
>walkNamedTypeChildren(preAst, parent, walker) : void
>walkNamedTypeChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (walker.options.goNextSibling && preAst.extendsList) {
>walker.options.goNextSibling && preAst.extendsList : any
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean
>preAst.extendsList : any (error)
>preAst : any (error)
>extendsList : any (error)

                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);
>preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst) : any (error)
>preAst.extendsList : any (error)
>preAst : any (error)
>extendsList : any (error)
><ASTList>walker.walk(preAst.extendsList, preAst) : any (error)
>walker.walk(preAst.extendsList, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.extendsList : any (error)
>preAst : any (error)
>extendsList : any (error)
>preAst : any (error)
            }

            if (walker.options.goNextSibling && preAst.implementsList) {
>walker.options.goNextSibling && preAst.implementsList : any
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean
>preAst.implementsList : any (error)
>preAst : any (error)
>implementsList : any (error)

                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);
>preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst) : any (error)
>preAst.implementsList : any (error)
>preAst : any (error)
>implementsList : any (error)
><ASTList>walker.walk(preAst.implementsList, preAst) : any (error)
>walker.walk(preAst.implementsList, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.implementsList : any (error)
>preAst : any (error)
>implementsList : any (error)
>preAst : any (error)
            }
        }

        export function walkScriptChildren(preAst: Script, parent: AST, walker: IAstWalker): void {
>walkScriptChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.bod) {
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)

                preAst.bod = <ASTList>walker.walk(preAst.bod, preAst);
>preAst.bod = <ASTList>walker.walk(preAst.bod, preAst) : any (error)
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)
><ASTList>walker.walk(preAst.bod, preAst) : any (error)
>walker.walk(preAst.bod, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.bod : any (error)
>preAst : any (error)
>bod : any (error)
>preAst : any (error)
            }
        }

        export function walkTypeDeclChildren(preAst: InterfaceDeclaration, parent: AST, walker: IAstWalker): void {
>walkTypeDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            walkNamedTypeChildren(preAst, parent, walker);
>walkNamedTypeChildren(preAst, parent, walker) : void
>walkNamedTypeChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            // walked arguments as part of members
            if (walker.options.goNextSibling && preAst.extendsList) {
>walker.options.goNextSibling && preAst.extendsList : any
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean
>preAst.extendsList : any (error)
>preAst : any (error)
>extendsList : any (error)

                preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst);
>preAst.extendsList = <ASTList>walker.walk(preAst.extendsList, preAst) : any (error)
>preAst.extendsList : any (error)
>preAst : any (error)
>extendsList : any (error)
><ASTList>walker.walk(preAst.extendsList, preAst) : any (error)
>walker.walk(preAst.extendsList, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.extendsList : any (error)
>preAst : any (error)
>extendsList : any (error)
>preAst : any (error)
            }

            if (walker.options.goNextSibling && preAst.implementsList) {
>walker.options.goNextSibling && preAst.implementsList : any
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean
>preAst.implementsList : any (error)
>preAst : any (error)
>implementsList : any (error)

                preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst);
>preAst.implementsList = <ASTList>walker.walk(preAst.implementsList, preAst) : any (error)
>preAst.implementsList : any (error)
>preAst : any (error)
>implementsList : any (error)
><ASTList>walker.walk(preAst.implementsList, preAst) : any (error)
>walker.walk(preAst.implementsList, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.implementsList : any (error)
>preAst : any (error)
>implementsList : any (error)
>preAst : any (error)
            }
        }

        export function walkModuleDeclChildren(preAst: ModuleDeclaration, parent: AST, walker: IAstWalker): void {
>walkModuleDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            walkRecordChildren(preAst, parent, walker);
>walkRecordChildren(preAst, parent, walker) : void
>walkRecordChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker
        }

        export function walkImportDeclChildren(preAst: ImportDeclaration, parent: AST, walker: IAstWalker): void {
>walkImportDeclChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.id) {
>preAst.id : any (error)
>preAst : any (error)
>id : any (error)

                preAst.id = <Identifier>walker.walk(preAst.id, preAst);
>preAst.id = <Identifier>walker.walk(preAst.id, preAst) : any (error)
>preAst.id : any (error)
>preAst : any (error)
>id : any (error)
><Identifier>walker.walk(preAst.id, preAst) : any (error)
>walker.walk(preAst.id, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.id : any (error)
>preAst : any (error)
>id : any (error)
>preAst : any (error)
            }
            if (preAst.alias) {
>preAst.alias : any (error)
>preAst : any (error)
>alias : any (error)

                preAst.alias = walker.walk(preAst.alias, preAst);
>preAst.alias = walker.walk(preAst.alias, preAst) : any (error)
>preAst.alias : any (error)
>preAst : any (error)
>alias : any (error)
>walker.walk(preAst.alias, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.alias : any (error)
>preAst : any (error)
>alias : any (error)
>preAst : any (error)
            }
        }

        export function walkWithStatementChildren(preAst: WithStatement, parent: AST, walker: IAstWalker): void {
>walkWithStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            if (preAst.expr) {
>preAst.expr : any (error)
>preAst : any (error)
>expr : any (error)

                preAst.expr = walker.walk(preAst.expr, preAst);
>preAst.expr = walker.walk(preAst.expr, preAst) : any (error)
>preAst.expr : any (error)
>preAst : any (error)
>expr : any (error)
>walker.walk(preAst.expr, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.expr : any (error)
>preAst : any (error)
>expr : any (error)
>preAst : any (error)
            }

            if (preAst.body && walker.options.goNextSibling) {
>preAst.body && walker.options.goNextSibling : boolean
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.body = walker.walk(preAst.body, preAst);
>preAst.body = walker.walk(preAst.body, preAst) : any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>walker.walk(preAst.body, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.body : any (error)
>preAst : any (error)
>body : any (error)
>preAst : any (error)
            }
        }

        export function walkLabelChildren(preAst: Label, parent: AST, walker: IAstWalker): void {
>walkLabelChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            //TODO: Walk "id"?
        }

        export function walkLabeledStatementChildren(preAst: LabeledStatement, parent: AST, walker: IAstWalker): void {
>walkLabeledStatementChildren : (preAst: any (error), parent: any (error), walker: IAstWalker) => void
>preAst : any (error)
>parent : any (error)
>walker : IAstWalker

            preAst.labels = <ASTList>walker.walk(preAst.labels, preAst);
>preAst.labels = <ASTList>walker.walk(preAst.labels, preAst) : any (error)
>preAst.labels : any (error)
>preAst : any (error)
>labels : any (error)
><ASTList>walker.walk(preAst.labels, preAst) : any (error)
>walker.walk(preAst.labels, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.labels : any (error)
>preAst : any (error)
>labels : any (error)
>preAst : any (error)

            if (walker.options.goNextSibling) {
>walker.options.goNextSibling : boolean
>walker.options : AstWalkOptions
>walker : IAstWalker
>options : AstWalkOptions
>goNextSibling : boolean

                preAst.stmt = walker.walk(preAst.stmt, preAst);
>preAst.stmt = walker.walk(preAst.stmt, preAst) : any (error)
>preAst.stmt : any (error)
>preAst : any (error)
>stmt : any (error)
>walker.walk(preAst.stmt, preAst) : any (error)
>walker.walk : (ast: any (error), parent: any (error)) => any (error)
>walker : IAstWalker
>walk : (ast: any (error), parent: any (error)) => any (error)
>preAst.stmt : any (error)
>preAst : any (error)
>stmt : any (error)
>preAst : any (error)
            }
        }
    }
}
