//// [tests/cases/compiler/strictInstanceOfTypeParametersWithLocalTypeReferences.ts] ////

=== strictInstanceOfTypeParametersWithLocalTypeReferences.ts ===
class Box<T> {
>Box : Symbol(Box, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 0))
>T : Symbol(T, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 10))

    value: T;
>value : Symbol(Box.value, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 14))
>T : Symbol(T, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 10))
}

class BoxBox<T, B extends Box<T>> {
>BoxBox : Symbol(BoxBox, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 2, 1))
>T : Symbol(T, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 13))
>B : Symbol(B, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 15))
>Box : Symbol(Box, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 0))
>T : Symbol(T, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 13))

    box: B;
>box : Symbol(BoxBox.box, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 35))
>B : Symbol(B, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 15))
}

declare const bb: any;
>bb : Symbol(bb, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 8, 13))

if (bb instanceof BoxBox) {
>bb : Symbol(bb, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 8, 13))
>BoxBox : Symbol(BoxBox, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 2, 1))

    bb.box.value;
>bb.box.value : Symbol(Box.value, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 14))
>bb.box : Symbol(BoxBox.box, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 35))
>bb : Symbol(bb, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 8, 13))
>box : Symbol(BoxBox.box, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 4, 35))
>value : Symbol(Box.value, Decl(strictInstanceOfTypeParametersWithLocalTypeReferences.ts, 0, 14))
}

