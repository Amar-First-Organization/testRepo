//// [tests/cases/compiler/reverseMappedTypeLimitedConstraintWithIntersection1.ts] ////

=== reverseMappedTypeLimitedConstraintWithIntersection1.ts ===
type StateConfig<TAction extends string> = {
>StateConfig : StateConfig<TAction>

  entry?: TAction
>entry : TAction | undefined

  states?: Record<string, StateConfig<TAction>>;
>states : Record<string, StateConfig<TAction>> | undefined

};

declare function createMachine<
>createMachine : <TConfig extends StateConfig<TAction>, TAction extends string = TConfig["entry"] extends string ? TConfig["entry"] : string>(config: { [K in keyof TConfig & keyof StateConfig<any>]: TConfig[K]; }) => [TAction, TConfig]

  TConfig extends StateConfig<TAction>,
  TAction extends string = TConfig["entry"] extends string ? TConfig["entry"] : string,
>(config: { [K in keyof TConfig & keyof StateConfig<any>]: TConfig[K] }): [TAction, TConfig];
>config : { [K in keyof TConfig & keyof StateConfig<any>]: TConfig[K]; }

const inferredParams1 = createMachine({
>inferredParams1 : ["foo", StateConfig<"foo">]
>createMachine({  entry: "foo",  states: {    a: {      entry: "bar",    },  },  extra: 12,}) : ["foo", StateConfig<"foo">]
>createMachine : <TConfig extends StateConfig<TAction>, TAction extends string = TConfig["entry"] extends string ? TConfig["entry"] : string>(config: { [K in keyof TConfig & keyof StateConfig<any>]: TConfig[K]; }) => [TAction, TConfig]
>{  entry: "foo",  states: {    a: {      entry: "bar",    },  },  extra: 12,} : { entry: "foo"; states: { a: { entry: "bar"; }; }; extra: number; }

  entry: "foo",
>entry : "foo"
>"foo" : "foo"

  states: {
>states : { a: { entry: "bar"; }; }
>{    a: {      entry: "bar",    },  } : { a: { entry: "bar"; }; }

    a: {
>a : { entry: "bar"; }
>{      entry: "bar",    } : { entry: "bar"; }

      entry: "bar",
>entry : "bar"
>"bar" : "bar"

    },
  },
  extra: 12,
>extra : number
>12 : 12

});

const inferredParams2 = createMachine({
>inferredParams2 : ["foo", { entry: "foo"; states: { a: { entry: "foo"; }; }; }]
>createMachine({  entry: "foo",  states: {    a: {      entry: "foo",    },  },  extra: 12,}) : ["foo", { entry: "foo"; states: { a: { entry: "foo"; }; }; }]
>createMachine : <TConfig extends StateConfig<TAction>, TAction extends string = TConfig["entry"] extends string ? TConfig["entry"] : string>(config: { [K in keyof TConfig & keyof StateConfig<any>]: TConfig[K]; }) => [TAction, TConfig]
>{  entry: "foo",  states: {    a: {      entry: "foo",    },  },  extra: 12,} : { entry: "foo"; states: { a: { entry: "foo"; }; }; extra: number; }

  entry: "foo",
>entry : "foo"
>"foo" : "foo"

  states: {
>states : { a: { entry: "foo"; }; }
>{    a: {      entry: "foo",    },  } : { a: { entry: "foo"; }; }

    a: {
>a : { entry: "foo"; }
>{      entry: "foo",    } : { entry: "foo"; }

      entry: "foo",
>entry : "foo"
>"foo" : "foo"

    },
  },
  extra: 12,
>extra : number
>12 : 12

});


// -----------------------------------------------------------------------------------------

const checkType = <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value;
>checkType : <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
><T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value : <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
><U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value : <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
>value : { [K in keyof U & keyof T]: U[K]; }
>value : { [K in keyof U & keyof T]: U[K]; }

const checked = checkType<{x: number, y: string}>()({
>checked : { x: number; y: "y"; }
>checkType<{x: number, y: string}>()({  x: 1 as number,  y: "y",  z: "z", // undesirable property z is *not* allowed}) : { x: number; y: "y"; }
>checkType<{x: number, y: string}>() : <U extends { x: number; y: string; }>(value: { [K in keyof U & ("x" | "y")]: U[K]; }) => { [K in keyof U & ("x" | "y")]: U[K]; }
>checkType : <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
>x : number
>y : string
>{  x: 1 as number,  y: "y",  z: "z", // undesirable property z is *not* allowed} : { x: number; y: "y"; z: string; }

  x: 1 as number,
>x : number
>1 as number : number
>1 : 1

  y: "y",
>y : "y"
>"y" : "y"

  z: "z", // undesirable property z is *not* allowed
>z : string
>"z" : "z"

});

// -----------------------------------------------------------------------------------------

interface Stuff {
    field: number;
>field : number

    anotherField: string;
>anotherField : string
}

function doStuffWithStuff<T extends Stuff>(s: { [K in keyof T & keyof Stuff]: T[K] } ): T {
>doStuffWithStuff : <T extends Stuff>(s: { [K in keyof T & keyof Stuff]: T[K]; }) => T
>s : { [K in keyof T & keyof Stuff]: T[K]; }

    if(Math.random() > 0.5) {
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

      return s as T
>s as T : T
>s : { [K in keyof T & keyof Stuff]: T[K]; }

    } else {
      return s
>s : { [K in keyof T & keyof Stuff]: T[K]; }
    }
}

const stuff1 = doStuffWithStuff({ field: 1, anotherField: 'a', extra: 123 })
>stuff1 : { field: 1; anotherField: "a"; }
>doStuffWithStuff({ field: 1, anotherField: 'a', extra: 123 }) : { field: 1; anotherField: "a"; }
>doStuffWithStuff : <T extends Stuff>(s: { [K in keyof T & keyof Stuff]: T[K]; }) => T
>{ field: 1, anotherField: 'a', extra: 123 } : { field: 1; anotherField: "a"; extra: number; }
>field : 1
>1 : 1
>anotherField : "a"
>'a' : "a"
>extra : number
>123 : 123

function doStuffWithStuffArr<T extends Stuff>(arr: { [K in keyof T & keyof Stuff]: T[K] }[]): T[] {
>doStuffWithStuffArr : <T extends Stuff>(arr: { [K in keyof T & keyof Stuff]: T[K]; }[]) => T[]
>arr : { [K in keyof T & keyof Stuff]: T[K]; }[]

    if(Math.random() > 0.5) {
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

      return arr as T[]
>arr as T[] : T[]
>arr : { [K in keyof T & keyof Stuff]: T[K]; }[]

    } else {
      return arr
>arr : { [K in keyof T & keyof Stuff]: T[K]; }[]
    }
}

const stuff2 = doStuffWithStuffArr([
>stuff2 : { field: 1; anotherField: "a"; }[]
>doStuffWithStuffArr([    { field: 1, anotherField: 'a', extra: 123 },]) : { field: 1; anotherField: "a"; }[]
>doStuffWithStuffArr : <T extends Stuff>(arr: { [K in keyof T & keyof Stuff]: T[K]; }[]) => T[]
>[    { field: 1, anotherField: 'a', extra: 123 },] : { field: 1; anotherField: "a"; extra: number; }[]

    { field: 1, anotherField: 'a', extra: 123 },
>{ field: 1, anotherField: 'a', extra: 123 } : { field: 1; anotherField: "a"; extra: number; }
>field : 1
>1 : 1
>anotherField : "a"
>'a' : "a"
>extra : number
>123 : 123

])

// -----------------------------------------------------------------------------------------

type XNumber = { x: number }
>XNumber : { x: number; }
>x : number

declare function foo<T extends XNumber>(props: {[K in keyof T & keyof XNumber]: T[K]}): T;
>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => T
>props : { [K in keyof T & "x"]: T[K]; }

function bar(props: {x: number, y: string}) {
>bar : (props: {    x: number;    y: string;}) => { x: number; }
>props : { x: number; y: string; }
>x : number
>y : string

  return foo(props); // no error because lack of excess property check by design
>foo(props) : { x: number; }
>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => T
>props : { x: number; y: string; }
}

const foo1 = foo({x: 1, y: 'foo'});
>foo1 : { x: 1; }
>foo({x: 1, y: 'foo'}) : { x: 1; }
>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => T
>{x: 1, y: 'foo'} : { x: 1; y: string; }
>x : 1
>1 : 1
>y : string
>'foo' : "foo"

const foo2 = foo({...{x: 1, y: 'foo'}}); // no error because lack of excess property check by design
>foo2 : { x: 1; }
>foo({...{x: 1, y: 'foo'}}) : { x: 1; }
>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => T
>{...{x: 1, y: 'foo'}} : { x: 1; y: string; }
>{x: 1, y: 'foo'} : { x: 1; y: string; }
>x : 1
>1 : 1
>y : string
>'foo' : "foo"

// -----------------------------------------------------------------------------------------

type NoErrWithOptProps = { x: number, y?: string }
>NoErrWithOptProps : { x: number; y?: string | undefined; }
>x : number
>y : string | undefined

declare function baz<T extends NoErrWithOptProps>(props: {[K in keyof T & keyof NoErrWithOptProps]: T[K]}): T;
>baz : <T extends NoErrWithOptProps>(props: { [K in keyof T & keyof NoErrWithOptProps]: T[K]; }) => T
>props : { [K in keyof T & keyof NoErrWithOptProps]: T[K]; }

const baz1 = baz({x: 1});
>baz1 : { x: 1; }
>baz({x: 1}) : { x: 1; }
>baz : <T extends NoErrWithOptProps>(props: { [K in keyof T & keyof NoErrWithOptProps]: T[K]; }) => T
>{x: 1} : { x: 1; }
>x : 1
>1 : 1

const baz2 = baz({x: 1, z: 123});
>baz2 : { x: 1; }
>baz({x: 1, z: 123}) : { x: 1; }
>baz : <T extends NoErrWithOptProps>(props: { [K in keyof T & keyof NoErrWithOptProps]: T[K]; }) => T
>{x: 1, z: 123} : { x: 1; z: number; }
>x : 1
>1 : 1
>z : number
>123 : 123

const baz3 = baz({x: 1, y: 'foo'});
>baz3 : { x: 1; y: "foo"; }
>baz({x: 1, y: 'foo'}) : { x: 1; y: "foo"; }
>baz : <T extends NoErrWithOptProps>(props: { [K in keyof T & keyof NoErrWithOptProps]: T[K]; }) => T
>{x: 1, y: 'foo'} : { x: 1; y: "foo"; }
>x : 1
>1 : 1
>y : "foo"
>'foo' : "foo"

const baz4 = baz({x: 1, y: 'foo', z: 123});
>baz4 : { x: 1; y: "foo"; }
>baz({x: 1, y: 'foo', z: 123}) : { x: 1; y: "foo"; }
>baz : <T extends NoErrWithOptProps>(props: { [K in keyof T & keyof NoErrWithOptProps]: T[K]; }) => T
>{x: 1, y: 'foo', z: 123} : { x: 1; y: "foo"; z: number; }
>x : 1
>1 : 1
>y : "foo"
>'foo' : "foo"
>z : number
>123 : 123

// -----------------------------------------------------------------------------------------

interface WithNestedProp {
  prop: string;
>prop : string

  nested: {
>nested : { prop: string; }

    prop: string;
>prop : string
  }
}

declare function withNestedProp<T extends WithNestedProp>(props: {[K in keyof T & keyof WithNestedProp]: T[K]}): T;
>withNestedProp : <T extends WithNestedProp>(props: { [K in keyof T & keyof WithNestedProp]: T[K]; }) => T
>props : { [K in keyof T & keyof WithNestedProp]: T[K]; }

const wnp = withNestedProp({prop: 'foo', nested: { prop: 'bar' }, extra: 10 });
>wnp : { prop: "foo"; nested: { prop: string; }; }
>withNestedProp({prop: 'foo', nested: { prop: 'bar' }, extra: 10 }) : { prop: "foo"; nested: { prop: string; }; }
>withNestedProp : <T extends WithNestedProp>(props: { [K in keyof T & keyof WithNestedProp]: T[K]; }) => T
>{prop: 'foo', nested: { prop: 'bar' }, extra: 10 } : { prop: "foo"; nested: { prop: string; }; extra: number; }
>prop : "foo"
>'foo' : "foo"
>nested : { prop: string; }
>{ prop: 'bar' } : { prop: string; }
>prop : string
>'bar' : "bar"
>extra : number
>10 : 10

// -----------------------------------------------------------------------------------------

type IsLiteralString<T extends string> = string extends T ? false : true;
>IsLiteralString : IsLiteralString<T>
>false : false
>true : true

interface ProvidedActor {
  src: string;
>src : string

  logic: () => Promise<unknown>;
>logic : () => Promise<unknown>
}

type DistributeActors<TActor> = TActor extends { src: infer TSrc }
>DistributeActors : DistributeActors<TActor>
>src : TSrc

  ? {
      src: TSrc;
>src : TSrc
    }
  : never;

interface MachineConfig<TActor extends ProvidedActor> {
  types?: {
>types : { actors?: TActor | undefined; } | undefined

    actors?: TActor;
>actors : TActor | undefined

  };
  invoke: IsLiteralString<TActor["src"]> extends true
>invoke : IsLiteralString<TActor["src"]> extends true ? DistributeActors<TActor> : { src: string; }
>true : true

    ? DistributeActors<TActor>
    : {
        src: string;
>src : string

      };
}

declare function createXMachine<
>createXMachine : <const TConfig extends MachineConfig<TActor>, TActor extends ProvidedActor = TConfig extends { types: {    actors: ProvidedActor;}; } ? TConfig["types"]["actors"] : ProvidedActor>(config: { [K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K]; }) => TConfig

  const TConfig extends MachineConfig<TActor>,
  TActor extends ProvidedActor = TConfig extends { types: { actors: ProvidedActor} } ? TConfig["types"]["actors"] : ProvidedActor,
>types : { actors: ProvidedActor; }
>actors : ProvidedActor

>(config: {[K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K] }): TConfig;
>config : { [K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K]; }

const child = () => Promise.resolve("foo");
>child : () => Promise<string>
>() => Promise.resolve("foo") : () => Promise<string>
>Promise.resolve("foo") : Promise<string>
>Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T_1>(value: T_1 | PromiseLike<T_1>): Promise<Awaited<T_1>>; }
>Promise : PromiseConstructor
>resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T_1>(value: T_1 | PromiseLike<T_1>): Promise<Awaited<T_1>>; }
>"foo" : "foo"

const config = createXMachine({
>config : { types: { actors: {    src: "str";    logic: typeof child;}; }; invoke: { readonly src: "str"; }; }
>createXMachine({  types: {} as {    actors: {      src: "str";      logic: typeof child;    };  },  invoke: {    src: "str",  },  extra: 10}) : { types: { actors: {    src: "str";    logic: typeof child;}; }; invoke: { readonly src: "str"; }; }
>createXMachine : <const TConfig extends MachineConfig<TActor>, TActor extends ProvidedActor = TConfig extends { types: { actors: ProvidedActor; }; } ? TConfig["types"]["actors"] : ProvidedActor>(config: { [K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K]; }) => TConfig
>{  types: {} as {    actors: {      src: "str";      logic: typeof child;    };  },  invoke: {    src: "str",  },  extra: 10} : { types: { actors: {    src: "str";    logic: typeof child;}; }; invoke: { src: "str"; }; extra: number; }

  types: {} as {
>types : { actors: {    src: "str";    logic: typeof child;}; }
>{} as {    actors: {      src: "str";      logic: typeof child;    };  } : { actors: {    src: "str";    logic: typeof child;}; }
>{} : {}

    actors: {
>actors : { src: "str"; logic: typeof child; }

      src: "str";
>src : "str"

      logic: typeof child;
>logic : () => Promise<string>
>child : () => Promise<string>

    };
  },
  invoke: {
>invoke : { src: "str"; }
>{    src: "str",  } : { src: "str"; }

    src: "str",
>src : "str"
>"str" : "str"

  },
  extra: 10
>extra : number
>10 : 10

});

const config2 = createXMachine({
>config2 : { invoke: { readonly src: "whatever"; }; }
>createXMachine({  invoke: {    src: "whatever",  },  extra: 10}) : { invoke: { readonly src: "whatever"; }; }
>createXMachine : <const TConfig extends MachineConfig<TActor>, TActor extends ProvidedActor = TConfig extends { types: { actors: ProvidedActor; }; } ? TConfig["types"]["actors"] : ProvidedActor>(config: { [K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K]; }) => TConfig
>{  invoke: {    src: "whatever",  },  extra: 10} : { invoke: { src: "whatever"; }; extra: number; }

  invoke: {
>invoke : { src: "whatever"; }
>{    src: "whatever",  } : { src: "whatever"; }

    src: "whatever",
>src : "whatever"
>"whatever" : "whatever"

  },
  extra: 10
>extra : number
>10 : 10

});

declare function fn1<T extends Record<string, number>>(obj: {
>fn1 : <T extends Record<string, number>>(obj: { [K in keyof T & "a"]: T[K]; }) => T
>obj : { [K in keyof T & "a"]: T[K]; }

  [K in keyof T & "a"]: T[K];
}): T;
const obj1 = {
>obj1 : { a: number; b: boolean; }
>{  a: 42,  b: true,} : { a: number; b: boolean; }

  a: 42,
>a : number
>42 : 42

  b: true,
>b : boolean
>true : true

};
const result1 = fn1(obj1);
>result1 : { a: number; }
>fn1(obj1) : { a: number; }
>fn1 : <T extends Record<string, number>>(obj: { [K in keyof T & "a"]: T[K]; }) => T
>obj1 : { a: number; b: boolean; }

declare function fn2<T extends Record<string, number>>(obj: {
>fn2 : <T extends Record<string, number>>(obj: { [K in "b" | (keyof T & "a")]: T[K]; }) => T
>obj : { [K in "b" | (keyof T & "a")]: T[K]; }

  [K in (keyof T & "a") | "b"]: T[K];
}): T;
const obj2 = {
>obj2 : { a: number; b: number; c: boolean; }
>{  a: 42,  b: 100,  c: true,} : { a: number; b: number; c: boolean; }

  a: 42,
>a : number
>42 : 42

  b: 100,
>b : number
>100 : 100

  c: true,
>c : boolean
>true : true

};
const result2 = fn2(obj2);
>result2 : { a: number; b: number; }
>fn2(obj2) : { a: number; b: number; }
>fn2 : <T extends Record<string, number>>(obj: { [K in "b" | (keyof T & "a")]: T[K]; }) => T
>obj2 : { a: number; b: number; c: boolean; }

