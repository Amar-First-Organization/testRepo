=== tests/cases/conformance/types/typeParameters/typeArgumentLists/typeArgumentListsWithNamedTypeArguments/typeArgumentListsWithnamedTypeArguments.tsx ===
declare module JSX {
>JSX : Symbol(JSX, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 0, 0))

    interface Element {}
>Element : Symbol(Element, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 0, 20))
}
declare namespace React {
>React : Symbol(React, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 2, 1))

    export function createElement(x: any, p: any, ...children: any[]): JSX.Element;
>createElement : Symbol(createElement, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 3, 25))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 4, 34))
>p : Symbol(p, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 4, 41))
>children : Symbol(children, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 4, 49))
>JSX : Symbol(JSX, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 0, 0))
>Element : Symbol(JSX.Element, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 0, 20))
}

class Foo<T, U> {
>Foo : Symbol(Foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 5, 1))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 7, 10))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 7, 12))

    constructor(public prop1: T, public prop2: U) {}
>prop1 : Symbol(Foo.prop1, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 8, 16))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 7, 10))
>prop2 : Symbol(Foo.prop2, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 8, 32))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 7, 12))
}

function foo<T, U>(x: T, y: U): [T, U] { return [x, y]; }
>foo : Symbol(foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 9, 1))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 13))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 15))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 19))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 13))
>y : Symbol(y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 24))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 15))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 13))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 15))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 19))
>y : Symbol(y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 24))

function tag<T, U>(x: TemplateStringsArray, ...args: (T | U)[]) { return args; }
>tag : Symbol(tag, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 57))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 13))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 15))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 19))
>TemplateStringsArray : Symbol(TemplateStringsArray, Decl(lib.d.ts, --, --))
>args : Symbol(args, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 43))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 13))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 15))
>args : Symbol(args, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 43))

interface ComponentProps<T, U> {
>ComponentProps : Symbol(ComponentProps, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 80))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 25))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 27))

    x: T;
>x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 25))

    y: U;
>y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 27))

    cb(props: this): void;
>cb : Symbol(ComponentProps.cb, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 17, 9))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 18, 7))
}

function Component<T, U>(x: ComponentProps<T, U>) {
>Component : Symbol(Component, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 19, 1))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 21, 19))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 21, 21))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 21, 25))
>ComponentProps : Symbol(ComponentProps, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 13, 80))
>T : Symbol(T, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 21, 19))
>U : Symbol(U, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 21, 21))

    return <h></h>;
}

// In order

const instance1 = new Foo<T = number, U = string>(0, "");
>instance1 : Symbol(instance1, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 27, 5))
>Foo : Symbol(Foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 5, 1))

const result1 = foo<T = number, U = string>(0, "");
>result1 : Symbol(result1, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 28, 5))
>foo : Symbol(foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 9, 1))

const tagged1 = tag<T = number, U = string>`tags ${12} ${""}`;
>tagged1 : Symbol(tagged1, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 29, 5))
>tag : Symbol(tag, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 57))

const jsx1 = <Component<T = number, U = string> x={12} y="" cb={props => void (props.x.toFixed() + props.y.toUpperCase())} />;
>jsx1 : Symbol(jsx1, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 5))
>Component : Symbol(Component, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 19, 1))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 47))
>y : Symbol(y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 54))
>cb : Symbol(cb, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 59))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 64))
>props.x.toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 64))
>x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.y.toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))
>props.y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 30, 64))
>y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))

// Out of order

const instance2 = new Foo<U = string, T = number>(0, "");
>instance2 : Symbol(instance2, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 34, 5))
>Foo : Symbol(Foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 5, 1))

const result2 = foo<U = string, T = number>(0, "");
>result2 : Symbol(result2, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 35, 5))
>foo : Symbol(foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 9, 1))

const tagged2 = tag<U = string, T = number>`tags ${12} ${""}`;
>tagged2 : Symbol(tagged2, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 36, 5))
>tag : Symbol(tag, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 57))

const jsx2 = <Component<U = string, T = number> x={12} y="" cb={props => void (props.x.toFixed() + props.y.toUpperCase())} />;
>jsx2 : Symbol(jsx2, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 5))
>Component : Symbol(Component, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 19, 1))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 47))
>y : Symbol(y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 54))
>cb : Symbol(cb, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 59))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 64))
>props.x.toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 64))
>x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.y.toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))
>props.y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 37, 64))
>y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))

// With positional

const instance3 = new Foo<number, U = string>(0, "");
>instance3 : Symbol(instance3, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 41, 5))
>Foo : Symbol(Foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 5, 1))

const result3 = foo<number, U = string>(0, "");
>result3 : Symbol(result3, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 42, 5))
>foo : Symbol(foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 9, 1))

const tagged3 = tag<number, U = string>`tags ${12} ${""}`;
>tagged3 : Symbol(tagged3, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 43, 5))
>tag : Symbol(tag, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 57))

const jsx3 = <Component<number, U = string> x={12} y="" cb={props => void (props.x.toFixed() + props.y.toUpperCase())} />;
>jsx3 : Symbol(jsx3, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 5))
>Component : Symbol(Component, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 19, 1))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 43))
>y : Symbol(y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 50))
>cb : Symbol(cb, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 55))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 60))
>props.x.toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 60))
>x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.y.toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))
>props.y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 44, 60))
>y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))

// With partial inference

const instance4 = new Foo<U = string>(0, "");
>instance4 : Symbol(instance4, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 48, 5))
>Foo : Symbol(Foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 5, 1))

const result4 = foo<U = string>(0, "");
>result4 : Symbol(result4, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 49, 5))
>foo : Symbol(foo, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 9, 1))

const tagged4 = tag<U = string>`tags ${12} ${""}`;
>tagged4 : Symbol(tagged4, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 50, 5))
>tag : Symbol(tag, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 11, 57))

const jsx4 = <Component<U = string> x={12} y="" cb={props => void (props.x.toFixed() + props.y.toUpperCase())} />;
>jsx4 : Symbol(jsx4, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 5))
>Component : Symbol(Component, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 19, 1))
>x : Symbol(x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 35))
>y : Symbol(y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 42))
>cb : Symbol(cb, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 47))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 52))
>props.x.toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 52))
>x : Symbol(ComponentProps.x, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 15, 32))
>toFixed : Symbol(Number.toFixed, Decl(lib.d.ts, --, --))
>props.y.toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))
>props.y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>props : Symbol(props, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 51, 52))
>y : Symbol(ComponentProps.y, Decl(typeArgumentListsWithnamedTypeArguments.tsx, 16, 9))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.d.ts, --, --))

