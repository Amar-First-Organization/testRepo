//// [tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument2.ts] ////

=== genericTypeReferenceWithoutTypeArgument2.ts ===
// it is an error to use a generic type without type arguments
// all of these are errors 

interface I<T> {
    foo: T;
>foo : T
>    : ^
}

var c: I;
>c : I
>  : ^

var a: { x: I };
>a : { x: I; }
>  : ^^^^^ ^^^
>x : I
>  : ^

var b: { (x: I): I };
>b : (x: I) => I
>  : ^ ^^ ^^^^^ 
>x : I
>  : ^

var d: { [x: I]: I };
>d : {}
>  : ^^
>x : I
>  : ^

var e = (x: I) => { var y: I; return y; }
>e : (x: I) => I
>  : ^ ^^ ^^^^^^
>(x: I) => { var y: I; return y; } : (x: I) => I
>                                  : ^ ^^ ^^^^^^
>x : I
>  : ^
>y : I
>  : ^
>y : I
>  : ^

function f(x: I): I { var y: I; return y; }
>f : (x: I) => I
>  : ^ ^^ ^^^^^ 
>x : I
>  : ^
>y : I
>  : ^
>y : I
>  : ^

var g = function f(x: I): I { var y: I; return y; }
>g : (x: I) => I
>  : ^ ^^ ^^^^^ 
>function f(x: I): I { var y: I; return y; } : (x: I) => I
>                                            : ^ ^^ ^^^^^ 
>f : (x: I) => I
>  : ^ ^^ ^^^^^ 
>x : I
>  : ^
>y : I
>  : ^
>y : I
>  : ^

class D extends I {
>D : D
>  : ^
>I : any
>  : ^^^
}

interface U extends I {}

module M {
    export interface E<T> { foo: T }
>foo : T
>    : ^
}

class D2 extends M.C { }
>D2 : D2
>   : ^^
>M.C : any
>    : ^^^
>M : any
>  : ^^^
>C : any
>  : ^^^

interface D3<T extends M.E> { }
>M : any
>  : ^^^

interface I2 extends M.C { }
>M : any
>  : ^^^

function h<T extends I>(x: T) { }
>h : <T extends I>(x: T) => void
>  : ^ ^^^^^^^^^ ^^ ^^ ^^^^^^^^^
>x : T
>  : ^

function i<T extends M.E>(x: T) { }
>i : <T extends M.E>(x: T) => void
>  : ^ ^^^^^^^^^   ^^ ^^ ^^^^^^^^^
>M : any
>  : ^^^
>x : T
>  : ^

var j = <C>null;
>j : C
>  : ^
><C>null : C
>        : ^

var k = <M.E>null;
>k : M.E
>  : ^^^
><M.E>null : M.E
>          : ^^^
>M : any
>  : ^^^

