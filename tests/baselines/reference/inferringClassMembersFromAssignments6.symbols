=== tests/cases/conformance/salsa/inferringClassMembersFromAssignments5.js ===
function Foonly() {
>Foonly : Symbol(Foonly, Decl(inferringClassMembersFromAssignments5.js, 0, 0))

    var self = this
>self : Symbol(self, Decl(inferringClassMembersFromAssignments5.js, 1, 7))
>this : Symbol(Foonly, Decl(inferringClassMembersFromAssignments5.js, 0, 0))

    self.x = 1
>self.x : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))
>self : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))
>x : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))

    self.m = function() {
>self.m : Symbol(Foonly.m, Decl(inferringClassMembersFromAssignments5.js, 2, 14))
>self : Symbol(Foonly.m, Decl(inferringClassMembersFromAssignments5.js, 2, 14))
>m : Symbol(Foonly.m, Decl(inferringClassMembersFromAssignments5.js, 2, 14))

        console.log(self.x)
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>self.x : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))
>self : Symbol(self, Decl(inferringClassMembersFromAssignments5.js, 1, 7))
>x : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))
    }
}
const foo = new Foonly()
>foo : Symbol(foo, Decl(inferringClassMembersFromAssignments5.js, 7, 5))
>Foonly : Symbol(Foonly, Decl(inferringClassMembersFromAssignments5.js, 0, 0))

foo.x
>foo.x : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))
>foo : Symbol(foo, Decl(inferringClassMembersFromAssignments5.js, 7, 5))
>x : Symbol(Foonly.x, Decl(inferringClassMembersFromAssignments5.js, 1, 19))

foo.m()
>foo.m : Symbol(Foonly.m, Decl(inferringClassMembersFromAssignments5.js, 2, 14))
>foo : Symbol(foo, Decl(inferringClassMembersFromAssignments5.js, 7, 5))
>m : Symbol(Foonly.m, Decl(inferringClassMembersFromAssignments5.js, 2, 14))

//class Base {
    //m() {
        //this.p = 1
    //}
//}
//class Derived extends Base {
    //constructor() {
        //super();
        //// should be OK, and p should have type number from this assignment
        //this.p = 1
    //}
    //test() {
        //return this.p
    //}
//}

