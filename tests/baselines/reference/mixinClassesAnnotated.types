//// [tests/cases/conformance/classes/mixinClassesAnnotated.ts] ////

=== mixinClassesAnnotated.ts ===
type Constructor<T> = new(...args: any[]) => T;
>Constructor : Constructor<T>
>            : ^^^^^^^^^^^^^^
>args : any[]
>     : ^^^^^

class Base {
>Base : Base
>     : ^^^^

    constructor(public x: number, public y: number) {}
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    constructor(x: number, y: number, public z: number) {
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>z : number
>  : ^^^^^^

        super(x, y);
>super(x, y) : void
>            : ^^^^
>super : typeof Base
>      : ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
    }
}

interface Printable {
    print(): void;
>print : () => void
>      : ^^^^^^    
}

const Printable = <T extends Constructor<Base>>(superClass: T): Constructor<Printable> & { message: string } & T =>
>Printable : <T extends Constructor<Base>>(superClass: T) => Constructor<Printable> & { message: string; } & T
>          : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^                                                 
><T extends Constructor<Base>>(superClass: T): Constructor<Printable> & { message: string } & T =>    class extends superClass {        static message = "hello";        print() {            const output = this.x + "," + this.y;        }    } : <T extends Constructor<Base>>(superClass: T) => Constructor<Printable> & { message: string; } & T
>                                                                                                                                                                                                                                                 : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^                                                 
>superClass : T
>           : ^
>message : string
>        : ^^^^^^

    class extends superClass {
>class extends superClass {        static message = "hello";        print() {            const output = this.x + "," + this.y;        }    } : T & { new (...args: any[]): (Anonymous class); prototype: Printable<any>.(Anonymous class); message: string; }
>                                                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>superClass : Base
>           : ^^^^

        static message = "hello";
>message : string
>        : ^^^^^^
>"hello" : "hello"
>        : ^^^^^^^

        print() {
>print : () => void
>      : ^^^^^^^^^^

            const output = this.x + "," + this.y;
>output : string
>       : ^^^^^^
>this.x + "," + this.y : string
>                      : ^^^^^^
>this.x + "," : string
>             : ^^^^^^
>this.x : number
>       : ^^^^^^
>this : this
>     : ^^^^
>x : number
>  : ^^^^^^
>"," : ","
>    : ^^^
>this.y : number
>       : ^^^^^^
>this : this
>     : ^^^^
>y : number
>  : ^^^^^^
        }
    }

interface Tagged {
    _tag: string;
>_tag : string
>     : ^^^^^^
}

function Tagged<T extends Constructor<{}>>(superClass: T): Constructor<Tagged> & T {
>Tagged : <T extends Constructor<{}>>(superClass: T) => Constructor<Tagged> & T
>       : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^                       
>superClass : T
>           : ^

    class C extends superClass {
>C : C
>  : ^
>superClass : {}
>           : ^^

        _tag: string;
>_tag : string
>     : ^^^^^^

        constructor(...args: any[]) {
>args : any[]
>     : ^^^^^

            super(...args);
>super(...args) : void
>               : ^^^^
>super : T
>      : ^
>...args : any
>args : any[]
>     : ^^^^^

            this._tag = "hello";
>this._tag = "hello" : "hello"
>                    : ^^^^^^^
>this._tag : string
>          : ^^^^^^
>this : this
>     : ^^^^
>_tag : string
>     : ^^^^^^
>"hello" : "hello"
>        : ^^^^^^^
        }
    }
    return C;
>C : T & { new (...args: any[]): C; prototype: Tagged<any>.C; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

const Thing1 = Tagged(Derived);
>Thing1 : typeof Derived & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Tagged(Derived) : typeof Derived & Constructor<Tagged>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Tagged : <T extends Constructor<{}>>(superClass: T) => T & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

const Thing2 = Tagged(Printable(Derived));
>Thing2 : typeof Derived & Constructor<Printable> & { message: string; } & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Tagged(Printable(Derived)) : typeof Derived & Constructor<Printable> & { message: string; } & Constructor<Tagged>
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Tagged : <T extends Constructor<{}>>(superClass: T) => T & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Printable(Derived) : typeof Derived & Constructor<Printable> & { message: string; }
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Printable : <T extends Constructor<Base>>(superClass: T) => T & Constructor<Printable> & { message: string; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

Thing2.message;
>Thing2.message : string
>               : ^^^^^^
>Thing2 : typeof Derived & Constructor<Printable> & { message: string; } & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>message : string
>        : ^^^^^^

function f1() {
>f1 : () => void
>   : ^^^^^^^^^^

    const thing = new Thing1(1, 2, 3);
>thing : Derived & Tagged
>      : ^^^^^^^^^^^^^^^^
>new Thing1(1, 2, 3) : Derived & Tagged
>                    : ^^^^^^^^^^^^^^^^
>Thing1 : typeof Derived & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

    thing.x;
>thing.x : number
>        : ^^^^^^
>thing : Derived & Tagged
>      : ^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    thing._tag;
>thing._tag : string
>           : ^^^^^^
>thing : Derived & Tagged
>      : ^^^^^^^^^^^^^^^^
>_tag : string
>     : ^^^^^^
}

function f2() {
>f2 : () => void
>   : ^^^^^^^^^^

    const thing = new Thing2(1, 2, 3);
>thing : Derived & Printable & Tagged
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Thing2(1, 2, 3) : Derived & Printable & Tagged
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Thing2 : typeof Derived & Constructor<Printable> & { message: string; } & Constructor<Tagged>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

    thing.x;
>thing.x : number
>        : ^^^^^^
>thing : Derived & Printable & Tagged
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    thing._tag;
>thing._tag : string
>           : ^^^^^^
>thing : Derived & Printable & Tagged
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_tag : string
>     : ^^^^^^

    thing.print();
>thing.print() : void
>              : ^^^^
>thing.print : () => void
>            : ^^^^^^^^^^
>thing : Derived & Printable & Tagged
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>print : () => void
>      : ^^^^^^^^^^
}

class Thing3 extends Thing2 {
>Thing3 : Thing3
>       : ^^^^^^
>Thing2 : Printable & Tagged & Derived
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    constructor(tag: string) {
>tag : string
>    : ^^^^^^

        super(10, 20, 30);
>super(10, 20, 30) : void
>                  : ^^^^
>super : typeof Derived & Constructor<Printable> & { message: string; } & Constructor<Tagged>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>10 : 10
>   : ^^
>20 : 20
>   : ^^
>30 : 30
>   : ^^

        this._tag = tag;
>this._tag = tag : string
>                : ^^^^^^
>this._tag : string
>          : ^^^^^^
>this : this
>     : ^^^^
>_tag : string
>     : ^^^^^^
>tag : string
>    : ^^^^^^
    }
    test() {
>test : () => void
>     : ^^^^^^^^^^

        this.print();
>this.print() : void
>             : ^^^^
>this.print : () => void
>           : ^^^^^^^^^^
>this : this
>     : ^^^^
>print : () => void
>      : ^^^^^^^^^^
    }
}

