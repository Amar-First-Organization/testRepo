//// [tests/cases/compiler/referenceSatisfiesExpression.ts] ////

=== referenceSatisfiesExpression.ts ===
// checkReferenceExpression -> skip OuterExpressionKinds.SatisfiesExpressions

let a = 10;
>a : Symbol(a, Decl(referenceSatisfiesExpression.ts, 2, 3))

// checkPrefixUnaryExpression
--(a satisfies number);
>a : Symbol(a, Decl(referenceSatisfiesExpression.ts, 2, 3))

++(a satisfies number);
>a : Symbol(a, Decl(referenceSatisfiesExpression.ts, 2, 3))

// checkPostfixUnaryExpression
(a satisfies number)++;
>a : Symbol(a, Decl(referenceSatisfiesExpression.ts, 2, 3))

(a satisfies number)--;
>a : Symbol(a, Decl(referenceSatisfiesExpression.ts, 2, 3))

// checkAssignmentOperatorWorker
let b: number;
>b : Symbol(b, Decl(referenceSatisfiesExpression.ts, 12, 3))

(b satisfies number) = 10;
>b : Symbol(b, Decl(referenceSatisfiesExpression.ts, 12, 3))

// checkReferenceAssignment
let c: number;
>c : Symbol(c, Decl(referenceSatisfiesExpression.ts, 16, 3))

[(c satisfies number)] = [10];
>c : Symbol(c, Decl(referenceSatisfiesExpression.ts, 16, 3))

let d: number, e = 1;
>d : Symbol(d, Decl(referenceSatisfiesExpression.ts, 19, 3))
>e : Symbol(e, Decl(referenceSatisfiesExpression.ts, 19, 14))

({ d: (e satisfies number) } = { d: 10 });
>d : Symbol(d, Decl(referenceSatisfiesExpression.ts, 20, 2))
>e : Symbol(e, Decl(referenceSatisfiesExpression.ts, 19, 14))
>d : Symbol(d, Decl(referenceSatisfiesExpression.ts, 20, 32))

// checkForOfStatement
let g = 1
>g : Symbol(g, Decl(referenceSatisfiesExpression.ts, 23, 3))

for ((g satisfies number) of [10]) {
>g : Symbol(g, Decl(referenceSatisfiesExpression.ts, 23, 3))

  console.log(g)
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>g : Symbol(g, Decl(referenceSatisfiesExpression.ts, 23, 3))
}

// checkForInStatement
let x: string = "hello"
>x : Symbol(x, Decl(referenceSatisfiesExpression.ts, 29, 3))

for ((x satisfies string) in { a: 10 }) {
>x : Symbol(x, Decl(referenceSatisfiesExpression.ts, 29, 3))
>a : Symbol(a, Decl(referenceSatisfiesExpression.ts, 30, 30))

  console.log(x)
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>x : Symbol(x, Decl(referenceSatisfiesExpression.ts, 29, 3))
}

