=== tests/cases/compiler/narrowByBooleanComparison.ts ===
type A = { type: "A" };
>A : Symbol(A, Decl(narrowByBooleanComparison.ts, 0, 0))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 0, 10))

type B = { type: "B" };
>B : Symbol(B, Decl(narrowByBooleanComparison.ts, 0, 23))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 1, 10))

type C = { type: "C" };
>C : Symbol(C, Decl(narrowByBooleanComparison.ts, 1, 23))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 2, 10))

type MyUnion = A | B | C;
>MyUnion : Symbol(MyUnion, Decl(narrowByBooleanComparison.ts, 2, 23))
>A : Symbol(A, Decl(narrowByBooleanComparison.ts, 0, 0))
>B : Symbol(B, Decl(narrowByBooleanComparison.ts, 0, 23))
>C : Symbol(C, Decl(narrowByBooleanComparison.ts, 1, 23))

const isA = (x: MyUnion): x is A => x.type === "A";
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 5, 13))
>MyUnion : Symbol(MyUnion, Decl(narrowByBooleanComparison.ts, 2, 23))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 5, 13))
>A : Symbol(A, Decl(narrowByBooleanComparison.ts, 0, 0))
>x.type : Symbol(type, Decl(narrowByBooleanComparison.ts, 0, 10), Decl(narrowByBooleanComparison.ts, 1, 10), Decl(narrowByBooleanComparison.ts, 2, 10))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 5, 13))
>type : Symbol(type, Decl(narrowByBooleanComparison.ts, 0, 10), Decl(narrowByBooleanComparison.ts, 1, 10), Decl(narrowByBooleanComparison.ts, 2, 10))

function test1(x: MyUnion) {
>test1 : Symbol(test1, Decl(narrowByBooleanComparison.ts, 5, 51))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
>MyUnion : Symbol(MyUnion, Decl(narrowByBooleanComparison.ts, 2, 23))

    if (isA(x) !== true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) !== false) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) === false) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) === true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) != true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (isA(x) == true) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (true !== isA(x)) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }

    if (true === isA(x)) {
>isA : Symbol(isA, Decl(narrowByBooleanComparison.ts, 5, 5))
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))

        x
>x : Symbol(x, Decl(narrowByBooleanComparison.ts, 7, 15))
    }
}
