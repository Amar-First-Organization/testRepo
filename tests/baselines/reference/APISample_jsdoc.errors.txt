typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8912,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8912,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9172,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9172,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9522,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9522,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9546,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9546,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9633,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9633,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10798,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10798,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10809,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10809,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10819,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10819,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10894,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10894,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10951,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10951,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11005,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11005,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11025,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11025,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11035,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11035,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11069,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11069,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11072,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11072,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11076,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11076,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11094,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11094,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11120,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11120,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11123,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11123,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11135,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11135,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11165,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11165,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11199,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11199,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11210,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11210,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11234,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11234,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11242,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11242,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11246,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11246,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11276,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11276,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11319,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11319,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11506,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11506,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11508,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11508,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11512,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11512,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11514,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11514,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11516,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11516,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11518,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11518,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11520,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11520,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11531,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11531,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11533,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11533,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11535,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11535,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11537,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11537,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11539,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11539,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11541,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11541,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11553,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11553,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11555,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11555,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11557,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11557,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11573,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11573,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11575,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11575,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11577,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11577,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11579,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11579,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11581,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11581,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11583,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11583,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11655,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11655,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11657,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11657,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11659,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11659,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11661,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11661,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11737,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11737,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_jsdoc.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The original sources can be found
     *       at: https://github.com/YousefED/typescript-json-schema
     *           https://github.com/vega/ts-json-schema-generator
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var console: any;
    
    import * as ts from "typescript";
    
    // excerpted from https://github.com/YousefED/typescript-json-schema
    // (converted from a method and modified; for example, `this: any` to compensate, among other changes)
    function parseCommentsIntoDefinition(this: any,
                                         symbol: ts.Symbol,
                                         definition: {description?: string, [s: string]: string | undefined},
                                         otherAnnotations: { [s: string]: true}): void {
        if (!symbol) {
            return;
        }
    
        // the comments for a symbol
        let comments = symbol.getDocumentationComment(undefined);
    
        if (comments.length) {
            definition.description = comments.map(comment => comment.kind === "lineBreak" ? comment.text : comment.text.trim().replace(/\r\n/g, "\n")).join("");
        }
    
        // jsdocs are separate from comments
        const jsdocs = symbol.getJsDocTags();
        jsdocs.forEach(doc => {
            // if we have @TJS-... annotations, we have to parse them
            const { name, text } = doc;
            if (this.userValidationKeywords[name]) {
                definition[name] = this.parseValue(text);
            } else {
                // special annotations
                otherAnnotations[doc.name] = true;
            }
        });
    }
    
    
    // excerpted from https://github.com/vega/ts-json-schema-generator
    export interface Annotations {
        [name: string]: any;
    }
    function getAnnotations(this: any, node: ts.Node): Annotations | undefined {
        const symbol: ts.Symbol = (node as any).symbol;
        if (!symbol) {
            return undefined;
        }
    
        const jsDocTags: ts.JSDocTagInfo[] = symbol.getJsDocTags();
        if (!jsDocTags || !jsDocTags.length) {
            return undefined;
        }
    
        const annotations: Annotations = jsDocTags.reduce((result: Annotations, jsDocTag: ts.JSDocTagInfo) => {
            const value = this.parseJsDocTag(jsDocTag);
            if (value !== undefined) {
                result[jsDocTag.name] = value;
            }
    
            return result;
        }, {});
        return Object.keys(annotations).length ? annotations : undefined;
    }
    
    // these examples are artificial and mostly nonsensical
    function parseSpecificTags(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.Parameter) {
            return ts.getJSDocParameterTags(node as ts.ParameterDeclaration);
        }
        if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
            const func = node as ts.FunctionDeclaration;
            if (ts.hasJSDocParameterTags(func)) {
                const flat: ts.JSDocTag[] = [];
                for (const tags of func.parameters.map(ts.getJSDocParameterTags)) {
                    if (tags) flat.push(...tags);
                }
                return flat;
            }
        }
    }
    
    function getReturnTypeFromJSDoc(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
            return ts.getJSDocReturnType(node);
        }
        let type = ts.getJSDocType(node);
        if (type && type.kind === ts.SyntaxKind.FunctionType) {
            return (type as ts.FunctionTypeNode).type;
        }
    }
    
    function getAllTags(node: ts.Node) {
        ts.getJSDocTags(node);
    }
    
    function getSomeOtherTags(node: ts.Node) {
        const tags: (ts.JSDocTag | undefined)[] = [];
        tags.push(ts.getJSDocAugmentsTag(node));
        tags.push(ts.getJSDocClassTag(node));
        tags.push(ts.getJSDocReturnTag(node));
        const type = ts.getJSDocTypeTag(node);
        if (type) {
            tags.push(type);
        }
        tags.push(ts.getJSDocTemplateTag(node));
        return tags;
    }
    