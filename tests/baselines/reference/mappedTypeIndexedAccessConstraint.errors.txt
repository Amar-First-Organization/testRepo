mappedTypeIndexedAccessConstraint.ts(8,5): error TS18048: 'm1' is possibly 'undefined'.
mappedTypeIndexedAccessConstraint.ts(10,5): error TS18048: 'm2' is possibly 'undefined'.
mappedTypeIndexedAccessConstraint.ts(23,66): error TS2532: Object is possibly 'undefined'.
mappedTypeIndexedAccessConstraint.ts(47,34): error TS2722: Cannot invoke an object which is possibly 'undefined'.


==== mappedTypeIndexedAccessConstraint.ts (4 errors) ====
    type M0 = { a: 1, b: 2 };
    
    type M1 = { [K in keyof Partial<M0>]: M0[K] };
    
    type M2 = { [K in keyof Required<M1>]: M1[K] };
    
    function foo<K extends keyof M0>(m1: M1[K], m2: M2[K]) {
        m1.toString();  // Error
        ~~
!!! error TS18048: 'm1' is possibly 'undefined'.
        m1?.toString();
        m2.toString();  // Error
        ~~
!!! error TS18048: 'm2' is possibly 'undefined'.
        m2?.toString();
    }
    
    // Repro from #57487
    
    type Obj = {
        a: 1,
        b: 2
    };
    
    const mapped: { [K in keyof Partial<Obj>]: Obj[K] } = {};
    
    const resolveMapped = <K extends keyof typeof mapped>(key: K) => mapped[key].toString();  // Error
                                                                     ~~~~~~~~~~~
!!! error TS2532: Object is possibly 'undefined'.
    
    // Additional repro from #57487
    
    const arr = ["foo", "12", 42] as const;
    
    type Mappings = { foo: boolean, "12": number, 42: string };
    
    type MapperArgs<K extends (typeof arr)[number]> = {
        v: K,
        i: number
    };
    
    type SetOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
    
    type PartMappings = SetOptional<Mappings, "foo">;
    
    const mapper: { [K in keyof PartMappings]: (o: MapperArgs<K>) => PartMappings[K] } = {
        foo: ({ v, i }) => v.length + i > 4,
        "12": ({ v, i }) => Number(v) + i,
        42: ({ v, i }) => `${v}${i}`,
    }
    
    const resolveMapper1 = <K extends keyof typeof mapper>(
        key: K, o: MapperArgs<K>) => mapper[key](o);  // Error
                                     ~~~~~~~~~~~
!!! error TS2722: Cannot invoke an object which is possibly 'undefined'.
    
    const resolveMapper2 = <K extends keyof typeof mapper>(
        key: K, o: MapperArgs<K>) => mapper[key]?.(o)
    