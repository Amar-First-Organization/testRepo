//// [tests/cases/conformance/types/primitives/string/invalidStringAssignments.ts] ////

=== invalidStringAssignments.ts ===
var x = '';
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^

var a: boolean = x;
>a : boolean
>  : ^^^^^^^
>x : boolean
>  : ^^^^^^^

var b: number = x;
>b : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

var c: void = x;
>c : void
>  : ^^^^
>x : void
>  : ^^^^

var d: typeof undefined = x;
>d : any
>  : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>x : any
>  : ^^^

class C { foo: string; }
>C : C
>  : ^
>foo : string
>    : ^^^^^^

var e: C = x;
>e : C
>  : ^
>x : C
>  : ^

interface I { bar: string; }
>bar : string
>    : ^^^^^^

var f: I = x;
>f : I
>  : ^
>x : I
>  : ^

var g: { baz: string } = 1;
>g : { baz: string; }
>  : ^^^^^^^      ^^^
>baz : string
>    : ^^^^^^
>1 : { baz: string; }
>  : ^^^^^^^      ^^^

var g2: { 0: number } = 1;
>g2 : { 0: number; }
>   : ^^^^^      ^^^
>0 : number
>  : ^^^^^^
>1 : { 0: number; }
>  : ^^^^^      ^^^

module M { export var x = 1; }
>M : typeof M
>  : ^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

M = x;
>M = x : string
>      : ^^^^^^
>M : any
>  : ^^^
>x : string
>  : ^^^^^^

function i<T>(a: T) {
>i : <T>(a: T) => void
>  : ^ ^^ ^^ ^^^^^^^^^
>a : T
>  : ^

    a = x;
>a = x : string
>      : ^^^^^^
>a : T
>  : ^
>x : string
>  : ^^^^^^
}
i = x;
>i = x : string
>      : ^^^^^^
>i : any
>  : ^^^
>x : string
>  : ^^^^^^

enum E { A }
>E : E
>  : ^
>A : E.A
>  : ^^^

var j: E = x;
>j : E
>  : ^
>x : E
>  : ^

