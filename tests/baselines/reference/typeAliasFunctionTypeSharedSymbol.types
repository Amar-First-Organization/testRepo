//// [tests/cases/compiler/typeAliasFunctionTypeSharedSymbol.ts] ////

=== typeAliasFunctionTypeSharedSymbol.ts ===
// Repro from comment in #21496

function Mixin<TBase extends {new (...args: any[]): {}}>(Base: TBase) {
>Mixin : <TBase extends new (...args: any[]) => {}>(Base: TBase) => TBase & { new (...args: any[]): (Anonymous class); prototype: Mixin<any>.(Anonymous class); }
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^  ^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>args : any[]
>     : ^^^^^
>Base : TBase
>     : ^^^^^

    return class extends Base {
>class extends Base {    } : TBase & { new (...args: any[]): (Anonymous class); prototype: Mixin<any>.(Anonymous class); }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Base : {}
>     : ^^

    };
}

type Mixin = ReturnTypeOf<typeof Mixin>
>Mixin : (new (...args: any[]) => {}) & { new (...args: any[]): Mixin<new (...args: any[]) => {}>.(Anonymous class); prototype: Mixin<any>.(Anonymous class); }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Mixin : <TBase extends new (...args: any[]) => {}>(Base: TBase) => TBase & { new (...args: any[]): (Anonymous class); prototype: Mixin<any>.(Anonymous class); }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

type ReturnTypeOf<V> = V extends (...args: any[])=>infer R ? R : never;
>ReturnTypeOf : ReturnTypeOf<V>
>             : ^^^^^^^^^^^^^^^
>args : any[]
>     : ^^^^^

type Crashes = number & Mixin;
>Crashes : Crashes
>        : ^^^^^^^

