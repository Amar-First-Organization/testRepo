=== tests/cases/conformance/structs/structDeclarations/structHeritageSpecification/structConstructorFunctionTypeIsAssignableToBaseType.ts ===
struct Base {
>Base : Symbol(Base, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 0, 0))

    static foo: {
>foo : Symbol(Base.foo, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 0, 13))

        bar: Object;
>bar : Symbol(bar, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 1, 17))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
    }
}

struct Derived extends Base {
>Derived : Symbol(Derived, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 4, 1))
>Base : Symbol(Base, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 0, 0))

    // ok
    static foo: {
>foo : Symbol(Derived.foo, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 6, 29))

        bar: number;
>bar : Symbol(bar, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 8, 17))
    }
}

struct Derived2 extends Base {
>Derived2 : Symbol(Derived2, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 11, 1))
>Base : Symbol(Base, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 0, 0))

    // ok
    static foo: {
>foo : Symbol(Derived2.foo, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 13, 30))

        bar: any;
>bar : Symbol(bar, Decl(structConstructorFunctionTypeIsAssignableToBaseType.ts, 15, 17))
    }
}
