=== tests/cases/compiler/pipelineOperatorWithCurrying.ts ===
var map = <T, R>(fn: (v: T) => R) => (array: T[]) => array.map(fn);
>map : Symbol(map, Decl(pipelineOperatorWithCurrying.ts, 0, 3))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 0, 11))
>R : Symbol(R, Decl(pipelineOperatorWithCurrying.ts, 0, 13))
>fn : Symbol(fn, Decl(pipelineOperatorWithCurrying.ts, 0, 17))
>v : Symbol(v, Decl(pipelineOperatorWithCurrying.ts, 0, 22))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 0, 11))
>R : Symbol(R, Decl(pipelineOperatorWithCurrying.ts, 0, 13))
>array : Symbol(array, Decl(pipelineOperatorWithCurrying.ts, 0, 38))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 0, 11))
>array.map : Symbol(Array.map, Decl(lib.d.ts, --, --))
>array : Symbol(array, Decl(pipelineOperatorWithCurrying.ts, 0, 38))
>map : Symbol(Array.map, Decl(lib.d.ts, --, --))
>fn : Symbol(fn, Decl(pipelineOperatorWithCurrying.ts, 0, 17))

var reduce = <T>(fn: (p: T, v: T) => T) => (array: T[]) => array.reduce(fn);
>reduce : Symbol(reduce, Decl(pipelineOperatorWithCurrying.ts, 1, 3))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 1, 14))
>fn : Symbol(fn, Decl(pipelineOperatorWithCurrying.ts, 1, 17))
>p : Symbol(p, Decl(pipelineOperatorWithCurrying.ts, 1, 22))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 1, 14))
>v : Symbol(v, Decl(pipelineOperatorWithCurrying.ts, 1, 27))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 1, 14))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 1, 14))
>array : Symbol(array, Decl(pipelineOperatorWithCurrying.ts, 1, 44))
>T : Symbol(T, Decl(pipelineOperatorWithCurrying.ts, 1, 14))
>array.reduce : Symbol(Array.reduce, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>array : Symbol(array, Decl(pipelineOperatorWithCurrying.ts, 1, 44))
>reduce : Symbol(Array.reduce, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>fn : Symbol(fn, Decl(pipelineOperatorWithCurrying.ts, 1, 17))

var inc = (v: number) => v + 1;
>inc : Symbol(inc, Decl(pipelineOperatorWithCurrying.ts, 2, 3))
>v : Symbol(v, Decl(pipelineOperatorWithCurrying.ts, 2, 11))
>v : Symbol(v, Decl(pipelineOperatorWithCurrying.ts, 2, 11))

var res = [10, 20]
>res : Symbol(res, Decl(pipelineOperatorWithCurrying.ts, 4, 3))

  |> map((x: number) => x * 20)
>map : Symbol(map, Decl(pipelineOperatorWithCurrying.ts, 0, 3))
>x : Symbol(x, Decl(pipelineOperatorWithCurrying.ts, 5, 10))
>x : Symbol(x, Decl(pipelineOperatorWithCurrying.ts, 5, 10))

  |> reduce<number>((res, x) => res + x)
>reduce : Symbol(reduce, Decl(pipelineOperatorWithCurrying.ts, 1, 3))
>res : Symbol(res, Decl(pipelineOperatorWithCurrying.ts, 6, 21))
>x : Symbol(x, Decl(pipelineOperatorWithCurrying.ts, 6, 25))
>res : Symbol(res, Decl(pipelineOperatorWithCurrying.ts, 6, 21))
>x : Symbol(x, Decl(pipelineOperatorWithCurrying.ts, 6, 25))

  |> inc;
>inc : Symbol(inc, Decl(pipelineOperatorWithCurrying.ts, 2, 3))

