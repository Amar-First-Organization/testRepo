=== tests/cases/compiler/reverseMappedTypeInferFromItsProperties.ts ===
// repro from #29479

type Selector<S, R> = (state: S) => R;
>Selector : Selector<S, R>
>state : S

declare function createStructuredSelector<S, T>(selectors: {
>createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]>; }) => Selector<S, T>
>selectors : { [K in keyof T]: Selector<S, T[K]>; }

  [K in keyof T]: Selector<S, T[K]>;
}): Selector<S, T>;

type State = { foo: number };
>State : { foo: number; }
>foo : number

declare const mySelector: Selector<State, boolean>;
>mySelector : Selector<State, boolean>

export const result = createStructuredSelector({ mySelector });
>result : Selector<State, { mySelector: boolean; }>
>createStructuredSelector({ mySelector }) : Selector<State, { mySelector: boolean; }>
>createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]>; }) => Selector<S, T>
>{ mySelector } : { mySelector: Selector<State, boolean>; }
>mySelector : Selector<State, boolean>

// 52737#discussion_r1127035242
declare const otherSelectors: { [x: string]: Selector<State, boolean> };
>otherSelectors : { [x: string]: Selector<State, boolean>; }
>x : string

export const otherResult = createStructuredSelector(otherSelectors);
>otherResult : Selector<State, { [x: string]: any; }>
>createStructuredSelector(otherSelectors) : Selector<State, { [x: string]: any; }>
>createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]>; }) => Selector<S, T>
>otherSelectors : { [x: string]: Selector<State, boolean>; }

declare function inferFromValue<T, S extends string>(obj: { [K in keyof T]: S }): [T, S];
>inferFromValue : <T, S extends string>(obj: { [K in keyof T]: S; }) => [T, S]
>obj : { [K in keyof T]: S; }

const fromValue1 = inferFromValue({ a: "foo", b: "bar" });
>fromValue1 : [{ a: unknown; b: unknown; }, "foo" | "bar"]
>inferFromValue({ a: "foo", b: "bar" }) : [{ a: unknown; b: unknown; }, "foo" | "bar"]
>inferFromValue : <T, S extends string>(obj: { [K in keyof T]: S; }) => [T, S]
>{ a: "foo", b: "bar" } : { a: "foo"; b: "bar"; }
>a : "foo"
>"foo" : "foo"
>b : "bar"
>"bar" : "bar"

