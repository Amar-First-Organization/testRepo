//// [tests/cases/compiler/000.ts] ////

=== 000.ts ===
interface State<Type> {
  state: Type;
>state : Type
>      : ^^^^
}

interface UserName {
  first: string;
>first : string
>      : ^^^^^^

  last?: string;
>last : string
>     : ^^^^^^
}


const nameState = {} as {
>nameState : { value: string; state: State<string>; } | { value: UserName; state: State<UserName>; }
>          : ^^^^^^^^^      ^^^^^^^^^             ^^^^^^^^^^^^^^^        ^^^^^^^^^               ^^^
>{} as {  value: string;  state: State<string>;} | {  value: UserName;  state: State<UserName>;} : { value: string; state: State<string>; } | { value: UserName; state: State<UserName>; }
>                                                                                                : ^^^^^^^^^      ^^^^^^^^^             ^^^^^^^^^^^^^^^        ^^^^^^^^^               ^^^
>{} : {}
>   : ^^

  value: string;
>value : string
>      : ^^^^^^

  state: State<string>;
>state : State<string>
>      : ^^^^^^^^^^^^^

} | {
  value: UserName;
>value : UserName
>      : ^^^^^^^^

  state: State<UserName>;
>state : State<UserName>
>      : ^^^^^^^^^^^^^^^
}

if (typeof nameState.value === "string") {
>typeof nameState.value === "string" : boolean
>                                    : ^^^^^^^
>typeof nameState.value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameState.value : string | UserName
>                : ^^^^^^^^^^^^^^^^^
>nameState : { value: string; state: State<string>; } | { value: UserName; state: State<UserName>; }
>          : ^^^^^^^^^      ^^^^^^^^^             ^^^^^^^^^^^^^^^        ^^^^^^^^^               ^^^
>value : string | UserName
>      : ^^^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

  nameState.state satisfies  State<string>;
>nameState.state satisfies  State<string> : State<string>
>                                         : ^^^^^^^^^^^^^
>nameState.state : State<string>
>                : ^^^^^^^^^^^^^
>nameState : { value: string; state: State<string>; }
>          : ^^^^^^^^^      ^^^^^^^^^             ^^^
>state : State<string>
>      : ^^^^^^^^^^^^^

} else {
  nameState.state satisfies State<UserName>;
>nameState.state satisfies State<UserName> : State<UserName>
>                                          : ^^^^^^^^^^^^^^^
>nameState.state : State<UserName>
>                : ^^^^^^^^^^^^^^^
>nameState : { value: UserName; state: State<UserName>; }
>          : ^^^^^^^^^        ^^^^^^^^^               ^^^
>state : State<UserName>
>      : ^^^^^^^^^^^^^^^
}

declare const x: [string, number] | [number, string];
>x : [string, number] | [number, string]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if(x[0] === "string") {
>x[0] === "string" : boolean
>                  : ^^^^^^^
>x[0] : string | number
>     : ^^^^^^^^^^^^^^^
>x : [string, number] | [number, string]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>"string" : "string"
>         : ^^^^^^^^

  x[1] satisfies number;
>x[1] satisfies number : number
>                      : ^^^^^^
>x[1] : number
>     : ^^^^^^
>x : [string, number]
>  : ^^^^^^^^^^^^^^^^
>1 : 1
>  : ^

} // else {
//   x[1] satisfies string;
// }
