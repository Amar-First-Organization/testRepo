=== tests/cases/compiler/doYouNeedToChangeYourTargetLibrary.ts ===
// es2016
const testIncludes = ["hello"].includes("world");
>testIncludes : Symbol(testIncludes, Decl(doYouNeedToChangeYourTargetLibrary.ts, 1, 5))

// es2017
const testStringPadStart = "".padStart(2);
>testStringPadStart : Symbol(testStringPadStart, Decl(doYouNeedToChangeYourTargetLibrary.ts, 4, 5))

const testStringPadEnd = "".padEnd(2);
>testStringPadEnd : Symbol(testStringPadEnd, Decl(doYouNeedToChangeYourTargetLibrary.ts, 5, 5))

const testObjectConstructorValues = Object.values({});
>testObjectConstructorValues : Symbol(testObjectConstructorValues, Decl(doYouNeedToChangeYourTargetLibrary.ts, 6, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorEntries = Object.entries({});
>testObjectConstructorEntries : Symbol(testObjectConstructorEntries, Decl(doYouNeedToChangeYourTargetLibrary.ts, 7, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testObjectConstructorGetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors({});
>testObjectConstructorGetOwnPropertyDescriptors : Symbol(testObjectConstructorGetOwnPropertyDescriptors, Decl(doYouNeedToChangeYourTargetLibrary.ts, 8, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testIntlFormatToParts = new Intl.DateTimeFormat("en-US").formatToParts();
>testIntlFormatToParts : Symbol(testIntlFormatToParts, Decl(doYouNeedToChangeYourTargetLibrary.ts, 9, 5))
>Intl.DateTimeFormat : Symbol(Intl.DateTimeFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))
>DateTimeFormat : Symbol(Intl.DateTimeFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testAtomics = Atomics.add(new Uint8Array(0), 0, 0);
>testAtomics : Symbol(testAtomics, Decl(doYouNeedToChangeYourTargetLibrary.ts, 10, 5))
>Uint8Array : Symbol(Uint8Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

const testSharedArrayBuffer = new SharedArrayBuffer(5);
>testSharedArrayBuffer : Symbol(testSharedArrayBuffer, Decl(doYouNeedToChangeYourTargetLibrary.ts, 11, 5))

// es2018
const testPromiseFinally = new Promise(() => {}).finally();
>testPromiseFinally : Symbol(testPromiseFinally, Decl(doYouNeedToChangeYourTargetLibrary.ts, 14, 5))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

const testRegExpMatchArrayGroups = "2019-04-30".match(/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/).groups;
>testRegExpMatchArrayGroups : Symbol(testRegExpMatchArrayGroups, Decl(doYouNeedToChangeYourTargetLibrary.ts, 15, 5))
>"2019-04-30".match : Symbol(String.match, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>match : Symbol(String.match, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

const testRegExpDotAll = new RegExp("foo", "s").dotAll;
>testRegExpDotAll : Symbol(testRegExpDotAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 16, 5))
>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

const testIntlPluralRules = new Intl.PluralRules("ar-EG").select(0);
>testIntlPluralRules : Symbol(testIntlPluralRules, Decl(doYouNeedToChangeYourTargetLibrary.ts, 17, 5))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))

const testAsyncGenerator: AsyncGenerator<any> = null as any;
>testAsyncGenerator : Symbol(testAsyncGenerator, Decl(doYouNeedToChangeYourTargetLibrary.ts, 18, 5))

const testAsyncGeneratorFunction: AsyncGeneratorFunction = null as any;
>testAsyncGeneratorFunction : Symbol(testAsyncGeneratorFunction, Decl(doYouNeedToChangeYourTargetLibrary.ts, 19, 5))

const testAsyncIterable: AsyncIterable<any> = null as any;
>testAsyncIterable : Symbol(testAsyncIterable, Decl(doYouNeedToChangeYourTargetLibrary.ts, 20, 5))

const testAsyncIterableIterator: AsyncIterableIterator<any> = null as any;
>testAsyncIterableIterator : Symbol(testAsyncIterableIterator, Decl(doYouNeedToChangeYourTargetLibrary.ts, 21, 5))

// es2019
const testArrayFlat = [].flat();
>testArrayFlat : Symbol(testArrayFlat, Decl(doYouNeedToChangeYourTargetLibrary.ts, 24, 5))

const testArrayFlatMap = [].flatMap();
>testArrayFlatMap : Symbol(testArrayFlatMap, Decl(doYouNeedToChangeYourTargetLibrary.ts, 25, 5))

const testObjectConstructorFromEntries = Object.fromEntries({});
>testObjectConstructorFromEntries : Symbol(testObjectConstructorFromEntries, Decl(doYouNeedToChangeYourTargetLibrary.ts, 26, 5))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const testStringTrimStart = "".trimStart();
>testStringTrimStart : Symbol(testStringTrimStart, Decl(doYouNeedToChangeYourTargetLibrary.ts, 27, 5))

const testStringTrimEnd = "".trimEnd();
>testStringTrimEnd : Symbol(testStringTrimEnd, Decl(doYouNeedToChangeYourTargetLibrary.ts, 28, 5))

const testStringTrimLeft = "".trimLeft();
>testStringTrimLeft : Symbol(testStringTrimLeft, Decl(doYouNeedToChangeYourTargetLibrary.ts, 29, 5))

const testStringTrimRight = "".trimRight();
>testStringTrimRight : Symbol(testStringTrimRight, Decl(doYouNeedToChangeYourTargetLibrary.ts, 30, 5))

// es2020
const testPromiseAllSettled = new Promise(() => {}).allSettled();
>testPromiseAllSettled : Symbol(testPromiseAllSettled, Decl(doYouNeedToChangeYourTargetLibrary.ts, 33, 5))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

const testStringMatchAll = "".matchAll();
>testStringMatchAll : Symbol(testStringMatchAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 34, 5))

// esnext
const testPromiseAny = new Promise(() => {}).any();
>testPromiseAny : Symbol(testPromiseAny, Decl(doYouNeedToChangeYourTargetLibrary.ts, 37, 5))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

const testStringReplaceAll = "".replaceAll();
>testStringReplaceAll : Symbol(testStringReplaceAll, Decl(doYouNeedToChangeYourTargetLibrary.ts, 38, 5))

const testNumberFormatFormatToParts = new Intl.NumberFormat("en-US").formatToParts();
>testNumberFormatFormatToParts : Symbol(testNumberFormatFormatToParts, Decl(doYouNeedToChangeYourTargetLibrary.ts, 39, 5))
>Intl.NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))
>NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

