=== tests/cases/compiler/isArray.ts ===
interface MyArray<T> extends Array<T> { manifest: any; }
>MyArray : Symbol(MyArray, Decl(isArray.ts, 0, 0))
>T : Symbol(T, Decl(isArray.ts, 0, 18))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(isArray.ts, 0, 18))
>manifest : Symbol(MyArray.manifest, Decl(isArray.ts, 0, 39))

interface MyReadOnlyArray<T> extends ReadonlyArray<T> { manifest: any; }
>MyReadOnlyArray : Symbol(MyReadOnlyArray, Decl(isArray.ts, 0, 56))
>T : Symbol(T, Decl(isArray.ts, 1, 26))
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(isArray.ts, 1, 26))
>manifest : Symbol(MyReadOnlyArray.manifest, Decl(isArray.ts, 1, 55))

function fn1(arg: string | string[]) {
>fn1 : Symbol(fn1, Decl(isArray.ts, 1, 72))
>arg : Symbol(arg, Decl(isArray.ts, 3, 13))

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 3, 13))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 3, 13))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

function fn2(arg: unknown) {
>fn2 : Symbol(fn2, Decl(isArray.ts, 5, 1))
>arg : Symbol(arg, Decl(isArray.ts, 7, 13))

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 7, 13))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 7, 13))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

function fn3(arg: object) {
>fn3 : Symbol(fn3, Decl(isArray.ts, 9, 1))
>arg : Symbol(arg, Decl(isArray.ts, 11, 13))

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 11, 13))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 11, 13))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

function fn4(arg: {}) {
>fn4 : Symbol(fn4, Decl(isArray.ts, 13, 1))
>arg : Symbol(arg, Decl(isArray.ts, 15, 13))

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 15, 13))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 15, 13))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

function fn5(arg: string | ReadonlyArray<string>) {
>fn5 : Symbol(fn5, Decl(isArray.ts, 17, 1))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --))

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))

    if (Array.isArray(arg)) arg.push(""); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))

    if (Array.isArray(arg)) arg.indexOf(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>arg.indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))

    if (!Array.isArray(arg)) arg.toUpperCase(); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>arg.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 19, 13))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
}

function fn6(arg: string | string[]) {
>fn6 : Symbol(fn6, Decl(isArray.ts, 24, 1))
>arg : Symbol(arg, Decl(isArray.ts, 26, 13))

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 26, 13))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 26, 13))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

function fn7(arg: boolean | number[] | string[], stringAndNumber: string & number) {
>fn7 : Symbol(fn7, Decl(isArray.ts, 28, 1))
>arg : Symbol(arg, Decl(isArray.ts, 30, 13))
>stringAndNumber : Symbol(stringAndNumber, Decl(isArray.ts, 30, 48))

    if (Array.isArray(arg)) arg.push(stringAndNumber); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 30, 13))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 30, 13))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>stringAndNumber : Symbol(stringAndNumber, Decl(isArray.ts, 30, 48))
}

function fn8(arg: string | number[] | readonly string[]) {
>fn8 : Symbol(fn8, Decl(isArray.ts, 32, 1))
>arg : Symbol(arg, Decl(isArray.ts, 34, 13))

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 34, 13))
>arg : Symbol(arg, Decl(isArray.ts, 34, 13))
}

function fn9(arg: string | number[] | readonly string[]) {
>fn9 : Symbol(fn9, Decl(isArray.ts, 36, 1))
>arg : Symbol(arg, Decl(isArray.ts, 38, 13))

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 38, 13))
>arg : Symbol(arg, Decl(isArray.ts, 38, 13))
}

function fn10(arg: string | MyArray<string>) {
>fn10 : Symbol(fn10, Decl(isArray.ts, 40, 1))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>MyArray : Symbol(MyArray, Decl(isArray.ts, 0, 0))

    if (Array.isArray(arg)) arg.push(10); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))

    if (Array.isArray(arg)) arg.push(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))

    if (Array.isArray(arg)) arg.manifest; // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>arg.manifest : Symbol(MyArray.manifest, Decl(isArray.ts, 0, 39))
>arg : Symbol(arg, Decl(isArray.ts, 42, 14))
>manifest : Symbol(MyArray.manifest, Decl(isArray.ts, 0, 39))
}

function fn11(arg: string | MyReadOnlyArray<string>) {
>fn11 : Symbol(fn11, Decl(isArray.ts, 46, 1))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>MyReadOnlyArray : Symbol(MyReadOnlyArray, Decl(isArray.ts, 0, 56))

    if (Array.isArray(arg)) arg.push(""); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))

    if (Array.isArray(arg)) arg.indexOf(10); // Should FAIL
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>arg.indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))

    if (Array.isArray(arg)) arg.indexOf(""); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>arg.indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))

    if (Array.isArray(arg)) arg.manifest; // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>arg.manifest : Symbol(MyReadOnlyArray.manifest, Decl(isArray.ts, 1, 55))
>arg : Symbol(arg, Decl(isArray.ts, 48, 14))
>manifest : Symbol(MyReadOnlyArray.manifest, Decl(isArray.ts, 1, 55))
}

function fn12<T>(arg: T | T[], t: T) {
>fn12 : Symbol(fn12, Decl(isArray.ts, 53, 1))
>T : Symbol(T, Decl(isArray.ts, 55, 14))
>arg : Symbol(arg, Decl(isArray.ts, 55, 17))
>T : Symbol(T, Decl(isArray.ts, 55, 14))
>T : Symbol(T, Decl(isArray.ts, 55, 14))
>t : Symbol(t, Decl(isArray.ts, 55, 30))
>T : Symbol(T, Decl(isArray.ts, 55, 14))

    if (Array.isArray(arg)) arg.push(t); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 55, 17))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 55, 17))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(isArray.ts, 55, 30))
}

function fn13<T>(arg: T | ReadonlyArray<T>, t: T) {
>fn13 : Symbol(fn13, Decl(isArray.ts, 57, 1))
>T : Symbol(T, Decl(isArray.ts, 59, 14))
>arg : Symbol(arg, Decl(isArray.ts, 59, 17))
>T : Symbol(T, Decl(isArray.ts, 59, 14))
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(isArray.ts, 59, 14))
>t : Symbol(t, Decl(isArray.ts, 59, 43))
>T : Symbol(T, Decl(isArray.ts, 59, 14))

    if (Array.isArray(arg)) arg.push(t); // Should fail
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 59, 17))
>arg : Symbol(arg, Decl(isArray.ts, 59, 17))
>t : Symbol(t, Decl(isArray.ts, 59, 43))

    if (Array.isArray(arg)) arg.indexOf(t); // OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 59, 17))
>arg.indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 59, 17))
>indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(isArray.ts, 59, 43))
}

function fn14<T>(arg: T | [T]) {
>fn14 : Symbol(fn14, Decl(isArray.ts, 62, 1))
>T : Symbol(T, Decl(isArray.ts, 64, 14))
>arg : Symbol(arg, Decl(isArray.ts, 64, 17))
>T : Symbol(T, Decl(isArray.ts, 64, 14))
>T : Symbol(T, Decl(isArray.ts, 64, 14))

    if (Array.isArray(arg)) arg.push(null as any as T); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 64, 17))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 64, 17))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(isArray.ts, 64, 14))
}

function fn15<T>(arg: T | readonly [T], t: T) {
>fn15 : Symbol(fn15, Decl(isArray.ts, 66, 1))
>T : Symbol(T, Decl(isArray.ts, 68, 14))
>arg : Symbol(arg, Decl(isArray.ts, 68, 17))
>T : Symbol(T, Decl(isArray.ts, 68, 14))
>T : Symbol(T, Decl(isArray.ts, 68, 14))
>t : Symbol(t, Decl(isArray.ts, 68, 39))
>T : Symbol(T, Decl(isArray.ts, 68, 14))

    if (Array.isArray(arg)) arg.push(t); // Should fail
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 68, 17))
>arg : Symbol(arg, Decl(isArray.ts, 68, 17))
>t : Symbol(t, Decl(isArray.ts, 68, 39))

    if (Array.isArray(arg)) arg.indexOf(t); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 68, 17))
>arg.indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 68, 17))
>indexOf : Symbol(ReadonlyArray.indexOf, Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(isArray.ts, 68, 39))
}

function fn16<T extends string | string[]>(arg: T) {
>fn16 : Symbol(fn16, Decl(isArray.ts, 71, 1))
>T : Symbol(T, Decl(isArray.ts, 73, 14))
>arg : Symbol(arg, Decl(isArray.ts, 73, 43))
>T : Symbol(T, Decl(isArray.ts, 73, 14))

    if (Array.isArray(arg)) arg.push("10"); // Should OK
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 73, 43))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 73, 43))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))

    if (Array.isArray(arg)) arg.push(10); // Should fail
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 73, 43))
>arg.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arg : Symbol(arg, Decl(isArray.ts, 73, 43))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

function fn17() {
>fn17 : Symbol(fn17, Decl(isArray.ts, 76, 1))

    const s: Array<string | string[]> = [];
>s : Symbol(s, Decl(isArray.ts, 79, 9))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    const arrs = s.filter(Array.isArray);
>arrs : Symbol(arrs, Decl(isArray.ts, 80, 9))
>s.filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>s : Symbol(s, Decl(isArray.ts, 79, 9))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))

    arrs.push(["one"]); // Should OK
>arrs.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arrs : Symbol(arrs, Decl(isArray.ts, 80, 9))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))

    arrs.push("str");  // Should fail
>arrs.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>arrs : Symbol(arrs, Decl(isArray.ts, 80, 9))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
}

