//// [tests/cases/compiler/jsxChildrenArrayWrongType.tsx] ////

=== Performance Stats ===
Assignability cache: 300 / 300 (nearest 100)
Type Count: 1,000 / 1,000 (nearest 100)
Instantiation count: 1,000 / 1,000 (nearest 500)
Symbol count: 29,500 / 29,500 (nearest 500)

=== index.tsx ===
/// <reference path="react18/react18.d.ts" />
/// <reference path="react18/global.d.ts" />

// target is ES5, so no `Iterable` type is present.

interface PropsType {
    children: [string, number] | boolean[];
>children : [string, number] | boolean[]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
declare class Foo extends React.Component<PropsType, {}> {}
>Foo : Foo
>    : ^^^
>React.Component : React.Component<PropsType, {}, any>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>React : typeof React
>      : ^^^^^^^^^^^^
>Component : typeof React.Component
>          : ^^^^^^^^^^^^^^^^^^^^^^

const b = (
>b : JSX.Element
>  : ^^^^^^^^^^^
>(    <Foo>        {<div/> as unknown}        {"aa"}    </Foo>) : JSX.Element
>                                                               : ^^^^^^^^^^^

    <Foo>
><Foo>        {<div/> as unknown}        {"aa"}    </Foo> : JSX.Element
>                                                         : ^^^^^^^^^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^

        {<div/> as unknown}
><div/> as unknown : unknown
>                  : ^^^^^^^
><div/> : JSX.Element
>       : ^^^^^^^^^^^
>div : any
>    : ^^^

        {"aa"}
>"aa" : "aa"
>     : ^^^^

    </Foo>
>Foo : typeof Foo
>    : ^^^^^^^^^^

);
