=== tests/cases/compiler/inferRestArgumentsMappedTuple.ts ===
type MyMappedType<Primitive extends any> = {
>MyMappedType : Symbol(MyMappedType, Decl(inferRestArgumentsMappedTuple.ts, 0, 0))
>Primitive : Symbol(Primitive, Decl(inferRestArgumentsMappedTuple.ts, 0, 18))

	primitive: Primitive;
>primitive : Symbol(primitive, Decl(inferRestArgumentsMappedTuple.ts, 0, 44))
>Primitive : Symbol(Primitive, Decl(inferRestArgumentsMappedTuple.ts, 0, 18))

};

type TupleMapperOld<Tuple extends any[]> = {
>TupleMapperOld : Symbol(TupleMapperOld, Decl(inferRestArgumentsMappedTuple.ts, 2, 2))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 4, 20))

	[Key in keyof Tuple]: Tuple[Key] extends Tuple[number] ? MyMappedType<Tuple[Key]> : never;
>Key : Symbol(Key, Decl(inferRestArgumentsMappedTuple.ts, 5, 2))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 4, 20))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 4, 20))
>Key : Symbol(Key, Decl(inferRestArgumentsMappedTuple.ts, 5, 2))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 4, 20))
>MyMappedType : Symbol(MyMappedType, Decl(inferRestArgumentsMappedTuple.ts, 0, 0))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 4, 20))
>Key : Symbol(Key, Decl(inferRestArgumentsMappedTuple.ts, 5, 2))

};

// [MyMappedType<string>, MyMappedType<number>]
type MyMappedTupleOld = TupleMapperOld<[string, number]>;
>MyMappedTupleOld : Symbol(MyMappedTupleOld, Decl(inferRestArgumentsMappedTuple.ts, 6, 2))
>TupleMapperOld : Symbol(TupleMapperOld, Decl(inferRestArgumentsMappedTuple.ts, 2, 2))

//    ^?

declare function extractPrimitivesOld<Tuple extends any[]>(...mappedTypes: TupleMapperOld<Tuple>): Tuple;
>extractPrimitivesOld : Symbol(extractPrimitivesOld, Decl(inferRestArgumentsMappedTuple.ts, 9, 57))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 12, 38))
>mappedTypes : Symbol(mappedTypes, Decl(inferRestArgumentsMappedTuple.ts, 12, 59))
>TupleMapperOld : Symbol(TupleMapperOld, Decl(inferRestArgumentsMappedTuple.ts, 2, 2))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 12, 38))
>Tuple : Symbol(Tuple, Decl(inferRestArgumentsMappedTuple.ts, 12, 38))

// [string, number]
const myPrimitiveTupleOld: [string, number] = extractPrimitivesOld({ primitive: "" }, { primitive: 0 });
>myPrimitiveTupleOld : Symbol(myPrimitiveTupleOld, Decl(inferRestArgumentsMappedTuple.ts, 15, 5))
>extractPrimitivesOld : Symbol(extractPrimitivesOld, Decl(inferRestArgumentsMappedTuple.ts, 9, 57))
>primitive : Symbol(primitive, Decl(inferRestArgumentsMappedTuple.ts, 15, 68))
>primitive : Symbol(primitive, Decl(inferRestArgumentsMappedTuple.ts, 15, 87))

