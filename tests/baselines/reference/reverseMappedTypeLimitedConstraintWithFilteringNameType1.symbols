//// [tests/cases/compiler/reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts] ////

=== reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts ===
type XNumber = { x: number };
>XNumber : Symbol(XNumber, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 0))
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 16))

declare function foo<T extends XNumber>(props: {
>foo : Symbol(foo, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 29))
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 1, 21))
>XNumber : Symbol(XNumber, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 0))
>props : Symbol(props, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 1, 40))

  [K in keyof T as K & keyof XNumber]: T[K];
>K : Symbol(K, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 2, 3))
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 1, 21))
>K : Symbol(K, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 2, 3))
>XNumber : Symbol(XNumber, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 0))
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 1, 21))
>K : Symbol(K, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 2, 3))

}): T;
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 1, 21))

const foo1 = foo({ x: 1, y: "foo" });
>foo1 : Symbol(foo1, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 4, 5))
>foo : Symbol(foo, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 29))
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 4, 18))
>y : Symbol(y, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 4, 24))

const objFoo = { x: 1, y: "foo" };
>objFoo : Symbol(objFoo, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 5, 5))
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 5, 16))
>y : Symbol(y, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 5, 22))

const foo2 = foo(objFoo);
>foo2 : Symbol(foo2, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 6, 5))
>foo : Symbol(foo, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 0, 29))
>objFoo : Symbol(objFoo, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 5, 5))

const checkType =
>checkType : Symbol(checkType, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 8, 5))

  <T,>() =>
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 9, 3))

  <U extends T>(value: { [K in keyof U & keyof T]: U[K] }) =>
>U : Symbol(U, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 3))
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 9, 3))
>value : Symbol(value, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 16))
>K : Symbol(K, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 26))
>U : Symbol(U, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 3))
>T : Symbol(T, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 9, 3))
>U : Symbol(U, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 3))
>K : Symbol(K, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 26))

    value;
>value : Symbol(value, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 10, 16))

const checked1 = checkType<{ x: number; y: string }>()({
>checked1 : Symbol(checked1, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 13, 5))
>checkType : Symbol(checkType, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 8, 5))
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 13, 28))
>y : Symbol(y, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 13, 39))

  x: 1 as number,
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 13, 56))

  y: "y",
>y : Symbol(y, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 14, 17))

  z: "z",
>z : Symbol(z, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 15, 9))

});
const objChecked = {
>objChecked : Symbol(objChecked, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 18, 5))

  x: 1,
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 18, 20))

  y: "y",
>y : Symbol(y, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 19, 7))

  z: "z",
>z : Symbol(z, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 20, 9))

};
const checked2 = checkType<{ x: number; y: string }>()(objChecked);
>checked2 : Symbol(checked2, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 23, 5))
>checkType : Symbol(checkType, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 8, 5))
>x : Symbol(x, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 23, 28))
>y : Symbol(y, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 23, 39))
>objChecked : Symbol(objChecked, Decl(reverseMappedTypeLimitedConstraintWithFilteringNameType1.ts, 18, 5))

