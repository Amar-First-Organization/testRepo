=== tests/cases/conformance/types/awaited/awaitedInference.ts ===
declare function foo<T>(f: () => PromiseLike<T>, x: T): void;
>foo : <T>(f: () => PromiseLike<T>, x: T) => void
>f : () => PromiseLike<T>
>x : T

declare const nullOrNumber: number | null;
>nullOrNumber : number
>null : null

foo(async () => nullOrNumber, null);
>foo(async () => nullOrNumber, null) : void
>foo : <T>(f: () => PromiseLike<T>, x: T) => void
>async () => nullOrNumber : () => Promise<number>
>nullOrNumber : number
>null : null

type UnwrapAwaited<T> = T extends awaited infer Inner ? Inner : T;
>UnwrapAwaited : UnwrapAwaited<T>

type Result1 = UnwrapAwaited<awaited Promise<number>>; // number
>Result1 : number

type Result2 = UnwrapAwaited<awaited Promise<number> | number>; // number
>Result2 : number

function f<T>() {
>f : <T>() => [UnwrapAwaited<T>, UnwrapAwaited<awaited T>]

    type Result1 = UnwrapAwaited<T>; // UnwrapAwaited<T>
>Result1 : UnwrapAwaited<T>

    type Result2 = UnwrapAwaited<awaited T>; // UnwrapAwaited<awaited T>
>Result2 : UnwrapAwaited<awaited T>

    return null as any as [Result1, Result2];
>null as any as [Result1, Result2] : [UnwrapAwaited<T>, UnwrapAwaited<awaited T>]
>null as any : any
>null : null
}
const x = f<number>(); // number
>x : [number, number]
>f<number>() : [number, number]
>f : <T>() => [UnwrapAwaited<T>, UnwrapAwaited<awaited T>]

const y = f<Promise<number>>(); // number ?
>y : [Promise<number>, number]
>f<Promise<number>>() : [Promise<number>, number]
>f : <T>() => [UnwrapAwaited<T>, UnwrapAwaited<awaited T>]

const z = f<Promise<number> | number>(); // number ?
>z : [number | Promise<number>, number]
>f<Promise<number> | number>() : [number | Promise<number>, number]
>f : <T>() => [UnwrapAwaited<T>, UnwrapAwaited<awaited T>]

