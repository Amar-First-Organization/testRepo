=== tests/cases/compiler/bestChoiceType.ts ===
// Repro from #10041

(''.match(/ /) || []).map(s => s.toLowerCase());
>(''.match(/ /) || []).map(s => s.toLowerCase()) : [] | (any[] & { 0: U; })
>(''.match(/ /) || []).map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] & { 0: U; }) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => [])
>(''.match(/ /) || []) : RegExpMatchArray | []
>''.match(/ /) || [] : RegExpMatchArray | []
>''.match(/ /) : RegExpMatchArray | null
>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
>'' : ""
>match : (regexp: string | RegExp) => RegExpMatchArray | null
>/ / : RegExp
>[] : []
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] & { 0: U; }) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => [])
>s => s.toLowerCase() : (s: any) => any
>s : any
>s.toLowerCase() : any
>s.toLowerCase : any
>s : any
>toLowerCase : any

// Similar cases

function f1() {
>f1 : () => void

    let x = ''.match(/ /);
>x : RegExpMatchArray | null
>''.match(/ /) : RegExpMatchArray | null
>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
>'' : ""
>match : (regexp: string | RegExp) => RegExpMatchArray | null
>/ / : RegExp

    let y = x || [];
>y : RegExpMatchArray | []
>x || [] : RegExpMatchArray | []
>x : RegExpMatchArray | null
>[] : []

    let z = y.map(s => s.toLowerCase());
>z : [] | (any[] & { 0: U; })
>y.map(s => s.toLowerCase()) : [] | (any[] & { 0: U; })
>y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] & { 0: U; }) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => [])
>y : RegExpMatchArray | []
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] & { 0: U; }) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => [])
>s => s.toLowerCase() : (s: any) => any
>s : any
>s.toLowerCase() : any
>s.toLowerCase : any
>s : any
>toLowerCase : any
}

function f2() {
>f2 : () => void

    let x = ''.match(/ /);
>x : RegExpMatchArray | null
>''.match(/ /) : RegExpMatchArray | null
>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
>'' : ""
>match : (regexp: string | RegExp) => RegExpMatchArray | null
>/ / : RegExp

    let y = x ? x : [];
>y : RegExpMatchArray | never[]
>x ? x : [] : RegExpMatchArray | never[]
>x : RegExpMatchArray | null
>x : RegExpMatchArray
>[] : never[]

    let z = y.map(s => s.toLowerCase());
>z : (any[] & { 0: U; }) | never[]
>y.map(s => s.toLowerCase()) : (any[] & { 0: U; }) | never[]
>y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] & { 0: U; }) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => never[])
>y : RegExpMatchArray | never[]
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] & { 0: U; }) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => never[])
>s => s.toLowerCase() : (s: any) => any
>s : any
>s.toLowerCase() : any
>s.toLowerCase : any
>s : any
>toLowerCase : any
}

