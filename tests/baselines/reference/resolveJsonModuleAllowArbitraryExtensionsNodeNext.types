//// [tests/cases/compiler/resolveJsonModuleAllowArbitraryExtensionsNodeNext.ts] ////

=== cjs/foo.d.json.ts ===
declare const data: ["foo", "bar", "baz"];
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^

export = data;
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^

=== cjs/index.mts ===
import data from "./foo.json" with { type: "json" };
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^
>type : any
>     : ^^^

data.default; // foo.d.json.ts is cjs format - error (`default` is whole file, file has no `default` member)
>data.default : any
>             : ^^^
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

import data2 = require("./foo.json");
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^

data2.default; // `data2` is the whole json object, no `default`
>data2.default : any
>              : ^^^
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

=== cjs/secondary.cts ===
import data from "./foo.json";
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^

data.default; // error (cjs format `.d.json.ts`, export= object is require result)
>data.default : any
>             : ^^^
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

import data2 = require("./foo.json");
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^

data2.default; // `data2` is the whole json object, no `default`
>data2.default : any
>              : ^^^
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

=== esm/foo.d.json.ts ===
declare const data: ["foo", "bar", "baz"];
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^

export = data;
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^

=== esm/index.mts ===
import data from "./foo.json" with { type: "json" };
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^
>type : any
>     : ^^^

data.default; // foo.d.json.ts is cjs format despite package - error! (default import is already the whole json object)
>data.default : any
>             : ^^^
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

import data2 = require("./foo.json");
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^

data2.default; // `data2` is the whole json object, no `default`
>data2.default : any
>              : ^^^
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

=== esm/secondary.cts ===
import data from "./foo.json";
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^

data.default; // `export=` object is the whole `require` result, hoisted to `default` by interop helper, no 2nd default
>data.default : any
>             : ^^^
>data : ["foo", "bar", "baz"]
>     : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

import data2 = require("./foo.json");
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^

data2.default; // `data2` is the whole json object, no `default`
>data2.default : any
>              : ^^^
>data2 : ["foo", "bar", "baz"]
>      : ^^^^^^^^^^^^^^^^^^^^^
>default : any
>        : ^^^

=== root.mts ===

import "./cjs/index.mjs";
import "./cjs/secondary.mjs";
import "./mjs/index.mjs";
import "./mjs/secondary.mjs";

