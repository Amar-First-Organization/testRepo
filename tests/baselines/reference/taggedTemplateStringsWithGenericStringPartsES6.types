=== tests/cases/conformance/es6/templates/taggedTemplateStringsWithGenericStringPartsES6.ts ===
type DataTypes = 'string'|'number'|'boolean';
>DataTypes : DataTypes

interface DataTypesToTypeScriptType {
  string: string;
>string : string

  number: number;
>number : number

  boolean: boolean;
>boolean : boolean
}

type ArgsFor<TParts extends readonly unknown[]> =
>ArgsFor : ArgsFor<TParts>

    TParts extends [infer THead, ...infer TTail]
        ? THead extends DataTypes
            ? [DataTypesToTypeScriptType[THead], ...ArgsFor<TTail>]
            : [never, ...ArgsFor<TTail>]
        : []

declare function dataTypes<TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, '']>, ...args: TArgs) => unknown

  parts: TemplateStringsArray<readonly [...TParts, '']>,
>parts : TemplateStringsArray<readonly [...TParts, ""]>

  ...args: TArgs): unknown;
>args : TArgs

dataTypes `string${'abc'}`;
>dataTypes `string${'abc'}` : unknown
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, ""]>, ...args: TArgs) => unknown
>`string${'abc'}` : string
>'abc' : "abc"

dataTypes `number${5}`;
>dataTypes `number${5}` : unknown
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, ""]>, ...args: TArgs) => unknown
>`number${5}` : string
>5 : 5

dataTypes `boolean${true}`;
>dataTypes `boolean${true}` : unknown
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, ""]>, ...args: TArgs) => unknown
>`boolean${true}` : string
>true : true

dataTypes `unknown${[]}`;
>dataTypes `unknown${[]}` : unknown
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, ""]>, ...args: TArgs) => unknown
>`unknown${[]}` : string
>[] : undefined[]

dataTypes `string${3}`;
>dataTypes `string${3}` : unknown
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, ""]>, ...args: TArgs) => unknown
>`string${3}` : string
>3 : 3

dataTypes `string${'abc'}string${'def'}number${10}boolean${false}`;
>dataTypes `string${'abc'}string${'def'}number${10}boolean${false}` : unknown
>dataTypes : <TParts extends readonly string[], TArgs extends ArgsFor<TParts>>(parts: TemplateStringsArray<readonly [...TParts, ""]>, ...args: TArgs) => unknown
>`string${'abc'}string${'def'}number${10}boolean${false}` : string
>'abc' : "abc"
>'def' : "def"
>10 : 10
>false : false

