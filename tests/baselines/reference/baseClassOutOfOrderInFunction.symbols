=== tests/cases/compiler/baseClassOutOfOrderInFunction.ts ===
function foo() {
>foo : Symbol(foo, Decl(baseClassOutOfOrderInFunction.ts, 0, 0))

    class B extends A { // no error
>B : Symbol(B, Decl(baseClassOutOfOrderInFunction.ts, 0, 16))
>A : Symbol(A, Decl(baseClassOutOfOrderInFunction.ts, 35, 1))

        constructor(msg: string) {
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 2, 20))

            super(msg);
>super : Symbol(A, Decl(baseClassOutOfOrderInFunction.ts, 35, 1))
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 2, 20))
        }
    }

    class B2 extends class B3 extends class C { // no error
>B2 : Symbol(B2, Decl(baseClassOutOfOrderInFunction.ts, 5, 5))
>B3 : Symbol(B3, Decl(baseClassOutOfOrderInFunction.ts, 7, 20))
>C : Symbol(C, Decl(baseClassOutOfOrderInFunction.ts, 7, 37))

    }{
    }{ }

    class B3 extends class { // no error
>B3 : Symbol(B3, Decl(baseClassOutOfOrderInFunction.ts, 9, 8))

    }{
    }

    class B4<T> extends A1<T> { // no error
>B4 : Symbol(B4, Decl(baseClassOutOfOrderInFunction.ts, 13, 5))
>T : Symbol(T, Decl(baseClassOutOfOrderInFunction.ts, 15, 13))
>A1 : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))
>T : Symbol(T, Decl(baseClassOutOfOrderInFunction.ts, 15, 13))

        constructor(msg: T) {
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 16, 20))
>T : Symbol(T, Decl(baseClassOutOfOrderInFunction.ts, 15, 13))

            super(msg);
>super : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 16, 20))
        }
    }
    
    class B5 extends A1<number> { // no error
>B5 : Symbol(B5, Decl(baseClassOutOfOrderInFunction.ts, 19, 5))
>A1 : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))

        constructor(msg: number) {
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 22, 20))

            super(msg);
>super : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 22, 20))
        }
    }

    class B6 extends B4<A1<number>> { // No error
>B6 : Symbol(B6, Decl(baseClassOutOfOrderInFunction.ts, 25, 5))
>B4 : Symbol(B4, Decl(baseClassOutOfOrderInFunction.ts, 13, 5))
>A1 : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))

        constructor(msg: A1<number>) {
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 28, 20))
>A1 : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))

            super(msg);
>super : Symbol(B4, Decl(baseClassOutOfOrderInFunction.ts, 13, 5))
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 28, 20))
        }
    }

    class B7 extends M.c { // no error
>B7 : Symbol(B7, Decl(baseClassOutOfOrderInFunction.ts, 31, 5))
>M.c : Symbol(M.c, Decl(baseClassOutOfOrderInFunction.ts, 48, 10))
>M : Symbol(M, Decl(baseClassOutOfOrderInFunction.ts, 46, 1))
>c : Symbol(M.c, Decl(baseClassOutOfOrderInFunction.ts, 48, 10))
    }
}

class A {
>A : Symbol(A, Decl(baseClassOutOfOrderInFunction.ts, 35, 1))

    constructor(public msg: string) {
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 38, 16))

    }
}

class A1<T> {
>A1 : Symbol(A1, Decl(baseClassOutOfOrderInFunction.ts, 41, 1))
>T : Symbol(T, Decl(baseClassOutOfOrderInFunction.ts, 43, 9))

    constructor(msg: T) {
>msg : Symbol(msg, Decl(baseClassOutOfOrderInFunction.ts, 44, 16))
>T : Symbol(T, Decl(baseClassOutOfOrderInFunction.ts, 43, 9))
    }
}

module M {
>M : Symbol(M, Decl(baseClassOutOfOrderInFunction.ts, 46, 1))

    export class c {
>c : Symbol(c, Decl(baseClassOutOfOrderInFunction.ts, 48, 10))
    }
}
