=== tests/cases/compiler/promiseTypeInference.ts ===
declare class MyPromise<T> {
>MyPromise : MyPromise<T>

    then<U>(success?: (value: T) => MyPromise<U>): MyPromise<U>;
>then : <U>(success?: (value: T) => MyPromise<U>) => MyPromise<U>
>success : (value: T) => MyPromise<U>
>value : T
}
interface IPromise<T> {
    then<U>(success?: (value: T) => IPromise<U>): IPromise<U>;
>then : <U>(success?: (value: T) => IPromise<U>) => IPromise<U>
>success : (value: T) => IPromise<U>
>value : T
}
declare function load(name: string): MyPromise<string>;
>load : (name: string) => MyPromise<string>
>name : string

declare function convert(s: string): IPromise<number>;
>convert : (s: string) => IPromise<number>
>s : string

var $$x = load("something").then(s => convert(s));
>$$x : MyPromise<unknown>
>load("something").then(s => convert(s)) : MyPromise<unknown>
>load("something").then : <U>(success?: (value: string) => MyPromise<U>) => MyPromise<U>
>load("something") : MyPromise<string>
>load : (name: string) => MyPromise<string>
>"something" : "something"
>then : <U>(success?: (value: string) => MyPromise<U>) => MyPromise<U>
>s => convert(s) : (s: string) => IPromise<number>
>s : string
>convert(s) : IPromise<number>
>convert : (s: string) => IPromise<number>
>s : string

