=== tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument.ts ===
// it is an error to use a generic type without type arguments
// all of these are errors 

class C<T> {
>C : C<T>

    foo: T;
>foo : T
}

var c: C;
>c : any (error)

var a: { x: C };
>a : { x: any (error); }
>x : any (error)

var b: { (x: C): C };
>b : (x: any (error)) => any (error)
>x : any (error)

var d: { [x: C]: C };
>d : {}
>x : any (error)

var e = (x: C) => { var y: C; return y; }
>e : (x: any (error)) => any (error)
>(x: C) => { var y: C; return y; } : (x: any (error)) => any (error)
>x : any (error)
>y : any (error)
>y : any (error)

function f(x: C): C { var y: C; return y; }
>f : (x: any (error)) => any (error)
>x : any (error)
>y : any (error)
>y : any (error)

var g = function f(x: C): C { var y: C; return y; }
>g : (x: any (error)) => any (error)
>function f(x: C): C { var y: C; return y; } : (x: any (error)) => any (error)
>f : (x: any (error)) => any (error)
>x : any (error)
>y : any (error)
>y : any (error)

class D extends C {
>D : D
>C : typeof C
}

interface I extends C {}

module M {
>M : typeof M

    export class E<T> { foo: T }
>E : E<T>
>foo : T
}

class D2 extends M.E { }
>D2 : D2
>M.E : typeof M.E
>M : typeof M
>E : typeof M.E

class D3<T extends M.E> { }
>D3 : D3<T>
>M : any (error)

interface I2 extends M.E { }
>M : typeof M

function h<T extends C>(x: T) { }
>h : <T extends any (error)>(x: T) => void
>x : T

function i<T extends M.E>(x: T) { }
>i : <T extends any (error)>(x: T) => void
>M : any (error)
>x : T

var j = <C>null;
>j : any (error)
><C>null : any (error)
>null : null

var k = <M.E>null;
>k : any (error)
><M.E>null : any (error)
>M : any (error)
>null : null

