enumLiteralBasics.ts(6,5): error TS1061: Enum member must have initializer.
enumLiteralBasics.ts(7,5): error TS1061: Enum member must have initializer.
enumLiteralBasics.ts(22,1): error TS2322: Type 'E1.Flag' is not assignable to type 'E1.Int'.
enumLiteralBasics.ts(27,7): error TS2322: Type '"exists"' is not assignable to type 'E1'.
enumLiteralBasics.ts(29,7): error TS2322: Type '"string"' is not assignable to type 'E1'.
enumLiteralBasics.ts(39,33): error TS2345: Argument of type '"exists"' is not assignable to parameter of type 'E1'.
enumLiteralBasics.ts(44,32): error TS2345: Argument of type '"string"' is not assignable to parameter of type 'E1'.
enumLiteralBasics.ts(52,38): error TS2345: Argument of type '"exists"' is not assignable to parameter of type 'E1.Int'.
enumLiteralBasics.ts(54,38): error TS2345: Argument of type '4' is not assignable to parameter of type 'E1.Int'.
enumLiteralBasics.ts(56,38): error TS2345: Argument of type 'E1.String' is not assignable to parameter of type 'E1.Int'.
enumLiteralBasics.ts(57,7): error TS2322: Type 'E1.Int' is not assignable to type 'E1.Flag'.
enumLiteralBasics.ts(57,38): error TS2345: Argument of type '"string"' is not assignable to parameter of type 'E1.Int'.


==== enumLiteralBasics.ts (12 errors) ====
    // Enum without initializers have first member = 0 and successive members = N + 1
    
    // Enum literal syntax does not implement auto-incrementing behaviour.
    let ExistingShorthand = "exists";
    const E1: enum = {
        NonexistingShorthand, // error -- EnumLiteralExpressions require explicit property definitions.
        ~~~~~~~~~~~~~~~~~~~~
!!! error TS1061: Enum member must have initializer.
        ExistingShorthand, // error -- EnumLiteralExpressions require explicit property definitions.
        ~~~~~~~~~~~~~~~~~
!!! error TS1061: Enum member must have initializer.
        Int: 1, // ok
        String: "string", // ok
        Flag: 8, // ok
    };
    
    // Valid assignments
    const nonexist: E1 = E1.NonexistingShorthand; // ok
    const exist: E1 = E1.ExistingShorthand; // ok
    const ival: E1 = E1.Int; // ok
    const sval: E1 = E1.String; // ok
    let p_int: E1.Int = E1.Int; // ok
    const p_nonexist: E1.NonexistingShorthand = E1.NonexistingShorthand; // ok
    const p_exist: E1.ExistingShorthand = E1.ExistingShorthand; // ok
    const p_string: E1.String = E1.String; // ok
    p_int = E1.Flag; // Type 'E1.Flag' is not assignable to type 'E1.Int'.
    ~~~~~
!!! error TS2322: Type 'E1.Flag' is not assignable to type 'E1.Int'.
    p_int = E1.Int | E1.Flag;
    
    // Assigning values which are not part of the enum despite being present in the enum
    const nonexist_bad: E1 = undefined; // error
    const exist_bad: E1 = "exists"; // error
          ~~~~~~~~~
!!! error TS2322: Type '"exists"' is not assignable to type 'E1'.
    const ival_good: E1 = 1; // ok -- TypeScript is permissive of this in enums, to permit things like bitwise combinations of enum values.
    const sval_bad: E1 = "string"; // error
          ~~~~~~~~
!!! error TS2322: Type '"string"' is not assignable to type 'E1'.
    
    const ival_notpresent: E1 = 4; // ok -- TypeScript is permissive of this in enums, to permit things like bitwise combinations of enum values.
    
    function functest(value: E1) {
        console.log(value);
        return value;
    }
    
    const nonexist_bad2: E1 = functest(undefined); // error
    const exist_bad2: E1 = functest("exists"); // error
                                    ~~~~~~~~
!!! error TS2345: Argument of type '"exists"' is not assignable to parameter of type 'E1'.
    const ival_good2: E1 = functest(1); // ok
    const ival_good3: E1 = functest(4); // ok
    const ival_good4: E1 = functest(E1.Int | E1.Flag); // ok
    const sval_good2: E1 = functest(E1.String);
    const sval_bad2: E1 = functest("string"); // error
                                   ~~~~~~~~
!!! error TS2345: Argument of type '"string"' is not assignable to parameter of type 'E1'.
    
    function functest2(value: E1.Int) {
        console.log(value);
        return value;
    }
    
    const nonexist_bad3: E1.Int = functest2(undefined);
    const exist_bad3: E1.Int = functest2("exists"); // error
                                         ~~~~~~~~
!!! error TS2345: Argument of type '"exists"' is not assignable to parameter of type 'E1.Int'.
    const ival_good5: E1.Int = functest2(1); // ok
    const ival_good6: E1.Int = functest2(4); // ok
                                         ~
!!! error TS2345: Argument of type '4' is not assignable to parameter of type 'E1.Int'.
    const ival_good7: E1.Int = functest2(E1.Int | E1.Flag); // ok
    const sval_good3: E1.Int = functest2(E1.String);
                                         ~~~~~~~~~
!!! error TS2345: Argument of type 'E1.String' is not assignable to parameter of type 'E1.Int'.
    const sval_bad3: E1.Flag = functest2("string"); // error
          ~~~~~~~~~
!!! error TS2322: Type 'E1.Int' is not assignable to type 'E1.Flag'.
                                         ~~~~~~~~
!!! error TS2345: Argument of type '"string"' is not assignable to parameter of type 'E1.Int'.