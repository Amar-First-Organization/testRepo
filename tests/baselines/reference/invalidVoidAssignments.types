//// [tests/cases/conformance/types/primitives/void/invalidVoidAssignments.ts] ////

=== invalidVoidAssignments.ts ===
var x: void;
>x : void
>  : ^^^^

var a: boolean = x;
>a : boolean
>  : ^^^^^^^
>x : boolean
>  : ^^^^^^^

var b: string = x;
>b : string
>  : ^^^^^^
>x : string
>  : ^^^^^^

var c: number = x;
>c : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

var d: typeof undefined = x;
>d : any
>  : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>x : any
>  : ^^^

class C { foo: string; }
>C : C
>  : ^
>foo : string
>    : ^^^^^^

var e: C = x;
>e : C
>  : ^
>x : C
>  : ^

interface I { bar: string; }
>bar : string
>    : ^^^^^^

var f: I = x;
>f : I
>  : ^
>x : I
>  : ^

var g: { baz: string } = 1;
>g : { baz: string; }
>  : ^^^^^^^      ^^^
>baz : string
>    : ^^^^^^
>1 : { baz: string; }
>  : ^^^^^^^      ^^^

var g2: { 0: number } = 1;
>g2 : { 0: number; }
>   : ^^^^^      ^^^
>0 : number
>  : ^^^^^^
>1 : { 0: number; }
>  : ^^^^^      ^^^

module M { export var x = 1; }
>M : typeof M
>  : ^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

M = x;
>M = x : void
>      : ^^^^
>M : any
>  : ^^^
>x : void
>  : ^^^^

function i<T>(a: T) {
>i : <T>(a: T) => void
>  : ^ ^^ ^^ ^^^^^^^^^
>a : T
>  : ^

    a = x;
>a = x : void
>      : ^^^^
>a : T
>  : ^
>x : void
>  : ^^^^
}
i = x;
>i = x : void
>      : ^^^^
>i : any
>  : ^^^
>x : void
>  : ^^^^

enum E { A }
>E : E
>  : ^
>A : E.A
>  : ^^^

x = E;
>x = E : typeof E
>      : ^^^^^^^^
>x : void
>  : ^^^^
>E : typeof E
>  : ^^^^^^^^

x = E.A;
>x = E.A : E
>        : ^
>x : void
>  : ^^^^
>E.A : E
>    : ^
>E : typeof E
>  : ^^^^^^^^
>A : E
>  : ^

x = { f() { } }
>x = { f() { } } : { f(): void; }
>                : ^^^^^^^^^^^^^^
>x : void
>  : ^^^^
>{ f() { } } : { f(): void; }
>            : ^^^^^^^^^^^^^^
>f : () => void
>  : ^^^^^^^^^^

