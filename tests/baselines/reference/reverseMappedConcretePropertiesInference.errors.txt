tests/cases/compiler/reverseMappedConcretePropertiesInference.ts(54,5): error TS2322: Type '(key: QueryFunctionContext<"posts">) => Promise<{ title: string; }[]>' is not assignable to type '(ctx: QueryFunctionContext<"posts">) => ({ title: string; }[] & Promise<{ title: string; }[]>) | Promise<{ title: string; }[] & Promise<{ title: string; }[]>>'.
  Type 'Promise<{ title: string; }[]>' is not assignable to type '({ title: string; }[] & Promise<{ title: string; }[]>) | Promise<{ title: string; }[] & Promise<{ title: string; }[]>>'.
    Type 'Promise<{ title: string; }[]>' is not assignable to type 'Promise<{ title: string; }[] & Promise<{ title: string; }[]>>'.
      Type '{ title: string; }[]' is not assignable to type '{ title: string; }[] & Promise<{ title: string; }[]>'.
        Type '{ title: string; }[]' is missing the following properties from type 'Promise<{ title: string; }[]>': then, catch, finally, [Symbol.toStringTag]


==== tests/cases/compiler/reverseMappedConcretePropertiesInference.ts (1 errors) ====
    declare function test<T extends Record<string, { foo: unknown; bar: unknown }>>(a: {
      [K in keyof T]: {
        foo: T[K]["foo"];
        onFoo: (fooArg: T[K]["foo"]) => void;
        bar: T[K]["bar"];
        onBar: (barArg: T[K]["bar"]) => void;
      };
    }): T;
    
    const res = test({
        a: {
            foo: 'answer',
            onFoo: (arg) => arg.length,
            bar: 42,
            onBar: (arg) => arg + 10
        },
        b: {
            foo: true,
            onFoo: (arg) => !!arg,
            bar: [1, 2, 3],
            onBar: (arg) => [arg, arg]
        },
    })
    
    interface QueryFunctionContext<TQueryKey extends string> {
      queryKey: TQueryKey;
    }
    
    type QueryOptions = {
      key: string;
      fnData?: unknown;
    };
    
    type UseQueriesOptions<T extends ReadonlyArray<QueryOptions>> = {
      [K in keyof T]: {
        queryKey: T[K]["key"];
        queryFn?: (
          ctx: QueryFunctionContext<T[K]["key"]>
        ) => Promise<T[K]["fnData"]> | T[K]["fnData"];
      };
    };
    
    declare function useQueries<T extends ReadonlyArray<QueryOptions>>(
      queries: [...UseQueriesOptions<T>]
    ): T;
    
    const resQueries = useQueries([
      {
        queryKey: "users",
        queryFn: (key) => [{ name: "Andarist" }],
      },
      {
        queryKey: "posts",
        queryFn: (key) => Promise.resolve([{ title: 'TS 5.1' }]),
        ~~~~~~~
!!! error TS2322: Type '(key: QueryFunctionContext<"posts">) => Promise<{ title: string; }[]>' is not assignable to type '(ctx: QueryFunctionContext<"posts">) => ({ title: string; }[] & Promise<{ title: string; }[]>) | Promise<{ title: string; }[] & Promise<{ title: string; }[]>>'.
!!! error TS2322:   Type 'Promise<{ title: string; }[]>' is not assignable to type '({ title: string; }[] & Promise<{ title: string; }[]>) | Promise<{ title: string; }[] & Promise<{ title: string; }[]>>'.
!!! error TS2322:     Type 'Promise<{ title: string; }[]>' is not assignable to type 'Promise<{ title: string; }[] & Promise<{ title: string; }[]>>'.
!!! error TS2322:       Type '{ title: string; }[]' is not assignable to type '{ title: string; }[] & Promise<{ title: string; }[]>'.
!!! error TS2322:         Type '{ title: string; }[]' is missing the following properties from type 'Promise<{ title: string; }[]>': then, catch, finally, [Symbol.toStringTag]
!!! related TS6500 tests/cases/compiler/reverseMappedConcretePropertiesInference.ts:37:5: The expected type comes from property 'queryFn' which is declared here on type '{ queryKey: "posts"; queryFn?: ((ctx: QueryFunctionContext<"posts">) => ({ title: string; }[] & Promise<{ title: string; }[]>) | Promise<{ title: string; }[] & Promise<{ title: string; }[]>>) | undefined; }'
      }
    ]);
    