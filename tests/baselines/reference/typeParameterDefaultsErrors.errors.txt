tests/cases/conformance/types/typeParameters/typeParameterDefaultsErrors.ts(7,9): error TS2314: Generic type 'NoDefaults<T>' requires 1 type argument(s).
tests/cases/conformance/types/typeParameters/typeParameterDefaultsErrors.ts(13,9): error TS2314: Generic type 'NoDefaultsWithConstraint<T>' requires 1 type argument(s).
tests/cases/conformance/types/typeParameters/typeParameterDefaultsErrors.ts(20,9): error TS2663: Generic type 'HasDefault2<T1, T2>' requires between 1 and 2 type arguments


==== tests/cases/conformance/types/typeParameters/typeParameterDefaultsErrors.ts (3 errors) ====
    
    /** Existing behavior unchanged **/
    interface NoDefaults<T> {
    	x: T;
    }
    // Still an error
    let a1: NoDefaults;
            ~~~~~~~~~~
!!! error TS2314: Generic type 'NoDefaults<T>' requires 1 type argument(s).
    
    interface NoDefaultsWithConstraint<T extends {}> {
    	x: T;
    }
    // Still an error
    let a2: NoDefaultsWithConstraint;
            ~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2314: Generic type 'NoDefaultsWithConstraint<T>' requires 1 type argument(s).
    
    interface HasDefault2<T1, T2 = number> {
    	x1: T1;
    	x2: T2;
    }
    // Still an error
    let a4: HasDefault2;
            ~~~~~~~~~~~
!!! error TS2663: Generic type 'HasDefault2<T1, T2>' requires between 1 and 2 type arguments
    
    /** Required may not follow optional */
    interface Wrong<T, U = number> { }
    
    /** Error: A default may only use preceding type parameters */
    interface NoForwardRefs1<T = U, U = number> { }
    
    /** Make sure this doesn't crash */
    // interface NoForwardRefs2<T = U, U = T> { }
    